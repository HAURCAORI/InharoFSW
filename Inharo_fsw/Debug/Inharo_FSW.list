
Inharo_FSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016530  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  08016700  08016700  00026700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fe4  08016fe4  000302f4  2**0
                  CONTENTS
  4 .ARM          00000008  08016fe4  08016fe4  00026fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fec  08016fec  000302f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fec  08016fec  00026fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016ff0  08016ff0  00026ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f4  20000000  08016ff4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006c20  200002f8  080172e8  000302f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006f18  080172e8  00036f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a992  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000849d  00000000  00000000  0006acb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002df0  00000000  00000000  00073158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002a80  00000000  00000000  00075f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000341a5  00000000  00000000  000789c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004384b  00000000  00000000  000acb6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff587  00000000  00000000  000f03b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ef93f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cfc8  00000000  00000000  001ef990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f8 	.word	0x200002f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080166e8 	.word	0x080166e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002fc 	.word	0x200002fc
 800020c:	080166e8 	.word	0x080166e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 ff70 	bl	8001dde <null_ptr_check>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8000f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d131      	bne.n	8000f6e <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7a1b      	ldrb	r3, [r3, #8]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d003      	beq.n	8000f1a <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	729a      	strb	r2, [r3, #10]
 8000f18:	e002      	b.n	8000f20 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8000f20:	f107 010e 	add.w	r1, r7, #14
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 f826 	bl	8000f7a <bmp3_get_regs>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d119      	bne.n	8000f6e <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8000f3a:	7bbb      	ldrb	r3, [r7, #14]
 8000f3c:	2b50      	cmp	r3, #80	; 0x50
 8000f3e:	d002      	beq.n	8000f46 <bmp3_init+0x5a>
 8000f40:	7bbb      	ldrb	r3, [r7, #14]
 8000f42:	2b60      	cmp	r3, #96	; 0x60
 8000f44:	d111      	bne.n	8000f6a <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8000f46:	7bba      	ldrb	r2, [r7, #14]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f983 	bl	8001258 <bmp3_soft_reset>
 8000f52:	4603      	mov	r3, r0
 8000f54:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d107      	bne.n	8000f6e <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fae3 	bl	800152a <get_calib_data>
 8000f64:	4603      	mov	r3, r0
 8000f66:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8000f68:	e001      	b.n	8000f6e <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8000f6a:	23f9      	movs	r3, #249	; 0xf9
 8000f6c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8000f7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f7e:	b08b      	sub	sp, #44	; 0x2c
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f8c:	6838      	ldr	r0, [r7, #0]
 8000f8e:	f000 ff26 	bl	8001dde <null_ptr_check>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8000f98:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d172      	bne.n	8001086 <bmp3_get_regs+0x10c>
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d06f      	beq.n	8001086 <bmp3_get_regs+0x10c>
    {
 8000fa6:	466b      	mov	r3, sp
 8000fa8:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	7a9b      	ldrb	r3, [r3, #10]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	7a9b      	ldrb	r3, [r3, #10]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	18d1      	adds	r1, r2, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	61bb      	str	r3, [r7, #24]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	4688      	mov	r8, r1
 8000fca:	4699      	mov	r9, r3
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000fd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000fdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	460c      	mov	r4, r1
 8000fe4:	461d      	mov	r5, r3
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	00eb      	lsls	r3, r5, #3
 8000ff0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ff4:	00e2      	lsls	r2, r4, #3
 8000ff6:	1dcb      	adds	r3, r1, #7
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	ebad 0d03 	sub.w	sp, sp, r3
 8001000:	466b      	mov	r3, sp
 8001002:	3300      	adds	r3, #0
 8001004:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	7a1b      	ldrb	r3, [r3, #8]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d025      	beq.n	800105a <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001014:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68dc      	ldr	r4, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	7bf8      	ldrb	r0, [r7, #15]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	6979      	ldr	r1, [r7, #20]
 8001024:	47a0      	blx	r4
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
 8001032:	e00d      	b.n	8001050 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	7a9b      	ldrb	r3, [r3, #10]
 8001038:	461a      	mov	r2, r3
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	441a      	add	r2, r3
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	440b      	add	r3, r1
 8001044:	6979      	ldr	r1, [r7, #20]
 8001046:	5c8a      	ldrb	r2, [r1, r2]
 8001048:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	3301      	adds	r3, #1
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
 8001050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d3ed      	bcc.n	8001034 <bmp3_get_regs+0xba>
 8001058:	e00b      	b.n	8001072 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68dc      	ldr	r4, [r3, #12]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	7bf8      	ldrb	r0, [r7, #15]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	68b9      	ldr	r1, [r7, #8]
 8001068:	47a0      	blx	r4
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d002      	beq.n	8001082 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800107c:	23fe      	movs	r3, #254	; 0xfe
 800107e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001082:	46b5      	mov	sp, r6
    {
 8001084:	e002      	b.n	800108c <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001086:	23ff      	movs	r3, #255	; 0xff
 8001088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 800108c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 8001090:	4618      	mov	r0, r3
 8001092:	372c      	adds	r7, #44	; 0x2c
 8001094:	46bd      	mov	sp, r7
 8001096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800109a <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800109a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	466b      	mov	r3, sp
 80010ac:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0059      	lsls	r1, r3, #1
 80010b2:	460b      	mov	r3, r1
 80010b4:	3b01      	subs	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	2300      	movs	r3, #0
 80010ba:	4688      	mov	r8, r1
 80010bc:	4699      	mov	r9, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010d2:	2300      	movs	r3, #0
 80010d4:	460c      	mov	r4, r1
 80010d6:	461d      	mov	r5, r3
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	00eb      	lsls	r3, r5, #3
 80010e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010e6:	00e2      	lsls	r2, r4, #3
 80010e8:	1dcb      	adds	r3, r1, #7
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	ebad 0d03 	sub.w	sp, sp, r3
 80010f2:	466b      	mov	r3, sp
 80010f4:	3300      	adds	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80010f8:	6838      	ldr	r0, [r7, #0]
 80010fa:	f000 fe70 	bl	8001dde <null_ptr_check>
 80010fe:	4603      	mov	r3, r0
 8001100:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8001102:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d14c      	bne.n	80011a4 <bmp3_set_regs+0x10a>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d049      	beq.n	80011a4 <bmp3_set_regs+0x10a>
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d046      	beq.n	80011a4 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d040      	beq.n	800119e <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	7a1b      	ldrb	r3, [r3, #8]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d114      	bne.n	8001156 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800112c:	2300      	movs	r3, #0
 800112e:	76bb      	strb	r3, [r7, #26]
 8001130:	e00d      	b.n	800114e <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8001132:	7ebb      	ldrb	r3, [r7, #26]
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	7ebb      	ldrb	r3, [r7, #26]
 800113c:	68f9      	ldr	r1, [r7, #12]
 800113e:	440b      	add	r3, r1
 8001140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001148:	7ebb      	ldrb	r3, [r7, #26]
 800114a:	3301      	adds	r3, #1
 800114c:	76bb      	strb	r3, [r7, #26]
 800114e:	7ebb      	ldrb	r3, [r7, #26]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	d8ed      	bhi.n	8001132 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d909      	bls.n	8001170 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	6939      	ldr	r1, [r7, #16]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 fa06 	bl	8001574 <interleave_reg_addr>
                temp_len = len * 2;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e001      	b.n	8001174 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691c      	ldr	r4, [r3, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	7818      	ldrb	r0, [r3, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	47a0      	blx	r4
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001198:	23fe      	movs	r3, #254	; 0xfe
 800119a:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800119c:	e005      	b.n	80011aa <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800119e:	23fa      	movs	r3, #250	; 0xfa
 80011a0:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 80011a2:	e002      	b.n	80011aa <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80011a4:	23ff      	movs	r3, #255	; 0xff
 80011a6:	76fb      	strb	r3, [r7, #27]
 80011a8:	e000      	b.n	80011ac <bmp3_set_regs+0x112>
        if (len != 0)
 80011aa:	bf00      	nop
    }

    return rslt;
 80011ac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80011b0:	46b5      	mov	sp, r6
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3724      	adds	r7, #36	; 0x24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080011bc <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d03a      	beq.n	8001248 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 80011d2:	68f9      	ldr	r1, [r7, #12]
 80011d4:	2006      	movs	r0, #6
 80011d6:	f000 fdea 	bl	8001dae <are_settings_changed>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 fa2b 	bl	8001640 <set_pwr_ctrl_settings>
 80011ea:	4603      	mov	r3, r0
 80011ec:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	20f0      	movs	r0, #240	; 0xf0
 80011f2:	f000 fddc 	bl	8001dae <are_settings_changed>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 fa6b 	bl	80016dc <set_odr_filter_settings>
 8001206:	4603      	mov	r3, r0
 8001208:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800120a:	68f9      	ldr	r1, [r7, #12]
 800120c:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8001210:	f000 fdcd 	bl	8001dae <are_settings_changed>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f000 faca 	bl	80017b8 <set_int_ctrl_settings>
 8001224:	4603      	mov	r3, r0
 8001226:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800122e:	f000 fdbe 	bl	8001dae <are_settings_changed>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 fb35 	bl	80018ac <set_advance_settings>
 8001242:	4603      	mov	r3, r0
 8001244:	75fb      	strb	r3, [r7, #23]
 8001246:	e001      	b.n	800124c <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001248:	23ff      	movs	r3, #255	; 0xff
 800124a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800124c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001260:	237e      	movs	r3, #126	; 0x7e
 8001262:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8001264:	23b6      	movs	r3, #182	; 0xb6
 8001266:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 8001268:	f107 010c 	add.w	r1, r7, #12
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	2003      	movs	r0, #3
 8001272:	f7ff fe82 	bl	8000f7a <bmp3_get_regs>
 8001276:	4603      	mov	r3, r0
 8001278:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800127a:	7b3b      	ldrb	r3, [r7, #12]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d02d      	beq.n	80012e0 <bmp3_soft_reset+0x88>
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d129      	bne.n	80012e0 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800128c:	f107 010d 	add.w	r1, r7, #13
 8001290:	f107 000e 	add.w	r0, r7, #14
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f7ff feff 	bl	800109a <bmp3_set_regs>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11b      	bne.n	80012e0 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6852      	ldr	r2, [r2, #4]
 80012b0:	4611      	mov	r1, r2
 80012b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b6:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 80012b8:	f107 010b 	add.w	r1, r7, #11
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	2002      	movs	r0, #2
 80012c2:	f7ff fe5a 	bl	8000f7a <bmp3_get_regs>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <bmp3_soft_reset+0x84>
 80012d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80012dc:	23fc      	movs	r3, #252	; 0xfc
 80012de:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80012e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f000 fd71 	bl	8001dde <null_ptr_check>
 80012fc:	4603      	mov	r3, r0
 80012fe:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d139      	bne.n	800137c <bmp3_set_op_mode+0x90>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d036      	beq.n	800137c <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8001314:	f107 030d 	add.w	r3, r7, #13
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f838 	bl	8001390 <bmp3_get_op_mode>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <bmp3_set_op_mode+0x60>
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10c      	bne.n	800134c <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f000 f8b7 	bl	80014a6 <put_device_to_sleep>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	6852      	ldr	r2, [r2, #4]
 8001344:	4611      	mov	r1, r2
 8001346:	f241 3088 	movw	r0, #5000	; 0x1388
 800134a:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 800134c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d116      	bne.n	8001382 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8001354:	7bbb      	ldrb	r3, [r7, #14]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d106      	bne.n	8001368 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 800135a:	6839      	ldr	r1, [r7, #0]
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f839 	bl	80013d4 <set_normal_mode>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
    {
 8001366:	e00c      	b.n	8001382 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d109      	bne.n	8001382 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 800136e:	6839      	ldr	r1, [r7, #0]
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f862 	bl	800143a <write_power_mode>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
    {
 800137a:	e002      	b.n	8001382 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800137c:	23ff      	movs	r3, #255	; 0xff
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e000      	b.n	8001384 <bmp3_set_op_mode+0x98>
    {
 8001382:	bf00      	nop
    }

    return rslt;
 8001384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d011      	beq.n	80013c4 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	201b      	movs	r0, #27
 80013a8:	f7ff fde7 	bl	8000f7a <bmp3_get_regs>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	111b      	asrs	r3, r3, #4
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e001      	b.n	80013c8 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80013c4:	23ff      	movs	r3, #255	; 0xff
 80013c6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 80013de:	6839      	ldr	r1, [r7, #0]
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f888 	bl	80014f6 <validate_normal_mode_settings>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d11d      	bne.n	800142e <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f820 	bl	800143a <write_power_mode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 80013fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d113      	bne.n	800142e <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8001406:	f107 010e 	add.w	r1, r7, #14
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2201      	movs	r2, #1
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff fdb3 	bl	8000f7a <bmp3_get_regs>
 8001414:	4603      	mov	r3, r0
 8001416:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 8001418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800142a:	23fb      	movs	r3, #251	; 0xfb
 800142c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001444:	231b      	movs	r3, #27
 8001446:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 800144e:	7b78      	ldrb	r0, [r7, #13]
 8001450:	f107 010c 	add.w	r1, r7, #12
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	f7ff fd8f 	bl	8000f7a <bmp3_get_regs>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d118      	bne.n	800149a <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001470:	b25a      	sxtb	r2, r3
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800147c:	b25b      	sxtb	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b25b      	sxtb	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001486:	f107 010c 	add.w	r1, r7, #12
 800148a:	f107 000d 	add.w	r0, r7, #13
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	f7ff fe02 	bl	800109a <bmp3_set_regs>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80014ae:	231b      	movs	r3, #27
 80014b0:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80014b2:	f107 010d 	add.w	r1, r7, #13
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	201b      	movs	r0, #27
 80014bc:	f7ff fd5d 	bl	8000f7a <bmp3_get_regs>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10e      	bne.n	80014ea <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80014d6:	f107 010d 	add.w	r1, r7, #13
 80014da:	f107 000e 	add.w	r0, r7, #14
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f7ff fdda 	bl	800109a <bmp3_set_regs>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001500:	6839      	ldr	r1, [r7, #0]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fa25 	bl	8001952 <get_odr_filter_settings>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fa39 	bl	800198c <validate_osr_and_odr_settings>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b088      	sub	sp, #32
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8001532:	2331      	movs	r3, #49	; 0x31
 8001534:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800154a:	f107 0108 	add.w	r1, r7, #8
 800154e:	7ff8      	ldrb	r0, [r7, #31]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2215      	movs	r2, #21
 8001554:	f7ff fd11 	bl	8000f7a <bmp3_get_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fb70 	bl	8001c48 <parse_calib_data>

    return rslt;
 8001568:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8001574:	b480      	push	{r7}
 8001576:	b087      	sub	sp, #28
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8001582:	2301      	movs	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	e015      	b.n	80015b4 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	441a      	add	r2, r3
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	440b      	add	r3, r1
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	441a      	add	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	440b      	add	r3, r1
 80015aa:	7812      	ldrb	r2, [r2, #0]
 80015ac:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	3301      	adds	r3, #1
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d3e5      	bcc.n	8001588 <interleave_reg_addr+0x14>
    }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	371c      	adds	r7, #28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	10db      	asrs	r3, r3, #3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f003 031f 	and.w	r3, r3, #31
 8001612:	b2da      	uxtb	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	3302      	adds	r3, #2
 800161c:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	105b      	asrs	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	b2da      	uxtb	r2, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	709a      	strb	r2, [r3, #2]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800164c:	231b      	movs	r3, #27
 800164e:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001650:	7db8      	ldrb	r0, [r7, #22]
 8001652:	f107 0115 	add.w	r1, r7, #21
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f7ff fc8e 	bl	8000f7a <bmp3_get_regs>
 800165e:	4603      	mov	r3, r0
 8001660:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001662:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d132      	bne.n	80016d0 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00e      	beq.n	8001692 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8001674:	7d7b      	ldrb	r3, [r7, #21]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	b25a      	sxtb	r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	b25b      	sxtb	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b25b      	sxtb	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00f      	beq.n	80016bc <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 800169c:	7d7b      	ldrb	r3, [r7, #21]
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	f023 0302 	bic.w	r3, r3, #2
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	4313      	orrs	r3, r2
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80016bc:	f107 0115 	add.w	r1, r7, #21
 80016c0:	f107 0016 	add.w	r0, r7, #22
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f7ff fce7 	bl	800109a <bmp3_set_regs>
 80016cc:	4603      	mov	r3, r0
 80016ce:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80016e8:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <set_odr_filter_settings+0xd8>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	83bb      	strh	r3, [r7, #28]
 80016ee:	2300      	movs	r3, #0
 80016f0:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80016f6:	f107 0118 	add.w	r1, r7, #24
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2204      	movs	r2, #4
 80016fe:	201c      	movs	r0, #28
 8001700:	f7ff fc3b 	bl	8000f7a <bmp3_get_regs>
 8001704:	4603      	mov	r3, r0
 8001706:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001708:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d14a      	bne.n	80017a6 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	2030      	movs	r0, #48	; 0x30
 8001714:	f000 fb4b 	bl	8001dae <are_settings_changed>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00b      	beq.n	8001736 <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 800171e:	f107 0017 	add.w	r0, r7, #23
 8001722:	f107 0218 	add.w	r2, r7, #24
 8001726:	f107 011c 	add.w	r1, r7, #28
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4603      	mov	r3, r0
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f9c1 	bl	8001ab8 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	2080      	movs	r0, #128	; 0x80
 800173a:	f000 fb38 	bl	8001dae <are_settings_changed>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8001744:	f107 0217 	add.w	r2, r7, #23
 8001748:	f107 0118 	add.w	r1, r7, #24
 800174c:	f107 001c 	add.w	r0, r7, #28
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	f000 fa09 	bl	8001b68 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8001756:	68f9      	ldr	r1, [r7, #12]
 8001758:	2040      	movs	r0, #64	; 0x40
 800175a:	f000 fb28 	bl	8001dae <are_settings_changed>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8001764:	f107 0217 	add.w	r2, r7, #23
 8001768:	f107 0118 	add.w	r1, r7, #24
 800176c:	f107 001c 	add.w	r0, r7, #28
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f000 fa33 	bl	8001bdc <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b03      	cmp	r3, #3
 800177c:	d104      	bne.n	8001788 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 800177e:	68b8      	ldr	r0, [r7, #8]
 8001780:	f000 f904 	bl	800198c <validate_osr_and_odr_settings>
 8001784:	4603      	mov	r3, r0
 8001786:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8001788:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10a      	bne.n	80017a6 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	461a      	mov	r2, r3
 8001794:	f107 0118 	add.w	r1, r7, #24
 8001798:	f107 001c 	add.w	r0, r7, #28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f7ff fc7c 	bl	800109a <bmp3_set_regs>
 80017a2:	4603      	mov	r3, r0
 80017a4:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 80017a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	08016700 	.word	0x08016700

080017b8 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 80017c4:	2319      	movs	r3, #25
 80017c6:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80017c8:	7d78      	ldrb	r0, [r7, #21]
 80017ca:	f107 0116 	add.w	r1, r7, #22
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f7ff fbd2 	bl	8000f7a <bmp3_get_regs>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80017da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d15e      	bne.n	80018a0 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	3207      	adds	r2, #7
 80017ea:	6810      	ldr	r0, [r2, #0]
 80017ec:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00d      	beq.n	8001814 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 80017f8:	7dbb      	ldrb	r3, [r7, #22]
 80017fa:	b25b      	sxtb	r3, r3
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	b25a      	sxtb	r2, r3
 8001802:	7c3b      	ldrb	r3, [r7, #16]
 8001804:	b25b      	sxtb	r3, r3
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b25b      	sxtb	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00e      	beq.n	800183c <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800181e:	7dbb      	ldrb	r3, [r7, #22]
 8001820:	b25b      	sxtb	r3, r3
 8001822:	f023 0302 	bic.w	r3, r3, #2
 8001826:	b25a      	sxtb	r2, r3
 8001828:	7c7b      	ldrb	r3, [r7, #17]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	b25b      	sxtb	r3, r3
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	b25b      	sxtb	r3, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	b25b      	sxtb	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00e      	beq.n	8001864 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8001846:	7dbb      	ldrb	r3, [r7, #22]
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	b25a      	sxtb	r2, r3
 8001850:	7cbb      	ldrb	r3, [r7, #18]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	b25b      	sxtb	r3, r3
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	b25b      	sxtb	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b25b      	sxtb	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00e      	beq.n	800188c <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 800186e:	7dbb      	ldrb	r3, [r7, #22]
 8001870:	b25b      	sxtb	r3, r3
 8001872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001876:	b25a      	sxtb	r2, r3
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	019b      	lsls	r3, r3, #6
 800187c:	b25b      	sxtb	r3, r3
 800187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001882:	b25b      	sxtb	r3, r3
 8001884:	4313      	orrs	r3, r2
 8001886:	b25b      	sxtb	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800188c:	f107 0116 	add.w	r1, r7, #22
 8001890:	f107 0015 	add.w	r0, r7, #21
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f7ff fbff 	bl	800109a <bmp3_set_regs>
 800189c:	4603      	mov	r3, r0
 800189e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80018a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	f107 0310 	add.w	r3, r7, #16
 80018be:	320b      	adds	r2, #11
 80018c0:	8812      	ldrh	r2, [r2, #0]
 80018c2:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 80018c4:	231a      	movs	r3, #26
 80018c6:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80018c8:	7db8      	ldrb	r0, [r7, #22]
 80018ca:	f107 0115 	add.w	r1, r7, #21
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f7ff fb52 	bl	8000f7a <bmp3_get_regs>
 80018d6:	4603      	mov	r3, r0
 80018d8:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80018da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d131      	bne.n	8001946 <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00e      	beq.n	800190a <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 80018ec:	7d7b      	ldrb	r3, [r7, #21]
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	f023 0302 	bic.w	r3, r3, #2
 80018f4:	b25a      	sxtb	r2, r3
 80018f6:	7c3b      	ldrb	r3, [r7, #16]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b25b      	sxtb	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00e      	beq.n	8001932 <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001914:	7d7b      	ldrb	r3, [r7, #21]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	b25a      	sxtb	r2, r3
 800191e:	7c7b      	ldrb	r3, [r7, #17]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	b25b      	sxtb	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b25b      	sxtb	r3, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001932:	f107 0115 	add.w	r1, r7, #21
 8001936:	f107 0016 	add.w	r0, r7, #22
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f7ff fbac 	bl	800109a <bmp3_set_regs>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800195c:	f107 0108 	add.w	r1, r7, #8
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2204      	movs	r2, #4
 8001964:	201c      	movs	r0, #28
 8001966:	f7ff fb08 	bl	8000f7a <bmp3_get_regs>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1cda      	adds	r2, r3, #3
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fe26 	bl	80015ca <parse_odr_filter_settings>

    return rslt;
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b098      	sub	sp, #96	; 0x60
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001994:	23ea      	movs	r3, #234	; 0xea
 8001996:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 800199c:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <validate_osr_and_odr_settings+0x7c>)
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	4611      	mov	r1, r2
 80019a4:	2248      	movs	r2, #72	; 0x48
 80019a6:	4618      	mov	r0, r3
 80019a8:	f012 f970 	bl	8013c8c <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	785b      	ldrb	r3, [r3, #1]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f83f 	bl	8001a38 <calculate_press_meas_time>
 80019ba:	4602      	mov	r2, r0
 80019bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019be:	4413      	add	r3, r2
 80019c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	789b      	ldrb	r3, [r3, #2]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f854 	bl	8001a78 <calculate_temp_meas_time>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d4:	4413      	add	r3, r2
 80019d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 80019d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019dc:	4413      	add	r3, r2
 80019de:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	799b      	ldrb	r3, [r3, #6]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	3360      	adds	r3, #96	; 0x60
 80019e8:	443b      	add	r3, r7
 80019ea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80019ee:	4619      	mov	r1, r3
 80019f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80019f2:	f000 f80b 	bl	8001a0c <verify_meas_time_and_odr_duration>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 80019fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3760      	adds	r7, #96	; 0x60
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	08016704 	.word	0x08016704

08001a0c <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d202      	bcs.n	8001a24 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e001      	b.n	8001a28 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001a24:	23fd      	movs	r3, #253	; 0xfd
 8001a26:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	3203      	adds	r2, #3
 8001a48:	6810      	ldr	r0, [r2, #0]
 8001a4a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001a50:	7a3a      	ldrb	r2, [r7, #8]
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f98c 	bl	8001d74 <pow_bmp3>
 8001a5c:	6138      	str	r0, [r7, #16]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a64:	fb02 f303 	mul.w	r3, r2, r3
 8001a68:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001a6c:	60fb      	str	r3, [r7, #12]

    /* Output in microseconds */
    return press_meas_t;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	3203      	adds	r2, #3
 8001a88:	6810      	ldr	r0, [r2, #0]
 8001a8a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001a90:	7a7a      	ldrb	r2, [r7, #9]
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f96c 	bl	8001d74 <pow_bmp3>
 8001a9c:	6138      	str	r0, [r7, #16]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	f203 1339 	addw	r3, r3, #313	; 0x139
 8001aac:	60fb      	str	r3, [r7, #12]

    /* Output in uint32_t */
    return temp_meas_t;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001ac6:	6a3a      	ldr	r2, [r7, #32]
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	3203      	adds	r2, #3
 8001ace:	6810      	ldr	r0, [r2, #0]
 8001ad0:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d03f      	beq.n	8001b5c <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d013      	beq.n	8001b0e <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	f023 0307 	bic.w	r3, r3, #7
 8001af0:	b25a      	sxtb	r2, r3
 8001af2:	7d3b      	ldrb	r3, [r7, #20]
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b25a      	sxtb	r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	440b      	add	r3, r1
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d014      	beq.n	8001b42 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001b22:	b25a      	sxtb	r2, r3
 8001b24:	7d7b      	ldrb	r3, [r7, #21]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	440b      	add	r3, r1
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	221c      	movs	r2, #28
 8001b4e:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	701a      	strb	r2, [r3, #0]
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	3303      	adds	r3, #3
 8001b7a:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	78db      	ldrb	r3, [r3, #3]
 8001b80:	2b11      	cmp	r3, #17
 8001b82:	d902      	bls.n	8001b8a <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	2211      	movs	r2, #17
 8001b88:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b25b      	sxtb	r3, r3
 8001b92:	f023 031f 	bic.w	r3, r3, #31
 8001b96:	b25a      	sxtb	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	78db      	ldrb	r3, [r3, #3]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b25a      	sxtb	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	221d      	movs	r2, #29
 8001bc2:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	701a      	strb	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	3203      	adds	r2, #3
 8001bf2:	6810      	ldr	r0, [r2, #0]
 8001bf4:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b25b      	sxtb	r3, r3
 8001bfe:	f023 030e 	bic.w	r3, r3, #14
 8001c02:	b25a      	sxtb	r2, r3
 8001c04:	7dbb      	ldrb	r3, [r7, #22]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	f003 030e 	and.w	r3, r3, #14
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	440b      	add	r3, r1
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	221f      	movs	r2, #31
 8001c2e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	701a      	strb	r2, [r3, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3318      	adds	r3, #24
 8001c56:	60fb      	str	r3, [r7, #12]

    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	801a      	strh	r2, [r3, #0]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3303      	adds	r3, #3
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3302      	adds	r3, #2
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	805a      	strh	r2, [r3, #2]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3304      	adds	r3, #4
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	b25a      	sxtb	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	711a      	strb	r2, [r3, #4]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3306      	adds	r3, #6
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3305      	adds	r3, #5
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	80da      	strh	r2, [r3, #6]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	021b      	lsls	r3, r3, #8
 8001cbc:	b21a      	sxth	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	811a      	strh	r2, [r3, #8]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3309      	adds	r3, #9
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b25a      	sxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	729a      	strb	r2, [r3, #10]
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	330a      	adds	r3, #10
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b25a      	sxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	72da      	strb	r2, [r3, #11]
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	330b      	adds	r3, #11
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	819a      	strh	r2, [r3, #12]
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	330e      	adds	r3, #14
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	330d      	adds	r3, #13
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4313      	orrs	r3, r2
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	81da      	strh	r2, [r3, #14]
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	330f      	adds	r3, #15
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b25a      	sxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	741a      	strb	r2, [r3, #16]
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b25a      	sxtb	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	745a      	strb	r2, [r3, #17]
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3312      	adds	r3, #18
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3311      	adds	r3, #17
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	825a      	strh	r2, [r3, #18]
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3313      	adds	r3, #19
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b25a      	sxtb	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	751a      	strb	r2, [r3, #20]
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3314      	adds	r3, #20
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	755a      	strb	r2, [r3, #21]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <pow_bmp3>:

/*!
 * @brief This internal API is used to calculate the power functionality.
 */
static uint32_t pow_bmp3(uint8_t base, uint8_t power)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	460a      	mov	r2, r1
 8001d7e:	71fb      	strb	r3, [r7, #7]
 8001d80:	4613      	mov	r3, r2
 8001d82:	71bb      	strb	r3, [r7, #6]
    uint32_t pow_output = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]

    while (power != 0)
 8001d88:	e007      	b.n	8001d9a <pow_bmp3+0x26>
    {
        pow_output = base * pow_output;
 8001d8a:	79fa      	ldrb	r2, [r7, #7]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	60fb      	str	r3, [r7, #12]
        power--;
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	71bb      	strb	r3, [r7, #6]
    while (power != 0)
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f4      	bne.n	8001d8a <pow_bmp3+0x16>
    }

    return pow_output;
 8001da0:	68fb      	ldr	r3, [r7, #12]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b085      	sub	sp, #20
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
 8001dca:	e001      	b.n	8001dd0 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00f      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <null_ptr_check+0x2e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d102      	bne.n	8001e12 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8001e0c:	23ff      	movs	r3, #255	; 0xff
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <BMP390_Read>:
static struct bmp3_data data = { 0 };
static struct bmp3_settings settings = { 0 };
static struct bmp3_status status = { { 0 } };
static I2C_HandleTypeDef *bmp390_phi2c;

BMP3_INTF_RET_TYPE BMP390_Read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr){
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b088      	sub	sp, #32
 8001e2a:	af04      	add	r7, sp, #16
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Read(
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2164      	movs	r1, #100	; 0x64
 8001e40:	9102      	str	r1, [sp, #8]
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	2301      	movs	r3, #1
 8001e4a:	21ee      	movs	r1, #238	; 0xee
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f003 f845 	bl	8004edc <HAL_I2C_Mem_Read>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b25b      	sxtb	r3, r3
			reg_addr,
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT);
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <BMP390_Write>:
BMP3_INTF_RET_TYPE BMP390_Write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len, void *intf_ptr){
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b088      	sub	sp, #32
 8001e62:	af04      	add	r7, sp, #16
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2164      	movs	r1, #100	; 0x64
 8001e78:	9102      	str	r1, [sp, #8]
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	21ee      	movs	r1, #238	; 0xee
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f002 ff2f 	bl	8004ce8 <HAL_I2C_Mem_Write>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	b25b      	sxtb	r3, r3
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT
	);
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <BMP390_DelayUs>:
void BMP390_DelayUs(uint32_t period, void *intf_ptr){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	/* bmp3.c only requires ms delay, so i'll just use millisecond delay function */
	uint32_t delay = period / 1000;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <BMP390_DelayUs+0x24>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	60fb      	str	r3, [r7, #12]
	HAL_Delay(delay);
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f001 fce0 	bl	8003874 <HAL_Delay>
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	10624dd3 	.word	0x10624dd3

08001ec0 <BMP390_Init>:
void BMP390_Init(void){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af04      	add	r7, sp, #16
	HAL_Delay(100);
 8001ec6:	2064      	movs	r0, #100	; 0x64
 8001ec8:	f001 fcd4 	bl	8003874 <HAL_Delay>
	bmp390dev.chip_id = BMP390_CHIP_ID;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <BMP390_Init+0xa0>)
 8001ece:	2260      	movs	r2, #96	; 0x60
 8001ed0:	701a      	strb	r2, [r3, #0]
	bmp390dev.intf_ptr = bmp390_phi2c;
 8001ed2:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <BMP390_Init+0xa4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	; (8001f60 <BMP390_Init+0xa0>)
 8001ed8:	6053      	str	r3, [r2, #4]
	bmp390dev.intf = BMP3_I2C_INTF;
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <BMP390_Init+0xa0>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	721a      	strb	r2, [r3, #8]
	bmp390dev.read = BMP390_Read;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <BMP390_Init+0xa0>)
 8001ee2:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <BMP390_Init+0xa8>)
 8001ee4:	60da      	str	r2, [r3, #12]
	bmp390dev.write = BMP390_Write;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <BMP390_Init+0xa0>)
 8001ee8:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <BMP390_Init+0xac>)
 8001eea:	611a      	str	r2, [r3, #16]
	bmp390dev.delay_us = BMP390_DelayUs;
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <BMP390_Init+0xa0>)
 8001eee:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <BMP390_Init+0xb0>)
 8001ef0:	615a      	str	r2, [r3, #20]

	// Force soft reset
	uint8_t buf = 0xB6;
 8001ef2:	23b6      	movs	r3, #182	; 0xb6
 8001ef4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(bmp390dev.intf_ptr, BMP3_ADDR_I2C_SEC << 1, 0x7E, I2C_MEMADD_SIZE_8BIT, &buf, 1, 100);
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <BMP390_Init+0xa0>)
 8001ef8:	6858      	ldr	r0, [r3, #4]
 8001efa:	2364      	movs	r3, #100	; 0x64
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	2301      	movs	r3, #1
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	227e      	movs	r2, #126	; 0x7e
 8001f0a:	21ee      	movs	r1, #238	; 0xee
 8001f0c:	f002 feec 	bl	8004ce8 <HAL_I2C_Mem_Write>
	bmp3_init(&bmp390dev);
 8001f10:	4813      	ldr	r0, [pc, #76]	; (8001f60 <BMP390_Init+0xa0>)
 8001f12:	f7fe ffeb 	bl	8000eec <bmp3_init>

	settings.press_en = BMP3_ENABLE;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <BMP390_Init+0xb4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <BMP390_Init+0xb4>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <BMP390_Init+0xb4>)
 8001f24:	2203      	movs	r2, #3
 8001f26:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <BMP390_Init+0xb4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <BMP390_Init+0xb4>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <BMP390_Init+0xb8>)
 8001f36:	22b6      	movs	r2, #182	; 0xb6
 8001f38:	801a      	strh	r2, [r3, #0]
	bmp3_set_sensor_settings(settings_sel, &settings, &bmp390dev);
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <BMP390_Init+0xb8>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <BMP390_Init+0xa0>)
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <BMP390_Init+0xb4>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff f93a 	bl	80011bc <bmp3_set_sensor_settings>

	settings.op_mode = BMP3_MODE_NORMAL;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <BMP390_Init+0xb4>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
	bmp3_set_op_mode(&settings, &bmp390dev);
 8001f4e:	4904      	ldr	r1, [pc, #16]	; (8001f60 <BMP390_Init+0xa0>)
 8001f50:	4808      	ldr	r0, [pc, #32]	; (8001f74 <BMP390_Init+0xb4>)
 8001f52:	f7ff f9cb 	bl	80012ec <bmp3_set_op_mode>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000318 	.word	0x20000318
 8001f64:	20000360 	.word	0x20000360
 8001f68:	08001e27 	.word	0x08001e27
 8001f6c:	08001e5f 	.word	0x08001e5f
 8001f70:	08001e99 	.word	0x08001e99
 8001f74:	20000350 	.word	0x20000350
 8001f78:	20000314 	.word	0x20000314

08001f7c <BMP390_AssignI2C>:
	*pPressure		= data.pressure;

	return HAL_OK;

}
void BMP390_AssignI2C(I2C_HandleTypeDef *phi2c){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	bmp390_phi2c = phi2c;
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <BMP390_AssignI2C+0x1c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000360 	.word	0x20000360

08001f9c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	2007      	movs	r0, #7
 8001fac:	f000 f87a 	bl	80020a4 <bno055_writeData>
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	203d      	movs	r0, #61	; 0x3d
 8001fc8:	f000 f86c 	bl	80020a4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d103      	bne.n	8001fda <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8001fd2:	2013      	movs	r0, #19
 8001fd4:	f000 f85a 	bl	800208c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001fd8:	e002      	b.n	8001fe0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001fda:	2007      	movs	r0, #7
 8001fdc:	f000 f856 	bl	800208c <bno055_delay>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff ffe3 	bl	8001fb8 <bno055_setOperationMode>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001ffa:	200c      	movs	r0, #12
 8001ffc:	f7ff ffdc 	bl	8001fb8 <bno055_setOperationMode>
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}

08002004 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(1); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(0); }

void bno055_reset() {
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002008:	2120      	movs	r1, #32
 800200a:	203f      	movs	r0, #63	; 0x3f
 800200c:	f000 f84a 	bl	80020a4 <bno055_writeData>
  bno055_delay(700);
 8002010:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002014:	f000 f83a 	bl	800208c <bno055_delay>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
  bno055_reset();
 8002022:	f7ff ffef 	bl	8002004 <bno055_reset>

  uint8_t id = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	2000      	movs	r0, #0
 8002032:	f000 f923 	bl	800227c <bno055_readData>
  if (id != BNO055_ID) {
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2ba0      	cmp	r3, #160	; 0xa0
 800203a:	d004      	beq.n	8002046 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	4619      	mov	r1, r3
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <bno055_setup+0x4c>)
 8002042:	f012 fb83 	bl	801474c <iprintf>
  }
  bno055_setPage(0);
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff ffa8 	bl	8001f9c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800204c:	2100      	movs	r1, #0
 800204e:	203f      	movs	r0, #63	; 0x3f
 8002050:	f000 f828 	bl	80020a4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002054:	f7ff ffc8 	bl	8001fe8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002058:	200a      	movs	r0, #10
 800205a:	f000 f817 	bl	800208c <bno055_delay>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	0801674c 	.word	0x0801674c

0800206c <bno055_assignI2C>:

#include "module/bno055/bno055_stm32.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <bno055_assignI2C+0x1c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000364 	.word	0x20000364

0800208c <bno055_delay>:

void bno055_delay(int time) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	f001 fbec 	bl	8003874 <HAL_Delay>
#endif
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	4603      	mov	r3, r0
 80020ac:	460a      	mov	r2, r1
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	733b      	strb	r3, [r7, #12]
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80020bc:	4b5a      	ldr	r3, [pc, #360]	; (8002228 <bno055_writeData+0x184>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	f107 020c 	add.w	r2, r7, #12
 80020c4:	230a      	movs	r3, #10
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2302      	movs	r3, #2
 80020ca:	2150      	movs	r1, #80	; 0x50
 80020cc:	f002 fae8 	bl	80046a0 <HAL_I2C_Master_Transmit>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80a0 	beq.w	800221c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d103      	bne.n	80020ea <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80020e2:	4852      	ldr	r0, [pc, #328]	; (800222c <bno055_writeData+0x188>)
 80020e4:	f012 fbb8 	bl	8014858 <puts>
 80020e8:	e012      	b.n	8002110 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d103      	bne.n	80020f8 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 80020f0:	484f      	ldr	r0, [pc, #316]	; (8002230 <bno055_writeData+0x18c>)
 80020f2:	f012 fbb1 	bl	8014858 <puts>
 80020f6:	e00b      	b.n	8002110 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d103      	bne.n	8002106 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 80020fe:	484d      	ldr	r0, [pc, #308]	; (8002234 <bno055_writeData+0x190>)
 8002100:	f012 fbaa 	bl	8014858 <puts>
 8002104:	e004      	b.n	8002110 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	4619      	mov	r1, r3
 800210a:	484b      	ldr	r0, [pc, #300]	; (8002238 <bno055_writeData+0x194>)
 800210c:	f012 fb1e 	bl	801474c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002110:	4b45      	ldr	r3, [pc, #276]	; (8002228 <bno055_writeData+0x184>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f003 f915 	bl	8005344 <HAL_I2C_GetError>
 800211a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d07e      	beq.n	8002220 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d103      	bne.n	8002130 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002128:	4844      	ldr	r0, [pc, #272]	; (800223c <bno055_writeData+0x198>)
 800212a:	f012 fb95 	bl	8014858 <puts>
 800212e:	e021      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d103      	bne.n	800213e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002136:	4842      	ldr	r0, [pc, #264]	; (8002240 <bno055_writeData+0x19c>)
 8002138:	f012 fb8e 	bl	8014858 <puts>
 800213c:	e01a      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d103      	bne.n	800214c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002144:	483f      	ldr	r0, [pc, #252]	; (8002244 <bno055_writeData+0x1a0>)
 8002146:	f012 fb87 	bl	8014858 <puts>
 800214a:	e013      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b08      	cmp	r3, #8
 8002150:	d103      	bne.n	800215a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002152:	483d      	ldr	r0, [pc, #244]	; (8002248 <bno055_writeData+0x1a4>)
 8002154:	f012 fb80 	bl	8014858 <puts>
 8002158:	e00c      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d103      	bne.n	8002168 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002160:	483a      	ldr	r0, [pc, #232]	; (800224c <bno055_writeData+0x1a8>)
 8002162:	f012 fb79 	bl	8014858 <puts>
 8002166:	e005      	b.n	8002174 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b20      	cmp	r3, #32
 800216c:	d102      	bne.n	8002174 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800216e:	4838      	ldr	r0, [pc, #224]	; (8002250 <bno055_writeData+0x1ac>)
 8002170:	f012 fb72 	bl	8014858 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <bno055_writeData+0x184>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 f8d5 	bl	8005328 <HAL_I2C_GetState>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002188:	4832      	ldr	r0, [pc, #200]	; (8002254 <bno055_writeData+0x1b0>)
 800218a:	f012 fb65 	bl	8014858 <puts>
 800218e:	e048      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b20      	cmp	r3, #32
 8002194:	d103      	bne.n	800219e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002196:	482f      	ldr	r0, [pc, #188]	; (8002254 <bno055_writeData+0x1b0>)
 8002198:	f012 fb5e 	bl	8014858 <puts>
 800219c:	e041      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2b24      	cmp	r3, #36	; 0x24
 80021a2:	d103      	bne.n	80021ac <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80021a4:	482c      	ldr	r0, [pc, #176]	; (8002258 <bno055_writeData+0x1b4>)
 80021a6:	f012 fb57 	bl	8014858 <puts>
 80021aa:	e03a      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b21      	cmp	r3, #33	; 0x21
 80021b0:	d103      	bne.n	80021ba <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80021b2:	482a      	ldr	r0, [pc, #168]	; (800225c <bno055_writeData+0x1b8>)
 80021b4:	f012 fb50 	bl	8014858 <puts>
 80021b8:	e033      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b22      	cmp	r3, #34	; 0x22
 80021be:	d103      	bne.n	80021c8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80021c0:	4827      	ldr	r0, [pc, #156]	; (8002260 <bno055_writeData+0x1bc>)
 80021c2:	f012 fb49 	bl	8014858 <puts>
 80021c6:	e02c      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b28      	cmp	r3, #40	; 0x28
 80021cc:	d103      	bne.n	80021d6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80021ce:	4825      	ldr	r0, [pc, #148]	; (8002264 <bno055_writeData+0x1c0>)
 80021d0:	f012 fb42 	bl	8014858 <puts>
 80021d4:	e025      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	2b29      	cmp	r3, #41	; 0x29
 80021da:	d103      	bne.n	80021e4 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80021dc:	4822      	ldr	r0, [pc, #136]	; (8002268 <bno055_writeData+0x1c4>)
 80021de:	f012 fb3b 	bl	8014858 <puts>
 80021e2:	e01e      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b2a      	cmp	r3, #42	; 0x2a
 80021e8:	d103      	bne.n	80021f2 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80021ea:	4820      	ldr	r0, [pc, #128]	; (800226c <bno055_writeData+0x1c8>)
 80021ec:	f012 fb34 	bl	8014858 <puts>
 80021f0:	e017      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	2b60      	cmp	r3, #96	; 0x60
 80021f6:	d103      	bne.n	8002200 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80021f8:	481d      	ldr	r0, [pc, #116]	; (8002270 <bno055_writeData+0x1cc>)
 80021fa:	f012 fb2d 	bl	8014858 <puts>
 80021fe:	e010      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2ba0      	cmp	r3, #160	; 0xa0
 8002204:	d103      	bne.n	800220e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002206:	481b      	ldr	r0, [pc, #108]	; (8002274 <bno055_writeData+0x1d0>)
 8002208:	f012 fb26 	bl	8014858 <puts>
 800220c:	e009      	b.n	8002222 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2be0      	cmp	r3, #224	; 0xe0
 8002212:	d106      	bne.n	8002222 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002214:	4818      	ldr	r0, [pc, #96]	; (8002278 <bno055_writeData+0x1d4>)
 8002216:	f012 fb1f 	bl	8014858 <puts>
 800221a:	e002      	b.n	8002222 <bno055_writeData+0x17e>
    return;
 800221c:	bf00      	nop
 800221e:	e000      	b.n	8002222 <bno055_writeData+0x17e>
    return;
 8002220:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000364 	.word	0x20000364
 800222c:	08016788 	.word	0x08016788
 8002230:	080167ac 	.word	0x080167ac
 8002234:	080167d4 	.word	0x080167d4
 8002238:	080167f8 	.word	0x080167f8
 800223c:	08016810 	.word	0x08016810
 8002240:	08016824 	.word	0x08016824
 8002244:	08016838 	.word	0x08016838
 8002248:	0801684c 	.word	0x0801684c
 800224c:	08016860 	.word	0x08016860
 8002250:	08016874 	.word	0x08016874
 8002254:	0801688c 	.word	0x0801688c
 8002258:	080168a4 	.word	0x080168a4
 800225c:	080168b8 	.word	0x080168b8
 8002260:	080168d0 	.word	0x080168d0
 8002264:	080168e8 	.word	0x080168e8
 8002268:	08016900 	.word	0x08016900
 800226c:	08016920 	.word	0x08016920
 8002270:	08016940 	.word	0x08016940
 8002274:	08016958 	.word	0x08016958
 8002278:	08016970 	.word	0x08016970

0800227c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af02      	add	r7, sp, #8
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <bno055_readData+0x40>)
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	1dfa      	adds	r2, r7, #7
 8002292:	2364      	movs	r3, #100	; 0x64
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2301      	movs	r3, #1
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	f002 fa01 	bl	80046a0 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <bno055_readData+0x40>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	79bb      	ldrb	r3, [r7, #6]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2264      	movs	r2, #100	; 0x64
 80022a8:	9200      	str	r2, [sp, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	2150      	movs	r1, #80	; 0x50
 80022ae:	f002 faf5 	bl	800489c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000364 	.word	0x20000364

080022c0 <SD_Assign>:
static volatile DSTATUS Stat = STA_NOINIT;              /* 디스크 상태 Flag*/
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* assign */
void SD_Assign(SPI_HandleTypeDef *phspi){
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	_sd_phspi = phspi;
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <SD_Assign+0x1c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
	return;
 80022ce:	bf00      	nop
}
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000368 	.word	0x20000368

080022e0 <Servo_Attach>:
 *      Author: SURFACE
 */

#include "module/servo/servo.h"

void Servo_Attach(Servo_HandleTypeDef *servo, TIM_HandleTypeDef *htim, uint32_t channel){
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
	servo->htim 	= htim;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	601a      	str	r2, [r3, #0]
	servo->channel 	= channel;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	605a      	str	r2, [r3, #4]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800230c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002310:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d013      	beq.n	8002344 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800231c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002320:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002324:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800232c:	e000      	b.n	8002330 <ITM_SendChar+0x2c>
    {
      __NOP();
 800232e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002330:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f9      	beq.n	800232e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800233a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002344:	687b      	ldr	r3, [r7, #4]
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_write>:
#include "stdarg.h"

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	b29b      	uxth	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	68b8      	ldr	r0, [r7, #8]
 8002366:	f010 fe97 	bl	8013098 <CDC_Transmit_FS>
	for(int i = 0; i < len; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e009      	b.n	8002384 <_write+0x32>
	{
		ITM_SendChar(*ptr++);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ffc3 	bl	8002304 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf1      	blt.n	8002370 <_write+0x1e>

	}
	return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <log_format>:

static RTC_TimeTypeDef sTime;
static RTC_DateTypeDef sDate;
static uint32_t g_SubSeconds;

void log_format(const char* tag, const char* message, va_list args) {
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b087      	sub	sp, #28
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
	g_SubSeconds = ((255-(uint32_t)(hrtc.Instance->SSR))*1000L)/(255+1); // ms
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <log_format+0x74>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	4a19      	ldr	r2, [pc, #100]	; (8002410 <log_format+0x78>)
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	f503 3379 	add.w	r3, r3, #254976	; 0x3e400
 80023b4:	3318      	adds	r3, #24
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	4a16      	ldr	r2, [pc, #88]	; (8002414 <log_format+0x7c>)
 80023ba:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80023bc:	2200      	movs	r2, #0
 80023be:	4916      	ldr	r1, [pc, #88]	; (8002418 <log_format+0x80>)
 80023c0:	4812      	ldr	r0, [pc, #72]	; (800240c <log_format+0x74>)
 80023c2:	f006 f90d 	bl	80085e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80023c6:	2200      	movs	r2, #0
 80023c8:	4914      	ldr	r1, [pc, #80]	; (800241c <log_format+0x84>)
 80023ca:	4810      	ldr	r0, [pc, #64]	; (800240c <log_format+0x74>)
 80023cc:	f006 f9ea 	bl	80087a4 <HAL_RTC_GetDate>

	printf("%02d:%02d:%02d,%03lu[%s] ", sTime.Hours, sTime.Minutes, sTime.Seconds, g_SubSeconds, tag);
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <log_format+0x80>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <log_format+0x80>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	4618      	mov	r0, r3
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <log_format+0x80>)
 80023de:	789b      	ldrb	r3, [r3, #2]
 80023e0:	461c      	mov	r4, r3
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <log_format+0x7c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	9201      	str	r2, [sp, #4]
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4623      	mov	r3, r4
 80023ee:	4602      	mov	r2, r0
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <log_format+0x88>)
 80023f2:	f012 f9ab 	bl	801474c <iprintf>
	vprintf(message, args);
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68b8      	ldr	r0, [r7, #8]
 80023fa:	f012 faf3 	bl	80149e4 <viprintf>
	printf("\r\n");
 80023fe:	4809      	ldr	r0, [pc, #36]	; (8002424 <log_format+0x8c>)
 8002400:	f012 fa2a 	bl	8014858 <puts>
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	200004c0 	.word	0x200004c0
 8002410:	fffffc18 	.word	0xfffffc18
 8002414:	20000384 	.word	0x20000384
 8002418:	2000036c 	.word	0x2000036c
 800241c:	20000380 	.word	0x20000380
 8002420:	08016988 	.word	0x08016988
 8002424:	080169a4 	.word	0x080169a4

08002428 <logi>:

void logi(const char* message, ...) {
 8002428:	b40f      	push	{r0, r1, r2, r3}
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	607b      	str	r3, [r7, #4]
	log_format("INFO", message, args);
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6939      	ldr	r1, [r7, #16]
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <logi+0x28>)
 800243c:	f7ff ffac 	bl	8002398 <log_format>
	va_end(args);
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800244a:	b004      	add	sp, #16
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	080169a8 	.word	0x080169a8

08002454 <loge>:
	va_start(args, message);
	log_format("DEBUG", message, args);
	va_end(args);
}

void loge(const char* message, ...) {
 8002454:	b40f      	push	{r0, r1, r2, r3}
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	607b      	str	r3, [r7, #4]
	log_format("ERROR", message, args);
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6939      	ldr	r1, [r7, #16]
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <loge+0x28>)
 8002468:	f7ff ff96 	bl	8002398 <log_format>
	va_end(args);
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002476:	b004      	add	sp, #16
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	080169b8 	.word	0x080169b8

08002480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002484:	f001 f9b4 	bl	80037f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002488:	f000 fdce 	bl	8003028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248c:	f000 fe3a 	bl	8003104 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002490:	f000 fd68 	bl	8002f64 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002494:	f000 fede 	bl	8003254 <MX_I2C1_Init>
  MX_RTC_Init();
 8002498:	f000 ff0a 	bl	80032b0 <MX_RTC_Init>
  MX_SPI2_Init();
 800249c:	f000 ff62 	bl	8003364 <MX_SPI2_Init>
  MX_TIM3_Init();
 80024a0:	f000 ff96 	bl	80033d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80024a4:	f001 f820 	bl	80034e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80024a8:	f001 f848 	bl	800353c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80024ac:	f001 f870 	bl	8003590 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 80024b0:	f009 fee8 	bl	800c284 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  _BMP390_Init();
 80024b4:	f000 f8b2 	bl	800261c <_BMP390_Init>
  _BNO055_Init();
 80024b8:	f000 f8bc 	bl	8002634 <_BNO055_Init>
  _SD_Init();
 80024bc:	f000 f8c8 	bl	8002650 <_SD_Init>
  _Servo_Init();
 80024c0:	f000 f8e4 	bl	800268c <_Servo_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80024c4:	f00c fcf4 	bl	800eeb0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TransmitSemaphore */
  TransmitSemaphoreHandle = osSemaphoreNew(1, 1, &TransmitSemaphore_attributes);
 80024c8:	4a32      	ldr	r2, [pc, #200]	; (8002594 <main+0x114>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	2001      	movs	r0, #1
 80024ce:	f00c ff8f 	bl	800f3f0 <osSemaphoreNew>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a30      	ldr	r2, [pc, #192]	; (8002598 <main+0x118>)
 80024d6:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorReading */
  SensorReadingHandle = osTimerNew(vSensorReadingCallback, osTimerPeriodic, NULL, &SensorReading_attributes);
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <main+0x11c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	2101      	movs	r1, #1
 80024de:	4830      	ldr	r0, [pc, #192]	; (80025a0 <main+0x120>)
 80024e0:	f00c fdf2 	bl	800f0c8 <osTimerNew>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a2f      	ldr	r2, [pc, #188]	; (80025a4 <main+0x124>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* creation of Transmit */
  TransmitHandle = osTimerNew(vTransmitCallback, osTimerPeriodic, NULL, &Transmit_attributes);
 80024ea:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <main+0x128>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	2101      	movs	r1, #1
 80024f0:	482e      	ldr	r0, [pc, #184]	; (80025ac <main+0x12c>)
 80024f2:	f00c fde9 	bl	800f0c8 <osTimerNew>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <main+0x130>)
 80024fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(SensorReadingHandle, 3000);
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <main+0x124>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002504:	4618      	mov	r0, r3
 8002506:	f00c fe5b 	bl	800f1c0 <osTimerStart>
  osTimerStart(TransmitHandle, 3000);
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <main+0x130>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002512:	4618      	mov	r0, r3
 8002514:	f00c fe54 	bl	800f1c0 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Main */
  MainHandle = osThreadNew(vMainTask, NULL, &Main_attributes);
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <main+0x134>)
 800251a:	2100      	movs	r1, #0
 800251c:	4826      	ldr	r0, [pc, #152]	; (80025b8 <main+0x138>)
 800251e:	f00c fd11 	bl	800ef44 <osThreadNew>
 8002522:	4603      	mov	r3, r0
 8002524:	4a25      	ldr	r2, [pc, #148]	; (80025bc <main+0x13c>)
 8002526:	6013      	str	r3, [r2, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(vGPSTask, NULL, &GPS_attributes);
 8002528:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <main+0x140>)
 800252a:	2100      	movs	r1, #0
 800252c:	4825      	ldr	r0, [pc, #148]	; (80025c4 <main+0x144>)
 800252e:	f00c fd09 	bl	800ef44 <osThreadNew>
 8002532:	4603      	mov	r3, r0
 8002534:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <main+0x148>)
 8002536:	6013      	str	r3, [r2, #0]

  /* creation of StateManaging */
  StateManagingHandle = osThreadNew(vStateManagingTask, NULL, &StateManaging_attributes);
 8002538:	4a24      	ldr	r2, [pc, #144]	; (80025cc <main+0x14c>)
 800253a:	2100      	movs	r1, #0
 800253c:	4824      	ldr	r0, [pc, #144]	; (80025d0 <main+0x150>)
 800253e:	f00c fd01 	bl	800ef44 <osThreadNew>
 8002542:	4603      	mov	r3, r0
 8002544:	4a23      	ldr	r2, [pc, #140]	; (80025d4 <main+0x154>)
 8002546:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(vReceiveTask, NULL, &Receive_attributes);
 8002548:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <main+0x158>)
 800254a:	2100      	movs	r1, #0
 800254c:	4823      	ldr	r0, [pc, #140]	; (80025dc <main+0x15c>)
 800254e:	f00c fcf9 	bl	800ef44 <osThreadNew>
 8002552:	4603      	mov	r3, r0
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <main+0x160>)
 8002556:	6013      	str	r3, [r2, #0]

  /* creation of Debug */
  DebugHandle = osThreadNew(vDebugTask, NULL, &Debug_attributes);
 8002558:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <main+0x164>)
 800255a:	2100      	movs	r1, #0
 800255c:	4822      	ldr	r0, [pc, #136]	; (80025e8 <main+0x168>)
 800255e:	f00c fcf1 	bl	800ef44 <osThreadNew>
 8002562:	4603      	mov	r3, r0
 8002564:	4a21      	ldr	r2, [pc, #132]	; (80025ec <main+0x16c>)
 8002566:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of USBEvent */
  USBEventHandle = osEventFlagsNew(&USBEvent_attributes);
 8002568:	4821      	ldr	r0, [pc, #132]	; (80025f0 <main+0x170>)
 800256a:	f00c fe57 	bl	800f21c <osEventFlagsNew>
 800256e:	4603      	mov	r3, r0
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <main+0x174>)
 8002572:	6013      	str	r3, [r2, #0]

  /* creation of GPSEvent */
  GPSEventHandle = osEventFlagsNew(&GPSEvent_attributes);
 8002574:	4820      	ldr	r0, [pc, #128]	; (80025f8 <main+0x178>)
 8002576:	f00c fe51 	bl	800f21c <osEventFlagsNew>
 800257a:	4603      	mov	r3, r0
 800257c:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <main+0x17c>)
 800257e:	6013      	str	r3, [r2, #0]

  /* creation of CommandEvent */
  CommandEventHandle = osEventFlagsNew(&CommandEvent_attributes);
 8002580:	481f      	ldr	r0, [pc, #124]	; (8002600 <main+0x180>)
 8002582:	f00c fe4b 	bl	800f21c <osEventFlagsNew>
 8002586:	4603      	mov	r3, r0
 8002588:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <main+0x184>)
 800258a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800258c:	f00c fcb4 	bl	800eef8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002590:	e7fe      	b.n	8002590 <main+0x110>
 8002592:	bf00      	nop
 8002594:	08016bb0 	.word	0x08016bb0
 8002598:	200003a4 	.word	0x200003a4
 800259c:	08016b90 	.word	0x08016b90
 80025a0:	08002795 	.word	0x08002795
 80025a4:	2000039c 	.word	0x2000039c
 80025a8:	08016ba0 	.word	0x08016ba0
 80025ac:	080027a9 	.word	0x080027a9
 80025b0:	200003a0 	.word	0x200003a0
 80025b4:	08016adc 	.word	0x08016adc
 80025b8:	080026dd 	.word	0x080026dd
 80025bc:	20000388 	.word	0x20000388
 80025c0:	08016b00 	.word	0x08016b00
 80025c4:	08002731 	.word	0x08002731
 80025c8:	2000038c 	.word	0x2000038c
 80025cc:	08016b24 	.word	0x08016b24
 80025d0:	08002741 	.word	0x08002741
 80025d4:	20000390 	.word	0x20000390
 80025d8:	08016b48 	.word	0x08016b48
 80025dc:	08002751 	.word	0x08002751
 80025e0:	20000394 	.word	0x20000394
 80025e4:	08016b6c 	.word	0x08016b6c
 80025e8:	08002761 	.word	0x08002761
 80025ec:	20000398 	.word	0x20000398
 80025f0:	08016bc0 	.word	0x08016bc0
 80025f4:	200003a8 	.word	0x200003a8
 80025f8:	08016bd0 	.word	0x08016bd0
 80025fc:	200003ac 	.word	0x200003ac
 8002600:	08016be0 	.word	0x08016be0
 8002604:	200003b0 	.word	0x200003b0

08002608 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//uint8_t buffer[14] = {};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
  {
	  //HAL_UART_Receive_IT(&huart3, (uint8_t *)buffer, sizeof(buffer));
    //logi("buffer");
  }
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <_BMP390_Init>:
static void _BMP390_Init(void){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	BMP390_AssignI2C(&hi2c1);
 8002620:	4803      	ldr	r0, [pc, #12]	; (8002630 <_BMP390_Init+0x14>)
 8002622:	f7ff fcab 	bl	8001f7c <BMP390_AssignI2C>
	BMP390_Init();
 8002626:	f7ff fc4b 	bl	8001ec0 <BMP390_Init>
}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000046c 	.word	0x2000046c

08002634 <_BNO055_Init>:
static void _BNO055_Init(void){
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c1);
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <_BNO055_Init+0x18>)
 800263a:	f7ff fd17 	bl	800206c <bno055_assignI2C>
	bno055_setup();
 800263e:	f7ff fced 	bl	800201c <bno055_setup>
	bno055_setOperationModeNDOF();
 8002642:	f7ff fcd8 	bl	8001ff6 <bno055_setOperationModeNDOF>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000046c 	.word	0x2000046c

08002650 <_SD_Init>:
static void _SD_Init(void){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	SD_Assign(&hspi2);
 8002654:	4809      	ldr	r0, [pc, #36]	; (800267c <_SD_Init+0x2c>)
 8002656:	f7ff fe33 	bl	80022c0 <SD_Assign>
	retUSER = f_mount(&USERFatFS, USERPath, 1);
 800265a:	2201      	movs	r2, #1
 800265c:	4908      	ldr	r1, [pc, #32]	; (8002680 <_SD_Init+0x30>)
 800265e:	4809      	ldr	r0, [pc, #36]	; (8002684 <_SD_Init+0x34>)
 8002660:	f00c fadc 	bl	800ec1c <f_mount>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <_SD_Init+0x38>)
 800266a:	701a      	strb	r2, [r3, #0]
	if ( retUSER != FR_OK ) Error_Handler();
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <_SD_Init+0x38>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <_SD_Init+0x28>
 8002674:	f000 f8b4 	bl	80027e0 <Error_Handler>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200004e0 	.word	0x200004e0
 8002680:	20000678 	.word	0x20000678
 8002684:	2000067c 	.word	0x2000067c
 8002688:	20000674 	.word	0x20000674

0800268c <_Servo_Init>:
static void _Servo_Init(void){
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
	Servo_Attach(&hservo1, &htim3, TIM_CHANNEL_1);
 8002690:	2200      	movs	r2, #0
 8002692:	490e      	ldr	r1, [pc, #56]	; (80026cc <_Servo_Init+0x40>)
 8002694:	480e      	ldr	r0, [pc, #56]	; (80026d0 <_Servo_Init+0x44>)
 8002696:	f7ff fe23 	bl	80022e0 <Servo_Attach>
	Servo_Attach(&hservo2, &htim3, TIM_CHANNEL_2);
 800269a:	2204      	movs	r2, #4
 800269c:	490b      	ldr	r1, [pc, #44]	; (80026cc <_Servo_Init+0x40>)
 800269e:	480d      	ldr	r0, [pc, #52]	; (80026d4 <_Servo_Init+0x48>)
 80026a0:	f7ff fe1e 	bl	80022e0 <Servo_Attach>
	Servo_Attach(&hservo3, &htim3, TIM_CHANNEL_3);
 80026a4:	2208      	movs	r2, #8
 80026a6:	4909      	ldr	r1, [pc, #36]	; (80026cc <_Servo_Init+0x40>)
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <_Servo_Init+0x4c>)
 80026aa:	f7ff fe19 	bl	80022e0 <Servo_Attach>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80026ae:	2100      	movs	r1, #0
 80026b0:	4806      	ldr	r0, [pc, #24]	; (80026cc <_Servo_Init+0x40>)
 80026b2:	f006 fb25 	bl	8008d00 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80026b6:	2104      	movs	r1, #4
 80026b8:	4804      	ldr	r0, [pc, #16]	; (80026cc <_Servo_Init+0x40>)
 80026ba:	f006 fb21 	bl	8008d00 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80026be:	2108      	movs	r1, #8
 80026c0:	4802      	ldr	r0, [pc, #8]	; (80026cc <_Servo_Init+0x40>)
 80026c2:	f006 fb1d 	bl	8008d00 <HAL_TIM_PWM_Start_IT>
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000538 	.word	0x20000538
 80026d0:	200003b4 	.word	0x200003b4
 80026d4:	200003bc 	.word	0x200003bc
 80026d8:	200003c4 	.word	0x200003c4

080026dc <vMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vMainTask */
void vMainTask(void *argument)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80026e4:	f010 fbea 	bl	8012ebc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  //HAL_UART_Receive_IT(&huart3, (uint8_t *) buffer, sizeof(buffer));
  //uint8_t data[]= {0x7E, 0x00, 0x0A, 0x01, 0x01, 0xCC, 0xCC, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x71};
  logi("Initializing...");
 80026e8:	480e      	ldr	r0, [pc, #56]	; (8002724 <vMainTask+0x48>)
 80026ea:	f7ff fe9d 	bl	8002428 <logi>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <vMainTask+0x4c>)
 80026f6:	f001 fe5b 	bl	80043b0 <HAL_GPIO_WritePin>
  osDelay(100);
 80026fa:	2064      	movs	r0, #100	; 0x64
 80026fc:	f00c fcb4 	bl	800f068 <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002706:	4808      	ldr	r0, [pc, #32]	; (8002728 <vMainTask+0x4c>)
 8002708:	f001 fe52 	bl	80043b0 <HAL_GPIO_WritePin>
  logi("Initialized");
 800270c:	4807      	ldr	r0, [pc, #28]	; (800272c <vMainTask+0x50>)
 800270e:	f7ff fe8b 	bl	8002428 <logi>
  for(;;)
  {
    osDelay(1000);
 8002712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002716:	f00c fca7 	bl	800f068 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800271a:	2120      	movs	r1, #32
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <vMainTask+0x4c>)
 800271e:	f001 fe60 	bl	80043e2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8002722:	e7f6      	b.n	8002712 <vMainTask+0x36>
 8002724:	08016a44 	.word	0x08016a44
 8002728:	40020000 	.word	0x40020000
 800272c:	08016a54 	.word	0x08016a54

08002730 <vGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vGPSTask */
void vGPSTask(void *argument)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vGPSTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002738:	2001      	movs	r0, #1
 800273a:	f00c fc95 	bl	800f068 <osDelay>
 800273e:	e7fb      	b.n	8002738 <vGPSTask+0x8>

08002740 <vStateManagingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStateManagingTask */
void vStateManagingTask(void *argument)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStateManagingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002748:	2001      	movs	r0, #1
 800274a:	f00c fc8d 	bl	800f068 <osDelay>
 800274e:	e7fb      	b.n	8002748 <vStateManagingTask+0x8>

08002750 <vReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vReceiveTask */
void vReceiveTask(void *argument)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002758:	2001      	movs	r0, #1
 800275a:	f00c fc85 	bl	800f068 <osDelay>
 800275e:	e7fb      	b.n	8002758 <vReceiveTask+0x8>

08002760 <vDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugTask */
void vDebugTask(void *argument)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugTask */
  /* Infinite loop */
	uint32_t event_flag;
	uint32_t buffer;
	uint16_t cmd = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef status;
	for (;;) {
		event_flag = osEventFlagsWait(USBEventHandle, RECEIVED_USB, osFlagsWaitAny, 1000);
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <vDebugTask+0x30>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002774:	2200      	movs	r2, #0
 8002776:	2101      	movs	r1, #1
 8002778:	f00c fdd4 	bl	800f324 <osEventFlagsWait>
 800277c:	60b8      	str	r0, [r7, #8]
		if (event_flag & RECEIVED_USB) {
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f1      	beq.n	800276c <vDebugTask+0xc>
			Buzzer_Once();
 8002788:	f000 ff2c 	bl	80035e4 <Buzzer_Once>
		event_flag = osEventFlagsWait(USBEventHandle, RECEIVED_USB, osFlagsWaitAny, 1000);
 800278c:	e7ee      	b.n	800276c <vDebugTask+0xc>
 800278e:	bf00      	nop
 8002790:	200003a8 	.word	0x200003a8

08002794 <vSensorReadingCallback>:
  /* USER CODE END vDebugTask */
}

/* vSensorReadingCallback function */
void vSensorReadingCallback(void *argument)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorReadingCallback */

  /* USER CODE END vSensorReadingCallback */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <vTransmitCallback>:

/* vTransmitCallback function */
void vTransmitCallback(void *argument)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTransmitCallback */

  /* USER CODE END vTransmitCallback */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a04      	ldr	r2, [pc, #16]	; (80027dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d101      	bne.n	80027d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80027ce:	f001 f831 	bl	8003834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40001000 	.word	0x40001000

080027e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error_Handler\r\n");
 80027e4:	4803      	ldr	r0, [pc, #12]	; (80027f4 <Error_Handler+0x14>)
 80027e6:	f012 f837 	bl	8014858 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ea:	b672      	cpsid	i
}
 80027ec:	bf00      	nop
  __disable_irq();

  while (1)
  {
	  break;
 80027ee:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 80027f0:	bf00      	nop
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	08016a60 	.word	0x08016a60

080027f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_MspInit+0x54>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	4a11      	ldr	r2, [pc, #68]	; (800284c <HAL_MspInit+0x54>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280c:	6453      	str	r3, [r2, #68]	; 0x44
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_MspInit+0x54>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_MspInit+0x54>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <HAL_MspInit+0x54>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_MspInit+0x54>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002836:	2200      	movs	r2, #0
 8002838:	210f      	movs	r1, #15
 800283a:	f06f 0001 	mvn.w	r0, #1
 800283e:	f001 fb67 	bl	8003f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002842:	bf00      	nop
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_ADC_MspInit+0x7c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d127      	bne.n	80028c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <HAL_ADC_MspInit+0x80>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_ADC_MspInit+0x80>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <HAL_ADC_MspInit+0x80>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_ADC_MspInit+0x80>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <HAL_ADC_MspInit+0x80>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_ADC_MspInit+0x80>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028aa:	2303      	movs	r3, #3
 80028ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ae:	2303      	movs	r3, #3
 80028b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	4619      	mov	r1, r3
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <HAL_ADC_MspInit+0x84>)
 80028be:	f001 fbe3 	bl	8004088 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40012000 	.word	0x40012000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
 80028ec:	60da      	str	r2, [r3, #12]
 80028ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_I2C_MspInit+0x84>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d12c      	bne.n	8002954 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_I2C_MspInit+0x88>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_I2C_MspInit+0x88>)
 8002904:	f043 0302 	orr.w	r3, r3, #2
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_I2C_MspInit+0x88>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800291a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291c:	2312      	movs	r3, #18
 800291e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	2303      	movs	r3, #3
 8002926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002928:	2304      	movs	r3, #4
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	4619      	mov	r1, r3
 8002932:	480c      	ldr	r0, [pc, #48]	; (8002964 <HAL_I2C_MspInit+0x8c>)
 8002934:	f001 fba8 	bl	8004088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_I2C_MspInit+0x88>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_I2C_MspInit+0x88>)
 8002942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002946:	6413      	str	r3, [r2, #64]	; 0x40
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_I2C_MspInit+0x88>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	; 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40005400 	.word	0x40005400
 8002960:	40023800 	.word	0x40023800
 8002964:	40020400 	.word	0x40020400

08002968 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b09a      	sub	sp, #104	; 0x68
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	225c      	movs	r2, #92	; 0x5c
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f011 f995 	bl	8013ca8 <memset>
  if(hrtc->Instance==RTC)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_RTC_MspInit+0x4c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002988:	2320      	movs	r3, #32
 800298a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800298c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002990:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4618      	mov	r0, r3
 8002998:	f004 fda0 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80029a2:	f7ff ff1d 	bl	80027e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_RTC_MspInit+0x50>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029ac:	bf00      	nop
 80029ae:	3768      	adds	r7, #104	; 0x68
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40002800 	.word	0x40002800
 80029b8:	42470e3c 	.word	0x42470e3c

080029bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_SPI_MspInit+0x84>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12c      	bne.n	8002a38 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_SPI_MspInit+0x88>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_SPI_MspInit+0x88>)
 80029e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_SPI_MspInit+0x88>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_SPI_MspInit+0x88>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_SPI_MspInit+0x88>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_SPI_MspInit+0x88>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002a16:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a28:	2305      	movs	r3, #5
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <HAL_SPI_MspInit+0x8c>)
 8002a34:	f001 fb28 	bl	8004088 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a38:	bf00      	nop
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40003800 	.word	0x40003800
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020400 	.word	0x40020400

08002a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_TIM_Base_MspInit+0x3c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_TIM_Base_MspInit+0x40>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_TIM_Base_MspInit+0x40>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_TIM_Base_MspInit+0x40>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_TIM_MspPostInit+0x68>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d11e      	bne.n	8002af0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_TIM_MspPostInit+0x6c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_TIM_MspPostInit+0x6c>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_TIM_MspPostInit+0x6c>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002ace:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002ad2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae4:	f107 030c 	add.w	r3, r7, #12
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <HAL_TIM_MspPostInit+0x70>)
 8002aec:	f001 facc 	bl	8004088 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002af0:	bf00      	nop
 8002af2:	3720      	adds	r7, #32
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020800 	.word	0x40020800

08002b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08e      	sub	sp, #56	; 0x38
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a4f      	ldr	r2, [pc, #316]	; (8002c60 <HAL_UART_MspInit+0x15c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d12c      	bne.n	8002b80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a4d      	ldr	r2, [pc, #308]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b30:	f043 0310 	orr.w	r3, r3, #16
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a46      	ldr	r2, [pc, #280]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b44      	ldr	r3, [pc, #272]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b5e:	23c0      	movs	r3, #192	; 0xc0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b6e:	2307      	movs	r3, #7
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b76:	4619      	mov	r1, r3
 8002b78:	483b      	ldr	r0, [pc, #236]	; (8002c68 <HAL_UART_MspInit+0x164>)
 8002b7a:	f001 fa85 	bl	8004088 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b7e:	e06b      	b.n	8002c58 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a39      	ldr	r2, [pc, #228]	; (8002c6c <HAL_UART_MspInit+0x168>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d12c      	bne.n	8002be4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a2d      	ldr	r2, [pc, #180]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b2b      	ldr	r3, [pc, #172]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bc2:	230c      	movs	r3, #12
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bd2:	2307      	movs	r3, #7
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4824      	ldr	r0, [pc, #144]	; (8002c70 <HAL_UART_MspInit+0x16c>)
 8002bde:	f001 fa53 	bl	8004088 <HAL_GPIO_Init>
}
 8002be2:	e039      	b.n	8002c58 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <HAL_UART_MspInit+0x170>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d134      	bne.n	8002c58 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_UART_MspInit+0x160>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <HAL_UART_MspInit+0x174>)
 8002c44:	f001 fa20 	bl	8004088 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2105      	movs	r1, #5
 8002c4c:	2027      	movs	r0, #39	; 0x27
 8002c4e:	f001 f95f 	bl	8003f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c52:	2027      	movs	r0, #39	; 0x27
 8002c54:	f001 f978 	bl	8003f48 <HAL_NVIC_EnableIRQ>
}
 8002c58:	bf00      	nop
 8002c5a:	3738      	adds	r7, #56	; 0x38
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40011000 	.word	0x40011000
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020400 	.word	0x40020400
 8002c6c:	40004400 	.word	0x40004400
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40004800 	.word	0x40004800
 8002c78:	40020800 	.word	0x40020800

08002c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08e      	sub	sp, #56	; 0x38
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	4b33      	ldr	r3, [pc, #204]	; (8002d60 <HAL_InitTick+0xe4>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a32      	ldr	r2, [pc, #200]	; (8002d60 <HAL_InitTick+0xe4>)
 8002c96:	f043 0310 	orr.w	r3, r3, #16
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9c:	4b30      	ldr	r3, [pc, #192]	; (8002d60 <HAL_InitTick+0xe4>)
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca8:	f107 0210 	add.w	r2, r7, #16
 8002cac:	f107 0314 	add.w	r3, r7, #20
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f004 fbe0 	bl	8007478 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002cc2:	f004 fbb1 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8002cc6:	6378      	str	r0, [r7, #52]	; 0x34
 8002cc8:	e004      	b.n	8002cd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002cca:	f004 fbad 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd6:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <HAL_InitTick+0xe8>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	0c9b      	lsrs	r3, r3, #18
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_InitTick+0xec>)
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <HAL_InitTick+0xf0>)
 8002ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ce8:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <HAL_InitTick+0xec>)
 8002cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_InitTick+0xec>)
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_InitTick+0xec>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_InitTick+0xec>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_InitTick+0xec>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002d08:	4817      	ldr	r0, [pc, #92]	; (8002d68 <HAL_InitTick+0xec>)
 8002d0a:	f005 fee0 	bl	8008ace <HAL_TIM_Base_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002d14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d11b      	bne.n	8002d54 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002d1c:	4812      	ldr	r0, [pc, #72]	; (8002d68 <HAL_InitTick+0xec>)
 8002d1e:	f005 ff25 	bl	8008b6c <HAL_TIM_Base_Start_IT>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d30:	2036      	movs	r0, #54	; 0x36
 8002d32:	f001 f909 	bl	8003f48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d808      	bhi.n	8002d4e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	2036      	movs	r0, #54	; 0x36
 8002d42:	f001 f8e5 	bl	8003f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_InitTick+0xf4>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	e002      	b.n	8002d54 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3738      	adds	r7, #56	; 0x38
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	200003d8 	.word	0x200003d8
 8002d6c:	40001000 	.word	0x40001000
 8002d70:	20000004 	.word	0x20000004

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d78:	e7fe      	b.n	8002d78 <NMI_Handler+0x4>
	...

08002d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  	loge("HardFault");
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <HardFault_Handler+0x10>)
 8002d82:	f7ff fb67 	bl	8002454 <loge>
  	break;
 8002d86:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8002d88:	bf00      	nop
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	08016a70 	.word	0x08016a70

08002d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <MemManage_Handler+0x4>

08002d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d9a:	e7fe      	b.n	8002d9a <BusFault_Handler+0x4>

08002d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da0:	e7fe      	b.n	8002da0 <UsageFault_Handler+0x4>

08002da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USART3_IRQHandler+0x10>)
 8002db6:	f006 ff61 	bl	8009c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000608 	.word	0x20000608

08002dc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <TIM6_DAC_IRQHandler+0x10>)
 8002dca:	f006 f8af 	bl	8008f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200003d8 	.word	0x200003d8

08002dd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ddc:	4802      	ldr	r0, [pc, #8]	; (8002de8 <OTG_FS_IRQHandler+0x10>)
 8002dde:	f003 f8bf 	bl	8005f60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200067e0 	.word	0x200067e0

08002dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return 1;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_kill>:

int _kill(int pid, int sig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e06:	f010 fe19 	bl	8013a3c <__errno>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2216      	movs	r2, #22
 8002e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <_exit>:

void _exit (int status)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ffe7 	bl	8002dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e2e:	e7fe      	b.n	8002e2e <_exit+0x12>

08002e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	e00a      	b.n	8002e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e42:	f3af 8000 	nop.w
 8002e46:	4601      	mov	r1, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	60ba      	str	r2, [r7, #8]
 8002e4e:	b2ca      	uxtb	r2, r1
 8002e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf0      	blt.n	8002e42 <_read+0x12>
  }

  return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e92:	605a      	str	r2, [r3, #4]
  return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_isatty>:

int _isatty(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f010 fd9a 	bl	8013a3c <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20020000 	.word	0x20020000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	20000420 	.word	0x20000420
 8002f3c:	20006f18 	.word	0x20006f18

08002f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <SystemInit+0x20>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <SystemInit+0x20>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000ed00 	.word	0xe000ed00

08002f64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f76:	4b29      	ldr	r3, [pc, #164]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f78:	4a29      	ldr	r2, [pc, #164]	; (8003020 <MX_ADC1_Init+0xbc>)
 8002f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f82:	4b26      	ldr	r3, [pc, #152]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f88:	4b24      	ldr	r3, [pc, #144]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8002f9c:	4b1f      	ldr	r3, [pc, #124]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <MX_ADC1_Init+0xb8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <MX_ADC1_Init+0xb8>)
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <MX_ADC1_Init+0xc0>)
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <MX_ADC1_Init+0xb8>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <MX_ADC1_Init+0xb8>)
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <MX_ADC1_Init+0xb8>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <MX_ADC1_Init+0xb8>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fc8:	4814      	ldr	r0, [pc, #80]	; (800301c <MX_ADC1_Init+0xb8>)
 8002fca:	f000 fc77 	bl	80038bc <HAL_ADC_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002fd4:	f7ff fc04 	bl	80027e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <MX_ADC1_Init+0xb8>)
 8002fea:	f000 fcab 	bl	8003944 <HAL_ADC_ConfigChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002ff4:	f7ff fbf4 	bl	80027e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003000:	463b      	mov	r3, r7
 8003002:	4619      	mov	r1, r3
 8003004:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_ADC1_Init+0xb8>)
 8003006:	f000 fc9d 	bl	8003944 <HAL_ADC_ConfigChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003010:	f7ff fbe6 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000424 	.word	0x20000424
 8003020:	40012000 	.word	0x40012000
 8003024:	0f000001 	.word	0x0f000001

08003028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b094      	sub	sp, #80	; 0x50
 800302c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800302e:	f107 031c 	add.w	r3, r7, #28
 8003032:	2234      	movs	r2, #52	; 0x34
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f010 fe36 	bl	8013ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800303c:	f107 0308 	add.w	r3, r7, #8
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	2300      	movs	r3, #0
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <SystemClock_Config+0xd4>)
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	4a29      	ldr	r2, [pc, #164]	; (80030fc <SystemClock_Config+0xd4>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800305a:	6413      	str	r3, [r2, #64]	; 0x40
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <SystemClock_Config+0xd4>)
 800305e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003068:	2300      	movs	r3, #0
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <SystemClock_Config+0xd8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <SystemClock_Config+0xd8>)
 8003076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <SystemClock_Config+0xd8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003088:	2305      	movs	r3, #5
 800308a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800308c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003090:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003092:	2301      	movs	r3, #1
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003096:	2302      	movs	r3, #2
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800309a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 80030a0:	2306      	movs	r3, #6
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80030a4:	2348      	movs	r3, #72	; 0x48
 80030a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030a8:	2302      	movs	r3, #2
 80030aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80030ac:	2303      	movs	r3, #3
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030b0:	2302      	movs	r3, #2
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b4:	f107 031c 	add.w	r3, r7, #28
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 fee3 	bl	8007e84 <HAL_RCC_OscConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80030c4:	f7ff fb8c 	bl	80027e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030c8:	230f      	movs	r3, #15
 80030ca:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030cc:	2302      	movs	r3, #2
 80030ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	2102      	movs	r1, #2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f004 f8ad 	bl	8007244 <HAL_RCC_ClockConfig>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80030f0:	f7ff fb76 	bl	80027e0 <Error_Handler>
  }
}
 80030f4:	bf00      	nop
 80030f6:	3750      	adds	r7, #80	; 0x50
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000

08003104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310a:	f107 0314 	add.w	r3, r7, #20
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	60da      	str	r2, [r3, #12]
 8003118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <MX_GPIO_Init+0x140>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	4a48      	ldr	r2, [pc, #288]	; (8003244 <MX_GPIO_Init+0x140>)
 8003124:	f043 0304 	orr.w	r3, r3, #4
 8003128:	6313      	str	r3, [r2, #48]	; 0x30
 800312a:	4b46      	ldr	r3, [pc, #280]	; (8003244 <MX_GPIO_Init+0x140>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b42      	ldr	r3, [pc, #264]	; (8003244 <MX_GPIO_Init+0x140>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	4a41      	ldr	r2, [pc, #260]	; (8003244 <MX_GPIO_Init+0x140>)
 8003140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003144:	6313      	str	r3, [r2, #48]	; 0x30
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <MX_GPIO_Init+0x140>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b3b      	ldr	r3, [pc, #236]	; (8003244 <MX_GPIO_Init+0x140>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a3a      	ldr	r2, [pc, #232]	; (8003244 <MX_GPIO_Init+0x140>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <MX_GPIO_Init+0x140>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <MX_GPIO_Init+0x140>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	4a33      	ldr	r2, [pc, #204]	; (8003244 <MX_GPIO_Init+0x140>)
 8003178:	f043 0302 	orr.w	r3, r3, #2
 800317c:	6313      	str	r3, [r2, #48]	; 0x30
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <MX_GPIO_Init+0x140>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|CM1_Pin|CM2_Pin, GPIO_PIN_RESET);
 800318a:	2200      	movs	r2, #0
 800318c:	210e      	movs	r1, #14
 800318e:	482e      	ldr	r0, [pc, #184]	; (8003248 <MX_GPIO_Init+0x144>)
 8003190:	f001 f90e 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|USB_IO_Pin, GPIO_PIN_RESET);
 8003194:	2200      	movs	r2, #0
 8003196:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800319a:	482c      	ldr	r0, [pc, #176]	; (800324c <MX_GPIO_Init+0x148>)
 800319c:	f001 f908 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80031a0:	2200      	movs	r2, #0
 80031a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031a6:	482a      	ldr	r0, [pc, #168]	; (8003250 <MX_GPIO_Init+0x14c>)
 80031a8:	f001 f902 	bl	80043b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80031ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80031b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80031bc:	f107 0314 	add.w	r3, r7, #20
 80031c0:	4619      	mov	r1, r3
 80031c2:	4821      	ldr	r0, [pc, #132]	; (8003248 <MX_GPIO_Init+0x144>)
 80031c4:	f000 ff60 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80031c8:	2302      	movs	r3, #2
 80031ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031cc:	2301      	movs	r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	2300      	movs	r3, #0
 80031d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	4619      	mov	r1, r3
 80031de:	481a      	ldr	r0, [pc, #104]	; (8003248 <MX_GPIO_Init+0x144>)
 80031e0:	f000 ff52 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : CM1_Pin CM2_Pin */
  GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin;
 80031e4:	230c      	movs	r3, #12
 80031e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e8:	2301      	movs	r3, #1
 80031ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f0:	2303      	movs	r3, #3
 80031f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f4:	f107 0314 	add.w	r3, r7, #20
 80031f8:	4619      	mov	r1, r3
 80031fa:	4813      	ldr	r0, [pc, #76]	; (8003248 <MX_GPIO_Init+0x144>)
 80031fc:	f000 ff44 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin USB_IO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|USB_IO_Pin;
 8003200:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320e:	2300      	movs	r3, #0
 8003210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	480c      	ldr	r0, [pc, #48]	; (800324c <MX_GPIO_Init+0x148>)
 800321a:	f000 ff35 	bl	8004088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800321e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003224:	2301      	movs	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4619      	mov	r1, r3
 8003236:	4806      	ldr	r0, [pc, #24]	; (8003250 <MX_GPIO_Init+0x14c>)
 8003238:	f000 ff26 	bl	8004088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800323c:	bf00      	nop
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	40020800 	.word	0x40020800
 800324c:	40020000 	.word	0x40020000
 8003250:	40020400 	.word	0x40020400

08003254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <MX_I2C1_Init+0x50>)
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <MX_I2C1_Init+0x54>)
 800325c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <MX_I2C1_Init+0x50>)
 8003260:	4a12      	ldr	r2, [pc, #72]	; (80032ac <MX_I2C1_Init+0x58>)
 8003262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <MX_I2C1_Init+0x50>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <MX_I2C1_Init+0x50>)
 800326c:	2200      	movs	r2, #0
 800326e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <MX_I2C1_Init+0x50>)
 8003272:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003276:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003278:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <MX_I2C1_Init+0x50>)
 800327a:	2200      	movs	r2, #0
 800327c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <MX_I2C1_Init+0x50>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <MX_I2C1_Init+0x50>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <MX_I2C1_Init+0x50>)
 800328c:	2200      	movs	r2, #0
 800328e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003290:	4804      	ldr	r0, [pc, #16]	; (80032a4 <MX_I2C1_Init+0x50>)
 8003292:	f001 f8c1 	bl	8004418 <HAL_I2C_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800329c:	f7ff faa0 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	2000046c 	.word	0x2000046c
 80032a8:	40005400 	.word	0x40005400
 80032ac:	00061a80 	.word	0x00061a80

080032b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80032c4:	2300      	movs	r3, #0
 80032c6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <MX_RTC_Init+0xac>)
 80032ca:	4a25      	ldr	r2, [pc, #148]	; (8003360 <MX_RTC_Init+0xb0>)
 80032cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <MX_RTC_Init+0xac>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <MX_RTC_Init+0xac>)
 80032d6:	227f      	movs	r2, #127	; 0x7f
 80032d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80032da:	4b20      	ldr	r3, [pc, #128]	; (800335c <MX_RTC_Init+0xac>)
 80032dc:	22ff      	movs	r2, #255	; 0xff
 80032de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032e0:	4b1e      	ldr	r3, [pc, #120]	; (800335c <MX_RTC_Init+0xac>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <MX_RTC_Init+0xac>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <MX_RTC_Init+0xac>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032f2:	481a      	ldr	r0, [pc, #104]	; (800335c <MX_RTC_Init+0xac>)
 80032f4:	f005 f864 	bl	80083c0 <HAL_RTC_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80032fe:	f7ff fa6f 	bl	80027e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003302:	2300      	movs	r3, #0
 8003304:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003306:	2300      	movs	r3, #0
 8003308:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800330a:	2300      	movs	r3, #0
 800330c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2201      	movs	r2, #1
 800331a:	4619      	mov	r1, r3
 800331c:	480f      	ldr	r0, [pc, #60]	; (800335c <MX_RTC_Init+0xac>)
 800331e:	f005 f8c5 	bl	80084ac <HAL_RTC_SetTime>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003328:	f7ff fa5a 	bl	80027e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800332c:	2301      	movs	r3, #1
 800332e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003330:	2301      	movs	r3, #1
 8003332:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003334:	2301      	movs	r3, #1
 8003336:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003338:	2300      	movs	r3, #0
 800333a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800333c:	463b      	mov	r3, r7
 800333e:	2201      	movs	r2, #1
 8003340:	4619      	mov	r1, r3
 8003342:	4806      	ldr	r0, [pc, #24]	; (800335c <MX_RTC_Init+0xac>)
 8003344:	f005 f9aa 	bl	800869c <HAL_RTC_SetDate>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800334e:	f7ff fa47 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200004c0 	.word	0x200004c0
 8003360:	40002800 	.word	0x40002800

08003364 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003368:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <MX_SPI2_Init+0x64>)
 800336a:	4a18      	ldr	r2, [pc, #96]	; (80033cc <MX_SPI2_Init+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <MX_SPI2_Init+0x64>)
 8003370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003374:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003376:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <MX_SPI2_Init+0x64>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <MX_SPI2_Init+0x64>)
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003382:	4b11      	ldr	r3, [pc, #68]	; (80033c8 <MX_SPI2_Init+0x64>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003388:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <MX_SPI2_Init+0x64>)
 800338a:	2200      	movs	r2, #0
 800338c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <MX_SPI2_Init+0x64>)
 8003390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003394:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003396:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <MX_SPI2_Init+0x64>)
 8003398:	2200      	movs	r2, #0
 800339a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <MX_SPI2_Init+0x64>)
 800339e:	2200      	movs	r2, #0
 80033a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80033a2:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <MX_SPI2_Init+0x64>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033a8:	4b07      	ldr	r3, [pc, #28]	; (80033c8 <MX_SPI2_Init+0x64>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <MX_SPI2_Init+0x64>)
 80033b0:	220a      	movs	r2, #10
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80033b4:	4804      	ldr	r0, [pc, #16]	; (80033c8 <MX_SPI2_Init+0x64>)
 80033b6:	f005 fb01 	bl	80089bc <HAL_SPI_Init>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80033c0:	f7ff fa0e 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200004e0 	.word	0x200004e0
 80033cc:	40003800 	.word	0x40003800

080033d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08e      	sub	sp, #56	; 0x38
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e4:	f107 0320 	add.w	r3, r7, #32
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	611a      	str	r2, [r3, #16]
 80033fc:	615a      	str	r2, [r3, #20]
 80033fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003400:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003402:	4a38      	ldr	r2, [pc, #224]	; (80034e4 <MX_TIM3_Init+0x114>)
 8003404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003408:	2247      	movs	r2, #71	; 0x47
 800340a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <MX_TIM3_Init+0x110>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003412:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003418:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341a:	4b31      	ldr	r3, [pc, #196]	; (80034e0 <MX_TIM3_Init+0x110>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003420:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003426:	482e      	ldr	r0, [pc, #184]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003428:	f005 fb51 	bl	8008ace <HAL_TIM_Base_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003432:	f7ff f9d5 	bl	80027e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800343c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003440:	4619      	mov	r1, r3
 8003442:	4827      	ldr	r0, [pc, #156]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003444:	f005 ff3c 	bl	80092c0 <HAL_TIM_ConfigClockSource>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800344e:	f7ff f9c7 	bl	80027e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003452:	4823      	ldr	r0, [pc, #140]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003454:	f005 fbfa 	bl	8008c4c <HAL_TIM_PWM_Init>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800345e:	f7ff f9bf 	bl	80027e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800346a:	f107 0320 	add.w	r3, r7, #32
 800346e:	4619      	mov	r1, r3
 8003470:	481b      	ldr	r0, [pc, #108]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003472:	f006 fb25 	bl	8009ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800347c:	f7ff f9b0 	bl	80027e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003480:	2360      	movs	r3, #96	; 0x60
 8003482:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003490:	1d3b      	adds	r3, r7, #4
 8003492:	2200      	movs	r2, #0
 8003494:	4619      	mov	r1, r3
 8003496:	4812      	ldr	r0, [pc, #72]	; (80034e0 <MX_TIM3_Init+0x110>)
 8003498:	f005 fe50 	bl	800913c <HAL_TIM_PWM_ConfigChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80034a2:	f7ff f99d 	bl	80027e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	2204      	movs	r2, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	480c      	ldr	r0, [pc, #48]	; (80034e0 <MX_TIM3_Init+0x110>)
 80034ae:	f005 fe45 	bl	800913c <HAL_TIM_PWM_ConfigChannel>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80034b8:	f7ff f992 	bl	80027e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034bc:	1d3b      	adds	r3, r7, #4
 80034be:	2208      	movs	r2, #8
 80034c0:	4619      	mov	r1, r3
 80034c2:	4807      	ldr	r0, [pc, #28]	; (80034e0 <MX_TIM3_Init+0x110>)
 80034c4:	f005 fe3a 	bl	800913c <HAL_TIM_PWM_ConfigChannel>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80034ce:	f7ff f987 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80034d2:	4803      	ldr	r0, [pc, #12]	; (80034e0 <MX_TIM3_Init+0x110>)
 80034d4:	f7ff fadc 	bl	8002a90 <HAL_TIM_MspPostInit>

}
 80034d8:	bf00      	nop
 80034da:	3738      	adds	r7, #56	; 0x38
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000538 	.word	0x20000538
 80034e4:	40000400 	.word	0x40000400

080034e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <MX_USART1_UART_Init+0x50>)
 80034f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 80034f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 800350e:	220c      	movs	r2, #12
 8003510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <MX_USART1_UART_Init+0x4c>)
 8003520:	f006 fb5e 	bl	8009be0 <HAL_UART_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800352a:	f7ff f959 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20000580 	.word	0x20000580
 8003538:	40011000 	.word	0x40011000

0800353c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003542:	4a12      	ldr	r2, [pc, #72]	; (800358c <MX_USART2_UART_Init+0x50>)
 8003544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800354c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003556:	2200      	movs	r2, #0
 8003558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003562:	220c      	movs	r2, #12
 8003564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <MX_USART2_UART_Init+0x4c>)
 8003574:	f006 fb34 	bl	8009be0 <HAL_UART_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800357e:	f7ff f92f 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200005c4 	.word	0x200005c4
 800358c:	40004400 	.word	0x40004400

08003590 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 8003596:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <MX_USART3_UART_Init+0x50>)
 8003598:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800359a:	4b10      	ldr	r3, [pc, #64]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 800359c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035ae:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 80035b6:	220c      	movs	r2, #12
 80035b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80035c6:	4805      	ldr	r0, [pc, #20]	; (80035dc <MX_USART3_UART_Init+0x4c>)
 80035c8:	f006 fb0a 	bl	8009be0 <HAL_UART_Init>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80035d2:	f7ff f905 	bl	80027e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80035d6:	bf00      	nop
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000608 	.word	0x20000608
 80035e0:	40004800 	.word	0x40004800

080035e4 <Buzzer_Once>:
#ifndef SRC_MODULE_BUZZER_C_
#define SRC_MODULE_BUZZER_C_

#include "module/buzzer.h"

void Buzzer_Once() {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80035e8:	2201      	movs	r2, #1
 80035ea:	2102      	movs	r1, #2
 80035ec:	4806      	ldr	r0, [pc, #24]	; (8003608 <Buzzer_Once+0x24>)
 80035ee:	f000 fedf 	bl	80043b0 <HAL_GPIO_WritePin>
	osDelay(100);
 80035f2:	2064      	movs	r0, #100	; 0x64
 80035f4:	f00b fd38 	bl	800f068 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80035f8:	2200      	movs	r2, #0
 80035fa:	2102      	movs	r1, #2
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <Buzzer_Once+0x24>)
 80035fe:	f000 fed7 	bl	80043b0 <HAL_GPIO_WritePin>
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40020800 	.word	0x40020800

0800360c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800360c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003644 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003610:	480d      	ldr	r0, [pc, #52]	; (8003648 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003612:	490e      	ldr	r1, [pc, #56]	; (800364c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003614:	4a0e      	ldr	r2, [pc, #56]	; (8003650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003618:	e002      	b.n	8003620 <LoopCopyDataInit>

0800361a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800361c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800361e:	3304      	adds	r3, #4

08003620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003624:	d3f9      	bcc.n	800361a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003626:	4a0b      	ldr	r2, [pc, #44]	; (8003654 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003628:	4c0b      	ldr	r4, [pc, #44]	; (8003658 <LoopFillZerobss+0x26>)
  movs r3, #0
 800362a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800362c:	e001      	b.n	8003632 <LoopFillZerobss>

0800362e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800362e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003630:	3204      	adds	r2, #4

08003632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003634:	d3fb      	bcc.n	800362e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003636:	f7ff fc83 	bl	8002f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363a:	f010 fafb 	bl	8013c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800363e:	f7fe ff1f 	bl	8002480 <main>
  bx  lr    
 8003642:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800364c:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8003650:	08016ff4 	.word	0x08016ff4
  ldr r2, =_sbss
 8003654:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8003658:	20006f18 	.word	0x20006f18

0800365c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800365c:	e7fe      	b.n	800365c <ADC_IRQHandler>

0800365e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800366c:	b672      	cpsid	i
}
 800366e:	bf00      	nop
 8003670:	f7ff f8b6 	bl	80027e0 <Error_Handler>
 8003674:	e7fe      	b.n	8003674 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	e007      	b.n	800368c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	2100      	movs	r1, #0
 8003682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3301      	adds	r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d9f4      	bls.n	800367c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	721a      	strb	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80036ae:	b672      	cpsid	i
}
 80036b0:	bf00      	nop
 80036b2:	f7ff f895 	bl	80027e0 <Error_Handler>
 80036b6:	e7fe      	b.n	80036b6 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7a1b      	ldrb	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d904      	bls.n	80036ca <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80036c0:	b672      	cpsid	i
}
 80036c2:	bf00      	nop
 80036c4:	f7ff f88c 	bl	80027e0 <Error_Handler>
 80036c8:	e7fe      	b.n	80036c8 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7a1b      	ldrb	r3, [r3, #8]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	b2d1      	uxtb	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	7211      	strb	r1, [r2, #8]
 80036d6:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036d8:	f3ef 8211 	mrs	r2, BASEPRI
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	60fa      	str	r2, [r7, #12]
 80036ee:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80036f8:	bf00      	nop
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800370e:	b672      	cpsid	i
}
 8003710:	bf00      	nop
 8003712:	f7ff f865 	bl	80027e0 <Error_Handler>
 8003716:	e7fe      	b.n	8003716 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7a1b      	ldrb	r3, [r3, #8]
 800371c:	3b01      	subs	r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	7a1b      	ldrb	r3, [r3, #8]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d904      	bls.n	8003736 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800372c:	b672      	cpsid	i
}
 800372e:	bf00      	nop
 8003730:	f7ff f856 	bl	80027e0 <Error_Handler>
 8003734:	e7fe      	b.n	8003734 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7a1b      	ldrb	r3, [r3, #8]
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003742:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800374a:	bf00      	nop
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8003762:	f010 f96b 	bl	8013a3c <__errno>
 8003766:	4603      	mov	r3, r0
 8003768:	2216      	movs	r2, #22
 800376a:	601a      	str	r2, [r3, #0]
    return;
 800376c:	e015      	b.n	800379a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800376e:	200c      	movs	r0, #12
 8003770:	f010 fa84 	bl	8013c7c <malloc>
 8003774:	4603      	mov	r3, r0
 8003776:	461a      	mov	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff68 	bl	800365e <stm32_lock_init>
    return;
 800378e:	e004      	b.n	800379a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8003790:	b672      	cpsid	i
}
 8003792:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8003794:	f7ff f824 	bl	80027e0 <Error_Handler>
 8003798:	e7fe      	b.n	8003798 <__retarget_lock_init_recursive+0x44>
}
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80037ae:	b672      	cpsid	i
}
 80037b0:	bf00      	nop
 80037b2:	f7ff f815 	bl	80027e0 <Error_Handler>
 80037b6:	e7fe      	b.n	80037b6 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff70 	bl	80036a0 <stm32_lock_acquire>
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80037d6:	b672      	cpsid	i
}
 80037d8:	bf00      	nop
 80037da:	f7ff f801 	bl	80027e0 <Error_Handler>
 80037de:	e7fe      	b.n	80037de <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff8c 	bl	8003700 <stm32_lock_release>
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_Init+0x40>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <HAL_Init+0x40>)
 80037fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_Init+0x40>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <HAL_Init+0x40>)
 8003806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800380a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <HAL_Init+0x40>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a07      	ldr	r2, [pc, #28]	; (8003830 <HAL_Init+0x40>)
 8003812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003818:	2003      	movs	r0, #3
 800381a:	f000 fb6e 	bl	8003efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800381e:	200f      	movs	r0, #15
 8003820:	f7ff fa2c 	bl	8002c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003824:	f7fe ffe8 	bl	80027f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023c00 	.word	0x40023c00

08003834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_IncTick+0x20>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_IncTick+0x24>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4413      	add	r3, r2
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_IncTick+0x24>)
 8003846:	6013      	str	r3, [r2, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	20000008 	.word	0x20000008
 8003858:	20000670 	.word	0x20000670

0800385c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return uwTick;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_GetTick+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000670 	.word	0x20000670

08003874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff ffee 	bl	800385c <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d005      	beq.n	800389a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_Delay+0x44>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800389a:	bf00      	nop
 800389c:	f7ff ffde 	bl	800385c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d8f7      	bhi.n	800389c <HAL_Delay+0x28>
  {
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000008 	.word	0x20000008

080038bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e033      	b.n	800393a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fe ffb8 	bl	8002850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d118      	bne.n	800392c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003902:	f023 0302 	bic.w	r3, r3, #2
 8003906:	f043 0202 	orr.w	r2, r3, #2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f94a 	bl	8003ba8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
 800392a:	e001      	b.n	8003930 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x1c>
 800395c:	2302      	movs	r3, #2
 800395e:	e113      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x244>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b09      	cmp	r3, #9
 800396e:	d925      	bls.n	80039bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68d9      	ldr	r1, [r3, #12]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	3b1e      	subs	r3, #30
 8003986:	2207      	movs	r2, #7
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	43da      	mvns	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	400a      	ands	r2, r1
 8003994:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68d9      	ldr	r1, [r3, #12]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4618      	mov	r0, r3
 80039a8:	4603      	mov	r3, r0
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4403      	add	r3, r0
 80039ae:	3b1e      	subs	r3, #30
 80039b0:	409a      	lsls	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	e022      	b.n	8003a02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6919      	ldr	r1, [r3, #16]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	4613      	mov	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4413      	add	r3, r2
 80039d0:	2207      	movs	r2, #7
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	400a      	ands	r2, r1
 80039de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6919      	ldr	r1, [r3, #16]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4618      	mov	r0, r3
 80039f2:	4603      	mov	r3, r0
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4403      	add	r3, r0
 80039f8:	409a      	lsls	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d824      	bhi.n	8003a54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	3b05      	subs	r3, #5
 8003a1c:	221f      	movs	r2, #31
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	400a      	ands	r2, r1
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	3b05      	subs	r3, #5
 8003a46:	fa00 f203 	lsl.w	r2, r0, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	635a      	str	r2, [r3, #52]	; 0x34
 8003a52:	e04c      	b.n	8003aee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b0c      	cmp	r3, #12
 8003a5a:	d824      	bhi.n	8003aa6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3b23      	subs	r3, #35	; 0x23
 8003a6e:	221f      	movs	r2, #31
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43da      	mvns	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	3b23      	subs	r3, #35	; 0x23
 8003a98:	fa00 f203 	lsl.w	r2, r0, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa4:	e023      	b.n	8003aee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b41      	subs	r3, #65	; 0x41
 8003ab8:	221f      	movs	r2, #31
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	3b41      	subs	r3, #65	; 0x41
 8003ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aee:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <HAL_ADC_ConfigChannel+0x250>)
 8003af0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_ADC_ConfigChannel+0x254>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10f      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x1d8>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b12      	cmp	r3, #18
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_ADC_ConfigChannel+0x254>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12b      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x23a>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <HAL_ADC_ConfigChannel+0x258>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <HAL_ADC_ConfigChannel+0x1f4>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b11      	cmp	r3, #17
 8003b36:	d122      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <HAL_ADC_ConfigChannel+0x258>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d111      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_ADC_ConfigChannel+0x25c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <HAL_ADC_ConfigChannel+0x260>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	0c9a      	lsrs	r2, r3, #18
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b70:	e002      	b.n	8003b78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f9      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40012300 	.word	0x40012300
 8003b98:	40012000 	.word	0x40012000
 8003b9c:	10000012 	.word	0x10000012
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	431bde83 	.word	0x431bde83

08003ba8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <ADC_Init+0x1f0>)
 8003bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	021a      	lsls	r2, r3, #8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6899      	ldr	r1, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <ADC_Init+0x1f4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d022      	beq.n	8003c86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	e00f      	b.n	8003ca6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ca4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0202 	bic.w	r2, r2, #2
 8003cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6899      	ldr	r1, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7e1b      	ldrb	r3, [r3, #24]
 8003cc0:	005a      	lsls	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	035a      	lsls	r2, r3, #13
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	e007      	b.n	8003d1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	051a      	lsls	r2, r3, #20
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d5e:	025a      	lsls	r2, r3, #9
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	029a      	lsls	r2, r3, #10
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40012300 	.word	0x40012300
 8003d9c:	0f000001 	.word	0x0f000001

08003da0 <__NVIC_SetPriorityGrouping>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	; (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	; (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	; 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff4c 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f22:	f7ff ff61 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	6978      	ldr	r0, [r7, #20]
 8003f2e:	f7ff ffb1 	bl	8003e94 <NVIC_EncodePriority>
 8003f32:	4602      	mov	r2, r0
 8003f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff80 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f40:	bf00      	nop
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ff54 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f72:	f7ff fc73 	bl	800385c <HAL_GetTick>
 8003f76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d008      	beq.n	8003f96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2280      	movs	r2, #128	; 0x80
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e052      	b.n	800403c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0216 	bic.w	r2, r2, #22
 8003fa4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_DMA_Abort+0x62>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0208 	bic.w	r2, r2, #8
 8003fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe6:	e013      	b.n	8004010 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fe8:	f7ff fc38 	bl	800385c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d90c      	bls.n	8004010 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2203      	movs	r2, #3
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e015      	b.n	800403c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e4      	bne.n	8003fe8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	223f      	movs	r2, #63	; 0x3f
 8004024:	409a      	lsls	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e00c      	b.n	800407c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2205      	movs	r2, #5
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0201 	bic.w	r2, r2, #1
 8004078:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	; 0x24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	e165      	b.n	8004370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040a4:	2201      	movs	r2, #1
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4013      	ands	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	429a      	cmp	r2, r3
 80040be:	f040 8154 	bne.w	800436a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d005      	beq.n	80040da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d130      	bne.n	800413c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004110:	2201      	movs	r2, #1
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	fa02 f303 	lsl.w	r3, r2, r3
 8004118:	43db      	mvns	r3, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 0201 	and.w	r2, r3, #1
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b03      	cmp	r3, #3
 8004146:	d017      	beq.n	8004178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	2203      	movs	r2, #3
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d123      	bne.n	80041cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	08da      	lsrs	r2, r3, #3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3208      	adds	r2, #8
 800418c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	220f      	movs	r2, #15
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4013      	ands	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	08da      	lsrs	r2, r3, #3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3208      	adds	r2, #8
 80041c6:	69b9      	ldr	r1, [r7, #24]
 80041c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	2203      	movs	r2, #3
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 0203 	and.w	r2, r3, #3
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80ae 	beq.w	800436a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_GPIO_Init+0x300>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	4a5c      	ldr	r2, [pc, #368]	; (8004388 <HAL_GPIO_Init+0x300>)
 8004218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800421c:	6453      	str	r3, [r2, #68]	; 0x44
 800421e:	4b5a      	ldr	r3, [pc, #360]	; (8004388 <HAL_GPIO_Init+0x300>)
 8004220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800422a:	4a58      	ldr	r2, [pc, #352]	; (800438c <HAL_GPIO_Init+0x304>)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	089b      	lsrs	r3, r3, #2
 8004230:	3302      	adds	r3, #2
 8004232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	220f      	movs	r2, #15
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43db      	mvns	r3, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4013      	ands	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4f      	ldr	r2, [pc, #316]	; (8004390 <HAL_GPIO_Init+0x308>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d025      	beq.n	80042a2 <HAL_GPIO_Init+0x21a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a4e      	ldr	r2, [pc, #312]	; (8004394 <HAL_GPIO_Init+0x30c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <HAL_GPIO_Init+0x216>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a4d      	ldr	r2, [pc, #308]	; (8004398 <HAL_GPIO_Init+0x310>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d019      	beq.n	800429a <HAL_GPIO_Init+0x212>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4c      	ldr	r2, [pc, #304]	; (800439c <HAL_GPIO_Init+0x314>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <HAL_GPIO_Init+0x20e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4b      	ldr	r2, [pc, #300]	; (80043a0 <HAL_GPIO_Init+0x318>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00d      	beq.n	8004292 <HAL_GPIO_Init+0x20a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4a      	ldr	r2, [pc, #296]	; (80043a4 <HAL_GPIO_Init+0x31c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d007      	beq.n	800428e <HAL_GPIO_Init+0x206>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a49      	ldr	r2, [pc, #292]	; (80043a8 <HAL_GPIO_Init+0x320>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <HAL_GPIO_Init+0x202>
 8004286:	2306      	movs	r3, #6
 8004288:	e00c      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800428a:	2307      	movs	r3, #7
 800428c:	e00a      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800428e:	2305      	movs	r3, #5
 8004290:	e008      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 8004292:	2304      	movs	r3, #4
 8004294:	e006      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 8004296:	2303      	movs	r3, #3
 8004298:	e004      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800429a:	2302      	movs	r3, #2
 800429c:	e002      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_GPIO_Init+0x21c>
 80042a2:	2300      	movs	r3, #0
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f002 0203 	and.w	r2, r2, #3
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	4093      	lsls	r3, r2
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b4:	4935      	ldr	r1, [pc, #212]	; (800438c <HAL_GPIO_Init+0x304>)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	3302      	adds	r3, #2
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042c2:	4b3a      	ldr	r3, [pc, #232]	; (80043ac <HAL_GPIO_Init+0x324>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	4013      	ands	r3, r2
 80042d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042e6:	4a31      	ldr	r2, [pc, #196]	; (80043ac <HAL_GPIO_Init+0x324>)
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042ec:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_GPIO_Init+0x324>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004316:	4b25      	ldr	r3, [pc, #148]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800433a:	4a1c      	ldr	r2, [pc, #112]	; (80043ac <HAL_GPIO_Init+0x324>)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004364:	4a11      	ldr	r2, [pc, #68]	; (80043ac <HAL_GPIO_Init+0x324>)
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3301      	adds	r3, #1
 800436e:	61fb      	str	r3, [r7, #28]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2b0f      	cmp	r3, #15
 8004374:	f67f ae96 	bls.w	80040a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004378:	bf00      	nop
 800437a:	bf00      	nop
 800437c:	3724      	adds	r7, #36	; 0x24
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	40013800 	.word	0x40013800
 8004390:	40020000 	.word	0x40020000
 8004394:	40020400 	.word	0x40020400
 8004398:	40020800 	.word	0x40020800
 800439c:	40020c00 	.word	0x40020c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40021400 	.word	0x40021400
 80043a8:	40021800 	.word	0x40021800
 80043ac:	40013c00 	.word	0x40013c00

080043b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	807b      	strh	r3, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043c0:	787b      	ldrb	r3, [r7, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043cc:	e003      	b.n	80043d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ce:	887b      	ldrh	r3, [r7, #2]
 80043d0:	041a      	lsls	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	619a      	str	r2, [r3, #24]
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043f4:	887a      	ldrh	r2, [r7, #2]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4013      	ands	r3, r2
 80043fa:	041a      	lsls	r2, r3, #16
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	43d9      	mvns	r1, r3
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	400b      	ands	r3, r1
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	619a      	str	r2, [r3, #24]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e12b      	b.n	8004682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fe fa4a 	bl	80028d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800447a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800447c:	f002 ffd4 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 8004480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4a81      	ldr	r2, [pc, #516]	; (800468c <HAL_I2C_Init+0x274>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d807      	bhi.n	800449c <HAL_I2C_Init+0x84>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4a80      	ldr	r2, [pc, #512]	; (8004690 <HAL_I2C_Init+0x278>)
 8004490:	4293      	cmp	r3, r2
 8004492:	bf94      	ite	ls
 8004494:	2301      	movls	r3, #1
 8004496:	2300      	movhi	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e006      	b.n	80044aa <HAL_I2C_Init+0x92>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a7d      	ldr	r2, [pc, #500]	; (8004694 <HAL_I2C_Init+0x27c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	bf94      	ite	ls
 80044a4:	2301      	movls	r3, #1
 80044a6:	2300      	movhi	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0e7      	b.n	8004682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a78      	ldr	r2, [pc, #480]	; (8004698 <HAL_I2C_Init+0x280>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	0c9b      	lsrs	r3, r3, #18
 80044bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a6a      	ldr	r2, [pc, #424]	; (800468c <HAL_I2C_Init+0x274>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d802      	bhi.n	80044ec <HAL_I2C_Init+0xd4>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3301      	adds	r3, #1
 80044ea:	e009      	b.n	8004500 <HAL_I2C_Init+0xe8>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	4a69      	ldr	r2, [pc, #420]	; (800469c <HAL_I2C_Init+0x284>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	099b      	lsrs	r3, r3, #6
 80044fe:	3301      	adds	r3, #1
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	430b      	orrs	r3, r1
 8004506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004512:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	495c      	ldr	r1, [pc, #368]	; (800468c <HAL_I2C_Init+0x274>)
 800451c:	428b      	cmp	r3, r1
 800451e:	d819      	bhi.n	8004554 <HAL_I2C_Init+0x13c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1e59      	subs	r1, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fbb1 f3f3 	udiv	r3, r1, r3
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004534:	400b      	ands	r3, r1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_I2C_Init+0x138>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e59      	subs	r1, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fbb1 f3f3 	udiv	r3, r1, r3
 8004548:	3301      	adds	r3, #1
 800454a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454e:	e051      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 8004550:	2304      	movs	r3, #4
 8004552:	e04f      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d111      	bne.n	8004580 <HAL_I2C_Init+0x168>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e58      	subs	r0, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	440b      	add	r3, r1
 800456a:	fbb0 f3f3 	udiv	r3, r0, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e012      	b.n	80045a6 <HAL_I2C_Init+0x18e>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e58      	subs	r0, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	0099      	lsls	r1, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	fbb0 f3f3 	udiv	r3, r0, r3
 8004596:	3301      	adds	r3, #1
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Init+0x196>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e022      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10e      	bne.n	80045d4 <HAL_I2C_Init+0x1bc>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1e58      	subs	r0, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	440b      	add	r3, r1
 80045c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d2:	e00f      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1e58      	subs	r0, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	0099      	lsls	r1, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ea:	3301      	adds	r3, #1
 80045ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	6809      	ldr	r1, [r1, #0]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6911      	ldr	r1, [r2, #16]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	4311      	orrs	r1, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	430b      	orrs	r3, r1
 8004636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	000186a0 	.word	0x000186a0
 8004690:	001e847f 	.word	0x001e847f
 8004694:	003d08ff 	.word	0x003d08ff
 8004698:	431bde83 	.word	0x431bde83
 800469c:	10624dd3 	.word	0x10624dd3

080046a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	607a      	str	r2, [r7, #4]
 80046aa:	461a      	mov	r2, r3
 80046ac:	460b      	mov	r3, r1
 80046ae:	817b      	strh	r3, [r7, #10]
 80046b0:	4613      	mov	r3, r2
 80046b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046b4:	f7ff f8d2 	bl	800385c <HAL_GetTick>
 80046b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	f040 80e0 	bne.w	8004888 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	2319      	movs	r3, #25
 80046ce:	2201      	movs	r2, #1
 80046d0:	4970      	ldr	r1, [pc, #448]	; (8004894 <HAL_I2C_Master_Transmit+0x1f4>)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f001 f910 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80046de:	2302      	movs	r3, #2
 80046e0:	e0d3      	b.n	800488a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_I2C_Master_Transmit+0x50>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e0cc      	b.n	800488a <HAL_I2C_Master_Transmit+0x1ea>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d007      	beq.n	8004716 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0201 	orr.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004724:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2221      	movs	r2, #33	; 0x21
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2210      	movs	r2, #16
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	893a      	ldrh	r2, [r7, #8]
 8004746:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a50      	ldr	r2, [pc, #320]	; (8004898 <HAL_I2C_Master_Transmit+0x1f8>)
 8004756:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004758:	8979      	ldrh	r1, [r7, #10]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fdfc 	bl	800535c <I2C_MasterRequestWrite>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e08d      	b.n	800488a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004784:	e066      	b.n	8004854 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	6a39      	ldr	r1, [r7, #32]
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f001 f98a 	bl	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00d      	beq.n	80047b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	2b04      	cmp	r3, #4
 800479c:	d107      	bne.n	80047ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e06b      	b.n	800488a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	781a      	ldrb	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d11b      	bne.n	8004828 <HAL_I2C_Master_Transmit+0x188>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d017      	beq.n	8004828 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	781a      	ldrb	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	6a39      	ldr	r1, [r7, #32]
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f001 f97a 	bl	8005b26 <I2C_WaitOnBTFFlagUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	2b04      	cmp	r3, #4
 800483e:	d107      	bne.n	8004850 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800484e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e01a      	b.n	800488a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004858:	2b00      	cmp	r3, #0
 800485a:	d194      	bne.n	8004786 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004884:	2300      	movs	r3, #0
 8004886:	e000      	b.n	800488a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004888:	2302      	movs	r3, #2
  }
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	00100002 	.word	0x00100002
 8004898:	ffff0000 	.word	0xffff0000

0800489c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08c      	sub	sp, #48	; 0x30
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	461a      	mov	r2, r3
 80048a8:	460b      	mov	r3, r1
 80048aa:	817b      	strh	r3, [r7, #10]
 80048ac:	4613      	mov	r3, r2
 80048ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048b0:	f7fe ffd4 	bl	800385c <HAL_GetTick>
 80048b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b20      	cmp	r3, #32
 80048c0:	f040 820b 	bne.w	8004cda <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2319      	movs	r3, #25
 80048ca:	2201      	movs	r2, #1
 80048cc:	497c      	ldr	r1, [pc, #496]	; (8004ac0 <HAL_I2C_Master_Receive+0x224>)
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f001 f812 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
 80048dc:	e1fe      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_I2C_Master_Receive+0x50>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e1f7      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d007      	beq.n	8004912 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004920:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2222      	movs	r2, #34	; 0x22
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2210      	movs	r2, #16
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	893a      	ldrh	r2, [r7, #8]
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a5c      	ldr	r2, [pc, #368]	; (8004ac4 <HAL_I2C_Master_Receive+0x228>)
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004954:	8979      	ldrh	r1, [r7, #10]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fd80 	bl	8005460 <I2C_MasterRequestRead>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e1b8      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496e:	2b00      	cmp	r3, #0
 8004970:	d113      	bne.n	800499a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004972:	2300      	movs	r3, #0
 8004974:	623b      	str	r3, [r7, #32]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	623b      	str	r3, [r7, #32]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	623b      	str	r3, [r7, #32]
 8004986:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004996:	601a      	str	r2, [r3, #0]
 8004998:	e18c      	b.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d11b      	bne.n	80049da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	61fb      	str	r3, [r7, #28]
 80049c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e16c      	b.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d11b      	bne.n	8004a1a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	e14c      	b.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a40:	e138      	b.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	f200 80f1 	bhi.w	8004c2e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d123      	bne.n	8004a9c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f001 f8a5 	bl	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e139      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691a      	ldr	r2, [r3, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a9a:	e10b      	b.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d14e      	bne.n	8004b42 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	2200      	movs	r2, #0
 8004aac:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <HAL_I2C_Master_Receive+0x22c>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 ff22 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e10e      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
 8004abe:	bf00      	nop
 8004ac0:	00100002 	.word	0x00100002
 8004ac4:	ffff0000 	.word	0xffff0000
 8004ac8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b40:	e0b8      	b.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	2200      	movs	r2, #0
 8004b4a:	4966      	ldr	r1, [pc, #408]	; (8004ce4 <HAL_I2C_Master_Receive+0x448>)
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fed3 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0bf      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	494f      	ldr	r1, [pc, #316]	; (8004ce4 <HAL_I2C_Master_Receive+0x448>)
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fea5 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e091      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	b2d2      	uxtb	r2, r2
 8004bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	b2d2      	uxtb	r2, r2
 8004c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c2c:	e042      	b.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 ffb8 	bl	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e04c      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d118      	bne.n	8004cb4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f47f aec2 	bne.w	8004a42 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	e000      	b.n	8004cdc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
  }
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3728      	adds	r7, #40	; 0x28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	00010004 	.word	0x00010004

08004ce8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d02:	f7fe fdab 	bl	800385c <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	f040 80d9 	bne.w	8004ec8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	2319      	movs	r3, #25
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	496d      	ldr	r1, [pc, #436]	; (8004ed4 <HAL_I2C_Mem_Write+0x1ec>)
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 fde9 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e0cc      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_I2C_Mem_Write+0x56>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e0c5      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d007      	beq.n	8004d64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2221      	movs	r2, #33	; 0x21
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2240      	movs	r2, #64	; 0x40
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a3a      	ldr	r2, [r7, #32]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a4d      	ldr	r2, [pc, #308]	; (8004ed8 <HAL_I2C_Mem_Write+0x1f0>)
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004da6:	88f8      	ldrh	r0, [r7, #6]
 8004da8:	893a      	ldrh	r2, [r7, #8]
 8004daa:	8979      	ldrh	r1, [r7, #10]
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	4603      	mov	r3, r0
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fc20 	bl	80055fc <I2C_RequestMemoryWrite>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d052      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e081      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fe6a 	bl	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00d      	beq.n	8004df2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d107      	bne.n	8004dee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e06b      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	781a      	ldrb	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d11b      	bne.n	8004e68 <HAL_I2C_Mem_Write+0x180>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d017      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	781a      	ldrb	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1aa      	bne.n	8004dc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fe56 	bl	8005b26 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d107      	bne.n	8004e98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e016      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ec8:	2302      	movs	r3, #2
  }
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	00100002 	.word	0x00100002
 8004ed8:	ffff0000 	.word	0xffff0000

08004edc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	4608      	mov	r0, r1
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	817b      	strh	r3, [r7, #10]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	813b      	strh	r3, [r7, #8]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ef6:	f7fe fcb1 	bl	800385c <HAL_GetTick>
 8004efa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	f040 8208 	bne.w	800531a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	2319      	movs	r3, #25
 8004f10:	2201      	movs	r2, #1
 8004f12:	497b      	ldr	r1, [pc, #492]	; (8005100 <HAL_I2C_Mem_Read+0x224>)
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 fcef 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f20:	2302      	movs	r3, #2
 8004f22:	e1fb      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_I2C_Mem_Read+0x56>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e1f4      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d007      	beq.n	8004f58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2222      	movs	r2, #34	; 0x22
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2240      	movs	r2, #64	; 0x40
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a5b      	ldr	r2, [pc, #364]	; (8005104 <HAL_I2C_Mem_Read+0x228>)
 8004f98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f9a:	88f8      	ldrh	r0, [r7, #6]
 8004f9c:	893a      	ldrh	r2, [r7, #8]
 8004f9e:	8979      	ldrh	r1, [r7, #10]
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	9301      	str	r3, [sp, #4]
 8004fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	4603      	mov	r3, r0
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fbbc 	bl	8005728 <I2C_RequestMemoryRead>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e1b0      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d113      	bne.n	8004fea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	623b      	str	r3, [r7, #32]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	623b      	str	r3, [r7, #32]
 8004fd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	e184      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d11b      	bne.n	800502a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e164      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	2b02      	cmp	r3, #2
 8005030:	d11b      	bne.n	800506a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005040:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	e144      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	617b      	str	r3, [r7, #20]
 800507e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005080:	e138      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005086:	2b03      	cmp	r3, #3
 8005088:	f200 80f1 	bhi.w	800526e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	2b01      	cmp	r3, #1
 8005092:	d123      	bne.n	80050dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fd85 	bl	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e139      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050da:	e10b      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d14e      	bne.n	8005182 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	2200      	movs	r2, #0
 80050ec:	4906      	ldr	r1, [pc, #24]	; (8005108 <HAL_I2C_Mem_Read+0x22c>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fc02 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e10e      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
 80050fe:	bf00      	nop
 8005100:	00100002 	.word	0x00100002
 8005104:	ffff0000 	.word	0xffff0000
 8005108:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005180:	e0b8      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2200      	movs	r2, #0
 800518a:	4966      	ldr	r1, [pc, #408]	; (8005324 <HAL_I2C_Mem_Read+0x448>)
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fbb3 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0bf      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2200      	movs	r2, #0
 80051e6:	494f      	ldr	r1, [pc, #316]	; (8005324 <HAL_I2C_Mem_Read+0x448>)
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fb85 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e091      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005206:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800526c:	e042      	b.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fc98 	bl	8005ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e04c      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d118      	bne.n	80052f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f aec2 	bne.w	8005082 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	; 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	00010004 	.word	0x00010004

08005328 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	460b      	mov	r3, r1
 800536a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d006      	beq.n	8005386 <I2C_MasterRequestWrite+0x2a>
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d003      	beq.n	8005386 <I2C_MasterRequestWrite+0x2a>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005384:	d108      	bne.n	8005398 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	e00b      	b.n	80053b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b12      	cmp	r3, #18
 800539e:	d107      	bne.n	80053b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fa9b 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00d      	beq.n	80053e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053d6:	d103      	bne.n	80053e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e035      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053ec:	d108      	bne.n	8005400 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053ee:	897b      	ldrh	r3, [r7, #10]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053fc:	611a      	str	r2, [r3, #16]
 80053fe:	e01b      	b.n	8005438 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005400:	897b      	ldrh	r3, [r7, #10]
 8005402:	11db      	asrs	r3, r3, #7
 8005404:	b2db      	uxtb	r3, r3
 8005406:	f003 0306 	and.w	r3, r3, #6
 800540a:	b2db      	uxtb	r3, r3
 800540c:	f063 030f 	orn	r3, r3, #15
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	490e      	ldr	r1, [pc, #56]	; (8005458 <I2C_MasterRequestWrite+0xfc>)
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fac1 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e010      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800542e:	897b      	ldrh	r3, [r7, #10]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	4907      	ldr	r1, [pc, #28]	; (800545c <I2C_MasterRequestWrite+0x100>)
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fab1 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	00010008 	.word	0x00010008
 800545c:	00010002 	.word	0x00010002

08005460 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	460b      	mov	r3, r1
 800546e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d006      	beq.n	800549a <I2C_MasterRequestRead+0x3a>
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d003      	beq.n	800549a <I2C_MasterRequestRead+0x3a>
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005498:	d108      	bne.n	80054ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e00b      	b.n	80054c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	2b11      	cmp	r3, #17
 80054b2:	d107      	bne.n	80054c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fa11 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ea:	d103      	bne.n	80054f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e079      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005500:	d108      	bne.n	8005514 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005502:	897b      	ldrh	r3, [r7, #10]
 8005504:	b2db      	uxtb	r3, r3
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	e05f      	b.n	80055d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005514:	897b      	ldrh	r3, [r7, #10]
 8005516:	11db      	asrs	r3, r3, #7
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 0306 	and.w	r3, r3, #6
 800551e:	b2db      	uxtb	r3, r3
 8005520:	f063 030f 	orn	r3, r3, #15
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4930      	ldr	r1, [pc, #192]	; (80055f4 <I2C_MasterRequestRead+0x194>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 fa37 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e054      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	4929      	ldr	r1, [pc, #164]	; (80055f8 <I2C_MasterRequestRead+0x198>)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fa27 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e044      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005586:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f9af 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d103      	bne.n	80055b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e017      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80055bc:	897b      	ldrh	r3, [r7, #10]
 80055be:	11db      	asrs	r3, r3, #7
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f003 0306 	and.w	r3, r3, #6
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f063 030e 	orn	r3, r3, #14
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4907      	ldr	r1, [pc, #28]	; (80055f8 <I2C_MasterRequestRead+0x198>)
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 f9e3 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e000      	b.n	80055ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	00010008 	.word	0x00010008
 80055f8:	00010002 	.word	0x00010002

080055fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	4608      	mov	r0, r1
 8005606:	4611      	mov	r1, r2
 8005608:	461a      	mov	r2, r3
 800560a:	4603      	mov	r3, r0
 800560c:	817b      	strh	r3, [r7, #10]
 800560e:	460b      	mov	r3, r1
 8005610:	813b      	strh	r3, [r7, #8]
 8005612:	4613      	mov	r3, r2
 8005614:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005624:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	2200      	movs	r2, #0
 800562e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f960 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00d      	beq.n	800565a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564c:	d103      	bne.n	8005656 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e05f      	b.n	800571a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800565a:	897b      	ldrh	r3, [r7, #10]
 800565c:	b2db      	uxtb	r3, r3
 800565e:	461a      	mov	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005668:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	6a3a      	ldr	r2, [r7, #32]
 800566e:	492d      	ldr	r1, [pc, #180]	; (8005724 <I2C_RequestMemoryWrite+0x128>)
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f998 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e04c      	b.n	800571a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	617b      	str	r3, [r7, #20]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005698:	6a39      	ldr	r1, [r7, #32]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f000 fa02 	bl	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00d      	beq.n	80056c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d107      	bne.n	80056be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e02b      	b.n	800571a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056c2:	88fb      	ldrh	r3, [r7, #6]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056c8:	893b      	ldrh	r3, [r7, #8]
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	611a      	str	r2, [r3, #16]
 80056d2:	e021      	b.n	8005718 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80056d4:	893b      	ldrh	r3, [r7, #8]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b29b      	uxth	r3, r3
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e4:	6a39      	ldr	r1, [r7, #32]
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f9dc 	bl	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00d      	beq.n	800570e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d107      	bne.n	800570a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005708:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e005      	b.n	800571a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800570e:	893b      	ldrh	r3, [r7, #8]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	00010002 	.word	0x00010002

08005728 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	4608      	mov	r0, r1
 8005732:	4611      	mov	r1, r2
 8005734:	461a      	mov	r2, r3
 8005736:	4603      	mov	r3, r0
 8005738:	817b      	strh	r3, [r7, #10]
 800573a:	460b      	mov	r3, r1
 800573c:	813b      	strh	r3, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005750:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2200      	movs	r2, #0
 800576a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f8c2 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005788:	d103      	bne.n	8005792 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0aa      	b.n	80058ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	4952      	ldr	r1, [pc, #328]	; (80058f4 <I2C_RequestMemoryRead+0x1cc>)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f8fa 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e097      	b.n	80058ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	6a39      	ldr	r1, [r7, #32]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f964 	bl	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00d      	beq.n	80057fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d107      	bne.n	80057fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e076      	b.n	80058ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005804:	893b      	ldrh	r3, [r7, #8]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	e021      	b.n	8005854 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005810:	893b      	ldrh	r3, [r7, #8]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	b29b      	uxth	r3, r3
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005820:	6a39      	ldr	r1, [r7, #32]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f93e 	bl	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	2b04      	cmp	r3, #4
 8005834:	d107      	bne.n	8005846 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e050      	b.n	80058ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800584a:	893b      	ldrh	r3, [r7, #8]
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005856:	6a39      	ldr	r1, [r7, #32]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f923 	bl	8005aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00d      	beq.n	8005880 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	2b04      	cmp	r3, #4
 800586a:	d107      	bne.n	800587c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800587a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e035      	b.n	80058ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	2200      	movs	r2, #0
 8005898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 f82b 	bl	80058f8 <I2C_WaitOnFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b6:	d103      	bne.n	80058c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e013      	b.n	80058ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058c4:	897b      	ldrh	r3, [r7, #10]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	6a3a      	ldr	r2, [r7, #32]
 80058d8:	4906      	ldr	r1, [pc, #24]	; (80058f4 <I2C_RequestMemoryRead+0x1cc>)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f863 	bl	80059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	00010002 	.word	0x00010002

080058f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005908:	e025      	b.n	8005956 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d021      	beq.n	8005956 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fd ffa3 	bl	800385c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d116      	bne.n	8005956 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0220 	orr.w	r2, r3, #32
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e023      	b.n	800599e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10d      	bne.n	800597c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	43da      	mvns	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	e00c      	b.n	8005996 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	43da      	mvns	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4013      	ands	r3, r2
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	461a      	mov	r2, r3
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	429a      	cmp	r2, r3
 800599a:	d0b6      	beq.n	800590a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059b4:	e051      	b.n	8005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c4:	d123      	bne.n	8005a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f043 0204 	orr.w	r2, r3, #4
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e046      	b.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d021      	beq.n	8005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a16:	f7fd ff21 	bl	800385c <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d302      	bcc.n	8005a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d116      	bne.n	8005a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2220      	movs	r2, #32
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f043 0220 	orr.w	r2, r3, #32
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e020      	b.n	8005a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10c      	bne.n	8005a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	bf14      	ite	ne
 8005a76:	2301      	movne	r3, #1
 8005a78:	2300      	moveq	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	e00b      	b.n	8005a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	43da      	mvns	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d18d      	bne.n	80059b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ab0:	e02d      	b.n	8005b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f8ce 	bl	8005c54 <I2C_IsAcknowledgeFailed>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e02d      	b.n	8005b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac8:	d021      	beq.n	8005b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aca:	f7fd fec7 	bl	800385c <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d116      	bne.n	8005b0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	f043 0220 	orr.w	r2, r3, #32
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e007      	b.n	8005b1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b18:	2b80      	cmp	r3, #128	; 0x80
 8005b1a:	d1ca      	bne.n	8005ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b32:	e02d      	b.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f88d 	bl	8005c54 <I2C_IsAcknowledgeFailed>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e02d      	b.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d021      	beq.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4c:	f7fd fe86 	bl	800385c <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d302      	bcc.n	8005b62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d116      	bne.n	8005b90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e007      	b.n	8005ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d1ca      	bne.n	8005b34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bb4:	e042      	b.n	8005c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d119      	bne.n	8005bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0210 	mvn.w	r2, #16
 8005bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e029      	b.n	8005c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf8:	f7fd fe30 	bl	800385c <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d302      	bcc.n	8005c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d116      	bne.n	8005c3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e007      	b.n	8005c4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d1b5      	bne.n	8005bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c6a:	d11b      	bne.n	8005ca4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	f043 0204 	orr.w	r2, r3, #4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb4:	b08f      	sub	sp, #60	; 0x3c
 8005cb6:	af0a      	add	r7, sp, #40	; 0x28
 8005cb8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e116      	b.n	8005ef2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f00d fb34 	bl	801334c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d102      	bne.n	8005cfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f004 ff8b 	bl	800ac1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	603b      	str	r3, [r7, #0]
 8005d0e:	687e      	ldr	r6, [r7, #4]
 8005d10:	466d      	mov	r5, sp
 8005d12:	f106 0410 	add.w	r4, r6, #16
 8005d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8005d26:	1d33      	adds	r3, r6, #4
 8005d28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d2a:	6838      	ldr	r0, [r7, #0]
 8005d2c:	f004 fe62 	bl	800a9f4 <USB_CoreInit>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0d7      	b.n	8005ef2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f004 ff79 	bl	800ac40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
 8005d52:	e04a      	b.n	8005dea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d54:	7bfa      	ldrb	r2, [r7, #15]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	333d      	adds	r3, #61	; 0x3d
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d68:	7bfa      	ldrb	r2, [r7, #15]
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	333c      	adds	r3, #60	; 0x3c
 8005d78:	7bfa      	ldrb	r2, [r7, #15]
 8005d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d7c:	7bfa      	ldrb	r2, [r7, #15]
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	b298      	uxth	r0, r3
 8005d82:	6879      	ldr	r1, [r7, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	440b      	add	r3, r1
 8005d8e:	3344      	adds	r3, #68	; 0x44
 8005d90:	4602      	mov	r2, r0
 8005d92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d94:	7bfa      	ldrb	r2, [r7, #15]
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	3340      	adds	r3, #64	; 0x40
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005da8:	7bfa      	ldrb	r2, [r7, #15]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	3348      	adds	r3, #72	; 0x48
 8005db8:	2200      	movs	r2, #0
 8005dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005dbc:	7bfa      	ldrb	r2, [r7, #15]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	334c      	adds	r3, #76	; 0x4c
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005dd0:	7bfa      	ldrb	r2, [r7, #15]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	3354      	adds	r3, #84	; 0x54
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
 8005de6:	3301      	adds	r3, #1
 8005de8:	73fb      	strb	r3, [r7, #15]
 8005dea:	7bfa      	ldrb	r2, [r7, #15]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d3af      	bcc.n	8005d54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]
 8005df8:	e044      	b.n	8005e84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005dfa:	7bfa      	ldrb	r2, [r7, #15]
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e10:	7bfa      	ldrb	r2, [r7, #15]
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005e22:	7bfa      	ldrb	r2, [r7, #15]
 8005e24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e26:	7bfa      	ldrb	r2, [r7, #15]
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e3c:	7bfa      	ldrb	r2, [r7, #15]
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e52:	7bfa      	ldrb	r2, [r7, #15]
 8005e54:	6879      	ldr	r1, [r7, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	440b      	add	r3, r1
 8005e60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e68:	7bfa      	ldrb	r2, [r7, #15]
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	3301      	adds	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d3b5      	bcc.n	8005dfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	687e      	ldr	r6, [r7, #4]
 8005e96:	466d      	mov	r5, sp
 8005e98:	f106 0410 	add.w	r4, r6, #16
 8005e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ea4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ea8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005eac:	1d33      	adds	r3, r6, #4
 8005eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb0:	6838      	ldr	r0, [r7, #0]
 8005eb2:	f004 ff11 	bl	800acd8 <USB_DevInit>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e014      	b.n	8005ef2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d102      	bne.n	8005ee6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 f98b 	bl	80071fc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f006 f853 	bl	800bf96 <USB_DevDisconnect>

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005efa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_PCD_Start+0x1c>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e020      	b.n	8005f58 <HAL_PCD_Start+0x5e>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d109      	bne.n	8005f3a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d005      	beq.n	8005f3a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f004 fe5c 	bl	800abfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f006 f803 	bl	800bf54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b08d      	sub	sp, #52	; 0x34
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f006 f8c1 	bl	800c0fe <USB_GetMode>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f040 84b7 	bne.w	80068f2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f006 f825 	bl	800bfd8 <USB_ReadInterrupts>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 84ad 	beq.w	80068f0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	0a1b      	lsrs	r3, r3, #8
 8005fa0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f006 f812 	bl	800bfd8 <USB_ReadInterrupts>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d107      	bne.n	8005fce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f002 0202 	and.w	r2, r2, #2
 8005fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f006 f800 	bl	800bfd8 <USB_ReadInterrupts>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f003 0310 	and.w	r3, r3, #16
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d161      	bne.n	80060a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699a      	ldr	r2, [r3, #24]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0210 	bic.w	r2, r2, #16
 8005ff0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f003 020f 	and.w	r2, r3, #15
 8005ffe:	4613      	mov	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	3304      	adds	r3, #4
 8006010:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	0c5b      	lsrs	r3, r3, #17
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	2b02      	cmp	r3, #2
 800601c:	d124      	bne.n	8006068 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006024:	4013      	ands	r3, r2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d035      	beq.n	8006096 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006038:	b29b      	uxth	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	6a38      	ldr	r0, [r7, #32]
 800603e:	f005 fe37 	bl	800bcb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	091b      	lsrs	r3, r3, #4
 800604a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800604e:	441a      	add	r2, r3
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	6a1a      	ldr	r2, [r3, #32]
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	091b      	lsrs	r3, r3, #4
 800605c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006060:	441a      	add	r2, r3
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	621a      	str	r2, [r3, #32]
 8006066:	e016      	b.n	8006096 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	0c5b      	lsrs	r3, r3, #17
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	2b06      	cmp	r3, #6
 8006072:	d110      	bne.n	8006096 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800607a:	2208      	movs	r2, #8
 800607c:	4619      	mov	r1, r3
 800607e:	6a38      	ldr	r0, [r7, #32]
 8006080:	f005 fe16 	bl	800bcb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	6a1a      	ldr	r2, [r3, #32]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006090:	441a      	add	r2, r3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0210 	orr.w	r2, r2, #16
 80060a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f005 ff94 	bl	800bfd8 <USB_ReadInterrupts>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80060ba:	f040 80a7 	bne.w	800620c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f005 ff99 	bl	800bffe <USB_ReadDevAllOutEpInterrupt>
 80060cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80060ce:	e099      	b.n	8006204 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80060d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 808e 	beq.w	80061f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	4611      	mov	r1, r2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f005 ffbd 	bl	800c066 <USB_ReadDevOutEPInterrupt>
 80060ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	461a      	mov	r2, r3
 8006106:	2301      	movs	r3, #1
 8006108:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800610a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 feef 	bl	8006ef0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00c      	beq.n	8006136 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	461a      	mov	r2, r3
 800612a:	2308      	movs	r3, #8
 800612c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800612e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 ffc5 	bl	80070c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b00      	cmp	r3, #0
 800613e:	d008      	beq.n	8006152 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	461a      	mov	r2, r3
 800614e:	2310      	movs	r3, #16
 8006150:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d030      	beq.n	80061be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006164:	2b80      	cmp	r3, #128	; 0x80
 8006166:	d109      	bne.n	800617c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800617a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800617c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617e:	4613      	mov	r3, r2
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4413      	add	r3, r2
 800618e:	3304      	adds	r3, #4
 8006190:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	78db      	ldrb	r3, [r3, #3]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d108      	bne.n	80061ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2200      	movs	r2, #0
 800619e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	4619      	mov	r1, r3
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f00d f9ec 	bl	8013584 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	461a      	mov	r2, r3
 80061ba:	2302      	movs	r3, #2
 80061bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	461a      	mov	r2, r3
 80061d6:	2320      	movs	r3, #32
 80061d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d009      	beq.n	80061f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f0:	461a      	mov	r2, r3
 80061f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	3301      	adds	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80061fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006200:	085b      	lsrs	r3, r3, #1
 8006202:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	f47f af62 	bne.w	80060d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4618      	mov	r0, r3
 8006212:	f005 fee1 	bl	800bfd8 <USB_ReadInterrupts>
 8006216:	4603      	mov	r3, r0
 8006218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800621c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006220:	f040 80db 	bne.w	80063da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f005 ff02 	bl	800c032 <USB_ReadDevAllInEpInterrupt>
 800622e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006234:	e0cd      	b.n	80063d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	f000 80c2 	beq.w	80063c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006248:	b2d2      	uxtb	r2, r2
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f005 ff28 	bl	800c0a2 <USB_ReadDevInEPInterrupt>
 8006252:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b00      	cmp	r3, #0
 800625c:	d057      	beq.n	800630e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2201      	movs	r2, #1
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	43db      	mvns	r3, r3
 8006278:	69f9      	ldr	r1, [r7, #28]
 800627a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800627e:	4013      	ands	r3, r2
 8006280:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628e:	461a      	mov	r2, r3
 8006290:	2301      	movs	r3, #1
 8006292:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d132      	bne.n	8006302 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800629c:	6879      	ldr	r1, [r7, #4]
 800629e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	334c      	adds	r3, #76	; 0x4c
 80062ac:	6819      	ldr	r1, [r3, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b2:	4613      	mov	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4403      	add	r3, r0
 80062bc:	3348      	adds	r3, #72	; 0x48
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4419      	add	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c6:	4613      	mov	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	4413      	add	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4403      	add	r3, r0
 80062d0:	334c      	adds	r3, #76	; 0x4c
 80062d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d113      	bne.n	8006302 <HAL_PCD_IRQHandler+0x3a2>
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062de:	4613      	mov	r3, r2
 80062e0:	00db      	lsls	r3, r3, #3
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	3354      	adds	r3, #84	; 0x54
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d108      	bne.n	8006302 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062fa:	461a      	mov	r2, r3
 80062fc:	2101      	movs	r1, #1
 80062fe:	f005 ff2f 	bl	800c160 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	b2db      	uxtb	r3, r3
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f00d f8b6 	bl	801347a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006324:	461a      	mov	r2, r3
 8006326:	2308      	movs	r3, #8
 8006328:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	461a      	mov	r2, r3
 8006342:	2310      	movs	r3, #16
 8006344:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	461a      	mov	r2, r3
 800635e:	2340      	movs	r3, #64	; 0x40
 8006360:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d023      	beq.n	80063b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800636c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800636e:	6a38      	ldr	r0, [r7, #32]
 8006370:	f004 fe10 	bl	800af94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006376:	4613      	mov	r3, r2
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4413      	add	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	3338      	adds	r3, #56	; 0x38
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	4413      	add	r3, r2
 8006384:	3304      	adds	r3, #4
 8006386:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	78db      	ldrb	r3, [r3, #3]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d108      	bne.n	80063a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2200      	movs	r2, #0
 8006394:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	b2db      	uxtb	r3, r3
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f00d f903 	bl	80135a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ae:	461a      	mov	r2, r3
 80063b0:	2302      	movs	r3, #2
 80063b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80063be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fd08 	bl	8006dd6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	3301      	adds	r3, #1
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f47f af2e 	bne.w	8006236 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f005 fdfa 	bl	800bfd8 <USB_ReadInterrupts>
 80063e4:	4603      	mov	r3, r0
 80063e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063ee:	d122      	bne.n	8006436 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	69fa      	ldr	r2, [r7, #28]
 80063fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800640a:	2b01      	cmp	r3, #1
 800640c:	d108      	bne.n	8006420 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006416:	2100      	movs	r1, #0
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f00d fa7d 	bl	8013918 <HAL_PCDEx_LPM_Callback>
 800641e:	e002      	b.n	8006426 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f00d f8a1 	bl	8013568 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695a      	ldr	r2, [r3, #20]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f005 fdcc 	bl	800bfd8 <USB_ReadInterrupts>
 8006440:	4603      	mov	r3, r0
 8006442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644a:	d112      	bne.n	8006472 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	d102      	bne.n	8006462 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f00d f85d 	bl	801351c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006470:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4618      	mov	r0, r3
 8006478:	f005 fdae 	bl	800bfd8 <USB_ReadInterrupts>
 800647c:	4603      	mov	r3, r0
 800647e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006486:	d121      	bne.n	80064cc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695a      	ldr	r2, [r3, #20]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006496:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d111      	bne.n	80064c6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	f003 020f 	and.w	r2, r3, #15
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80064bc:	2101      	movs	r1, #1
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f00d fa2a 	bl	8013918 <HAL_PCDEx_LPM_Callback>
 80064c4:	e002      	b.n	80064cc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f00d f828 	bl	801351c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f005 fd81 	bl	800bfd8 <USB_ReadInterrupts>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e0:	f040 80b7 	bne.w	8006652 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064f2:	f023 0301 	bic.w	r3, r3, #1
 80064f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2110      	movs	r1, #16
 80064fe:	4618      	mov	r0, r3
 8006500:	f004 fd48 	bl	800af94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006504:	2300      	movs	r3, #0
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006508:	e046      	b.n	8006598 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006516:	461a      	mov	r2, r3
 8006518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800651c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800653c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	461a      	mov	r2, r3
 800654c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006550:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800656c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006570:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006582:	0151      	lsls	r1, r2, #5
 8006584:	69fa      	ldr	r2, [r7, #28]
 8006586:	440a      	add	r2, r1
 8006588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006590:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	3301      	adds	r3, #1
 8006596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d3b3      	bcc.n	800650a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80065b4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d016      	beq.n	80065ec <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ce:	f043 030b 	orr.w	r3, r3, #11
 80065d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	69fa      	ldr	r2, [r7, #28]
 80065e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e4:	f043 030b 	orr.w	r3, r3, #11
 80065e8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ea:	e015      	b.n	8006618 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	69fa      	ldr	r2, [r7, #28]
 80065f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80065fe:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006602:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006612:	f043 030b 	orr.w	r3, r3, #11
 8006616:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006626:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800662a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800663c:	461a      	mov	r2, r3
 800663e:	f005 fd8f 	bl	800c160 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f005 fcbe 	bl	800bfd8 <USB_ReadInterrupts>
 800665c:	4603      	mov	r3, r0
 800665e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006666:	d124      	bne.n	80066b2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4618      	mov	r0, r3
 800666e:	f005 fd54 	bl	800c11a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f004 fd09 	bl	800b08e <USB_GetDevSpeed>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681c      	ldr	r4, [r3, #0]
 8006688:	f000 fec2 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 800668c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006692:	b2db      	uxtb	r3, r3
 8006694:	461a      	mov	r2, r3
 8006696:	4620      	mov	r0, r4
 8006698:	f004 fa0e 	bl	800aab8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f00c ff14 	bl	80134ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80066b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f005 fc8e 	bl	800bfd8 <USB_ReadInterrupts>
 80066bc:	4603      	mov	r3, r0
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d10a      	bne.n	80066dc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f00c fef1 	bl	80134ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695a      	ldr	r2, [r3, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f002 0208 	and.w	r2, r2, #8
 80066da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f005 fc79 	bl	800bfd8 <USB_ReadInterrupts>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ec:	2b80      	cmp	r3, #128	; 0x80
 80066ee:	d122      	bne.n	8006736 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066fc:	2301      	movs	r3, #1
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006700:	e014      	b.n	800672c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006706:	4613      	mov	r3, r2
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d105      	bne.n	8006726 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	b2db      	uxtb	r3, r3
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fb27 	bl	8006d74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	3301      	adds	r3, #1
 800672a:	627b      	str	r3, [r7, #36]	; 0x24
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	429a      	cmp	r2, r3
 8006734:	d3e5      	bcc.n	8006702 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f005 fc4c 	bl	800bfd8 <USB_ReadInterrupts>
 8006740:	4603      	mov	r3, r0
 8006742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800674a:	d13b      	bne.n	80067c4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800674c:	2301      	movs	r3, #1
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
 8006750:	e02b      	b.n	80067aa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	4413      	add	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	440b      	add	r3, r1
 8006770:	3340      	adds	r3, #64	; 0x40
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d115      	bne.n	80067a4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006778:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800677a:	2b00      	cmp	r3, #0
 800677c:	da12      	bge.n	80067a4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	4613      	mov	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	333f      	adds	r3, #63	; 0x3f
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800679a:	b2db      	uxtb	r3, r3
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fae8 	bl	8006d74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	3301      	adds	r3, #1
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d3ce      	bcc.n	8006752 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80067c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f005 fc05 	bl	800bfd8 <USB_ReadInterrupts>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067d8:	d155      	bne.n	8006886 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067da:	2301      	movs	r3, #1
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
 80067de:	e045      	b.n	800686c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f4:	4613      	mov	r3, r2
 80067f6:	00db      	lsls	r3, r3, #3
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	440b      	add	r3, r1
 80067fe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d12e      	bne.n	8006866 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006808:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800680a:	2b00      	cmp	r3, #0
 800680c:	da2b      	bge.n	8006866 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800681a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800681e:	429a      	cmp	r2, r3
 8006820:	d121      	bne.n	8006866 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006826:	4613      	mov	r3, r2
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006834:	2201      	movs	r2, #1
 8006836:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	699b      	ldr	r3, [r3, #24]
 800683c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10a      	bne.n	8006866 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800685e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006862:	6053      	str	r3, [r2, #4]
            break;
 8006864:	e007      	b.n	8006876 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	3301      	adds	r3, #1
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006872:	429a      	cmp	r2, r3
 8006874:	d3b4      	bcc.n	80067e0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695a      	ldr	r2, [r3, #20]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4618      	mov	r0, r3
 800688c:	f005 fba4 	bl	800bfd8 <USB_ReadInterrupts>
 8006890:	4603      	mov	r3, r0
 8006892:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d10a      	bne.n	80068b2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f00c fe95 	bl	80135cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	695a      	ldr	r2, [r3, #20]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80068b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f005 fb8e 	bl	800bfd8 <USB_ReadInterrupts>
 80068bc:	4603      	mov	r3, r0
 80068be:	f003 0304 	and.w	r3, r3, #4
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d115      	bne.n	80068f2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f00c fe85 	bl	80135e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	e000      	b.n	80068f2 <HAL_PCD_IRQHandler+0x992>
      return;
 80068f0:	bf00      	nop
    }
  }
}
 80068f2:	3734      	adds	r7, #52	; 0x34
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_PCD_SetAddress+0x1a>
 800690e:	2302      	movs	r3, #2
 8006910:	e013      	b.n	800693a <HAL_PCD_SetAddress+0x42>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	78fa      	ldrb	r2, [r7, #3]
 800691e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	4611      	mov	r1, r2
 800692a:	4618      	mov	r0, r3
 800692c:	f005 faec 	bl	800bf08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	4608      	mov	r0, r1
 800694c:	4611      	mov	r1, r2
 800694e:	461a      	mov	r2, r3
 8006950:	4603      	mov	r3, r0
 8006952:	70fb      	strb	r3, [r7, #3]
 8006954:	460b      	mov	r3, r1
 8006956:	803b      	strh	r3, [r7, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006964:	2b00      	cmp	r3, #0
 8006966:	da0f      	bge.n	8006988 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	f003 020f 	and.w	r2, r3, #15
 800696e:	4613      	mov	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	3338      	adds	r3, #56	; 0x38
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	4413      	add	r3, r2
 800697c:	3304      	adds	r3, #4
 800697e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	705a      	strb	r2, [r3, #1]
 8006986:	e00f      	b.n	80069a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	f003 020f 	and.w	r2, r3, #15
 800698e:	4613      	mov	r3, r2
 8006990:	00db      	lsls	r3, r3, #3
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	3304      	adds	r3, #4
 80069a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069a8:	78fb      	ldrb	r3, [r7, #3]
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80069b4:	883a      	ldrh	r2, [r7, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	78ba      	ldrb	r2, [r7, #2]
 80069be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d004      	beq.n	80069d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80069d2:	78bb      	ldrb	r3, [r7, #2]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d102      	bne.n	80069de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_PCD_EP_Open+0xaa>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e00e      	b.n	8006a0a <HAL_PCD_EP_Open+0xc8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f004 fb6c 	bl	800b0d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006a08:	7afb      	ldrb	r3, [r7, #11]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da0f      	bge.n	8006a46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	3338      	adds	r3, #56	; 0x38
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	705a      	strb	r2, [r3, #1]
 8006a44:	e00f      	b.n	8006a66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_PCD_EP_Close+0x6e>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e00e      	b.n	8006a9e <HAL_PCD_EP_Close+0x8c>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68f9      	ldr	r1, [r7, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f004 fbaa 	bl	800b1e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b086      	sub	sp, #24
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	f003 020f 	and.w	r2, r3, #15
 8006abc:	4613      	mov	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	3304      	adds	r3, #4
 8006ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ae8:	7afb      	ldrb	r3, [r7, #11]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d102      	bne.n	8006b02 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b02:	7afb      	ldrb	r3, [r7, #11]
 8006b04:	f003 030f 	and.w	r3, r3, #15
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	461a      	mov	r2, r3
 8006b18:	6979      	ldr	r1, [r7, #20]
 8006b1a:	f004 fe89 	bl	800b830 <USB_EP0StartXfer>
 8006b1e:	e008      	b.n	8006b32 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6818      	ldr	r0, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6979      	ldr	r1, [r7, #20]
 8006b2e:	f004 fc37 	bl	800b3a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 020f 	and.w	r2, r3, #15
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006b5e:	681b      	ldr	r3, [r3, #0]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	f003 020f 	and.w	r2, r3, #15
 8006b82:	4613      	mov	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	3338      	adds	r3, #56	; 0x38
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	3304      	adds	r3, #4
 8006b92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bac:	7afb      	ldrb	r3, [r7, #11]
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d102      	bne.n	8006bc6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6818      	ldr	r0, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	f004 fe27 	bl	800b830 <USB_EP0StartXfer>
 8006be2:	e008      	b.n	8006bf6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6818      	ldr	r0, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	6979      	ldr	r1, [r7, #20]
 8006bf2:	f004 fbd5 	bl	800b3a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	f003 020f 	and.w	r2, r3, #15
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d901      	bls.n	8006c1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e050      	b.n	8006cc0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	da0f      	bge.n	8006c46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	3338      	adds	r3, #56	; 0x38
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4413      	add	r3, r2
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	705a      	strb	r2, [r3, #1]
 8006c44:	e00d      	b.n	8006c62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c46:	78fa      	ldrb	r2, [r7, #3]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	3304      	adds	r3, #4
 8006c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <HAL_PCD_EP_SetStall+0x82>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e01e      	b.n	8006cc0 <HAL_PCD_EP_SetStall+0xc0>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68f9      	ldr	r1, [r7, #12]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f005 f865 	bl	800bd60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	b2d9      	uxtb	r1, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f005 fa55 	bl	800c160 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	f003 020f 	and.w	r2, r3, #15
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d901      	bls.n	8006ce6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e042      	b.n	8006d6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da0f      	bge.n	8006d0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cee:	78fb      	ldrb	r3, [r7, #3]
 8006cf0:	f003 020f 	and.w	r2, r3, #15
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	3338      	adds	r3, #56	; 0x38
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	4413      	add	r3, r2
 8006d02:	3304      	adds	r3, #4
 8006d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	705a      	strb	r2, [r3, #1]
 8006d0c:	e00f      	b.n	8006d2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d0e:	78fb      	ldrb	r3, [r7, #3]
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	4613      	mov	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	4413      	add	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	3304      	adds	r3, #4
 8006d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_PCD_EP_ClrStall+0x86>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e00e      	b.n	8006d6c <HAL_PCD_EP_ClrStall+0xa4>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f005 f86d 	bl	800be3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	da0c      	bge.n	8006da2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d88:	78fb      	ldrb	r3, [r7, #3]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	4613      	mov	r3, r2
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	3338      	adds	r3, #56	; 0x38
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	3304      	adds	r3, #4
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	e00c      	b.n	8006dbc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	f003 020f 	and.w	r2, r3, #15
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	4413      	add	r3, r2
 8006db8:	3304      	adds	r3, #4
 8006dba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68f9      	ldr	r1, [r7, #12]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f004 fe8c 	bl	800bae0 <USB_EPStopXfer>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b08a      	sub	sp, #40	; 0x28
 8006dda:	af02      	add	r7, sp, #8
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	4613      	mov	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	3338      	adds	r3, #56	; 0x38
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4413      	add	r3, r2
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1a      	ldr	r2, [r3, #32]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d901      	bls.n	8006e0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e06c      	b.n	8006ee8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d902      	bls.n	8006e2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	3303      	adds	r3, #3
 8006e2e:	089b      	lsrs	r3, r3, #2
 8006e30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e32:	e02b      	b.n	8006e8c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d902      	bls.n	8006e50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	3303      	adds	r3, #3
 8006e54:	089b      	lsrs	r3, r3, #2
 8006e56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6919      	ldr	r1, [r3, #16]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	6978      	ldr	r0, [r7, #20]
 8006e70:	f004 fee0 	bl	800bc34 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	441a      	add	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a1a      	ldr	r2, [r3, #32]
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	441a      	add	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d809      	bhi.n	8006eb6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d203      	bcs.n	8006eb6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1be      	bne.n	8006e34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d811      	bhi.n	8006ee6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	2201      	movs	r2, #1
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	43db      	mvns	r3, r3
 8006edc:	6939      	ldr	r1, [r7, #16]
 8006ede:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	333c      	adds	r3, #60	; 0x3c
 8006f08:	3304      	adds	r3, #4
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d17b      	bne.n	800701e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d015      	beq.n	8006f5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4a61      	ldr	r2, [pc, #388]	; (80070b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	f240 80b9 	bls.w	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80b3 	beq.w	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f52:	461a      	mov	r2, r3
 8006f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f58:	6093      	str	r3, [r2, #8]
 8006f5a:	e0a7      	b.n	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d009      	beq.n	8006f7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f72:	461a      	mov	r2, r3
 8006f74:	2320      	movs	r3, #32
 8006f76:	6093      	str	r3, [r2, #8]
 8006f78:	e098      	b.n	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 8093 	bne.w	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4a4b      	ldr	r2, [pc, #300]	; (80070b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d90f      	bls.n	8006fae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006faa:	6093      	str	r3, [r2, #8]
 8006fac:	e07e      	b.n	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	69da      	ldr	r2, [r3, #28]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	0159      	lsls	r1, r3, #5
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	440b      	add	r3, r1
 8006fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d114      	bne.n	8007010 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d109      	bne.n	8007002 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	f005 f8b0 	bl	800c160 <USB_EP0_OutStart>
 8007000:	e006      	b.n	8007010 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	441a      	add	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f00c fa14 	bl	8013444 <HAL_PCD_DataOutStageCallback>
 800701c:	e046      	b.n	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	4a26      	ldr	r2, [pc, #152]	; (80070bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d124      	bne.n	8007070 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703c:	461a      	mov	r2, r3
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	6093      	str	r3, [r2, #8]
 8007044:	e032      	b.n	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f003 0320 	and.w	r3, r3, #32
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	461a      	mov	r2, r3
 800705e:	2320      	movs	r3, #32
 8007060:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	4619      	mov	r1, r3
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f00c f9eb 	bl	8013444 <HAL_PCD_DataOutStageCallback>
 800706e:	e01d      	b.n	80070ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d114      	bne.n	80070a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d108      	bne.n	80070a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6818      	ldr	r0, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007098:	461a      	mov	r2, r3
 800709a:	2100      	movs	r1, #0
 800709c:	f005 f860 	bl	800c160 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f00c f9cc 	bl	8013444 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3720      	adds	r7, #32
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	4f54300a 	.word	0x4f54300a
 80070bc:	4f54310a 	.word	0x4f54310a

080070c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	333c      	adds	r3, #60	; 0x3c
 80070d8:	3304      	adds	r3, #4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4a15      	ldr	r2, [pc, #84]	; (8007148 <PCD_EP_OutSetupPacket_int+0x88>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d90e      	bls.n	8007114 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	461a      	mov	r2, r3
 800710e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007112:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f00c f983 	bl	8013420 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	4a0a      	ldr	r2, [pc, #40]	; (8007148 <PCD_EP_OutSetupPacket_int+0x88>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d90c      	bls.n	800713c <PCD_EP_OutSetupPacket_int+0x7c>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d108      	bne.n	800713c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6818      	ldr	r0, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007134:	461a      	mov	r2, r3
 8007136:	2101      	movs	r1, #1
 8007138:	f005 f812 	bl	800c160 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	4f54300a 	.word	0x4f54300a

0800714c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
 8007158:	4613      	mov	r3, r2
 800715a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d107      	bne.n	800717a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800716a:	883b      	ldrh	r3, [r7, #0]
 800716c:	0419      	lsls	r1, r3, #16
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	430a      	orrs	r2, r1
 8007176:	629a      	str	r2, [r3, #40]	; 0x28
 8007178:	e028      	b.n	80071cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	0c1b      	lsrs	r3, r3, #16
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	4413      	add	r3, r2
 8007186:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007188:	2300      	movs	r3, #0
 800718a:	73fb      	strb	r3, [r7, #15]
 800718c:	e00d      	b.n	80071aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	3340      	adds	r3, #64	; 0x40
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	0c1b      	lsrs	r3, r3, #16
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	3301      	adds	r3, #1
 80071a8:	73fb      	strb	r3, [r7, #15]
 80071aa:	7bfa      	ldrb	r2, [r7, #15]
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d3ec      	bcc.n	800718e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80071b4:	883b      	ldrh	r3, [r7, #0]
 80071b6:	0418      	lsls	r0, r3, #16
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6819      	ldr	r1, [r3, #0]
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	3b01      	subs	r3, #1
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	4302      	orrs	r2, r0
 80071c4:	3340      	adds	r3, #64	; 0x40
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	440b      	add	r3, r1
 80071ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	887a      	ldrh	r2, [r7, #2]
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800722e:	f043 0303 	orr.w	r3, r3, #3
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e0cc      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007258:	4b68      	ldr	r3, [pc, #416]	; (80073fc <HAL_RCC_ClockConfig+0x1b8>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 030f 	and.w	r3, r3, #15
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d90c      	bls.n	8007280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007266:	4b65      	ldr	r3, [pc, #404]	; (80073fc <HAL_RCC_ClockConfig+0x1b8>)
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800726e:	4b63      	ldr	r3, [pc, #396]	; (80073fc <HAL_RCC_ClockConfig+0x1b8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d001      	beq.n	8007280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0b8      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d020      	beq.n	80072ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007298:	4b59      	ldr	r3, [pc, #356]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4a58      	ldr	r2, [pc, #352]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 800729e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072b0:	4b53      	ldr	r3, [pc, #332]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	4a52      	ldr	r2, [pc, #328]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80072b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072bc:	4b50      	ldr	r3, [pc, #320]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	494d      	ldr	r1, [pc, #308]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d044      	beq.n	8007364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d107      	bne.n	80072f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072e2:	4b47      	ldr	r3, [pc, #284]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d119      	bne.n	8007322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e07f      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d003      	beq.n	8007302 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d107      	bne.n	8007312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007302:	4b3f      	ldr	r3, [pc, #252]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e06f      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007312:	4b3b      	ldr	r3, [pc, #236]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e067      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007322:	4b37      	ldr	r3, [pc, #220]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f023 0203 	bic.w	r2, r3, #3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	4934      	ldr	r1, [pc, #208]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 8007330:	4313      	orrs	r3, r2
 8007332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007334:	f7fc fa92 	bl	800385c <HAL_GetTick>
 8007338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800733a:	e00a      	b.n	8007352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800733c:	f7fc fa8e 	bl	800385c <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	f241 3288 	movw	r2, #5000	; 0x1388
 800734a:	4293      	cmp	r3, r2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e04f      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007352:	4b2b      	ldr	r3, [pc, #172]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 020c 	and.w	r2, r3, #12
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	429a      	cmp	r2, r3
 8007362:	d1eb      	bne.n	800733c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <HAL_RCC_ClockConfig+0x1b8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d20c      	bcs.n	800738c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007372:	4b22      	ldr	r3, [pc, #136]	; (80073fc <HAL_RCC_ClockConfig+0x1b8>)
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	4b20      	ldr	r3, [pc, #128]	; (80073fc <HAL_RCC_ClockConfig+0x1b8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d001      	beq.n	800738c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e032      	b.n	80073f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007398:	4b19      	ldr	r3, [pc, #100]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4916      	ldr	r1, [pc, #88]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0308 	and.w	r3, r3, #8
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d009      	beq.n	80073ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073b6:	4b12      	ldr	r3, [pc, #72]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	490e      	ldr	r1, [pc, #56]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80073ca:	f000 fbb1 	bl	8007b30 <HAL_RCC_GetSysClockFreq>
 80073ce:	4602      	mov	r2, r0
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	091b      	lsrs	r3, r3, #4
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	490a      	ldr	r1, [pc, #40]	; (8007404 <HAL_RCC_ClockConfig+0x1c0>)
 80073dc:	5ccb      	ldrb	r3, [r1, r3]
 80073de:	fa22 f303 	lsr.w	r3, r2, r3
 80073e2:	4a09      	ldr	r2, [pc, #36]	; (8007408 <HAL_RCC_ClockConfig+0x1c4>)
 80073e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073e6:	4b09      	ldr	r3, [pc, #36]	; (800740c <HAL_RCC_ClockConfig+0x1c8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fb fc46 	bl	8002c7c <HAL_InitTick>

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	40023c00 	.word	0x40023c00
 8007400:	40023800 	.word	0x40023800
 8007404:	08016bf0 	.word	0x08016bf0
 8007408:	20000000 	.word	0x20000000
 800740c:	20000004 	.word	0x20000004

08007410 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007410:	b480      	push	{r7}
 8007412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007414:	4b03      	ldr	r3, [pc, #12]	; (8007424 <HAL_RCC_GetHCLKFreq+0x14>)
 8007416:	681b      	ldr	r3, [r3, #0]
}
 8007418:	4618      	mov	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000000 	.word	0x20000000

08007428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800742c:	f7ff fff0 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	0a9b      	lsrs	r3, r3, #10
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4903      	ldr	r1, [pc, #12]	; (800744c <HAL_RCC_GetPCLK1Freq+0x24>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007444:	4618      	mov	r0, r3
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40023800 	.word	0x40023800
 800744c:	08016c00 	.word	0x08016c00

08007450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007454:	f7ff ffdc 	bl	8007410 <HAL_RCC_GetHCLKFreq>
 8007458:	4602      	mov	r2, r0
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	0b5b      	lsrs	r3, r3, #13
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	4903      	ldr	r1, [pc, #12]	; (8007474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007466:	5ccb      	ldrb	r3, [r1, r3]
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800746c:	4618      	mov	r0, r3
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40023800 	.word	0x40023800
 8007474:	08016c00 	.word	0x08016c00

08007478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	220f      	movs	r2, #15
 8007486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007488:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0203 	and.w	r2, r3, #3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007494:	4b0f      	ldr	r3, [pc, #60]	; (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074a0:	4b0c      	ldr	r3, [pc, #48]	; (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074ac:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <HAL_RCC_GetClockConfig+0x5c>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	08db      	lsrs	r3, r3, #3
 80074b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074ba:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <HAL_RCC_GetClockConfig+0x60>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 020f 	and.w	r2, r3, #15
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	601a      	str	r2, [r3, #0]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40023c00 	.word	0x40023c00

080074dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	; 0x30
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d010      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007514:	4b6f      	ldr	r3, [pc, #444]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800751a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	496c      	ldr	r1, [pc, #432]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007532:	2301      	movs	r3, #1
 8007534:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d010      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007542:	4b64      	ldr	r3, [pc, #400]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007548:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007550:	4960      	ldr	r1, [pc, #384]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007560:	2301      	movs	r3, #1
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d017      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007570:	4b58      	ldr	r3, [pc, #352]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	4955      	ldr	r1, [pc, #340]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007580:	4313      	orrs	r3, r2
 8007582:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800758e:	d101      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007590:	2301      	movs	r3, #1
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800759c:	2301      	movs	r3, #1
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0308 	and.w	r3, r3, #8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80075ac:	4b49      	ldr	r3, [pc, #292]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	4946      	ldr	r1, [pc, #280]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075ca:	d101      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80075cc:	2301      	movs	r3, #1
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80075d8:	2301      	movs	r3, #1
 80075da:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0320 	and.w	r3, r3, #32
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 808a 	beq.w	80076fe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	4b39      	ldr	r3, [pc, #228]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	4a38      	ldr	r2, [pc, #224]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075f8:	6413      	str	r3, [r2, #64]	; 0x40
 80075fa:	4b36      	ldr	r3, [pc, #216]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007602:	60bb      	str	r3, [r7, #8]
 8007604:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007606:	4b34      	ldr	r3, [pc, #208]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a33      	ldr	r2, [pc, #204]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800760c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007610:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007612:	f7fc f923 	bl	800385c <HAL_GetTick>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007618:	e008      	b.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800761a:	f7fc f91f 	bl	800385c <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e278      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800762c:	4b2a      	ldr	r3, [pc, #168]	; (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007634:	2b00      	cmp	r3, #0
 8007636:	d0f0      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007638:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007640:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d02f      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	429a      	cmp	r2, r3
 8007654:	d028      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007656:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007660:	4b1e      	ldr	r3, [pc, #120]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007662:	2201      	movs	r2, #1
 8007664:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007666:	4b1d      	ldr	r3, [pc, #116]	; (80076dc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007672:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b01      	cmp	r3, #1
 800767c:	d114      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800767e:	f7fc f8ed 	bl	800385c <HAL_GetTick>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007684:	e00a      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007686:	f7fc f8e9 	bl	800385c <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	f241 3288 	movw	r2, #5000	; 0x1388
 8007694:	4293      	cmp	r3, r2
 8007696:	d901      	bls.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e240      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800769c:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800769e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0ee      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076b4:	d114      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80076b6:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80076c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076ca:	4902      	ldr	r1, [pc, #8]	; (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	608b      	str	r3, [r1, #8]
 80076d0:	e00c      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x210>
 80076d2:	bf00      	nop
 80076d4:	40023800 	.word	0x40023800
 80076d8:	40007000 	.word	0x40007000
 80076dc:	42470e40 	.word	0x42470e40
 80076e0:	4b4a      	ldr	r3, [pc, #296]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	4a49      	ldr	r2, [pc, #292]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80076e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076ea:	6093      	str	r3, [r2, #8]
 80076ec:	4b47      	ldr	r3, [pc, #284]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80076ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f8:	4944      	ldr	r1, [pc, #272]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007710:	4b3f      	ldr	r3, [pc, #252]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007712:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007720:	4b3a      	ldr	r3, [pc, #232]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007726:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	4937      	ldr	r1, [pc, #220]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007742:	4b32      	ldr	r3, [pc, #200]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007748:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007750:	492e      	ldr	r1, [pc, #184]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007752:	4313      	orrs	r3, r2
 8007754:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d011      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007764:	4b29      	ldr	r3, [pc, #164]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800776a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	4926      	ldr	r1, [pc, #152]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007774:	4313      	orrs	r3, r2
 8007776:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007782:	d101      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007784:	2301      	movs	r3, #1
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007794:	4b1d      	ldr	r3, [pc, #116]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800779a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a2:	491a      	ldr	r1, [pc, #104]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80077b6:	4b15      	ldr	r3, [pc, #84]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	4911      	ldr	r1, [pc, #68]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d4:	d101      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80077d6:	2301      	movs	r3, #1
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d005      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077e8:	f040 80ff 	bne.w	80079ea <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80077ec:	4b09      	ldr	r3, [pc, #36]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077f2:	f7fc f833 	bl	800385c <HAL_GetTick>
 80077f6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077f8:	e00e      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80077fa:	f7fc f82f 	bl	800385c <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d907      	bls.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e188      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800780c:	40023800 	.word	0x40023800
 8007810:	424711e0 	.word	0x424711e0
 8007814:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007818:	4b7e      	ldr	r3, [pc, #504]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1ea      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007840:	2b00      	cmp	r3, #0
 8007842:	d028      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007848:	2b00      	cmp	r3, #0
 800784a:	d124      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800784c:	4b71      	ldr	r3, [pc, #452]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800784e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007852:	0c1b      	lsrs	r3, r3, #16
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	3301      	adds	r3, #1
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800785e:	4b6d      	ldr	r3, [pc, #436]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007864:	0e1b      	lsrs	r3, r3, #24
 8007866:	f003 030f 	and.w	r3, r3, #15
 800786a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	019b      	lsls	r3, r3, #6
 8007876:	431a      	orrs	r2, r3
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	085b      	lsrs	r3, r3, #1
 800787c:	3b01      	subs	r3, #1
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	431a      	orrs	r2, r3
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	061b      	lsls	r3, r3, #24
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	071b      	lsls	r3, r3, #28
 800788e:	4961      	ldr	r1, [pc, #388]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0304 	and.w	r3, r3, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d004      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078aa:	d00a      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d035      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078c0:	d130      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80078c2:	4b54      	ldr	r3, [pc, #336]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80078c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c8:	0c1b      	lsrs	r3, r3, #16
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	3301      	adds	r3, #1
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078d4:	4b4f      	ldr	r3, [pc, #316]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80078d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078da:	0f1b      	lsrs	r3, r3, #28
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	019b      	lsls	r3, r3, #6
 80078ec:	431a      	orrs	r2, r3
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	085b      	lsrs	r3, r3, #1
 80078f2:	3b01      	subs	r3, #1
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	431a      	orrs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	061b      	lsls	r3, r3, #24
 80078fe:	431a      	orrs	r2, r3
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	071b      	lsls	r3, r3, #28
 8007904:	4943      	ldr	r1, [pc, #268]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007906:	4313      	orrs	r3, r2
 8007908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800790c:	4b41      	ldr	r3, [pc, #260]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800790e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007912:	f023 021f 	bic.w	r2, r3, #31
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	3b01      	subs	r3, #1
 800791c:	493d      	ldr	r1, [pc, #244]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800791e:	4313      	orrs	r3, r2
 8007920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800792c:	2b00      	cmp	r3, #0
 800792e:	d029      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007938:	d124      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800793a:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800793c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	3301      	adds	r3, #1
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800794c:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800794e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007952:	0f1b      	lsrs	r3, r3, #28
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	019b      	lsls	r3, r3, #6
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	085b      	lsrs	r3, r3, #1
 800796c:	3b01      	subs	r3, #1
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	431a      	orrs	r2, r3
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	061b      	lsls	r3, r3, #24
 8007976:	431a      	orrs	r2, r3
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	071b      	lsls	r3, r3, #28
 800797c:	4925      	ldr	r1, [pc, #148]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798c:	2b00      	cmp	r3, #0
 800798e:	d016      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	019b      	lsls	r3, r3, #6
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	085b      	lsrs	r3, r3, #1
 80079a2:	3b01      	subs	r3, #1
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	061b      	lsls	r3, r3, #24
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	071b      	lsls	r3, r3, #28
 80079b6:	4917      	ldr	r1, [pc, #92]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079be:	4b16      	ldr	r3, [pc, #88]	; (8007a18 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079c4:	f7fb ff4a 	bl	800385c <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079ca:	e008      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079cc:	f7fb ff46 	bl	800385c <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e09f      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079de:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	f040 8095 	bne.w	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079f2:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079f8:	f7fb ff30 	bl	800385c <HAL_GetTick>
 80079fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079fe:	e00f      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a00:	f7fb ff2c 	bl	800385c <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d908      	bls.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e085      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007a12:	bf00      	nop
 8007a14:	40023800 	.word	0x40023800
 8007a18:	42470068 	.word	0x42470068
 8007a1c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a20:	4b41      	ldr	r3, [pc, #260]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a2c:	d0e8      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d02b      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d127      	bne.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007a56:	4b34      	ldr	r3, [pc, #208]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5c:	0c1b      	lsrs	r3, r3, #16
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	3301      	adds	r3, #1
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	019b      	lsls	r3, r3, #6
 8007a72:	431a      	orrs	r2, r3
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	041b      	lsls	r3, r3, #16
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	061b      	lsls	r3, r3, #24
 8007a84:	4928      	ldr	r1, [pc, #160]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a8c:	4b26      	ldr	r3, [pc, #152]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a92:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	4922      	ldr	r1, [pc, #136]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d01d      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aba:	d118      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007abc:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac2:	0e1b      	lsrs	r3, r3, #24
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699a      	ldr	r2, [r3, #24]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	019b      	lsls	r3, r3, #6
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	085b      	lsrs	r3, r3, #1
 8007adc:	3b01      	subs	r3, #1
 8007ade:	041b      	lsls	r3, r3, #16
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	061b      	lsls	r3, r3, #24
 8007ae6:	4910      	ldr	r1, [pc, #64]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007af4:	f7fb feb2 	bl	800385c <HAL_GetTick>
 8007af8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007afa:	e008      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007afc:	f7fb feae 	bl	800385c <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e007      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b0e:	4b06      	ldr	r3, [pc, #24]	; (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b1a:	d1ef      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3730      	adds	r7, #48	; 0x30
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	42470070 	.word	0x42470070

08007b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b34:	b0a6      	sub	sp, #152	; 0x98
 8007b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b56:	4bc8      	ldr	r3, [pc, #800]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 030c 	and.w	r3, r3, #12
 8007b5e:	2b0c      	cmp	r3, #12
 8007b60:	f200 817e 	bhi.w	8007e60 <HAL_RCC_GetSysClockFreq+0x330>
 8007b64:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007ba1 	.word	0x08007ba1
 8007b70:	08007e61 	.word	0x08007e61
 8007b74:	08007e61 	.word	0x08007e61
 8007b78:	08007e61 	.word	0x08007e61
 8007b7c:	08007ba9 	.word	0x08007ba9
 8007b80:	08007e61 	.word	0x08007e61
 8007b84:	08007e61 	.word	0x08007e61
 8007b88:	08007e61 	.word	0x08007e61
 8007b8c:	08007bb1 	.word	0x08007bb1
 8007b90:	08007e61 	.word	0x08007e61
 8007b94:	08007e61 	.word	0x08007e61
 8007b98:	08007e61 	.word	0x08007e61
 8007b9c:	08007d1b 	.word	0x08007d1b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ba0:	4bb6      	ldr	r3, [pc, #728]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x34c>)
 8007ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8007ba6:	e15f      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ba8:	4bb5      	ldr	r3, [pc, #724]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x350>)
 8007baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007bae:	e15b      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bb0:	4bb1      	ldr	r3, [pc, #708]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bbc:	4bae      	ldr	r3, [pc, #696]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d031      	beq.n	8007c2c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bc8:	4bab      	ldr	r3, [pc, #684]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	099b      	lsrs	r3, r3, #6
 8007bce:	2200      	movs	r2, #0
 8007bd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	663b      	str	r3, [r7, #96]	; 0x60
 8007bdc:	2300      	movs	r3, #0
 8007bde:	667b      	str	r3, [r7, #100]	; 0x64
 8007be0:	4ba7      	ldr	r3, [pc, #668]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x350>)
 8007be2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007be6:	462a      	mov	r2, r5
 8007be8:	fb03 f202 	mul.w	r2, r3, r2
 8007bec:	2300      	movs	r3, #0
 8007bee:	4621      	mov	r1, r4
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	4aa2      	ldr	r2, [pc, #648]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x350>)
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	fba1 1202 	umull	r1, r2, r1, r2
 8007bfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007c00:	460a      	mov	r2, r1
 8007c02:	67ba      	str	r2, [r7, #120]	; 0x78
 8007c04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c06:	4413      	add	r3, r2
 8007c08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c0e:	2200      	movs	r2, #0
 8007c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007c14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c18:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8007c1c:	f7f8 ffe4 	bl	8000be8 <__aeabi_uldivmod>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4613      	mov	r3, r2
 8007c26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c2a:	e064      	b.n	8007cf6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c2c:	4b92      	ldr	r3, [pc, #584]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	099b      	lsrs	r3, r3, #6
 8007c32:	2200      	movs	r2, #0
 8007c34:	653b      	str	r3, [r7, #80]	; 0x50
 8007c36:	657a      	str	r2, [r7, #84]	; 0x54
 8007c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c40:	2300      	movs	r3, #0
 8007c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c44:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8007c48:	4622      	mov	r2, r4
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	f04f 0000 	mov.w	r0, #0
 8007c50:	f04f 0100 	mov.w	r1, #0
 8007c54:	0159      	lsls	r1, r3, #5
 8007c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c5a:	0150      	lsls	r0, r2, #5
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4621      	mov	r1, r4
 8007c62:	1a51      	subs	r1, r2, r1
 8007c64:	6139      	str	r1, [r7, #16]
 8007c66:	4629      	mov	r1, r5
 8007c68:	eb63 0301 	sbc.w	r3, r3, r1
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	f04f 0200 	mov.w	r2, #0
 8007c72:	f04f 0300 	mov.w	r3, #0
 8007c76:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c7a:	4659      	mov	r1, fp
 8007c7c:	018b      	lsls	r3, r1, #6
 8007c7e:	4651      	mov	r1, sl
 8007c80:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c84:	4651      	mov	r1, sl
 8007c86:	018a      	lsls	r2, r1, #6
 8007c88:	4651      	mov	r1, sl
 8007c8a:	ebb2 0801 	subs.w	r8, r2, r1
 8007c8e:	4659      	mov	r1, fp
 8007c90:	eb63 0901 	sbc.w	r9, r3, r1
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ca0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ca4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ca8:	4690      	mov	r8, r2
 8007caa:	4699      	mov	r9, r3
 8007cac:	4623      	mov	r3, r4
 8007cae:	eb18 0303 	adds.w	r3, r8, r3
 8007cb2:	60bb      	str	r3, [r7, #8]
 8007cb4:	462b      	mov	r3, r5
 8007cb6:	eb49 0303 	adc.w	r3, r9, r3
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007cc8:	4629      	mov	r1, r5
 8007cca:	028b      	lsls	r3, r1, #10
 8007ccc:	4621      	mov	r1, r4
 8007cce:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	028a      	lsls	r2, r1, #10
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4619      	mov	r1, r3
 8007cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cde:	2200      	movs	r2, #0
 8007ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce2:	647a      	str	r2, [r7, #68]	; 0x44
 8007ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ce8:	f7f8 ff7e 	bl	8000be8 <__aeabi_uldivmod>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007cf6:	4b60      	ldr	r3, [pc, #384]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	0c1b      	lsrs	r3, r3, #16
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	3301      	adds	r3, #1
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8007d08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007d18:	e0a6      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d1a:	4b57      	ldr	r3, [pc, #348]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d26:	4b54      	ldr	r3, [pc, #336]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d02a      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d32:	4b51      	ldr	r3, [pc, #324]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	099b      	lsrs	r3, r3, #6
 8007d38:	2200      	movs	r2, #0
 8007d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007d44:	2100      	movs	r1, #0
 8007d46:	4b4e      	ldr	r3, [pc, #312]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x350>)
 8007d48:	fb03 f201 	mul.w	r2, r3, r1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	fb00 f303 	mul.w	r3, r0, r3
 8007d52:	4413      	add	r3, r2
 8007d54:	4a4a      	ldr	r2, [pc, #296]	; (8007e80 <HAL_RCC_GetSysClockFreq+0x350>)
 8007d56:	fba0 1202 	umull	r1, r2, r0, r2
 8007d5a:	677a      	str	r2, [r7, #116]	; 0x74
 8007d5c:	460a      	mov	r2, r1
 8007d5e:	673a      	str	r2, [r7, #112]	; 0x70
 8007d60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d62:	4413      	add	r3, r2
 8007d64:	677b      	str	r3, [r7, #116]	; 0x74
 8007d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d6e:	637a      	str	r2, [r7, #52]	; 0x34
 8007d70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007d74:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007d78:	f7f8 ff36 	bl	8000be8 <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4613      	mov	r3, r2
 8007d82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d86:	e05b      	b.n	8007e40 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d88:	4b3b      	ldr	r3, [pc, #236]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	099b      	lsrs	r3, r3, #6
 8007d8e:	2200      	movs	r2, #0
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	623b      	str	r3, [r7, #32]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007da0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007da4:	4642      	mov	r2, r8
 8007da6:	464b      	mov	r3, r9
 8007da8:	f04f 0000 	mov.w	r0, #0
 8007dac:	f04f 0100 	mov.w	r1, #0
 8007db0:	0159      	lsls	r1, r3, #5
 8007db2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007db6:	0150      	lsls	r0, r2, #5
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4641      	mov	r1, r8
 8007dbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007dc8:	f04f 0200 	mov.w	r2, #0
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007dd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007dd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ddc:	ebb2 040a 	subs.w	r4, r2, sl
 8007de0:	eb63 050b 	sbc.w	r5, r3, fp
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	00eb      	lsls	r3, r5, #3
 8007dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007df2:	00e2      	lsls	r2, r4, #3
 8007df4:	4614      	mov	r4, r2
 8007df6:	461d      	mov	r5, r3
 8007df8:	4643      	mov	r3, r8
 8007dfa:	18e3      	adds	r3, r4, r3
 8007dfc:	603b      	str	r3, [r7, #0]
 8007dfe:	464b      	mov	r3, r9
 8007e00:	eb45 0303 	adc.w	r3, r5, r3
 8007e04:	607b      	str	r3, [r7, #4]
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e12:	4629      	mov	r1, r5
 8007e14:	028b      	lsls	r3, r1, #10
 8007e16:	4621      	mov	r1, r4
 8007e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	028a      	lsls	r2, r1, #10
 8007e20:	4610      	mov	r0, r2
 8007e22:	4619      	mov	r1, r3
 8007e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e28:	2200      	movs	r2, #0
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	61fa      	str	r2, [r7, #28]
 8007e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e32:	f7f8 fed9 	bl	8000be8 <__aeabi_uldivmod>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007e40:	4b0d      	ldr	r3, [pc, #52]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x348>)
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	0f1b      	lsrs	r3, r3, #28
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8007e4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007e5e:	e003      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e60:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x34c>)
 8007e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8007e66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3798      	adds	r7, #152	; 0x98
 8007e70:	46bd      	mov	sp, r7
 8007e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e76:	bf00      	nop
 8007e78:	40023800 	.word	0x40023800
 8007e7c:	00f42400 	.word	0x00f42400
 8007e80:	00b71b00 	.word	0x00b71b00

08007e84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e28d      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 8083 	beq.w	8007faa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007ea4:	4b94      	ldr	r3, [pc, #592]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 030c 	and.w	r3, r3, #12
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d019      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007eb0:	4b91      	ldr	r3, [pc, #580]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d106      	bne.n	8007eca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ebc:	4b8e      	ldr	r3, [pc, #568]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ec8:	d00c      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eca:	4b8b      	ldr	r3, [pc, #556]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ed2:	2b0c      	cmp	r3, #12
 8007ed4:	d112      	bne.n	8007efc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ed6:	4b88      	ldr	r3, [pc, #544]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee2:	d10b      	bne.n	8007efc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee4:	4b84      	ldr	r3, [pc, #528]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05b      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x124>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d157      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e25a      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f04:	d106      	bne.n	8007f14 <HAL_RCC_OscConfig+0x90>
 8007f06:	4b7c      	ldr	r3, [pc, #496]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a7b      	ldr	r2, [pc, #492]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	e01d      	b.n	8007f50 <HAL_RCC_OscConfig+0xcc>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f1c:	d10c      	bne.n	8007f38 <HAL_RCC_OscConfig+0xb4>
 8007f1e:	4b76      	ldr	r3, [pc, #472]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a75      	ldr	r2, [pc, #468]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4b73      	ldr	r3, [pc, #460]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a72      	ldr	r2, [pc, #456]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	e00b      	b.n	8007f50 <HAL_RCC_OscConfig+0xcc>
 8007f38:	4b6f      	ldr	r3, [pc, #444]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a6e      	ldr	r2, [pc, #440]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	4b6c      	ldr	r3, [pc, #432]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a6b      	ldr	r2, [pc, #428]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d013      	beq.n	8007f80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f58:	f7fb fc80 	bl	800385c <HAL_GetTick>
 8007f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5e:	e008      	b.n	8007f72 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f60:	f7fb fc7c 	bl	800385c <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2b64      	cmp	r3, #100	; 0x64
 8007f6c:	d901      	bls.n	8007f72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e21f      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f72:	4b61      	ldr	r3, [pc, #388]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0f0      	beq.n	8007f60 <HAL_RCC_OscConfig+0xdc>
 8007f7e:	e014      	b.n	8007faa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f80:	f7fb fc6c 	bl	800385c <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f86:	e008      	b.n	8007f9a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f88:	f7fb fc68 	bl	800385c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	2b64      	cmp	r3, #100	; 0x64
 8007f94:	d901      	bls.n	8007f9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e20b      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f9a:	4b57      	ldr	r3, [pc, #348]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f0      	bne.n	8007f88 <HAL_RCC_OscConfig+0x104>
 8007fa6:	e000      	b.n	8007faa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d06f      	beq.n	8008096 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007fb6:	4b50      	ldr	r3, [pc, #320]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d017      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007fc2:	4b4d      	ldr	r3, [pc, #308]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007fca:	2b08      	cmp	r3, #8
 8007fcc:	d105      	bne.n	8007fda <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007fce:	4b4a      	ldr	r3, [pc, #296]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fda:	4b47      	ldr	r3, [pc, #284]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007fe2:	2b0c      	cmp	r3, #12
 8007fe4:	d11c      	bne.n	8008020 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fe6:	4b44      	ldr	r3, [pc, #272]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d116      	bne.n	8008020 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ff2:	4b41      	ldr	r3, [pc, #260]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <HAL_RCC_OscConfig+0x186>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	68db      	ldr	r3, [r3, #12]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d001      	beq.n	800800a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e1d3      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800a:	4b3b      	ldr	r3, [pc, #236]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4937      	ldr	r1, [pc, #220]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 800801a:	4313      	orrs	r3, r2
 800801c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800801e:	e03a      	b.n	8008096 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d020      	beq.n	800806a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008028:	4b34      	ldr	r3, [pc, #208]	; (80080fc <HAL_RCC_OscConfig+0x278>)
 800802a:	2201      	movs	r2, #1
 800802c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802e:	f7fb fc15 	bl	800385c <HAL_GetTick>
 8008032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008034:	e008      	b.n	8008048 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008036:	f7fb fc11 	bl	800385c <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d901      	bls.n	8008048 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e1b4      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008048:	4b2b      	ldr	r3, [pc, #172]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0f0      	beq.n	8008036 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008054:	4b28      	ldr	r3, [pc, #160]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	00db      	lsls	r3, r3, #3
 8008062:	4925      	ldr	r1, [pc, #148]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 8008064:	4313      	orrs	r3, r2
 8008066:	600b      	str	r3, [r1, #0]
 8008068:	e015      	b.n	8008096 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800806a:	4b24      	ldr	r3, [pc, #144]	; (80080fc <HAL_RCC_OscConfig+0x278>)
 800806c:	2200      	movs	r2, #0
 800806e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fb fbf4 	bl	800385c <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008078:	f7fb fbf0 	bl	800385c <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e193      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800808a:	4b1b      	ldr	r3, [pc, #108]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0308 	and.w	r3, r3, #8
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d036      	beq.n	8008110 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d016      	beq.n	80080d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080aa:	4b15      	ldr	r3, [pc, #84]	; (8008100 <HAL_RCC_OscConfig+0x27c>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b0:	f7fb fbd4 	bl	800385c <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080b8:	f7fb fbd0 	bl	800385c <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e173      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ca:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <HAL_RCC_OscConfig+0x274>)
 80080cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0f0      	beq.n	80080b8 <HAL_RCC_OscConfig+0x234>
 80080d6:	e01b      	b.n	8008110 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080d8:	4b09      	ldr	r3, [pc, #36]	; (8008100 <HAL_RCC_OscConfig+0x27c>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080de:	f7fb fbbd 	bl	800385c <HAL_GetTick>
 80080e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080e4:	e00e      	b.n	8008104 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080e6:	f7fb fbb9 	bl	800385c <HAL_GetTick>
 80080ea:	4602      	mov	r2, r0
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	1ad3      	subs	r3, r2, r3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d907      	bls.n	8008104 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e15c      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
 80080f8:	40023800 	.word	0x40023800
 80080fc:	42470000 	.word	0x42470000
 8008100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008104:	4b8a      	ldr	r3, [pc, #552]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1ea      	bne.n	80080e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8097 	beq.w	800824c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800811e:	2300      	movs	r3, #0
 8008120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008122:	4b83      	ldr	r3, [pc, #524]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10f      	bne.n	800814e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800812e:	2300      	movs	r3, #0
 8008130:	60bb      	str	r3, [r7, #8]
 8008132:	4b7f      	ldr	r3, [pc, #508]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	4a7e      	ldr	r2, [pc, #504]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800813c:	6413      	str	r3, [r2, #64]	; 0x40
 800813e:	4b7c      	ldr	r3, [pc, #496]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008146:	60bb      	str	r3, [r7, #8]
 8008148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800814e:	4b79      	ldr	r3, [pc, #484]	; (8008334 <HAL_RCC_OscConfig+0x4b0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008156:	2b00      	cmp	r3, #0
 8008158:	d118      	bne.n	800818c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800815a:	4b76      	ldr	r3, [pc, #472]	; (8008334 <HAL_RCC_OscConfig+0x4b0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a75      	ldr	r2, [pc, #468]	; (8008334 <HAL_RCC_OscConfig+0x4b0>)
 8008160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008166:	f7fb fb79 	bl	800385c <HAL_GetTick>
 800816a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800816c:	e008      	b.n	8008180 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800816e:	f7fb fb75 	bl	800385c <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	2b02      	cmp	r3, #2
 800817a:	d901      	bls.n	8008180 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e118      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008180:	4b6c      	ldr	r3, [pc, #432]	; (8008334 <HAL_RCC_OscConfig+0x4b0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008188:	2b00      	cmp	r3, #0
 800818a:	d0f0      	beq.n	800816e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d106      	bne.n	80081a2 <HAL_RCC_OscConfig+0x31e>
 8008194:	4b66      	ldr	r3, [pc, #408]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008198:	4a65      	ldr	r2, [pc, #404]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	6713      	str	r3, [r2, #112]	; 0x70
 80081a0:	e01c      	b.n	80081dc <HAL_RCC_OscConfig+0x358>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b05      	cmp	r3, #5
 80081a8:	d10c      	bne.n	80081c4 <HAL_RCC_OscConfig+0x340>
 80081aa:	4b61      	ldr	r3, [pc, #388]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	4a60      	ldr	r2, [pc, #384]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081b0:	f043 0304 	orr.w	r3, r3, #4
 80081b4:	6713      	str	r3, [r2, #112]	; 0x70
 80081b6:	4b5e      	ldr	r3, [pc, #376]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ba:	4a5d      	ldr	r2, [pc, #372]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	6713      	str	r3, [r2, #112]	; 0x70
 80081c2:	e00b      	b.n	80081dc <HAL_RCC_OscConfig+0x358>
 80081c4:	4b5a      	ldr	r3, [pc, #360]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c8:	4a59      	ldr	r2, [pc, #356]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081ca:	f023 0301 	bic.w	r3, r3, #1
 80081ce:	6713      	str	r3, [r2, #112]	; 0x70
 80081d0:	4b57      	ldr	r3, [pc, #348]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d4:	4a56      	ldr	r2, [pc, #344]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80081d6:	f023 0304 	bic.w	r3, r3, #4
 80081da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d015      	beq.n	8008210 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e4:	f7fb fb3a 	bl	800385c <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081ea:	e00a      	b.n	8008202 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ec:	f7fb fb36 	bl	800385c <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e0d7      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008202:	4b4b      	ldr	r3, [pc, #300]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0ee      	beq.n	80081ec <HAL_RCC_OscConfig+0x368>
 800820e:	e014      	b.n	800823a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008210:	f7fb fb24 	bl	800385c <HAL_GetTick>
 8008214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008216:	e00a      	b.n	800822e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008218:	f7fb fb20 	bl	800385c <HAL_GetTick>
 800821c:	4602      	mov	r2, r0
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	f241 3288 	movw	r2, #5000	; 0x1388
 8008226:	4293      	cmp	r3, r2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e0c1      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800822e:	4b40      	ldr	r3, [pc, #256]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1ee      	bne.n	8008218 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800823a:	7dfb      	ldrb	r3, [r7, #23]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d105      	bne.n	800824c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008240:	4b3b      	ldr	r3, [pc, #236]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	4a3a      	ldr	r2, [pc, #232]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800824a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80ad 	beq.w	80083b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008256:	4b36      	ldr	r3, [pc, #216]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 030c 	and.w	r3, r3, #12
 800825e:	2b08      	cmp	r3, #8
 8008260:	d060      	beq.n	8008324 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d145      	bne.n	80082f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800826a:	4b33      	ldr	r3, [pc, #204]	; (8008338 <HAL_RCC_OscConfig+0x4b4>)
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008270:	f7fb faf4 	bl	800385c <HAL_GetTick>
 8008274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008276:	e008      	b.n	800828a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008278:	f7fb faf0 	bl	800385c <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d901      	bls.n	800828a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e093      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800828a:	4b29      	ldr	r3, [pc, #164]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1f0      	bne.n	8008278 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69da      	ldr	r2, [r3, #28]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	019b      	lsls	r3, r3, #6
 80082a6:	431a      	orrs	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	3b01      	subs	r3, #1
 80082b0:	041b      	lsls	r3, r3, #16
 80082b2:	431a      	orrs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	061b      	lsls	r3, r3, #24
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	071b      	lsls	r3, r3, #28
 80082c2:	491b      	ldr	r1, [pc, #108]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082c8:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <HAL_RCC_OscConfig+0x4b4>)
 80082ca:	2201      	movs	r2, #1
 80082cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ce:	f7fb fac5 	bl	800385c <HAL_GetTick>
 80082d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082d4:	e008      	b.n	80082e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082d6:	f7fb fac1 	bl	800385c <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e064      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e8:	4b11      	ldr	r3, [pc, #68]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d0f0      	beq.n	80082d6 <HAL_RCC_OscConfig+0x452>
 80082f4:	e05c      	b.n	80083b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082f6:	4b10      	ldr	r3, [pc, #64]	; (8008338 <HAL_RCC_OscConfig+0x4b4>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082fc:	f7fb faae 	bl	800385c <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008302:	e008      	b.n	8008316 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008304:	f7fb faaa 	bl	800385c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	2b02      	cmp	r3, #2
 8008310:	d901      	bls.n	8008316 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008312:	2303      	movs	r3, #3
 8008314:	e04d      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008316:	4b06      	ldr	r3, [pc, #24]	; (8008330 <HAL_RCC_OscConfig+0x4ac>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f0      	bne.n	8008304 <HAL_RCC_OscConfig+0x480>
 8008322:	e045      	b.n	80083b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d107      	bne.n	800833c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e040      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
 8008330:	40023800 	.word	0x40023800
 8008334:	40007000 	.word	0x40007000
 8008338:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800833c:	4b1f      	ldr	r3, [pc, #124]	; (80083bc <HAL_RCC_OscConfig+0x538>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d030      	beq.n	80083ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008354:	429a      	cmp	r2, r3
 8008356:	d129      	bne.n	80083ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008362:	429a      	cmp	r2, r3
 8008364:	d122      	bne.n	80083ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800836c:	4013      	ands	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008372:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008374:	4293      	cmp	r3, r2
 8008376:	d119      	bne.n	80083ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	3b01      	subs	r3, #1
 8008386:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008388:	429a      	cmp	r2, r3
 800838a:	d10f      	bne.n	80083ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008398:	429a      	cmp	r2, r3
 800839a:	d107      	bne.n	80083ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d001      	beq.n	80083b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	40023800 	.word	0x40023800

080083c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e066      	b.n	80084a4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	7f5b      	ldrb	r3, [r3, #29]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d105      	bne.n	80083ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fa fabe 	bl	8002968 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	22ca      	movs	r2, #202	; 0xca
 80083f8:	625a      	str	r2, [r3, #36]	; 0x24
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2253      	movs	r2, #83	; 0x53
 8008400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa45 	bl	8008892 <RTC_EnterInitMode>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d12c      	bne.n	800846c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	6812      	ldr	r2, [r2, #0]
 800841c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008424:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6899      	ldr	r1, [r3, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	431a      	orrs	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	431a      	orrs	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	68d2      	ldr	r2, [r2, #12]
 800844c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6919      	ldr	r1, [r3, #16]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	041a      	lsls	r2, r3, #16
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fa4c 	bl	8008900 <RTC_ExitInitMode>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d113      	bne.n	800849a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008480:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	699a      	ldr	r2, [r3, #24]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	22ff      	movs	r2, #255	; 0xff
 80084a0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b087      	sub	sp, #28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	7f1b      	ldrb	r3, [r3, #28]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_RTC_SetTime+0x1c>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e087      	b.n	80085d8 <HAL_RTC_SetTime+0x12c>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2202      	movs	r2, #2
 80084d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d126      	bne.n	8008528 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2200      	movs	r2, #0
 80084ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fa29 	bl	800894a <RTC_ByteToBcd2>
 80084f8:	4603      	mov	r3, r0
 80084fa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	785b      	ldrb	r3, [r3, #1]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fa22 	bl	800894a <RTC_ByteToBcd2>
 8008506:	4603      	mov	r3, r0
 8008508:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800850a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	789b      	ldrb	r3, [r3, #2]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fa1a 	bl	800894a <RTC_ByteToBcd2>
 8008516:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008518:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	78db      	ldrb	r3, [r3, #3]
 8008520:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	e018      	b.n	800855a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2200      	movs	r2, #0
 800853a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008548:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800854e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	78db      	ldrb	r3, [r3, #3]
 8008554:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	22ca      	movs	r2, #202	; 0xca
 8008560:	625a      	str	r2, [r3, #36]	; 0x24
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2253      	movs	r2, #83	; 0x53
 8008568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f991 	bl	8008892 <RTC_EnterInitMode>
 8008570:	4603      	mov	r3, r0
 8008572:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008574:	7cfb      	ldrb	r3, [r7, #19]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d120      	bne.n	80085bc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008584:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008588:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008598:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6899      	ldr	r1, [r3, #8]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	68da      	ldr	r2, [r3, #12]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	431a      	orrs	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 f9a4 	bl	8008900 <RTC_ExitInitMode>
 80085b8:	4603      	mov	r3, r0
 80085ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80085bc:	7cfb      	ldrb	r3, [r7, #19]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d102      	bne.n	80085c8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2201      	movs	r2, #1
 80085c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	771a      	strb	r2, [r3, #28]

  return status;
 80085d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	371c      	adds	r7, #28
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd90      	pop	{r4, r7, pc}

080085e0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008612:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008616:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008622:	b2da      	uxtb	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	0a1b      	lsrs	r3, r3, #8
 800862c:	b2db      	uxtb	r3, r3
 800862e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008632:	b2da      	uxtb	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	0d9b      	lsrs	r3, r3, #22
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	b2da      	uxtb	r2, r3
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d11a      	bne.n	8008692 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f98f 	bl	8008984 <RTC_Bcd2ToByte>
 8008666:	4603      	mov	r3, r0
 8008668:	461a      	mov	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f986 	bl	8008984 <RTC_Bcd2ToByte>
 8008678:	4603      	mov	r3, r0
 800867a:	461a      	mov	r2, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	789b      	ldrb	r3, [r3, #2]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 f97d 	bl	8008984 <RTC_Bcd2ToByte>
 800868a:	4603      	mov	r3, r0
 800868c:	461a      	mov	r2, r3
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	7f1b      	ldrb	r3, [r3, #28]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d101      	bne.n	80086b8 <HAL_RTC_SetDate+0x1c>
 80086b4:	2302      	movs	r3, #2
 80086b6:	e071      	b.n	800879c <HAL_RTC_SetDate+0x100>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2202      	movs	r2, #2
 80086c2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10e      	bne.n	80086e8 <HAL_RTC_SetDate+0x4c>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	785b      	ldrb	r3, [r3, #1]
 80086ce:	f003 0310 	and.w	r3, r3, #16
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d008      	beq.n	80086e8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	785b      	ldrb	r3, [r3, #1]
 80086da:	f023 0310 	bic.w	r3, r3, #16
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	330a      	adds	r3, #10
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d11c      	bne.n	8008728 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	78db      	ldrb	r3, [r3, #3]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 f929 	bl	800894a <RTC_ByteToBcd2>
 80086f8:	4603      	mov	r3, r0
 80086fa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	785b      	ldrb	r3, [r3, #1]
 8008700:	4618      	mov	r0, r3
 8008702:	f000 f922 	bl	800894a <RTC_ByteToBcd2>
 8008706:	4603      	mov	r3, r0
 8008708:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800870a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	789b      	ldrb	r3, [r3, #2]
 8008710:	4618      	mov	r0, r3
 8008712:	f000 f91a 	bl	800894a <RTC_ByteToBcd2>
 8008716:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008718:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e00e      	b.n	8008746 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	78db      	ldrb	r3, [r3, #3]
 800872c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008734:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800873a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	22ca      	movs	r2, #202	; 0xca
 800874c:	625a      	str	r2, [r3, #36]	; 0x24
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2253      	movs	r2, #83	; 0x53
 8008754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f89b 	bl	8008892 <RTC_EnterInitMode>
 800875c:	4603      	mov	r3, r0
 800875e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008760:	7cfb      	ldrb	r3, [r7, #19]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10c      	bne.n	8008780 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008770:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008774:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f8c2 	bl	8008900 <RTC_ExitInitMode>
 800877c:	4603      	mov	r3, r0
 800877e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008780:	7cfb      	ldrb	r3, [r7, #19]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d102      	bne.n	800878c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	22ff      	movs	r2, #255	; 0xff
 8008792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	771a      	strb	r2, [r3, #28]

  return status;
 800879a:	7cfb      	ldrb	r3, [r7, #19]
}
 800879c:	4618      	mov	r0, r3
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	0c1b      	lsrs	r3, r3, #16
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	0a1b      	lsrs	r3, r3, #8
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	f003 031f 	and.w	r3, r3, #31
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	0b5b      	lsrs	r3, r3, #13
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d11a      	bne.n	8008838 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	78db      	ldrb	r3, [r3, #3]
 8008806:	4618      	mov	r0, r3
 8008808:	f000 f8bc 	bl	8008984 <RTC_Bcd2ToByte>
 800880c:	4603      	mov	r3, r0
 800880e:	461a      	mov	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	4618      	mov	r0, r3
 800881a:	f000 f8b3 	bl	8008984 <RTC_Bcd2ToByte>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	789b      	ldrb	r3, [r3, #2]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f8aa 	bl	8008984 <RTC_Bcd2ToByte>
 8008830:	4603      	mov	r3, r0
 8008832:	461a      	mov	r2, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800885c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800885e:	f7fa fffd 	bl	800385c <HAL_GetTick>
 8008862:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008864:	e009      	b.n	800887a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008866:	f7fa fff9 	bl	800385c <HAL_GetTick>
 800886a:	4602      	mov	r2, r0
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008874:	d901      	bls.n	800887a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e007      	b.n	800888a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0ee      	beq.n	8008866 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d122      	bne.n	80088f6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80088be:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088c0:	f7fa ffcc 	bl	800385c <HAL_GetTick>
 80088c4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80088c6:	e00c      	b.n	80088e2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088c8:	f7fa ffc8 	bl	800385c <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088d6:	d904      	bls.n	80088e2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2204      	movs	r2, #4
 80088dc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <RTC_EnterInitMode+0x64>
 80088f0:	7bfb      	ldrb	r3, [r7, #15]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d1e8      	bne.n	80088c8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800891a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10a      	bne.n	8008940 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff ff89 	bl	8008842 <HAL_RTC_WaitForSynchro>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2204      	movs	r2, #4
 800893a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	4603      	mov	r3, r0
 8008952:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008958:	e005      	b.n	8008966 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
 800895c:	3301      	adds	r3, #1
 800895e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	3b0a      	subs	r3, #10
 8008964:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008966:	79fb      	ldrb	r3, [r7, #7]
 8008968:	2b09      	cmp	r3, #9
 800896a:	d8f6      	bhi.n	800895a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	b2da      	uxtb	r2, r3
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	4313      	orrs	r3, r2
 8008976:	b2db      	uxtb	r3, r3
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	4603      	mov	r3, r0
 800898c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	091b      	lsrs	r3, r3, #4
 8008996:	b2db      	uxtb	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	0092      	lsls	r2, r2, #2
 800899c:	4413      	add	r3, r2
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80089a2:	79fb      	ldrb	r3, [r7, #7]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	7bfb      	ldrb	r3, [r7, #15]
 80089ac:	4413      	add	r3, r2
 80089ae:	b2db      	uxtb	r3, r3
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e07b      	b.n	8008ac6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d108      	bne.n	80089e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089de:	d009      	beq.n	80089f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	61da      	str	r2, [r3, #28]
 80089e6:	e005      	b.n	80089f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d106      	bne.n	8008a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7f9 ffd4 	bl	80029bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a46:	431a      	orrs	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a6e:	431a      	orrs	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	ea42 0103 	orr.w	r1, r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	f003 0104 	and.w	r1, r3, #4
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	f003 0210 	and.w	r2, r3, #16
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69da      	ldr	r2, [r3, #28]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e041      	b.n	8008b64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7f9 ffa9 	bl	8002a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	f000 fcc7 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d001      	beq.n	8008b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e04e      	b.n	8008c22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f042 0201 	orr.w	r2, r2, #1
 8008b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a23      	ldr	r2, [pc, #140]	; (8008c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d022      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bae:	d01d      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a1f      	ldr	r2, [pc, #124]	; (8008c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d018      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d013      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a1c      	ldr	r2, [pc, #112]	; (8008c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00e      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a1b      	ldr	r2, [pc, #108]	; (8008c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d009      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a19      	ldr	r2, [pc, #100]	; (8008c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d004      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d111      	bne.n	8008c10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b06      	cmp	r3, #6
 8008bfc:	d010      	beq.n	8008c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 0201 	orr.w	r2, r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c0e:	e007      	b.n	8008c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0201 	orr.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	40010000 	.word	0x40010000
 8008c34:	40000400 	.word	0x40000400
 8008c38:	40000800 	.word	0x40000800
 8008c3c:	40000c00 	.word	0x40000c00
 8008c40:	40010400 	.word	0x40010400
 8008c44:	40014000 	.word	0x40014000
 8008c48:	40001800 	.word	0x40001800

08008c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e041      	b.n	8008ce2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f839 	bl	8008cea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3304      	adds	r3, #4
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	f000 fc08 	bl	80094a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b083      	sub	sp, #12
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008cf2:	bf00      	nop
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
	...

08008d00 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <HAL_TIM_PWM_Start_IT+0x28>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	bf14      	ite	ne
 8008d20:	2301      	movne	r3, #1
 8008d22:	2300      	moveq	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	e022      	b.n	8008d6e <HAL_TIM_PWM_Start_IT+0x6e>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d109      	bne.n	8008d42 <HAL_TIM_PWM_Start_IT+0x42>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	bf14      	ite	ne
 8008d3a:	2301      	movne	r3, #1
 8008d3c:	2300      	moveq	r3, #0
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	e015      	b.n	8008d6e <HAL_TIM_PWM_Start_IT+0x6e>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d109      	bne.n	8008d5c <HAL_TIM_PWM_Start_IT+0x5c>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	bf14      	ite	ne
 8008d54:	2301      	movne	r3, #1
 8008d56:	2300      	moveq	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	e008      	b.n	8008d6e <HAL_TIM_PWM_Start_IT+0x6e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e0c7      	b.n	8008f06 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_PWM_Start_IT+0x86>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d84:	e013      	b.n	8008dae <HAL_TIM_PWM_Start_IT+0xae>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d104      	bne.n	8008d96 <HAL_TIM_PWM_Start_IT+0x96>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d94:	e00b      	b.n	8008dae <HAL_TIM_PWM_Start_IT+0xae>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d104      	bne.n	8008da6 <HAL_TIM_PWM_Start_IT+0xa6>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008da4:	e003      	b.n	8008dae <HAL_TIM_PWM_Start_IT+0xae>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2202      	movs	r2, #2
 8008daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b0c      	cmp	r3, #12
 8008db2:	d841      	bhi.n	8008e38 <HAL_TIM_PWM_Start_IT+0x138>
 8008db4:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <HAL_TIM_PWM_Start_IT+0xbc>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008df1 	.word	0x08008df1
 8008dc0:	08008e39 	.word	0x08008e39
 8008dc4:	08008e39 	.word	0x08008e39
 8008dc8:	08008e39 	.word	0x08008e39
 8008dcc:	08008e03 	.word	0x08008e03
 8008dd0:	08008e39 	.word	0x08008e39
 8008dd4:	08008e39 	.word	0x08008e39
 8008dd8:	08008e39 	.word	0x08008e39
 8008ddc:	08008e15 	.word	0x08008e15
 8008de0:	08008e39 	.word	0x08008e39
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008e39 	.word	0x08008e39
 8008dec:	08008e27 	.word	0x08008e27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0202 	orr.w	r2, r2, #2
 8008dfe:	60da      	str	r2, [r3, #12]
      break;
 8008e00:	e01d      	b.n	8008e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0204 	orr.w	r2, r2, #4
 8008e10:	60da      	str	r2, [r3, #12]
      break;
 8008e12:	e014      	b.n	8008e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68da      	ldr	r2, [r3, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0208 	orr.w	r2, r2, #8
 8008e22:	60da      	str	r2, [r3, #12]
      break;
 8008e24:	e00b      	b.n	8008e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68da      	ldr	r2, [r3, #12]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 0210 	orr.w	r2, r2, #16
 8008e34:	60da      	str	r2, [r3, #12]
      break;
 8008e36:	e002      	b.n	8008e3e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d15f      	bne.n	8008f04 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fe11 	bl	8009a74 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a2e      	ldr	r2, [pc, #184]	; (8008f10 <HAL_TIM_PWM_Start_IT+0x210>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d004      	beq.n	8008e66 <HAL_TIM_PWM_Start_IT+0x166>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a2c      	ldr	r2, [pc, #176]	; (8008f14 <HAL_TIM_PWM_Start_IT+0x214>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d101      	bne.n	8008e6a <HAL_TIM_PWM_Start_IT+0x16a>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <HAL_TIM_PWM_Start_IT+0x16c>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d007      	beq.n	8008e80 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e7e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a22      	ldr	r2, [pc, #136]	; (8008f10 <HAL_TIM_PWM_Start_IT+0x210>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d022      	beq.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e92:	d01d      	beq.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1f      	ldr	r2, [pc, #124]	; (8008f18 <HAL_TIM_PWM_Start_IT+0x218>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d018      	beq.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1e      	ldr	r2, [pc, #120]	; (8008f1c <HAL_TIM_PWM_Start_IT+0x21c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d013      	beq.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <HAL_TIM_PWM_Start_IT+0x220>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d00e      	beq.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <HAL_TIM_PWM_Start_IT+0x214>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d009      	beq.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a18      	ldr	r2, [pc, #96]	; (8008f24 <HAL_TIM_PWM_Start_IT+0x224>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d004      	beq.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <HAL_TIM_PWM_Start_IT+0x228>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d111      	bne.n	8008ef4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b06      	cmp	r3, #6
 8008ee0:	d010      	beq.n	8008f04 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0201 	orr.w	r2, r2, #1
 8008ef0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef2:	e007      	b.n	8008f04 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0201 	orr.w	r2, r2, #1
 8008f02:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	40010000 	.word	0x40010000
 8008f14:	40010400 	.word	0x40010400
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40014000 	.word	0x40014000
 8008f28:	40001800 	.word	0x40001800

08008f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d122      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f003 0302 	and.w	r3, r3, #2
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d11b      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f06f 0202 	mvn.w	r2, #2
 8008f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f003 0303 	and.w	r3, r3, #3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa77 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8008f74:	e005      	b.n	8008f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa69 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa7a 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f003 0304 	and.w	r3, r3, #4
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d122      	bne.n	8008fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d11b      	bne.n	8008fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0204 	mvn.w	r2, #4
 8008fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa4d 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8008fc8:	e005      	b.n	8008fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fa3f 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa50 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b08      	cmp	r3, #8
 8008fe8:	d122      	bne.n	8009030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d11b      	bne.n	8009030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0208 	mvn.w	r2, #8
 8009000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2204      	movs	r2, #4
 8009006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f003 0303 	and.w	r3, r3, #3
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa23 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa15 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fa26 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b10      	cmp	r3, #16
 800903c:	d122      	bne.n	8009084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b10      	cmp	r3, #16
 800904a:	d11b      	bne.n	8009084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0210 	mvn.w	r2, #16
 8009054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2208      	movs	r2, #8
 800905a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f9f9 	bl	8009462 <HAL_TIM_IC_CaptureCallback>
 8009070:	e005      	b.n	800907e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f9eb 	bl	800944e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 f9fc 	bl	8009476 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	691b      	ldr	r3, [r3, #16]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b01      	cmp	r3, #1
 8009090:	d10e      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b01      	cmp	r3, #1
 800909e:	d107      	bne.n	80090b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f06f 0201 	mvn.w	r2, #1
 80090a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f7f9 fb86 	bl	80027bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ba:	2b80      	cmp	r3, #128	; 0x80
 80090bc:	d10e      	bne.n	80090dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c8:	2b80      	cmp	r3, #128	; 0x80
 80090ca:	d107      	bne.n	80090dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 fd78 	bl	8009bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e6:	2b40      	cmp	r3, #64	; 0x40
 80090e8:	d10e      	bne.n	8009108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f4:	2b40      	cmp	r3, #64	; 0x40
 80090f6:	d107      	bne.n	8009108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f9c1 	bl	800948a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b20      	cmp	r3, #32
 8009114:	d10e      	bne.n	8009134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b20      	cmp	r3, #32
 8009122:	d107      	bne.n	8009134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0220 	mvn.w	r2, #32
 800912c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fd42 	bl	8009bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009134:	bf00      	nop
 8009136:	3708      	adds	r7, #8
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009156:	2302      	movs	r3, #2
 8009158:	e0ae      	b.n	80092b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b0c      	cmp	r3, #12
 8009166:	f200 809f 	bhi.w	80092a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800916a:	a201      	add	r2, pc, #4	; (adr r2, 8009170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800916c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009170:	080091a5 	.word	0x080091a5
 8009174:	080092a9 	.word	0x080092a9
 8009178:	080092a9 	.word	0x080092a9
 800917c:	080092a9 	.word	0x080092a9
 8009180:	080091e5 	.word	0x080091e5
 8009184:	080092a9 	.word	0x080092a9
 8009188:	080092a9 	.word	0x080092a9
 800918c:	080092a9 	.word	0x080092a9
 8009190:	08009227 	.word	0x08009227
 8009194:	080092a9 	.word	0x080092a9
 8009198:	080092a9 	.word	0x080092a9
 800919c:	080092a9 	.word	0x080092a9
 80091a0:	08009267 	.word	0x08009267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fa18 	bl	80095e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0208 	orr.w	r2, r2, #8
 80091be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	699a      	ldr	r2, [r3, #24]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0204 	bic.w	r2, r2, #4
 80091ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6999      	ldr	r1, [r3, #24]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	691a      	ldr	r2, [r3, #16]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	619a      	str	r2, [r3, #24]
      break;
 80091e2:	e064      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fa68 	bl	80096c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	699a      	ldr	r2, [r3, #24]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699a      	ldr	r2, [r3, #24]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800920e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6999      	ldr	r1, [r3, #24]
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	021a      	lsls	r2, r3, #8
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	619a      	str	r2, [r3, #24]
      break;
 8009224:	e043      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fabd 	bl	80097ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	69da      	ldr	r2, [r3, #28]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0208 	orr.w	r2, r2, #8
 8009240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	69da      	ldr	r2, [r3, #28]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0204 	bic.w	r2, r2, #4
 8009250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69d9      	ldr	r1, [r3, #28]
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	691a      	ldr	r2, [r3, #16]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	61da      	str	r2, [r3, #28]
      break;
 8009264:	e023      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fb11 	bl	8009894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	69da      	ldr	r2, [r3, #28]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69da      	ldr	r2, [r3, #28]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	69d9      	ldr	r1, [r3, #28]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	021a      	lsls	r2, r3, #8
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	61da      	str	r2, [r3, #28]
      break;
 80092a6:	e002      	b.n	80092ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	75fb      	strb	r3, [r7, #23]
      break;
 80092ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d101      	bne.n	80092dc <HAL_TIM_ConfigClockSource+0x1c>
 80092d8:	2302      	movs	r3, #2
 80092da:	e0b4      	b.n	8009446 <HAL_TIM_ConfigClockSource+0x186>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80092fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009314:	d03e      	beq.n	8009394 <HAL_TIM_ConfigClockSource+0xd4>
 8009316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800931a:	f200 8087 	bhi.w	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800931e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009322:	f000 8086 	beq.w	8009432 <HAL_TIM_ConfigClockSource+0x172>
 8009326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932a:	d87f      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800932c:	2b70      	cmp	r3, #112	; 0x70
 800932e:	d01a      	beq.n	8009366 <HAL_TIM_ConfigClockSource+0xa6>
 8009330:	2b70      	cmp	r3, #112	; 0x70
 8009332:	d87b      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009334:	2b60      	cmp	r3, #96	; 0x60
 8009336:	d050      	beq.n	80093da <HAL_TIM_ConfigClockSource+0x11a>
 8009338:	2b60      	cmp	r3, #96	; 0x60
 800933a:	d877      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800933c:	2b50      	cmp	r3, #80	; 0x50
 800933e:	d03c      	beq.n	80093ba <HAL_TIM_ConfigClockSource+0xfa>
 8009340:	2b50      	cmp	r3, #80	; 0x50
 8009342:	d873      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009344:	2b40      	cmp	r3, #64	; 0x40
 8009346:	d058      	beq.n	80093fa <HAL_TIM_ConfigClockSource+0x13a>
 8009348:	2b40      	cmp	r3, #64	; 0x40
 800934a:	d86f      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800934c:	2b30      	cmp	r3, #48	; 0x30
 800934e:	d064      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009350:	2b30      	cmp	r3, #48	; 0x30
 8009352:	d86b      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 8009354:	2b20      	cmp	r3, #32
 8009356:	d060      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009358:	2b20      	cmp	r3, #32
 800935a:	d867      	bhi.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
 800935c:	2b00      	cmp	r3, #0
 800935e:	d05c      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009360:	2b10      	cmp	r3, #16
 8009362:	d05a      	beq.n	800941a <HAL_TIM_ConfigClockSource+0x15a>
 8009364:	e062      	b.n	800942c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6818      	ldr	r0, [r3, #0]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	6899      	ldr	r1, [r3, #8]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f000 fb5d 	bl	8009a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	609a      	str	r2, [r3, #8]
      break;
 8009392:	e04f      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6818      	ldr	r0, [r3, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	6899      	ldr	r1, [r3, #8]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f000 fb46 	bl	8009a34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689a      	ldr	r2, [r3, #8]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093b6:	609a      	str	r2, [r3, #8]
      break;
 80093b8:	e03c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6818      	ldr	r0, [r3, #0]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	6859      	ldr	r1, [r3, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	461a      	mov	r2, r3
 80093c8:	f000 faba 	bl	8009940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2150      	movs	r1, #80	; 0x50
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fb13 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 80093d8:	e02c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6859      	ldr	r1, [r3, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f000 fad9 	bl	800999e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2160      	movs	r1, #96	; 0x60
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 fb03 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 80093f8:	e01c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	6859      	ldr	r1, [r3, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	461a      	mov	r2, r3
 8009408:	f000 fa9a 	bl	8009940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2140      	movs	r1, #64	; 0x40
 8009412:	4618      	mov	r0, r3
 8009414:	f000 faf3 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 8009418:	e00c      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f000 faea 	bl	80099fe <TIM_ITRx_SetConfig>
      break;
 800942a:	e003      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	73fb      	strb	r3, [r7, #15]
      break;
 8009430:	e000      	b.n	8009434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009456:	bf00      	nop
 8009458:	370c      	adds	r7, #12
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800946a:	bf00      	nop
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800947e:	bf00      	nop
 8009480:	370c      	adds	r7, #12
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
	...

080094a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a40      	ldr	r2, [pc, #256]	; (80095b4 <TIM_Base_SetConfig+0x114>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d013      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094be:	d00f      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a3d      	ldr	r2, [pc, #244]	; (80095b8 <TIM_Base_SetConfig+0x118>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00b      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a3c      	ldr	r2, [pc, #240]	; (80095bc <TIM_Base_SetConfig+0x11c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d007      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a3b      	ldr	r2, [pc, #236]	; (80095c0 <TIM_Base_SetConfig+0x120>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d003      	beq.n	80094e0 <TIM_Base_SetConfig+0x40>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a3a      	ldr	r2, [pc, #232]	; (80095c4 <TIM_Base_SetConfig+0x124>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d108      	bne.n	80094f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a2f      	ldr	r2, [pc, #188]	; (80095b4 <TIM_Base_SetConfig+0x114>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d02b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009500:	d027      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a2c      	ldr	r2, [pc, #176]	; (80095b8 <TIM_Base_SetConfig+0x118>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d023      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a2b      	ldr	r2, [pc, #172]	; (80095bc <TIM_Base_SetConfig+0x11c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d01f      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a2a      	ldr	r2, [pc, #168]	; (80095c0 <TIM_Base_SetConfig+0x120>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d01b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a29      	ldr	r2, [pc, #164]	; (80095c4 <TIM_Base_SetConfig+0x124>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d017      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a28      	ldr	r2, [pc, #160]	; (80095c8 <TIM_Base_SetConfig+0x128>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d013      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a27      	ldr	r2, [pc, #156]	; (80095cc <TIM_Base_SetConfig+0x12c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d00f      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a26      	ldr	r2, [pc, #152]	; (80095d0 <TIM_Base_SetConfig+0x130>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00b      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <TIM_Base_SetConfig+0x134>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d007      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a24      	ldr	r2, [pc, #144]	; (80095d8 <TIM_Base_SetConfig+0x138>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d003      	beq.n	8009552 <TIM_Base_SetConfig+0xb2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a23      	ldr	r2, [pc, #140]	; (80095dc <TIM_Base_SetConfig+0x13c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d108      	bne.n	8009564 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68db      	ldr	r3, [r3, #12]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	4313      	orrs	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	4313      	orrs	r3, r2
 8009570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a0a      	ldr	r2, [pc, #40]	; (80095b4 <TIM_Base_SetConfig+0x114>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_Base_SetConfig+0xf8>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a0c      	ldr	r2, [pc, #48]	; (80095c4 <TIM_Base_SetConfig+0x124>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d103      	bne.n	80095a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	615a      	str	r2, [r3, #20]
}
 80095a6:	bf00      	nop
 80095a8:	3714      	adds	r7, #20
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40000400 	.word	0x40000400
 80095bc:	40000800 	.word	0x40000800
 80095c0:	40000c00 	.word	0x40000c00
 80095c4:	40010400 	.word	0x40010400
 80095c8:	40014000 	.word	0x40014000
 80095cc:	40014400 	.word	0x40014400
 80095d0:	40014800 	.word	0x40014800
 80095d4:	40001800 	.word	0x40001800
 80095d8:	40001c00 	.word	0x40001c00
 80095dc:	40002000 	.word	0x40002000

080095e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	f023 0201 	bic.w	r2, r3, #1
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
 80095fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800960e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f023 0302 	bic.w	r3, r3, #2
 8009628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	4313      	orrs	r3, r2
 8009632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a20      	ldr	r2, [pc, #128]	; (80096b8 <TIM_OC1_SetConfig+0xd8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d003      	beq.n	8009644 <TIM_OC1_SetConfig+0x64>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a1f      	ldr	r2, [pc, #124]	; (80096bc <TIM_OC1_SetConfig+0xdc>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d10c      	bne.n	800965e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f023 0308 	bic.w	r3, r3, #8
 800964a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	4313      	orrs	r3, r2
 8009654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f023 0304 	bic.w	r3, r3, #4
 800965c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <TIM_OC1_SetConfig+0xd8>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d003      	beq.n	800966e <TIM_OC1_SetConfig+0x8e>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a14      	ldr	r2, [pc, #80]	; (80096bc <TIM_OC1_SetConfig+0xdc>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d111      	bne.n	8009692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800967c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	4313      	orrs	r3, r2
 8009690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685a      	ldr	r2, [r3, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	697a      	ldr	r2, [r7, #20]
 80096aa:	621a      	str	r2, [r3, #32]
}
 80096ac:	bf00      	nop
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr
 80096b8:	40010000 	.word	0x40010000
 80096bc:	40010400 	.word	0x40010400

080096c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f023 0210 	bic.w	r2, r3, #16
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	4313      	orrs	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	f023 0320 	bic.w	r3, r3, #32
 800970a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	011b      	lsls	r3, r3, #4
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a22      	ldr	r2, [pc, #136]	; (80097a4 <TIM_OC2_SetConfig+0xe4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d003      	beq.n	8009728 <TIM_OC2_SetConfig+0x68>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a21      	ldr	r2, [pc, #132]	; (80097a8 <TIM_OC2_SetConfig+0xe8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d10d      	bne.n	8009744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800972e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	011b      	lsls	r3, r3, #4
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009742:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a17      	ldr	r2, [pc, #92]	; (80097a4 <TIM_OC2_SetConfig+0xe4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_OC2_SetConfig+0x94>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a16      	ldr	r2, [pc, #88]	; (80097a8 <TIM_OC2_SetConfig+0xe8>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d113      	bne.n	800977c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800975a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	4313      	orrs	r3, r2
 800976e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	621a      	str	r2, [r3, #32]
}
 8009796:	bf00      	nop
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40010400 	.word	0x40010400

080097ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	021b      	lsls	r3, r3, #8
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4313      	orrs	r3, r2
 8009800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a21      	ldr	r2, [pc, #132]	; (800988c <TIM_OC3_SetConfig+0xe0>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d003      	beq.n	8009812 <TIM_OC3_SetConfig+0x66>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a20      	ldr	r2, [pc, #128]	; (8009890 <TIM_OC3_SetConfig+0xe4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d10d      	bne.n	800982e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	021b      	lsls	r3, r3, #8
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	4313      	orrs	r3, r2
 8009824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800982c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a16      	ldr	r2, [pc, #88]	; (800988c <TIM_OC3_SetConfig+0xe0>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d003      	beq.n	800983e <TIM_OC3_SetConfig+0x92>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a15      	ldr	r2, [pc, #84]	; (8009890 <TIM_OC3_SetConfig+0xe4>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d113      	bne.n	8009866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800984c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	011b      	lsls	r3, r3, #4
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4313      	orrs	r3, r2
 8009858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	011b      	lsls	r3, r3, #4
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	4313      	orrs	r3, r2
 8009864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	621a      	str	r2, [r3, #32]
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	40010000 	.word	0x40010000
 8009890:	40010400 	.word	0x40010400

08009894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	69db      	ldr	r3, [r3, #28]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	4313      	orrs	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	031b      	lsls	r3, r3, #12
 80098e6:	693a      	ldr	r2, [r7, #16]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a12      	ldr	r2, [pc, #72]	; (8009938 <TIM_OC4_SetConfig+0xa4>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d003      	beq.n	80098fc <TIM_OC4_SetConfig+0x68>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a11      	ldr	r2, [pc, #68]	; (800993c <TIM_OC4_SetConfig+0xa8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d109      	bne.n	8009910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	019b      	lsls	r3, r3, #6
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	40010000 	.word	0x40010000
 800993c:	40010400 	.word	0x40010400

08009940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	f023 0201 	bic.w	r2, r3, #1
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800996a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	011b      	lsls	r3, r3, #4
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f023 030a 	bic.w	r3, r3, #10
 800997c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	4313      	orrs	r3, r2
 8009984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	621a      	str	r2, [r3, #32]
}
 8009992:	bf00      	nop
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800999e:	b480      	push	{r7}
 80099a0:	b087      	sub	sp, #28
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0210 	bic.w	r2, r3, #16
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	031b      	lsls	r3, r3, #12
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	621a      	str	r2, [r3, #32]
}
 80099f2:	bf00      	nop
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	f043 0307 	orr.w	r3, r3, #7
 8009a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	609a      	str	r2, [r3, #8]
}
 8009a28:	bf00      	nop
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	021a      	lsls	r2, r3, #8
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	609a      	str	r2, [r3, #8]
}
 8009a68:	bf00      	nop
 8009a6a:	371c      	adds	r7, #28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f003 031f 	and.w	r3, r3, #31
 8009a86:	2201      	movs	r2, #1
 8009a88:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a1a      	ldr	r2, [r3, #32]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	43db      	mvns	r3, r3
 8009a96:	401a      	ands	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1a      	ldr	r2, [r3, #32]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f003 031f 	and.w	r3, r3, #31
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aac:	431a      	orrs	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	621a      	str	r2, [r3, #32]
}
 8009ab2:	bf00      	nop
 8009ab4:	371c      	adds	r7, #28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
	...

08009ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e05a      	b.n	8009b8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a21      	ldr	r2, [pc, #132]	; (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d022      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b24:	d01d      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a1d      	ldr	r2, [pc, #116]	; (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d018      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a1b      	ldr	r2, [pc, #108]	; (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d013      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a1a      	ldr	r2, [pc, #104]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00e      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a18      	ldr	r2, [pc, #96]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d009      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a17      	ldr	r2, [pc, #92]	; (8009bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d004      	beq.n	8009b62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a15      	ldr	r2, [pc, #84]	; (8009bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d10c      	bne.n	8009b7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40000400 	.word	0x40000400
 8009ba4:	40000800 	.word	0x40000800
 8009ba8:	40000c00 	.word	0x40000c00
 8009bac:	40010400 	.word	0x40010400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40001800 	.word	0x40001800

08009bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bc0:	bf00      	nop
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e03f      	b.n	8009c72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d106      	bne.n	8009c0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7f8 ff7c 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2224      	movs	r2, #36	; 0x24
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc71 	bl	800a50c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	691a      	ldr	r2, [r3, #16]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695a      	ldr	r2, [r3, #20]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68da      	ldr	r2, [r3, #12]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b0ba      	sub	sp, #232	; 0xe8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10f      	bne.n	8009ce2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d009      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x66>
 8009cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fb5b 	bl	800a396 <UART_Receive_IT>
      return;
 8009ce0:	e256      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009ce2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 80de 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x22c>
 8009cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d106      	bne.n	8009d06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 80d1 	beq.w	8009ea8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d0a:	f003 0301 	and.w	r3, r3, #1
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d00b      	beq.n	8009d2a <HAL_UART_IRQHandler+0xae>
 8009d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d005      	beq.n	8009d2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	f043 0201 	orr.w	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <HAL_UART_IRQHandler+0xd2>
 8009d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f043 0202 	orr.w	r2, r3, #2
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d52:	f003 0302 	and.w	r3, r3, #2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00b      	beq.n	8009d72 <HAL_UART_IRQHandler+0xf6>
 8009d5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d005      	beq.n	8009d72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6a:	f043 0204 	orr.w	r2, r3, #4
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d011      	beq.n	8009da2 <HAL_UART_IRQHandler+0x126>
 8009d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d82:	f003 0320 	and.w	r3, r3, #32
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d005      	beq.n	8009da2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	f043 0208 	orr.w	r2, r3, #8
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 81ed 	beq.w	800a186 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db0:	f003 0320 	and.w	r3, r3, #32
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d008      	beq.n	8009dca <HAL_UART_IRQHandler+0x14e>
 8009db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dbc:	f003 0320 	and.w	r3, r3, #32
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fae6 	bl	800a396 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b40      	cmp	r3, #64	; 0x40
 8009dd6:	bf0c      	ite	eq
 8009dd8:	2301      	moveq	r3, #1
 8009dda:	2300      	movne	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <HAL_UART_IRQHandler+0x17a>
 8009dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d04f      	beq.n	8009e96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f9ee 	bl	800a1d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	695b      	ldr	r3, [r3, #20]
 8009e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e06:	2b40      	cmp	r3, #64	; 0x40
 8009e08:	d141      	bne.n	8009e8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3314      	adds	r3, #20
 8009e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e18:	e853 3f00 	ldrex	r3, [r3]
 8009e1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3314      	adds	r3, #20
 8009e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009e36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009e46:	e841 2300 	strex	r3, r2, [r1]
 8009e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1d9      	bne.n	8009e0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d013      	beq.n	8009e86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e62:	4a7d      	ldr	r2, [pc, #500]	; (800a058 <HAL_UART_IRQHandler+0x3dc>)
 8009e64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fa f8ea 	bl	8004044 <HAL_DMA_Abort_IT>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d016      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e84:	e00e      	b.n	8009ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f990 	bl	800a1ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e8c:	e00a      	b.n	8009ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f98c 	bl	800a1ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e94:	e006      	b.n	8009ea4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f988 	bl	800a1ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ea2:	e170      	b.n	800a186 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea4:	bf00      	nop
    return;
 8009ea6:	e16e      	b.n	800a186 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	f040 814a 	bne.w	800a146 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb6:	f003 0310 	and.w	r3, r3, #16
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f000 8143 	beq.w	800a146 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 813c 	beq.w	800a146 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ece:	2300      	movs	r3, #0
 8009ed0:	60bb      	str	r3, [r7, #8]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	60bb      	str	r3, [r7, #8]
 8009ee2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	695b      	ldr	r3, [r3, #20]
 8009eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eee:	2b40      	cmp	r3, #64	; 0x40
 8009ef0:	f040 80b4 	bne.w	800a05c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8140 	beq.w	800a18a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f12:	429a      	cmp	r2, r3
 8009f14:	f080 8139 	bcs.w	800a18a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f2a:	f000 8088 	beq.w	800a03e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	330c      	adds	r3, #12
 8009f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f3c:	e853 3f00 	ldrex	r3, [r3]
 8009f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009f44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	330c      	adds	r3, #12
 8009f56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009f5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d1d9      	bne.n	8009f2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	3314      	adds	r3, #20
 8009f80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f84:	e853 3f00 	ldrex	r3, [r3]
 8009f88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3314      	adds	r3, #20
 8009f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009fa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009fa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009fb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e1      	bne.n	8009f7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	3314      	adds	r3, #20
 8009fbc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3314      	adds	r3, #20
 8009fd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009fda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009fdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e3      	bne.n	8009fb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	330c      	adds	r3, #12
 800a002:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a00e:	f023 0310 	bic.w	r3, r3, #16
 800a012:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	330c      	adds	r3, #12
 800a01c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a020:	65ba      	str	r2, [r7, #88]	; 0x58
 800a022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e3      	bne.n	8009ffc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	4618      	mov	r0, r3
 800a03a:	f7f9 ff93 	bl	8003f64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a046:	b29b      	uxth	r3, r3
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f8b6 	bl	800a1c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a054:	e099      	b.n	800a18a <HAL_UART_IRQHandler+0x50e>
 800a056:	bf00      	nop
 800a058:	0800a29f 	.word	0x0800a29f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a064:	b29b      	uxth	r3, r3
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a070:	b29b      	uxth	r3, r3
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 808b 	beq.w	800a18e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 8086 	beq.w	800a18e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	330c      	adds	r3, #12
 800a088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800a0a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e3      	bne.n	800a082 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3314      	adds	r3, #20
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c4:	e853 3f00 	ldrex	r3, [r3]
 800a0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	f023 0301 	bic.w	r3, r3, #1
 800a0d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3314      	adds	r3, #20
 800a0da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a0de:	633a      	str	r2, [r7, #48]	; 0x30
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e3      	bne.n	800a0ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2220      	movs	r2, #32
 800a0f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	330c      	adds	r3, #12
 800a106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	e853 3f00 	ldrex	r3, [r3]
 800a10e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f023 0310 	bic.w	r3, r3, #16
 800a116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a124:	61fa      	str	r2, [r7, #28]
 800a126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	69b9      	ldr	r1, [r7, #24]
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	617b      	str	r3, [r7, #20]
   return(result);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e3      	bne.n	800a100 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a138:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f83e 	bl	800a1c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a144:	e023      	b.n	800a18e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d009      	beq.n	800a166 <HAL_UART_IRQHandler+0x4ea>
 800a152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f8b1 	bl	800a2c6 <UART_Transmit_IT>
    return;
 800a164:	e014      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00e      	beq.n	800a190 <HAL_UART_IRQHandler+0x514>
 800a172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d008      	beq.n	800a190 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f8f1 	bl	800a366 <UART_EndTransmit_IT>
    return;
 800a184:	e004      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
    return;
 800a186:	bf00      	nop
 800a188:	e002      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
      return;
 800a18a:	bf00      	nop
 800a18c:	e000      	b.n	800a190 <HAL_UART_IRQHandler+0x514>
      return;
 800a18e:	bf00      	nop
  }
}
 800a190:	37e8      	adds	r7, #232	; 0xe8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop

0800a198 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b095      	sub	sp, #84	; 0x54
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	330c      	adds	r3, #12
 800a1e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	330c      	adds	r3, #12
 800a1fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a200:	643a      	str	r2, [r7, #64]	; 0x40
 800a202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	3314      	adds	r3, #20
 800a21a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6a3b      	ldr	r3, [r7, #32]
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	61fb      	str	r3, [r7, #28]
   return(result);
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f023 0301 	bic.w	r3, r3, #1
 800a22a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3314      	adds	r3, #20
 800a232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a234:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a24c:	2b01      	cmp	r3, #1
 800a24e:	d119      	bne.n	800a284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	330c      	adds	r3, #12
 800a256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	f023 0310 	bic.w	r3, r3, #16
 800a266:	647b      	str	r3, [r7, #68]	; 0x44
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	330c      	adds	r3, #12
 800a26e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a270:	61ba      	str	r2, [r7, #24]
 800a272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	6979      	ldr	r1, [r7, #20]
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	613b      	str	r3, [r7, #16]
   return(result);
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e5      	bne.n	800a250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2220      	movs	r2, #32
 800a288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a292:	bf00      	nop
 800a294:	3754      	adds	r7, #84	; 0x54
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b084      	sub	sp, #16
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2b8:	68f8      	ldr	r0, [r7, #12]
 800a2ba:	f7ff ff77 	bl	800a1ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2be:	bf00      	nop
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b21      	cmp	r3, #33	; 0x21
 800a2d8:	d13e      	bne.n	800a358 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2e2:	d114      	bne.n	800a30e <UART_Transmit_IT+0x48>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d110      	bne.n	800a30e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a300:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	1c9a      	adds	r2, r3, #2
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	621a      	str	r2, [r3, #32]
 800a30c:	e008      	b.n	800a320 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	1c59      	adds	r1, r3, #1
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	6211      	str	r1, [r2, #32]
 800a318:	781a      	ldrb	r2, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a324:	b29b      	uxth	r3, r3
 800a326:	3b01      	subs	r3, #1
 800a328:	b29b      	uxth	r3, r3
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	4619      	mov	r1, r3
 800a32e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10f      	bne.n	800a354 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a342:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a352:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	e000      	b.n	800a35a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a358:	2302      	movs	r3, #2
  }
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	68da      	ldr	r2, [r3, #12]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a37c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff ff06 	bl	800a198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b08c      	sub	sp, #48	; 0x30
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b22      	cmp	r3, #34	; 0x22
 800a3a8:	f040 80ab 	bne.w	800a502 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3b4:	d117      	bne.n	800a3e6 <UART_Receive_IT+0x50>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d113      	bne.n	800a3e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3de:	1c9a      	adds	r2, r3, #2
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	629a      	str	r2, [r3, #40]	; 0x28
 800a3e4:	e026      	b.n	800a434 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3f8:	d007      	beq.n	800a40a <UART_Receive_IT+0x74>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10a      	bne.n	800a418 <UART_Receive_IT+0x82>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	b2da      	uxtb	r2, r3
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	e008      	b.n	800a42a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a424:	b2da      	uxtb	r2, r3
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a438:	b29b      	uxth	r3, r3
 800a43a:	3b01      	subs	r3, #1
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4619      	mov	r1, r3
 800a442:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a444:	2b00      	cmp	r3, #0
 800a446:	d15a      	bne.n	800a4fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68da      	ldr	r2, [r3, #12]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0220 	bic.w	r2, r2, #32
 800a456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a466:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695a      	ldr	r2, [r3, #20]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f022 0201 	bic.w	r2, r2, #1
 800a476:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	2b01      	cmp	r3, #1
 800a486:	d135      	bne.n	800a4f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	330c      	adds	r3, #12
 800a494:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	613b      	str	r3, [r7, #16]
   return(result);
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	f023 0310 	bic.w	r3, r3, #16
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	330c      	adds	r3, #12
 800a4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ae:	623a      	str	r2, [r7, #32]
 800a4b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	69f9      	ldr	r1, [r7, #28]
 800a4b4:	6a3a      	ldr	r2, [r7, #32]
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0310 	and.w	r3, r3, #16
 800a4cc:	2b10      	cmp	r3, #16
 800a4ce:	d10a      	bne.n	800a4e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f7ff fe67 	bl	800a1c0 <HAL_UARTEx_RxEventCallback>
 800a4f2:	e002      	b.n	800a4fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7f8 f887 	bl	8002608 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e002      	b.n	800a504 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e000      	b.n	800a504 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a502:	2302      	movs	r3, #2
  }
}
 800a504:	4618      	mov	r0, r3
 800a506:	3730      	adds	r7, #48	; 0x30
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a50c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a510:	b0c0      	sub	sp, #256	; 0x100
 800a512:	af00      	add	r7, sp, #0
 800a514:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a528:	68d9      	ldr	r1, [r3, #12]
 800a52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	ea40 0301 	orr.w	r3, r0, r1
 800a534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	431a      	orrs	r2, r3
 800a544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	431a      	orrs	r2, r3
 800a54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	4313      	orrs	r3, r2
 800a554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a564:	f021 010c 	bic.w	r1, r1, #12
 800a568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a572:	430b      	orrs	r3, r1
 800a574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a586:	6999      	ldr	r1, [r3, #24]
 800a588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	ea40 0301 	orr.w	r3, r0, r1
 800a592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	4b8f      	ldr	r3, [pc, #572]	; (800a7d8 <UART_SetConfig+0x2cc>)
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d005      	beq.n	800a5ac <UART_SetConfig+0xa0>
 800a5a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	4b8d      	ldr	r3, [pc, #564]	; (800a7dc <UART_SetConfig+0x2d0>)
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d104      	bne.n	800a5b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5ac:	f7fc ff50 	bl	8007450 <HAL_RCC_GetPCLK2Freq>
 800a5b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a5b4:	e003      	b.n	800a5be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5b6:	f7fc ff37 	bl	8007428 <HAL_RCC_GetPCLK1Freq>
 800a5ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5c8:	f040 810c 	bne.w	800a7e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a5d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a5da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	1891      	adds	r1, r2, r2
 800a5e4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a5e6:	415b      	adcs	r3, r3
 800a5e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	eb12 0801 	adds.w	r8, r2, r1
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	eb43 0901 	adc.w	r9, r3, r1
 800a5fa:	f04f 0200 	mov.w	r2, #0
 800a5fe:	f04f 0300 	mov.w	r3, #0
 800a602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a60a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a60e:	4690      	mov	r8, r2
 800a610:	4699      	mov	r9, r3
 800a612:	4623      	mov	r3, r4
 800a614:	eb18 0303 	adds.w	r3, r8, r3
 800a618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a61c:	462b      	mov	r3, r5
 800a61e:	eb49 0303 	adc.w	r3, r9, r3
 800a622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a632:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a63a:	460b      	mov	r3, r1
 800a63c:	18db      	adds	r3, r3, r3
 800a63e:	653b      	str	r3, [r7, #80]	; 0x50
 800a640:	4613      	mov	r3, r2
 800a642:	eb42 0303 	adc.w	r3, r2, r3
 800a646:	657b      	str	r3, [r7, #84]	; 0x54
 800a648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a64c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a650:	f7f6 faca 	bl	8000be8 <__aeabi_uldivmod>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4b61      	ldr	r3, [pc, #388]	; (800a7e0 <UART_SetConfig+0x2d4>)
 800a65a:	fba3 2302 	umull	r2, r3, r3, r2
 800a65e:	095b      	lsrs	r3, r3, #5
 800a660:	011c      	lsls	r4, r3, #4
 800a662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a666:	2200      	movs	r2, #0
 800a668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a66c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a674:	4642      	mov	r2, r8
 800a676:	464b      	mov	r3, r9
 800a678:	1891      	adds	r1, r2, r2
 800a67a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a67c:	415b      	adcs	r3, r3
 800a67e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a684:	4641      	mov	r1, r8
 800a686:	eb12 0a01 	adds.w	sl, r2, r1
 800a68a:	4649      	mov	r1, r9
 800a68c:	eb43 0b01 	adc.w	fp, r3, r1
 800a690:	f04f 0200 	mov.w	r2, #0
 800a694:	f04f 0300 	mov.w	r3, #0
 800a698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a69c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a6a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6a4:	4692      	mov	sl, r2
 800a6a6:	469b      	mov	fp, r3
 800a6a8:	4643      	mov	r3, r8
 800a6aa:	eb1a 0303 	adds.w	r3, sl, r3
 800a6ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	eb4b 0303 	adc.w	r3, fp, r3
 800a6b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a6cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	18db      	adds	r3, r3, r3
 800a6d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	eb42 0303 	adc.w	r3, r2, r3
 800a6dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a6de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a6e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a6e6:	f7f6 fa7f 	bl	8000be8 <__aeabi_uldivmod>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4b3b      	ldr	r3, [pc, #236]	; (800a7e0 <UART_SetConfig+0x2d4>)
 800a6f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a6f6:	095b      	lsrs	r3, r3, #5
 800a6f8:	2264      	movs	r2, #100	; 0x64
 800a6fa:	fb02 f303 	mul.w	r3, r2, r3
 800a6fe:	1acb      	subs	r3, r1, r3
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a706:	4b36      	ldr	r3, [pc, #216]	; (800a7e0 <UART_SetConfig+0x2d4>)
 800a708:	fba3 2302 	umull	r2, r3, r3, r2
 800a70c:	095b      	lsrs	r3, r3, #5
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a714:	441c      	add	r4, r3
 800a716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a720:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a728:	4642      	mov	r2, r8
 800a72a:	464b      	mov	r3, r9
 800a72c:	1891      	adds	r1, r2, r2
 800a72e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a730:	415b      	adcs	r3, r3
 800a732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a738:	4641      	mov	r1, r8
 800a73a:	1851      	adds	r1, r2, r1
 800a73c:	6339      	str	r1, [r7, #48]	; 0x30
 800a73e:	4649      	mov	r1, r9
 800a740:	414b      	adcs	r3, r1
 800a742:	637b      	str	r3, [r7, #52]	; 0x34
 800a744:	f04f 0200 	mov.w	r2, #0
 800a748:	f04f 0300 	mov.w	r3, #0
 800a74c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a750:	4659      	mov	r1, fp
 800a752:	00cb      	lsls	r3, r1, #3
 800a754:	4651      	mov	r1, sl
 800a756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a75a:	4651      	mov	r1, sl
 800a75c:	00ca      	lsls	r2, r1, #3
 800a75e:	4610      	mov	r0, r2
 800a760:	4619      	mov	r1, r3
 800a762:	4603      	mov	r3, r0
 800a764:	4642      	mov	r2, r8
 800a766:	189b      	adds	r3, r3, r2
 800a768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a76c:	464b      	mov	r3, r9
 800a76e:	460a      	mov	r2, r1
 800a770:	eb42 0303 	adc.w	r3, r2, r3
 800a774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a784:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a78c:	460b      	mov	r3, r1
 800a78e:	18db      	adds	r3, r3, r3
 800a790:	62bb      	str	r3, [r7, #40]	; 0x28
 800a792:	4613      	mov	r3, r2
 800a794:	eb42 0303 	adc.w	r3, r2, r3
 800a798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a79a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a79e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a7a2:	f7f6 fa21 	bl	8000be8 <__aeabi_uldivmod>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <UART_SetConfig+0x2d4>)
 800a7ac:	fba3 1302 	umull	r1, r3, r3, r2
 800a7b0:	095b      	lsrs	r3, r3, #5
 800a7b2:	2164      	movs	r1, #100	; 0x64
 800a7b4:	fb01 f303 	mul.w	r3, r1, r3
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	3332      	adds	r3, #50	; 0x32
 800a7be:	4a08      	ldr	r2, [pc, #32]	; (800a7e0 <UART_SetConfig+0x2d4>)
 800a7c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c4:	095b      	lsrs	r3, r3, #5
 800a7c6:	f003 0207 	and.w	r2, r3, #7
 800a7ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4422      	add	r2, r4
 800a7d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7d4:	e105      	b.n	800a9e2 <UART_SetConfig+0x4d6>
 800a7d6:	bf00      	nop
 800a7d8:	40011000 	.word	0x40011000
 800a7dc:	40011400 	.word	0x40011400
 800a7e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a7ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a7f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a7f6:	4642      	mov	r2, r8
 800a7f8:	464b      	mov	r3, r9
 800a7fa:	1891      	adds	r1, r2, r2
 800a7fc:	6239      	str	r1, [r7, #32]
 800a7fe:	415b      	adcs	r3, r3
 800a800:	627b      	str	r3, [r7, #36]	; 0x24
 800a802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a806:	4641      	mov	r1, r8
 800a808:	1854      	adds	r4, r2, r1
 800a80a:	4649      	mov	r1, r9
 800a80c:	eb43 0501 	adc.w	r5, r3, r1
 800a810:	f04f 0200 	mov.w	r2, #0
 800a814:	f04f 0300 	mov.w	r3, #0
 800a818:	00eb      	lsls	r3, r5, #3
 800a81a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a81e:	00e2      	lsls	r2, r4, #3
 800a820:	4614      	mov	r4, r2
 800a822:	461d      	mov	r5, r3
 800a824:	4643      	mov	r3, r8
 800a826:	18e3      	adds	r3, r4, r3
 800a828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a82c:	464b      	mov	r3, r9
 800a82e:	eb45 0303 	adc.w	r3, r5, r3
 800a832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a842:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a852:	4629      	mov	r1, r5
 800a854:	008b      	lsls	r3, r1, #2
 800a856:	4621      	mov	r1, r4
 800a858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a85c:	4621      	mov	r1, r4
 800a85e:	008a      	lsls	r2, r1, #2
 800a860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a864:	f7f6 f9c0 	bl	8000be8 <__aeabi_uldivmod>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4b60      	ldr	r3, [pc, #384]	; (800a9f0 <UART_SetConfig+0x4e4>)
 800a86e:	fba3 2302 	umull	r2, r3, r3, r2
 800a872:	095b      	lsrs	r3, r3, #5
 800a874:	011c      	lsls	r4, r3, #4
 800a876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a880:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a888:	4642      	mov	r2, r8
 800a88a:	464b      	mov	r3, r9
 800a88c:	1891      	adds	r1, r2, r2
 800a88e:	61b9      	str	r1, [r7, #24]
 800a890:	415b      	adcs	r3, r3
 800a892:	61fb      	str	r3, [r7, #28]
 800a894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a898:	4641      	mov	r1, r8
 800a89a:	1851      	adds	r1, r2, r1
 800a89c:	6139      	str	r1, [r7, #16]
 800a89e:	4649      	mov	r1, r9
 800a8a0:	414b      	adcs	r3, r1
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	f04f 0200 	mov.w	r2, #0
 800a8a8:	f04f 0300 	mov.w	r3, #0
 800a8ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8b0:	4659      	mov	r1, fp
 800a8b2:	00cb      	lsls	r3, r1, #3
 800a8b4:	4651      	mov	r1, sl
 800a8b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8ba:	4651      	mov	r1, sl
 800a8bc:	00ca      	lsls	r2, r1, #3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	4642      	mov	r2, r8
 800a8c6:	189b      	adds	r3, r3, r2
 800a8c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	460a      	mov	r2, r1
 800a8d0:	eb42 0303 	adc.w	r3, r2, r3
 800a8d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a8e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	f04f 0300 	mov.w	r3, #0
 800a8ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a8f0:	4649      	mov	r1, r9
 800a8f2:	008b      	lsls	r3, r1, #2
 800a8f4:	4641      	mov	r1, r8
 800a8f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	008a      	lsls	r2, r1, #2
 800a8fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a902:	f7f6 f971 	bl	8000be8 <__aeabi_uldivmod>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4b39      	ldr	r3, [pc, #228]	; (800a9f0 <UART_SetConfig+0x4e4>)
 800a90c:	fba3 1302 	umull	r1, r3, r3, r2
 800a910:	095b      	lsrs	r3, r3, #5
 800a912:	2164      	movs	r1, #100	; 0x64
 800a914:	fb01 f303 	mul.w	r3, r1, r3
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	011b      	lsls	r3, r3, #4
 800a91c:	3332      	adds	r3, #50	; 0x32
 800a91e:	4a34      	ldr	r2, [pc, #208]	; (800a9f0 <UART_SetConfig+0x4e4>)
 800a920:	fba2 2303 	umull	r2, r3, r2, r3
 800a924:	095b      	lsrs	r3, r3, #5
 800a926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a92a:	441c      	add	r4, r3
 800a92c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a930:	2200      	movs	r2, #0
 800a932:	673b      	str	r3, [r7, #112]	; 0x70
 800a934:	677a      	str	r2, [r7, #116]	; 0x74
 800a936:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a93a:	4642      	mov	r2, r8
 800a93c:	464b      	mov	r3, r9
 800a93e:	1891      	adds	r1, r2, r2
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	415b      	adcs	r3, r3
 800a944:	60fb      	str	r3, [r7, #12]
 800a946:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a94a:	4641      	mov	r1, r8
 800a94c:	1851      	adds	r1, r2, r1
 800a94e:	6039      	str	r1, [r7, #0]
 800a950:	4649      	mov	r1, r9
 800a952:	414b      	adcs	r3, r1
 800a954:	607b      	str	r3, [r7, #4]
 800a956:	f04f 0200 	mov.w	r2, #0
 800a95a:	f04f 0300 	mov.w	r3, #0
 800a95e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a962:	4659      	mov	r1, fp
 800a964:	00cb      	lsls	r3, r1, #3
 800a966:	4651      	mov	r1, sl
 800a968:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a96c:	4651      	mov	r1, sl
 800a96e:	00ca      	lsls	r2, r1, #3
 800a970:	4610      	mov	r0, r2
 800a972:	4619      	mov	r1, r3
 800a974:	4603      	mov	r3, r0
 800a976:	4642      	mov	r2, r8
 800a978:	189b      	adds	r3, r3, r2
 800a97a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a97c:	464b      	mov	r3, r9
 800a97e:	460a      	mov	r2, r1
 800a980:	eb42 0303 	adc.w	r3, r2, r3
 800a984:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	663b      	str	r3, [r7, #96]	; 0x60
 800a990:	667a      	str	r2, [r7, #100]	; 0x64
 800a992:	f04f 0200 	mov.w	r2, #0
 800a996:	f04f 0300 	mov.w	r3, #0
 800a99a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a99e:	4649      	mov	r1, r9
 800a9a0:	008b      	lsls	r3, r1, #2
 800a9a2:	4641      	mov	r1, r8
 800a9a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9a8:	4641      	mov	r1, r8
 800a9aa:	008a      	lsls	r2, r1, #2
 800a9ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a9b0:	f7f6 f91a 	bl	8000be8 <__aeabi_uldivmod>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4b0d      	ldr	r3, [pc, #52]	; (800a9f0 <UART_SetConfig+0x4e4>)
 800a9ba:	fba3 1302 	umull	r1, r3, r3, r2
 800a9be:	095b      	lsrs	r3, r3, #5
 800a9c0:	2164      	movs	r1, #100	; 0x64
 800a9c2:	fb01 f303 	mul.w	r3, r1, r3
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	3332      	adds	r3, #50	; 0x32
 800a9cc:	4a08      	ldr	r2, [pc, #32]	; (800a9f0 <UART_SetConfig+0x4e4>)
 800a9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d2:	095b      	lsrs	r3, r3, #5
 800a9d4:	f003 020f 	and.w	r2, r3, #15
 800a9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4422      	add	r2, r4
 800a9e0:	609a      	str	r2, [r3, #8]
}
 800a9e2:	bf00      	nop
 800a9e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9ee:	bf00      	nop
 800a9f0:	51eb851f 	.word	0x51eb851f

0800a9f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	f107 001c 	add.w	r0, r7, #28
 800aa02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d122      	bne.n	800aa52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800aa20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d105      	bne.n	800aa46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 fbe8 	bl	800c21c <USB_CoreReset>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]
 800aa50:	e01a      	b.n	800aa88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 fbdc 	bl	800c21c <USB_CoreReset>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	639a      	str	r2, [r3, #56]	; 0x38
 800aa7a:	e005      	b.n	800aa88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d10b      	bne.n	800aaa6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f043 0206 	orr.w	r2, r3, #6
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f043 0220 	orr.w	r2, r3, #32
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aab2:	b004      	add	sp, #16
 800aab4:	4770      	bx	lr
	...

0800aab8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d165      	bne.n	800ab98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	4a41      	ldr	r2, [pc, #260]	; (800abd4 <USB_SetTurnaroundTime+0x11c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d906      	bls.n	800aae2 <USB_SetTurnaroundTime+0x2a>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	4a40      	ldr	r2, [pc, #256]	; (800abd8 <USB_SetTurnaroundTime+0x120>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d202      	bcs.n	800aae2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aadc:	230f      	movs	r3, #15
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	e062      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	4a3c      	ldr	r2, [pc, #240]	; (800abd8 <USB_SetTurnaroundTime+0x120>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d306      	bcc.n	800aaf8 <USB_SetTurnaroundTime+0x40>
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	4a3b      	ldr	r2, [pc, #236]	; (800abdc <USB_SetTurnaroundTime+0x124>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d202      	bcs.n	800aaf8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aaf2:	230e      	movs	r3, #14
 800aaf4:	617b      	str	r3, [r7, #20]
 800aaf6:	e057      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4a38      	ldr	r2, [pc, #224]	; (800abdc <USB_SetTurnaroundTime+0x124>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d306      	bcc.n	800ab0e <USB_SetTurnaroundTime+0x56>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4a37      	ldr	r2, [pc, #220]	; (800abe0 <USB_SetTurnaroundTime+0x128>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d202      	bcs.n	800ab0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ab08:	230d      	movs	r3, #13
 800ab0a:	617b      	str	r3, [r7, #20]
 800ab0c:	e04c      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	4a33      	ldr	r2, [pc, #204]	; (800abe0 <USB_SetTurnaroundTime+0x128>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d306      	bcc.n	800ab24 <USB_SetTurnaroundTime+0x6c>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	4a32      	ldr	r2, [pc, #200]	; (800abe4 <USB_SetTurnaroundTime+0x12c>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d802      	bhi.n	800ab24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ab1e:	230c      	movs	r3, #12
 800ab20:	617b      	str	r3, [r7, #20]
 800ab22:	e041      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	4a2f      	ldr	r2, [pc, #188]	; (800abe4 <USB_SetTurnaroundTime+0x12c>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d906      	bls.n	800ab3a <USB_SetTurnaroundTime+0x82>
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	4a2e      	ldr	r2, [pc, #184]	; (800abe8 <USB_SetTurnaroundTime+0x130>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d802      	bhi.n	800ab3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ab34:	230b      	movs	r3, #11
 800ab36:	617b      	str	r3, [r7, #20]
 800ab38:	e036      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	4a2a      	ldr	r2, [pc, #168]	; (800abe8 <USB_SetTurnaroundTime+0x130>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d906      	bls.n	800ab50 <USB_SetTurnaroundTime+0x98>
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	4a29      	ldr	r2, [pc, #164]	; (800abec <USB_SetTurnaroundTime+0x134>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d802      	bhi.n	800ab50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ab4a:	230a      	movs	r3, #10
 800ab4c:	617b      	str	r3, [r7, #20]
 800ab4e:	e02b      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	4a26      	ldr	r2, [pc, #152]	; (800abec <USB_SetTurnaroundTime+0x134>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d906      	bls.n	800ab66 <USB_SetTurnaroundTime+0xae>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	4a25      	ldr	r2, [pc, #148]	; (800abf0 <USB_SetTurnaroundTime+0x138>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d202      	bcs.n	800ab66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ab60:	2309      	movs	r3, #9
 800ab62:	617b      	str	r3, [r7, #20]
 800ab64:	e020      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4a21      	ldr	r2, [pc, #132]	; (800abf0 <USB_SetTurnaroundTime+0x138>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d306      	bcc.n	800ab7c <USB_SetTurnaroundTime+0xc4>
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	4a20      	ldr	r2, [pc, #128]	; (800abf4 <USB_SetTurnaroundTime+0x13c>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d802      	bhi.n	800ab7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ab76:	2308      	movs	r3, #8
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	e015      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4a1d      	ldr	r2, [pc, #116]	; (800abf4 <USB_SetTurnaroundTime+0x13c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d906      	bls.n	800ab92 <USB_SetTurnaroundTime+0xda>
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	4a1c      	ldr	r2, [pc, #112]	; (800abf8 <USB_SetTurnaroundTime+0x140>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d202      	bcs.n	800ab92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ab8c:	2307      	movs	r3, #7
 800ab8e:	617b      	str	r3, [r7, #20]
 800ab90:	e00a      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ab92:	2306      	movs	r3, #6
 800ab94:	617b      	str	r3, [r7, #20]
 800ab96:	e007      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ab98:	79fb      	ldrb	r3, [r7, #7]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ab9e:	2309      	movs	r3, #9
 800aba0:	617b      	str	r3, [r7, #20]
 800aba2:	e001      	b.n	800aba8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aba4:	2309      	movs	r3, #9
 800aba6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	68da      	ldr	r2, [r3, #12]
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	029b      	lsls	r3, r3, #10
 800abbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800abc0:	431a      	orrs	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	371c      	adds	r7, #28
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	00d8acbf 	.word	0x00d8acbf
 800abd8:	00e4e1c0 	.word	0x00e4e1c0
 800abdc:	00f42400 	.word	0x00f42400
 800abe0:	01067380 	.word	0x01067380
 800abe4:	011a499f 	.word	0x011a499f
 800abe8:	01312cff 	.word	0x01312cff
 800abec:	014ca43f 	.word	0x014ca43f
 800abf0:	016e3600 	.word	0x016e3600
 800abf4:	01a6ab1f 	.word	0x01a6ab1f
 800abf8:	01e84800 	.word	0x01e84800

0800abfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f043 0201 	orr.w	r2, r3, #1
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b083      	sub	sp, #12
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f023 0201 	bic.w	r2, r3, #1
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac5c:	78fb      	ldrb	r3, [r7, #3]
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d115      	bne.n	800ac8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac6e:	2001      	movs	r0, #1
 800ac70:	f7f8 fe00 	bl	8003874 <HAL_Delay>
      ms++;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3301      	adds	r3, #1
 800ac78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f001 fa3f 	bl	800c0fe <USB_GetMode>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d01e      	beq.n	800acc4 <USB_SetCurrentMode+0x84>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b31      	cmp	r3, #49	; 0x31
 800ac8a:	d9f0      	bls.n	800ac6e <USB_SetCurrentMode+0x2e>
 800ac8c:	e01a      	b.n	800acc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac8e:	78fb      	ldrb	r3, [r7, #3]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d115      	bne.n	800acc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aca0:	2001      	movs	r0, #1
 800aca2:	f7f8 fde7 	bl	8003874 <HAL_Delay>
      ms++;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 fa26 	bl	800c0fe <USB_GetMode>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d005      	beq.n	800acc4 <USB_SetCurrentMode+0x84>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b31      	cmp	r3, #49	; 0x31
 800acbc:	d9f0      	bls.n	800aca0 <USB_SetCurrentMode+0x60>
 800acbe:	e001      	b.n	800acc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e005      	b.n	800acd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b32      	cmp	r3, #50	; 0x32
 800acc8:	d101      	bne.n	800acce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e000      	b.n	800acd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acd8:	b084      	sub	sp, #16
 800acda:	b580      	push	{r7, lr}
 800acdc:	b086      	sub	sp, #24
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ace6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acf2:	2300      	movs	r3, #0
 800acf4:	613b      	str	r3, [r7, #16]
 800acf6:	e009      	b.n	800ad0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	3340      	adds	r3, #64	; 0x40
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	4413      	add	r3, r2
 800ad02:	2200      	movs	r2, #0
 800ad04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	613b      	str	r3, [r7, #16]
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2b0e      	cmp	r3, #14
 800ad10:	d9f2      	bls.n	800acf8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ad12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d11c      	bne.n	800ad52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad26:	f043 0302 	orr.w	r3, r3, #2
 800ad2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	e005      	b.n	800ad5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad64:	461a      	mov	r2, r3
 800ad66:	2300      	movs	r3, #0
 800ad68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad70:	4619      	mov	r1, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad78:	461a      	mov	r2, r3
 800ad7a:	680b      	ldr	r3, [r1, #0]
 800ad7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d10c      	bne.n	800ad9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d104      	bne.n	800ad94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f965 	bl	800b05c <USB_SetDevSpeed>
 800ad92:	e008      	b.n	800ada6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad94:	2101      	movs	r1, #1
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f960 	bl	800b05c <USB_SetDevSpeed>
 800ad9c:	e003      	b.n	800ada6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad9e:	2103      	movs	r1, #3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f95b 	bl	800b05c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ada6:	2110      	movs	r1, #16
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f8f3 	bl	800af94 <USB_FlushTxFifo>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d001      	beq.n	800adb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f91f 	bl	800affc <USB_FlushRxFifo>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adce:	461a      	mov	r2, r3
 800add0:	2300      	movs	r3, #0
 800add2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adda:	461a      	mov	r2, r3
 800addc:	2300      	movs	r3, #0
 800adde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade6:	461a      	mov	r2, r3
 800ade8:	2300      	movs	r3, #0
 800adea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adec:	2300      	movs	r3, #0
 800adee:	613b      	str	r3, [r7, #16]
 800adf0:	e043      	b.n	800ae7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae08:	d118      	bne.n	800ae3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	e013      	b.n	800ae4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	015a      	lsls	r2, r3, #5
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae32:	461a      	mov	r2, r3
 800ae34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae38:	6013      	str	r3, [r2, #0]
 800ae3a:	e008      	b.n	800ae4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae48:	461a      	mov	r2, r3
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	3301      	adds	r3, #1
 800ae78:	613b      	str	r3, [r7, #16]
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	693a      	ldr	r2, [r7, #16]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d3b7      	bcc.n	800adf2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae82:	2300      	movs	r3, #0
 800ae84:	613b      	str	r3, [r7, #16]
 800ae86:	e043      	b.n	800af10 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	015a      	lsls	r2, r3, #5
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae9e:	d118      	bne.n	800aed2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d10a      	bne.n	800aebc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	015a      	lsls	r2, r3, #5
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	e013      	b.n	800aee4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec8:	461a      	mov	r2, r3
 800aeca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	e008      	b.n	800aee4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	015a      	lsls	r2, r3, #5
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	4413      	add	r3, r2
 800aeda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aede:	461a      	mov	r2, r3
 800aee0:	2300      	movs	r3, #0
 800aee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aef0:	461a      	mov	r2, r3
 800aef2:	2300      	movs	r3, #0
 800aef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	015a      	lsls	r2, r3, #5
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	4413      	add	r3, r2
 800aefe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af02:	461a      	mov	r2, r3
 800af04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	3301      	adds	r3, #1
 800af0e:	613b      	str	r3, [r7, #16]
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	429a      	cmp	r2, r3
 800af16:	d3b7      	bcc.n	800ae88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d105      	bne.n	800af4c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	699b      	ldr	r3, [r3, #24]
 800af44:	f043 0210 	orr.w	r2, r3, #16
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	699a      	ldr	r2, [r3, #24]
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <USB_DevInit+0x2b8>)
 800af52:	4313      	orrs	r3, r2
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d005      	beq.n	800af6a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	f043 0208 	orr.w	r2, r3, #8
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d107      	bne.n	800af80 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af78:	f043 0304 	orr.w	r3, r3, #4
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af80:	7dfb      	ldrb	r3, [r7, #23]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af8c:	b004      	add	sp, #16
 800af8e:	4770      	bx	lr
 800af90:	803c3800 	.word	0x803c3800

0800af94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3301      	adds	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4a13      	ldr	r2, [pc, #76]	; (800aff8 <USB_FlushTxFifo+0x64>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d901      	bls.n	800afb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800afb0:	2303      	movs	r3, #3
 800afb2:	e01b      	b.n	800afec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	daf2      	bge.n	800afa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	019b      	lsls	r3, r3, #6
 800afc4:	f043 0220 	orr.w	r2, r3, #32
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	3301      	adds	r3, #1
 800afd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	4a08      	ldr	r2, [pc, #32]	; (800aff8 <USB_FlushTxFifo+0x64>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d901      	bls.n	800afde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e006      	b.n	800afec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f003 0320 	and.w	r3, r3, #32
 800afe6:	2b20      	cmp	r3, #32
 800afe8:	d0f0      	beq.n	800afcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	00030d40 	.word	0x00030d40

0800affc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b004:	2300      	movs	r3, #0
 800b006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3301      	adds	r3, #1
 800b00c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	4a11      	ldr	r2, [pc, #68]	; (800b058 <USB_FlushRxFifo+0x5c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d901      	bls.n	800b01a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e018      	b.n	800b04c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	daf2      	bge.n	800b008 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2210      	movs	r2, #16
 800b02a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3301      	adds	r3, #1
 800b030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4a08      	ldr	r2, [pc, #32]	; (800b058 <USB_FlushRxFifo+0x5c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d901      	bls.n	800b03e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b03a:	2303      	movs	r3, #3
 800b03c:	e006      	b.n	800b04c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	f003 0310 	and.w	r3, r3, #16
 800b046:	2b10      	cmp	r3, #16
 800b048:	d0f0      	beq.n	800b02c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3714      	adds	r7, #20
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	00030d40 	.word	0x00030d40

0800b05c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	78fb      	ldrb	r3, [r7, #3]
 800b076:	68f9      	ldr	r1, [r7, #12]
 800b078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b07c:	4313      	orrs	r3, r2
 800b07e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3714      	adds	r7, #20
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b08e:	b480      	push	{r7}
 800b090:	b087      	sub	sp, #28
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a0:	689b      	ldr	r3, [r3, #8]
 800b0a2:	f003 0306 	and.w	r3, r3, #6
 800b0a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	75fb      	strb	r3, [r7, #23]
 800b0b2:	e00a      	b.n	800b0ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d002      	beq.n	800b0c0 <USB_GetDevSpeed+0x32>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b06      	cmp	r3, #6
 800b0be:	d102      	bne.n	800b0c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	75fb      	strb	r3, [r7, #23]
 800b0c4:	e001      	b.n	800b0ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b0c6:	230f      	movs	r3, #15
 800b0c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	371c      	adds	r7, #28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	785b      	ldrb	r3, [r3, #1]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d13a      	bne.n	800b16a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0fa:	69da      	ldr	r2, [r3, #28]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	2101      	movs	r1, #1
 800b106:	fa01 f303 	lsl.w	r3, r1, r3
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	68f9      	ldr	r1, [r7, #12]
 800b10e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b112:	4313      	orrs	r3, r2
 800b114:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	015a      	lsls	r2, r3, #5
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	4413      	add	r3, r2
 800b11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d155      	bne.n	800b1d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	015a      	lsls	r2, r3, #5
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	4413      	add	r3, r2
 800b134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	791b      	ldrb	r3, [r3, #4]
 800b146:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b148:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	059b      	lsls	r3, r3, #22
 800b14e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b150:	4313      	orrs	r3, r2
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	0151      	lsls	r1, r2, #5
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	440a      	add	r2, r1
 800b15a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b15e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	e036      	b.n	800b1d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b170:	69da      	ldr	r2, [r3, #28]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	f003 030f 	and.w	r3, r3, #15
 800b17a:	2101      	movs	r1, #1
 800b17c:	fa01 f303 	lsl.w	r3, r1, r3
 800b180:	041b      	lsls	r3, r3, #16
 800b182:	68f9      	ldr	r1, [r7, #12]
 800b184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b188:	4313      	orrs	r3, r2
 800b18a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	015a      	lsls	r2, r3, #5
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4413      	add	r3, r2
 800b194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d11a      	bne.n	800b1d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	791b      	ldrb	r3, [r3, #4]
 800b1bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b1be:	430b      	orrs	r3, r1
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	0151      	lsls	r1, r2, #5
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	440a      	add	r2, r1
 800b1ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
	...

0800b1e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	785b      	ldrb	r3, [r3, #1]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d161      	bne.n	800b2c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	015a      	lsls	r2, r3, #5
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b21a:	d11f      	bne.n	800b25c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4413      	add	r3, r2
 800b224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	0151      	lsls	r1, r2, #5
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	440a      	add	r2, r1
 800b232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b236:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b23a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	015a      	lsls	r2, r3, #5
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	4413      	add	r3, r2
 800b244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68ba      	ldr	r2, [r7, #8]
 800b24c:	0151      	lsls	r1, r2, #5
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	440a      	add	r2, r1
 800b252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b256:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b25a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	f003 030f 	and.w	r3, r3, #15
 800b26c:	2101      	movs	r1, #1
 800b26e:	fa01 f303 	lsl.w	r3, r1, r3
 800b272:	b29b      	uxth	r3, r3
 800b274:	43db      	mvns	r3, r3
 800b276:	68f9      	ldr	r1, [r7, #12]
 800b278:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b27c:	4013      	ands	r3, r2
 800b27e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b286:	69da      	ldr	r2, [r3, #28]
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	f003 030f 	and.w	r3, r3, #15
 800b290:	2101      	movs	r1, #1
 800b292:	fa01 f303 	lsl.w	r3, r1, r3
 800b296:	b29b      	uxth	r3, r3
 800b298:	43db      	mvns	r3, r3
 800b29a:	68f9      	ldr	r1, [r7, #12]
 800b29c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	0159      	lsls	r1, r3, #5
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	440b      	add	r3, r1
 800b2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4b35      	ldr	r3, [pc, #212]	; (800b398 <USB_DeactivateEndpoint+0x1b0>)
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	600b      	str	r3, [r1, #0]
 800b2c6:	e060      	b.n	800b38a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	015a      	lsls	r2, r3, #5
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	4413      	add	r3, r2
 800b2d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2de:	d11f      	bne.n	800b320 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	0151      	lsls	r1, r2, #5
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	440a      	add	r2, r1
 800b2f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4413      	add	r3, r2
 800b308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	0151      	lsls	r1, r2, #5
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	440a      	add	r2, r1
 800b316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b31e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	f003 030f 	and.w	r3, r3, #15
 800b330:	2101      	movs	r1, #1
 800b332:	fa01 f303 	lsl.w	r3, r1, r3
 800b336:	041b      	lsls	r3, r3, #16
 800b338:	43db      	mvns	r3, r3
 800b33a:	68f9      	ldr	r1, [r7, #12]
 800b33c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b340:	4013      	ands	r3, r2
 800b342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34a:	69da      	ldr	r2, [r3, #28]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	f003 030f 	and.w	r3, r3, #15
 800b354:	2101      	movs	r1, #1
 800b356:	fa01 f303 	lsl.w	r3, r1, r3
 800b35a:	041b      	lsls	r3, r3, #16
 800b35c:	43db      	mvns	r3, r3
 800b35e:	68f9      	ldr	r1, [r7, #12]
 800b360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b364:	4013      	ands	r3, r2
 800b366:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	0159      	lsls	r1, r3, #5
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	440b      	add	r3, r1
 800b37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b382:	4619      	mov	r1, r3
 800b384:	4b05      	ldr	r3, [pc, #20]	; (800b39c <USB_DeactivateEndpoint+0x1b4>)
 800b386:	4013      	ands	r3, r2
 800b388:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr
 800b398:	ec337800 	.word	0xec337800
 800b39c:	eff37800 	.word	0xeff37800

0800b3a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	785b      	ldrb	r3, [r3, #1]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	f040 815c 	bne.w	800b67a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	699b      	ldr	r3, [r3, #24]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d132      	bne.n	800b430 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d6:	691b      	ldr	r3, [r3, #16]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	0151      	lsls	r1, r2, #5
 800b3dc:	69fa      	ldr	r2, [r7, #28]
 800b3de:	440a      	add	r2, r1
 800b3e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	0151      	lsls	r1, r2, #5
 800b400:	69fa      	ldr	r2, [r7, #28]
 800b402:	440a      	add	r2, r1
 800b404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b408:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b40c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	69ba      	ldr	r2, [r7, #24]
 800b41e:	0151      	lsls	r1, r2, #5
 800b420:	69fa      	ldr	r2, [r7, #28]
 800b422:	440a      	add	r2, r1
 800b424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b428:	0cdb      	lsrs	r3, r3, #19
 800b42a:	04db      	lsls	r3, r3, #19
 800b42c:	6113      	str	r3, [r2, #16]
 800b42e:	e074      	b.n	800b51a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	0151      	lsls	r1, r2, #5
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	440a      	add	r2, r1
 800b446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44a:	0cdb      	lsrs	r3, r3, #19
 800b44c:	04db      	lsls	r3, r3, #19
 800b44e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	015a      	lsls	r2, r3, #5
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	4413      	add	r3, r2
 800b458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	69ba      	ldr	r2, [r7, #24]
 800b460:	0151      	lsls	r1, r2, #5
 800b462:	69fa      	ldr	r2, [r7, #28]
 800b464:	440a      	add	r2, r1
 800b466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b46a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b46e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	015a      	lsls	r2, r3, #5
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	4413      	add	r3, r2
 800b47c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b480:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	6999      	ldr	r1, [r3, #24]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	440b      	add	r3, r1
 800b48c:	1e59      	subs	r1, r3, #1
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	fbb1 f3f3 	udiv	r3, r1, r3
 800b496:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b498:	4b9d      	ldr	r3, [pc, #628]	; (800b710 <USB_EPStartXfer+0x370>)
 800b49a:	400b      	ands	r3, r1
 800b49c:	69b9      	ldr	r1, [r7, #24]
 800b49e:	0148      	lsls	r0, r1, #5
 800b4a0:	69f9      	ldr	r1, [r7, #28]
 800b4a2:	4401      	add	r1, r0
 800b4a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b4ac:	69bb      	ldr	r3, [r7, #24]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4b8:	691a      	ldr	r2, [r3, #16]
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4c2:	69b9      	ldr	r1, [r7, #24]
 800b4c4:	0148      	lsls	r0, r1, #5
 800b4c6:	69f9      	ldr	r1, [r7, #28]
 800b4c8:	4401      	add	r1, r0
 800b4ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	791b      	ldrb	r3, [r3, #4]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d11f      	bne.n	800b51a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	015a      	lsls	r2, r3, #5
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	0151      	lsls	r1, r2, #5
 800b4ec:	69fa      	ldr	r2, [r7, #28]
 800b4ee:	440a      	add	r2, r1
 800b4f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b4f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	4413      	add	r3, r2
 800b502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b506:	691b      	ldr	r3, [r3, #16]
 800b508:	69ba      	ldr	r2, [r7, #24]
 800b50a:	0151      	lsls	r1, r2, #5
 800b50c:	69fa      	ldr	r2, [r7, #28]
 800b50e:	440a      	add	r2, r1
 800b510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b514:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b518:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d14b      	bne.n	800b5b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d009      	beq.n	800b53c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b534:	461a      	mov	r2, r3
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	791b      	ldrb	r3, [r3, #4]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d128      	bne.n	800b596 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b550:	2b00      	cmp	r3, #0
 800b552:	d110      	bne.n	800b576 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	0151      	lsls	r1, r2, #5
 800b566:	69fa      	ldr	r2, [r7, #28]
 800b568:	440a      	add	r2, r1
 800b56a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b56e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b572:	6013      	str	r3, [r2, #0]
 800b574:	e00f      	b.n	800b596 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	69ba      	ldr	r2, [r7, #24]
 800b586:	0151      	lsls	r1, r2, #5
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	440a      	add	r2, r1
 800b58c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b594:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	0151      	lsls	r1, r2, #5
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	440a      	add	r2, r1
 800b5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5b4:	6013      	str	r3, [r2, #0]
 800b5b6:	e133      	b.n	800b820 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	69ba      	ldr	r2, [r7, #24]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	791b      	ldrb	r3, [r3, #4]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d015      	beq.n	800b60c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 811b 	beq.w	800b820 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	f003 030f 	and.w	r3, r3, #15
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b600:	69f9      	ldr	r1, [r7, #28]
 800b602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b606:	4313      	orrs	r3, r2
 800b608:	634b      	str	r3, [r1, #52]	; 0x34
 800b60a:	e109      	b.n	800b820 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d110      	bne.n	800b63e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	69fa      	ldr	r2, [r7, #28]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	e00f      	b.n	800b65e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	015a      	lsls	r2, r3, #5
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	4413      	add	r3, r2
 800b646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69ba      	ldr	r2, [r7, #24]
 800b64e:	0151      	lsls	r1, r2, #5
 800b650:	69fa      	ldr	r2, [r7, #28]
 800b652:	440a      	add	r2, r1
 800b654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b65c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	6919      	ldr	r1, [r3, #16]
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	781a      	ldrb	r2, [r3, #0]
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	699b      	ldr	r3, [r3, #24]
 800b66a:	b298      	uxth	r0, r3
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	4603      	mov	r3, r0
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 fade 	bl	800bc34 <USB_WritePacket>
 800b678:	e0d2      	b.n	800b820 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b67a:	69bb      	ldr	r3, [r7, #24]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	69fb      	ldr	r3, [r7, #28]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	0151      	lsls	r1, r2, #5
 800b68c:	69fa      	ldr	r2, [r7, #28]
 800b68e:	440a      	add	r2, r1
 800b690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b694:	0cdb      	lsrs	r3, r3, #19
 800b696:	04db      	lsls	r3, r3, #19
 800b698:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	0151      	lsls	r1, r2, #5
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	440a      	add	r2, r1
 800b6b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b6b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b6bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b6be:	68bb      	ldr	r3, [r7, #8]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d126      	bne.n	800b714 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d2:	691a      	ldr	r2, [r3, #16]
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6dc:	69b9      	ldr	r1, [r7, #24]
 800b6de:	0148      	lsls	r0, r1, #5
 800b6e0:	69f9      	ldr	r1, [r7, #28]
 800b6e2:	4401      	add	r1, r0
 800b6e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	0151      	lsls	r1, r2, #5
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	440a      	add	r2, r1
 800b702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b70a:	6113      	str	r3, [r2, #16]
 800b70c:	e03a      	b.n	800b784 <USB_EPStartXfer+0x3e4>
 800b70e:	bf00      	nop
 800b710:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	699a      	ldr	r2, [r3, #24]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	4413      	add	r3, r2
 800b71e:	1e5a      	subs	r2, r3, #1
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	fbb2 f3f3 	udiv	r3, r2, r3
 800b728:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	8afa      	ldrh	r2, [r7, #22]
 800b730:	fb03 f202 	mul.w	r2, r3, r2
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	015a      	lsls	r2, r3, #5
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	4413      	add	r3, r2
 800b740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b744:	691a      	ldr	r2, [r3, #16]
 800b746:	8afb      	ldrh	r3, [r7, #22]
 800b748:	04d9      	lsls	r1, r3, #19
 800b74a:	4b38      	ldr	r3, [pc, #224]	; (800b82c <USB_EPStartXfer+0x48c>)
 800b74c:	400b      	ands	r3, r1
 800b74e:	69b9      	ldr	r1, [r7, #24]
 800b750:	0148      	lsls	r0, r1, #5
 800b752:	69f9      	ldr	r1, [r7, #28]
 800b754:	4401      	add	r1, r0
 800b756:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b75a:	4313      	orrs	r3, r2
 800b75c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	4413      	add	r3, r2
 800b766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76a:	691a      	ldr	r2, [r3, #16]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b774:	69b9      	ldr	r1, [r7, #24]
 800b776:	0148      	lsls	r0, r1, #5
 800b778:	69f9      	ldr	r1, [r7, #28]
 800b77a:	4401      	add	r1, r0
 800b77c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b780:	4313      	orrs	r3, r2
 800b782:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d10d      	bne.n	800b7a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	6919      	ldr	r1, [r3, #16]
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	015a      	lsls	r2, r3, #5
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	4413      	add	r3, r2
 800b79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a2:	460a      	mov	r2, r1
 800b7a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	791b      	ldrb	r3, [r3, #4]
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d128      	bne.n	800b800 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d110      	bne.n	800b7e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	0151      	lsls	r1, r2, #5
 800b7d0:	69fa      	ldr	r2, [r7, #28]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	e00f      	b.n	800b800 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	69ba      	ldr	r2, [r7, #24]
 800b7f0:	0151      	lsls	r1, r2, #5
 800b7f2:	69fa      	ldr	r2, [r7, #28]
 800b7f4:	440a      	add	r2, r1
 800b7f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69ba      	ldr	r2, [r7, #24]
 800b810:	0151      	lsls	r1, r2, #5
 800b812:	69fa      	ldr	r2, [r7, #28]
 800b814:	440a      	add	r2, r1
 800b816:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b81a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b81e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3720      	adds	r7, #32
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	1ff80000 	.word	0x1ff80000

0800b830 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b830:	b480      	push	{r7}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	4613      	mov	r3, r2
 800b83c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	785b      	ldrb	r3, [r3, #1]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	f040 80ce 	bne.w	800b9ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d132      	bne.n	800b8c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	015a      	lsls	r2, r3, #5
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	4413      	add	r3, r2
 800b862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	0151      	lsls	r1, r2, #5
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	440a      	add	r2, r1
 800b870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b87c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	0151      	lsls	r1, r2, #5
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	440a      	add	r2, r1
 800b894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b89c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	0151      	lsls	r1, r2, #5
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	440a      	add	r2, r1
 800b8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8b8:	0cdb      	lsrs	r3, r3, #19
 800b8ba:	04db      	lsls	r3, r3, #19
 800b8bc:	6113      	str	r3, [r2, #16]
 800b8be:	e04e      	b.n	800b95e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8da:	0cdb      	lsrs	r3, r3, #19
 800b8dc:	04db      	lsls	r3, r3, #19
 800b8de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	0151      	lsls	r1, r2, #5
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	440a      	add	r2, r1
 800b8f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b902:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	699a      	ldr	r2, [r3, #24]
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d903      	bls.n	800b918 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	68da      	ldr	r2, [r3, #12]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	015a      	lsls	r2, r3, #5
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	4413      	add	r3, r2
 800b920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	0151      	lsls	r1, r2, #5
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	440a      	add	r2, r1
 800b92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b932:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b936:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	015a      	lsls	r2, r3, #5
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	4413      	add	r3, r2
 800b940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b944:	691a      	ldr	r2, [r3, #16]
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	699b      	ldr	r3, [r3, #24]
 800b94a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b94e:	6939      	ldr	r1, [r7, #16]
 800b950:	0148      	lsls	r0, r1, #5
 800b952:	6979      	ldr	r1, [r7, #20]
 800b954:	4401      	add	r1, r0
 800b956:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b95a:	4313      	orrs	r3, r2
 800b95c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b95e:	79fb      	ldrb	r3, [r7, #7]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d11e      	bne.n	800b9a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	695b      	ldr	r3, [r3, #20]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d009      	beq.n	800b980 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b978:	461a      	mov	r2, r3
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	015a      	lsls	r2, r3, #5
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	4413      	add	r3, r2
 800b988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	0151      	lsls	r1, r2, #5
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	440a      	add	r2, r1
 800b996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b99a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	e097      	b.n	800bad2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	015a      	lsls	r2, r3, #5
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	693a      	ldr	r2, [r7, #16]
 800b9b2:	0151      	lsls	r1, r2, #5
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	440a      	add	r2, r1
 800b9b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 8083 	beq.w	800bad2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	f003 030f 	and.w	r3, r3, #15
 800b9dc:	2101      	movs	r1, #1
 800b9de:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e2:	6979      	ldr	r1, [r7, #20]
 800b9e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	634b      	str	r3, [r1, #52]	; 0x34
 800b9ec:	e071      	b.n	800bad2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	0151      	lsls	r1, r2, #5
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	440a      	add	r2, r1
 800ba04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba08:	0cdb      	lsrs	r3, r3, #19
 800ba0a:	04db      	lsls	r3, r3, #19
 800ba0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	0151      	lsls	r1, r2, #5
 800ba20:	697a      	ldr	r2, [r7, #20]
 800ba22:	440a      	add	r2, r1
 800ba24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	699b      	ldr	r3, [r3, #24]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	68da      	ldr	r2, [r3, #12]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	68da      	ldr	r2, [r3, #12]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	015a      	lsls	r2, r3, #5
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	4413      	add	r3, r2
 800ba52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	0151      	lsls	r1, r2, #5
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	440a      	add	r2, r1
 800ba60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba76:	691a      	ldr	r2, [r3, #16]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	69db      	ldr	r3, [r3, #28]
 800ba7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba80:	6939      	ldr	r1, [r7, #16]
 800ba82:	0148      	lsls	r0, r1, #5
 800ba84:	6979      	ldr	r1, [r7, #20]
 800ba86:	4401      	add	r1, r0
 800ba88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba90:	79fb      	ldrb	r3, [r7, #7]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d10d      	bne.n	800bab2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d009      	beq.n	800bab2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	6919      	ldr	r1, [r3, #16]
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	015a      	lsls	r2, r3, #5
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	4413      	add	r3, r2
 800baaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baae:	460a      	mov	r2, r1
 800bab0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	015a      	lsls	r2, r3, #5
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	4413      	add	r3, r2
 800baba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	0151      	lsls	r1, r2, #5
 800bac4:	697a      	ldr	r2, [r7, #20]
 800bac6:	440a      	add	r2, r1
 800bac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bacc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bad0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	371c      	adds	r7, #28
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	785b      	ldrb	r3, [r3, #1]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d14a      	bne.n	800bb94 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb16:	f040 8086 	bne.w	800bc26 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	015a      	lsls	r2, r3, #5
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	4413      	add	r3, r2
 800bb24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	7812      	ldrb	r2, [r2, #0]
 800bb2e:	0151      	lsls	r1, r2, #5
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	440a      	add	r2, r1
 800bb34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb3c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	683a      	ldr	r2, [r7, #0]
 800bb50:	7812      	ldrb	r2, [r2, #0]
 800bb52:	0151      	lsls	r1, r2, #5
 800bb54:	693a      	ldr	r2, [r7, #16]
 800bb56:	440a      	add	r2, r1
 800bb58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3301      	adds	r3, #1
 800bb66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d902      	bls.n	800bb78 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	75fb      	strb	r3, [r7, #23]
          break;
 800bb76:	e056      	b.n	800bc26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	015a      	lsls	r2, r3, #5
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	4413      	add	r3, r2
 800bb82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb90:	d0e7      	beq.n	800bb62 <USB_EPStopXfer+0x82>
 800bb92:	e048      	b.n	800bc26 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbac:	d13b      	bne.n	800bc26 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	015a      	lsls	r2, r3, #5
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	7812      	ldrb	r2, [r2, #0]
 800bbc2:	0151      	lsls	r1, r2, #5
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	440a      	add	r2, r1
 800bbc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bbd0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	7812      	ldrb	r2, [r2, #0]
 800bbe6:	0151      	lsls	r1, r2, #5
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	440a      	add	r2, r1
 800bbec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f242 7210 	movw	r2, #10000	; 0x2710
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d902      	bls.n	800bc0c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	75fb      	strb	r3, [r7, #23]
          break;
 800bc0a:	e00c      	b.n	800bc26 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	015a      	lsls	r2, r3, #5
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	4413      	add	r3, r2
 800bc16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc24:	d0e7      	beq.n	800bbf6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	371c      	adds	r7, #28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b089      	sub	sp, #36	; 0x24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	4611      	mov	r1, r2
 800bc40:	461a      	mov	r2, r3
 800bc42:	460b      	mov	r3, r1
 800bc44:	71fb      	strb	r3, [r7, #7]
 800bc46:	4613      	mov	r3, r2
 800bc48:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bc52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d123      	bne.n	800bca2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc5a:	88bb      	ldrh	r3, [r7, #4]
 800bc5c:	3303      	adds	r3, #3
 800bc5e:	089b      	lsrs	r3, r3, #2
 800bc60:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc62:	2300      	movs	r3, #0
 800bc64:	61bb      	str	r3, [r7, #24]
 800bc66:	e018      	b.n	800bc9a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc68:	79fb      	ldrb	r3, [r7, #7]
 800bc6a:	031a      	lsls	r2, r3, #12
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc74:	461a      	mov	r2, r3
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	3301      	adds	r3, #1
 800bc86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	3301      	adds	r3, #1
 800bc92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	3301      	adds	r3, #1
 800bc98:	61bb      	str	r3, [r7, #24]
 800bc9a:	69ba      	ldr	r2, [r7, #24]
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d3e2      	bcc.n	800bc68 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3724      	adds	r7, #36	; 0x24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b08b      	sub	sp, #44	; 0x2c
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bcc6:	88fb      	ldrh	r3, [r7, #6]
 800bcc8:	089b      	lsrs	r3, r3, #2
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bcce:	88fb      	ldrh	r3, [r7, #6]
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	623b      	str	r3, [r7, #32]
 800bcda:	e014      	b.n	800bd06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	601a      	str	r2, [r3, #0]
    pDest++;
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	3301      	adds	r3, #1
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	3301      	adds	r3, #1
 800bd04:	623b      	str	r3, [r7, #32]
 800bd06:	6a3a      	ldr	r2, [r7, #32]
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d3e6      	bcc.n	800bcdc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bd0e:	8bfb      	ldrh	r3, [r7, #30]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d01e      	beq.n	800bd52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f107 0310 	add.w	r3, r7, #16
 800bd24:	6812      	ldr	r2, [r2, #0]
 800bd26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	fa22 f303 	lsr.w	r3, r2, r3
 800bd34:	b2da      	uxtb	r2, r3
 800bd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd38:	701a      	strb	r2, [r3, #0]
      i++;
 800bd3a:	6a3b      	ldr	r3, [r7, #32]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	623b      	str	r3, [r7, #32]
      pDest++;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	3301      	adds	r3, #1
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bd46:	8bfb      	ldrh	r3, [r7, #30]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bd4c:	8bfb      	ldrh	r3, [r7, #30]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d1ea      	bne.n	800bd28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	372c      	adds	r7, #44	; 0x2c
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	785b      	ldrb	r3, [r3, #1]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d12c      	bne.n	800bdd6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	015a      	lsls	r2, r3, #5
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	4413      	add	r3, r2
 800bd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	db12      	blt.n	800bdb4 <USB_EPSetStall+0x54>
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00f      	beq.n	800bdb4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	0151      	lsls	r1, r2, #5
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	440a      	add	r2, r1
 800bdaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bdb2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	0151      	lsls	r1, r2, #5
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	440a      	add	r2, r1
 800bdca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	e02b      	b.n	800be2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	015a      	lsls	r2, r3, #5
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	4413      	add	r3, r2
 800bdde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	db12      	blt.n	800be0e <USB_EPSetStall+0xae>
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00f      	beq.n	800be0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	015a      	lsls	r2, r3, #5
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	0151      	lsls	r1, r2, #5
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	440a      	add	r2, r1
 800be04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	015a      	lsls	r2, r3, #5
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	4413      	add	r3, r2
 800be16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	0151      	lsls	r1, r2, #5
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	440a      	add	r2, r1
 800be24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	785b      	ldrb	r3, [r3, #1]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d128      	bne.n	800beaa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	0151      	lsls	r1, r2, #5
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	440a      	add	r2, r1
 800be6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	791b      	ldrb	r3, [r3, #4]
 800be7c:	2b03      	cmp	r3, #3
 800be7e:	d003      	beq.n	800be88 <USB_EPClearStall+0x4c>
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	791b      	ldrb	r3, [r3, #4]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d138      	bne.n	800befa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	0151      	lsls	r1, r2, #5
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	440a      	add	r2, r1
 800be9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	e027      	b.n	800befa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	68ba      	ldr	r2, [r7, #8]
 800beba:	0151      	lsls	r1, r2, #5
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	440a      	add	r2, r1
 800bec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bec8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	791b      	ldrb	r3, [r3, #4]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d003      	beq.n	800beda <USB_EPClearStall+0x9e>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	791b      	ldrb	r3, [r3, #4]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d10f      	bne.n	800befa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	0151      	lsls	r1, r2, #5
 800beec:	68fa      	ldr	r2, [r7, #12]
 800beee:	440a      	add	r2, r1
 800bef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bef8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bf2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bf3c:	68f9      	ldr	r1, [r7, #12]
 800bf3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf42:	4313      	orrs	r3, r2
 800bf44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf82:	f023 0302 	bic.w	r3, r3, #2
 800bf86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3714      	adds	r7, #20
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr

0800bf96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf96:	b480      	push	{r7}
 800bf98:	b085      	sub	sp, #20
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfb0:	f023 0303 	bic.w	r3, r3, #3
 800bfb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfc4:	f043 0302 	orr.w	r3, r3, #2
 800bfc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	4013      	ands	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bff0:	68fb      	ldr	r3, [r7, #12]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr

0800bffe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bffe:	b480      	push	{r7}
 800c000:	b085      	sub	sp, #20
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	4013      	ands	r3, r2
 800c020:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	0c1b      	lsrs	r3, r3, #16
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c032:	b480      	push	{r7}
 800c034:	b085      	sub	sp, #20
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04e:	69db      	ldr	r3, [r3, #28]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	4013      	ands	r3, r2
 800c054:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	b29b      	uxth	r3, r3
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c066:	b480      	push	{r7}
 800c068:	b085      	sub	sp, #20
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	460b      	mov	r3, r1
 800c070:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c076:	78fb      	ldrb	r3, [r7, #3]
 800c078:	015a      	lsls	r2, r3, #5
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	4413      	add	r3, r2
 800c07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	4013      	ands	r3, r2
 800c092:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c094:	68bb      	ldr	r3, [r7, #8]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b087      	sub	sp, #28
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c0c6:	78fb      	ldrb	r3, [r7, #3]
 800c0c8:	f003 030f 	and.w	r3, r3, #15
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c0d2:	01db      	lsls	r3, r3, #7
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	693a      	ldr	r2, [r7, #16]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0dc:	78fb      	ldrb	r3, [r7, #3]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0f0:	68bb      	ldr	r3, [r7, #8]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	371c      	adds	r7, #28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b083      	sub	sp, #12
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	695b      	ldr	r3, [r3, #20]
 800c10a:	f003 0301 	and.w	r3, r3, #1
}
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c11a:	b480      	push	{r7}
 800c11c:	b085      	sub	sp, #20
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c134:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c138:	f023 0307 	bic.w	r3, r3, #7
 800c13c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c14c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c160:	b480      	push	{r7}
 800c162:	b087      	sub	sp, #28
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	460b      	mov	r3, r1
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	333c      	adds	r3, #60	; 0x3c
 800c176:	3304      	adds	r3, #4
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	4a26      	ldr	r2, [pc, #152]	; (800c218 <USB_EP0_OutStart+0xb8>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d90a      	bls.n	800c19a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c194:	d101      	bne.n	800c19a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	e037      	b.n	800c20a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	697a      	ldr	r2, [r7, #20]
 800c1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1c8:	f043 0318 	orr.w	r3, r3, #24
 800c1cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d4:	691b      	ldr	r3, [r3, #16]
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c1e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c1e2:	7afb      	ldrb	r3, [r7, #11]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d10f      	bne.n	800c208 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	697a      	ldr	r2, [r7, #20]
 800c1fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c202:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c206:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c208:	2300      	movs	r3, #0
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	371c      	adds	r7, #28
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	4f54300a 	.word	0x4f54300a

0800c21c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c224:	2300      	movs	r3, #0
 800c226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3301      	adds	r3, #1
 800c22c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	4a13      	ldr	r2, [pc, #76]	; (800c280 <USB_CoreReset+0x64>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d901      	bls.n	800c23a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c236:	2303      	movs	r3, #3
 800c238:	e01b      	b.n	800c272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	daf2      	bge.n	800c228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	f043 0201 	orr.w	r2, r3, #1
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3301      	adds	r3, #1
 800c256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	4a09      	ldr	r2, [pc, #36]	; (800c280 <USB_CoreReset+0x64>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d901      	bls.n	800c264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	e006      	b.n	800c272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	f003 0301 	and.w	r3, r3, #1
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d0f0      	beq.n	800c252 <USB_CoreReset+0x36>

  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3714      	adds	r7, #20
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	00030d40 	.word	0x00030d40

0800c284 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c288:	4904      	ldr	r1, [pc, #16]	; (800c29c <MX_FATFS_Init+0x18>)
 800c28a:	4805      	ldr	r0, [pc, #20]	; (800c2a0 <MX_FATFS_Init+0x1c>)
 800c28c:	f002 fd76 	bl	800ed7c <FATFS_LinkDriver>
 800c290:	4603      	mov	r3, r0
 800c292:	461a      	mov	r2, r3
 800c294:	4b03      	ldr	r3, [pc, #12]	; (800c2a4 <MX_FATFS_Init+0x20>)
 800c296:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c298:	bf00      	nop
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	20000678 	.word	0x20000678
 800c2a0:	2000000c 	.word	0x2000000c
 800c2a4:	20000674 	.word	0x20000674

0800c2a8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800c2b2:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <USER_initialize+0x24>)
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c2b8:	4b04      	ldr	r3, [pc, #16]	; (800c2cc <USER_initialize+0x24>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	20000009 	.word	0x20000009

0800c2d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800c2da:	4b06      	ldr	r3, [pc, #24]	; (800c2f4 <USER_status+0x24>)
 800c2dc:	2201      	movs	r2, #1
 800c2de:	701a      	strb	r2, [r3, #0]
    return Stat;
 800c2e0:	4b04      	ldr	r3, [pc, #16]	; (800c2f4 <USER_status+0x24>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	370c      	adds	r7, #12
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f0:	4770      	bx	lr
 800c2f2:	bf00      	nop
 800c2f4:	20000009 	.word	0x20000009

0800c2f8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	607a      	str	r2, [r7, #4]
 800c302:	603b      	str	r3, [r7, #0]
 800c304:	4603      	mov	r3, r0
 800c306:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800c308:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c316:	b480      	push	{r7}
 800c318:	b085      	sub	sp, #20
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
 800c320:	603b      	str	r3, [r7, #0]
 800c322:	4603      	mov	r3, r0
 800c324:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800c326:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3714      	adds	r7, #20
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	603a      	str	r2, [r7, #0]
 800c33e:	71fb      	strb	r3, [r7, #7]
 800c340:	460b      	mov	r3, r1
 800c342:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	73fb      	strb	r3, [r7, #15]
    return res;
 800c348:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
	...

0800c358 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c364:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c368:	f007 fb24 	bl	80139b4 <USBD_static_malloc>
 800c36c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d109      	bne.n	800c388 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	32b0      	adds	r2, #176	; 0xb0
 800c37e:	2100      	movs	r1, #0
 800c380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c384:	2302      	movs	r3, #2
 800c386:	e0d4      	b.n	800c532 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c388:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c38c:	2100      	movs	r1, #0
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f007 fc8a 	bl	8013ca8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	32b0      	adds	r2, #176	; 0xb0
 800c39e:	68f9      	ldr	r1, [r7, #12]
 800c3a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	32b0      	adds	r2, #176	; 0xb0
 800c3ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	7c1b      	ldrb	r3, [r3, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d138      	bne.n	800c432 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c3c0:	4b5e      	ldr	r3, [pc, #376]	; (800c53c <USBD_CDC_Init+0x1e4>)
 800c3c2:	7819      	ldrb	r1, [r3, #0]
 800c3c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f007 f981 	bl	80136d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c3d0:	4b5a      	ldr	r3, [pc, #360]	; (800c53c <USBD_CDC_Init+0x1e4>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	f003 020f 	and.w	r2, r3, #15
 800c3d8:	6879      	ldr	r1, [r7, #4]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	3324      	adds	r3, #36	; 0x24
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c3ea:	4b55      	ldr	r3, [pc, #340]	; (800c540 <USBD_CDC_Init+0x1e8>)
 800c3ec:	7819      	ldrb	r1, [r3, #0]
 800c3ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f007 f96c 	bl	80136d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c3fa:	4b51      	ldr	r3, [pc, #324]	; (800c540 <USBD_CDC_Init+0x1e8>)
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	f003 020f 	and.w	r2, r3, #15
 800c402:	6879      	ldr	r1, [r7, #4]
 800c404:	4613      	mov	r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	440b      	add	r3, r1
 800c40e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c412:	2201      	movs	r2, #1
 800c414:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c416:	4b4b      	ldr	r3, [pc, #300]	; (800c544 <USBD_CDC_Init+0x1ec>)
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	f003 020f 	and.w	r2, r3, #15
 800c41e:	6879      	ldr	r1, [r7, #4]
 800c420:	4613      	mov	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	4413      	add	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	440b      	add	r3, r1
 800c42a:	3326      	adds	r3, #38	; 0x26
 800c42c:	2210      	movs	r2, #16
 800c42e:	801a      	strh	r2, [r3, #0]
 800c430:	e035      	b.n	800c49e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c432:	4b42      	ldr	r3, [pc, #264]	; (800c53c <USBD_CDC_Init+0x1e4>)
 800c434:	7819      	ldrb	r1, [r3, #0]
 800c436:	2340      	movs	r3, #64	; 0x40
 800c438:	2202      	movs	r2, #2
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f007 f949 	bl	80136d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c440:	4b3e      	ldr	r3, [pc, #248]	; (800c53c <USBD_CDC_Init+0x1e4>)
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	f003 020f 	and.w	r2, r3, #15
 800c448:	6879      	ldr	r1, [r7, #4]
 800c44a:	4613      	mov	r3, r2
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	440b      	add	r3, r1
 800c454:	3324      	adds	r3, #36	; 0x24
 800c456:	2201      	movs	r2, #1
 800c458:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c45a:	4b39      	ldr	r3, [pc, #228]	; (800c540 <USBD_CDC_Init+0x1e8>)
 800c45c:	7819      	ldrb	r1, [r3, #0]
 800c45e:	2340      	movs	r3, #64	; 0x40
 800c460:	2202      	movs	r2, #2
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f007 f935 	bl	80136d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c468:	4b35      	ldr	r3, [pc, #212]	; (800c540 <USBD_CDC_Init+0x1e8>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f003 020f 	and.w	r2, r3, #15
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	4613      	mov	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	440b      	add	r3, r1
 800c47c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c480:	2201      	movs	r2, #1
 800c482:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c484:	4b2f      	ldr	r3, [pc, #188]	; (800c544 <USBD_CDC_Init+0x1ec>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	f003 020f 	and.w	r2, r3, #15
 800c48c:	6879      	ldr	r1, [r7, #4]
 800c48e:	4613      	mov	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	4413      	add	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	440b      	add	r3, r1
 800c498:	3326      	adds	r3, #38	; 0x26
 800c49a:	2210      	movs	r2, #16
 800c49c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c49e:	4b29      	ldr	r3, [pc, #164]	; (800c544 <USBD_CDC_Init+0x1ec>)
 800c4a0:	7819      	ldrb	r1, [r3, #0]
 800c4a2:	2308      	movs	r3, #8
 800c4a4:	2203      	movs	r2, #3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f007 f913 	bl	80136d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c4ac:	4b25      	ldr	r3, [pc, #148]	; (800c544 <USBD_CDC_Init+0x1ec>)
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	f003 020f 	and.w	r2, r3, #15
 800c4b4:	6879      	ldr	r1, [r7, #4]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4413      	add	r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	440b      	add	r3, r1
 800c4c0:	3324      	adds	r3, #36	; 0x24
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	33b0      	adds	r3, #176	; 0xb0
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	4413      	add	r3, r2
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d101      	bne.n	800c500 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	e018      	b.n	800c532 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7c1b      	ldrb	r3, [r3, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c508:	4b0d      	ldr	r3, [pc, #52]	; (800c540 <USBD_CDC_Init+0x1e8>)
 800c50a:	7819      	ldrb	r1, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c512:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f007 f9ca 	bl	80138b0 <USBD_LL_PrepareReceive>
 800c51c:	e008      	b.n	800c530 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c51e:	4b08      	ldr	r3, [pc, #32]	; (800c540 <USBD_CDC_Init+0x1e8>)
 800c520:	7819      	ldrb	r1, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c528:	2340      	movs	r3, #64	; 0x40
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f007 f9c0 	bl	80138b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	200000a7 	.word	0x200000a7
 800c540:	200000a8 	.word	0x200000a8
 800c544:	200000a9 	.word	0x200000a9

0800c548 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c554:	4b3a      	ldr	r3, [pc, #232]	; (800c640 <USBD_CDC_DeInit+0xf8>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	4619      	mov	r1, r3
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f007 f8df 	bl	801371e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c560:	4b37      	ldr	r3, [pc, #220]	; (800c640 <USBD_CDC_DeInit+0xf8>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	f003 020f 	and.w	r2, r3, #15
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	4613      	mov	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	440b      	add	r3, r1
 800c574:	3324      	adds	r3, #36	; 0x24
 800c576:	2200      	movs	r2, #0
 800c578:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c57a:	4b32      	ldr	r3, [pc, #200]	; (800c644 <USBD_CDC_DeInit+0xfc>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	4619      	mov	r1, r3
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f007 f8cc 	bl	801371e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c586:	4b2f      	ldr	r3, [pc, #188]	; (800c644 <USBD_CDC_DeInit+0xfc>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	f003 020f 	and.w	r2, r3, #15
 800c58e:	6879      	ldr	r1, [r7, #4]
 800c590:	4613      	mov	r3, r2
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	4413      	add	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	440b      	add	r3, r1
 800c59a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c59e:	2200      	movs	r2, #0
 800c5a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c5a2:	4b29      	ldr	r3, [pc, #164]	; (800c648 <USBD_CDC_DeInit+0x100>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f007 f8b8 	bl	801371e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c5ae:	4b26      	ldr	r3, [pc, #152]	; (800c648 <USBD_CDC_DeInit+0x100>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	f003 020f 	and.w	r2, r3, #15
 800c5b6:	6879      	ldr	r1, [r7, #4]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	440b      	add	r3, r1
 800c5c2:	3324      	adds	r3, #36	; 0x24
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c5c8:	4b1f      	ldr	r3, [pc, #124]	; (800c648 <USBD_CDC_DeInit+0x100>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	f003 020f 	and.w	r2, r3, #15
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	440b      	add	r3, r1
 800c5dc:	3326      	adds	r3, #38	; 0x26
 800c5de:	2200      	movs	r2, #0
 800c5e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	32b0      	adds	r2, #176	; 0xb0
 800c5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d01f      	beq.n	800c634 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	33b0      	adds	r3, #176	; 0xb0
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	32b0      	adds	r2, #176	; 0xb0
 800c612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c616:	4618      	mov	r0, r3
 800c618:	f007 f9da 	bl	80139d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	32b0      	adds	r2, #176	; 0xb0
 800c626:	2100      	movs	r1, #0
 800c628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	200000a7 	.word	0x200000a7
 800c644:	200000a8 	.word	0x200000a8
 800c648:	200000a9 	.word	0x200000a9

0800c64c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	32b0      	adds	r2, #176	; 0xb0
 800c660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c664:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c678:	2303      	movs	r3, #3
 800c67a:	e0bf      	b.n	800c7fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c684:	2b00      	cmp	r3, #0
 800c686:	d050      	beq.n	800c72a <USBD_CDC_Setup+0xde>
 800c688:	2b20      	cmp	r3, #32
 800c68a:	f040 80af 	bne.w	800c7ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	88db      	ldrh	r3, [r3, #6]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d03a      	beq.n	800c70c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	b25b      	sxtb	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da1b      	bge.n	800c6d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	33b0      	adds	r3, #176	; 0xb0
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4413      	add	r3, r2
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c6b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	88d2      	ldrh	r2, [r2, #6]
 800c6bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	88db      	ldrh	r3, [r3, #6]
 800c6c2:	2b07      	cmp	r3, #7
 800c6c4:	bf28      	it	cs
 800c6c6:	2307      	movcs	r3, #7
 800c6c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	89fa      	ldrh	r2, [r7, #14]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f001 fdb3 	bl	800e23c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c6d6:	e090      	b.n	800c7fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	785a      	ldrb	r2, [r3, #1]
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	88db      	ldrh	r3, [r3, #6]
 800c6e6:	2b3f      	cmp	r3, #63	; 0x3f
 800c6e8:	d803      	bhi.n	800c6f2 <USBD_CDC_Setup+0xa6>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	88db      	ldrh	r3, [r3, #6]
 800c6ee:	b2da      	uxtb	r2, r3
 800c6f0:	e000      	b.n	800c6f4 <USBD_CDC_Setup+0xa8>
 800c6f2:	2240      	movs	r2, #64	; 0x40
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c6fa:	6939      	ldr	r1, [r7, #16]
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c702:	461a      	mov	r2, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f001 fdc5 	bl	800e294 <USBD_CtlPrepareRx>
      break;
 800c70a:	e076      	b.n	800c7fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	33b0      	adds	r3, #176	; 0xb0
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	7850      	ldrb	r0, [r2, #1]
 800c722:	2200      	movs	r2, #0
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	4798      	blx	r3
      break;
 800c728:	e067      	b.n	800c7fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	785b      	ldrb	r3, [r3, #1]
 800c72e:	2b0b      	cmp	r3, #11
 800c730:	d851      	bhi.n	800c7d6 <USBD_CDC_Setup+0x18a>
 800c732:	a201      	add	r2, pc, #4	; (adr r2, 800c738 <USBD_CDC_Setup+0xec>)
 800c734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c738:	0800c769 	.word	0x0800c769
 800c73c:	0800c7e5 	.word	0x0800c7e5
 800c740:	0800c7d7 	.word	0x0800c7d7
 800c744:	0800c7d7 	.word	0x0800c7d7
 800c748:	0800c7d7 	.word	0x0800c7d7
 800c74c:	0800c7d7 	.word	0x0800c7d7
 800c750:	0800c7d7 	.word	0x0800c7d7
 800c754:	0800c7d7 	.word	0x0800c7d7
 800c758:	0800c7d7 	.word	0x0800c7d7
 800c75c:	0800c7d7 	.word	0x0800c7d7
 800c760:	0800c793 	.word	0x0800c793
 800c764:	0800c7bd 	.word	0x0800c7bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b03      	cmp	r3, #3
 800c772:	d107      	bne.n	800c784 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c774:	f107 030a 	add.w	r3, r7, #10
 800c778:	2202      	movs	r2, #2
 800c77a:	4619      	mov	r1, r3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f001 fd5d 	bl	800e23c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c782:	e032      	b.n	800c7ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f001 fce7 	bl	800e15a <USBD_CtlError>
            ret = USBD_FAIL;
 800c78c:	2303      	movs	r3, #3
 800c78e:	75fb      	strb	r3, [r7, #23]
          break;
 800c790:	e02b      	b.n	800c7ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d107      	bne.n	800c7ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c79e:	f107 030d 	add.w	r3, r7, #13
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f001 fd48 	bl	800e23c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c7ac:	e01d      	b.n	800c7ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f001 fcd2 	bl	800e15a <USBD_CtlError>
            ret = USBD_FAIL;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	75fb      	strb	r3, [r7, #23]
          break;
 800c7ba:	e016      	b.n	800c7ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b03      	cmp	r3, #3
 800c7c6:	d00f      	beq.n	800c7e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c7c8:	6839      	ldr	r1, [r7, #0]
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 fcc5 	bl	800e15a <USBD_CtlError>
            ret = USBD_FAIL;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c7d4:	e008      	b.n	800c7e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f001 fcbe 	bl	800e15a <USBD_CtlError>
          ret = USBD_FAIL;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c7e2:	e002      	b.n	800c7ea <USBD_CDC_Setup+0x19e>
          break;
 800c7e4:	bf00      	nop
 800c7e6:	e008      	b.n	800c7fa <USBD_CDC_Setup+0x1ae>
          break;
 800c7e8:	bf00      	nop
      }
      break;
 800c7ea:	e006      	b.n	800c7fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f001 fcb3 	bl	800e15a <USBD_CtlError>
      ret = USBD_FAIL;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c7f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c816:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	32b0      	adds	r2, #176	; 0xb0
 800c822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c82a:	2303      	movs	r3, #3
 800c82c:	e065      	b.n	800c8fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	32b0      	adds	r2, #176	; 0xb0
 800c838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	f003 020f 	and.w	r2, r3, #15
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	4613      	mov	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	440b      	add	r3, r1
 800c850:	3318      	adds	r3, #24
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d02f      	beq.n	800c8b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c858:	78fb      	ldrb	r3, [r7, #3]
 800c85a:	f003 020f 	and.w	r2, r3, #15
 800c85e:	6879      	ldr	r1, [r7, #4]
 800c860:	4613      	mov	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	440b      	add	r3, r1
 800c86a:	3318      	adds	r3, #24
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	78fb      	ldrb	r3, [r7, #3]
 800c870:	f003 010f 	and.w	r1, r3, #15
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	460b      	mov	r3, r1
 800c878:	00db      	lsls	r3, r3, #3
 800c87a:	440b      	add	r3, r1
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4403      	add	r3, r0
 800c880:	3348      	adds	r3, #72	; 0x48
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	fbb2 f1f3 	udiv	r1, r2, r3
 800c888:	fb01 f303 	mul.w	r3, r1, r3
 800c88c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d112      	bne.n	800c8b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c892:	78fb      	ldrb	r3, [r7, #3]
 800c894:	f003 020f 	and.w	r2, r3, #15
 800c898:	6879      	ldr	r1, [r7, #4]
 800c89a:	4613      	mov	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	440b      	add	r3, r1
 800c8a4:	3318      	adds	r3, #24
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c8aa:	78f9      	ldrb	r1, [r7, #3]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f006 ffdc 	bl	801386e <USBD_LL_Transmit>
 800c8b6:	e01f      	b.n	800c8f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	33b0      	adds	r3, #176	; 0xb0
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	691b      	ldr	r3, [r3, #16]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d010      	beq.n	800c8f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	33b0      	adds	r3, #176	; 0xb0
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c8f4:	78fa      	ldrb	r2, [r7, #3]
 800c8f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b084      	sub	sp, #16
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	460b      	mov	r3, r1
 800c90c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	32b0      	adds	r2, #176	; 0xb0
 800c918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	32b0      	adds	r2, #176	; 0xb0
 800c928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c930:	2303      	movs	r3, #3
 800c932:	e01a      	b.n	800c96a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c934:	78fb      	ldrb	r3, [r7, #3]
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f006 ffda 	bl	80138f2 <USBD_LL_GetRxDataSize>
 800c93e:	4602      	mov	r2, r0
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	33b0      	adds	r3, #176	; 0xb0
 800c950:	009b      	lsls	r3, r3, #2
 800c952:	4413      	add	r3, r2
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c964:	4611      	mov	r1, r2
 800c966:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b084      	sub	sp, #16
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	32b0      	adds	r2, #176	; 0xb0
 800c984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c988:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c990:	2303      	movs	r3, #3
 800c992:	e025      	b.n	800c9e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	33b0      	adds	r3, #176	; 0xb0
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d01a      	beq.n	800c9de <USBD_CDC_EP0_RxReady+0x6c>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c9ae:	2bff      	cmp	r3, #255	; 0xff
 800c9b0:	d015      	beq.n	800c9de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	33b0      	adds	r3, #176	; 0xb0
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	68fa      	ldr	r2, [r7, #12]
 800c9c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c9ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9d2:	b292      	uxth	r2, r2
 800c9d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	22ff      	movs	r2, #255	; 0xff
 800c9da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c9de:	2300      	movs	r3, #0
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c9f0:	2182      	movs	r1, #130	; 0x82
 800c9f2:	4818      	ldr	r0, [pc, #96]	; (800ca54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9f4:	f000 fd4f 	bl	800d496 <USBD_GetEpDesc>
 800c9f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	4815      	ldr	r0, [pc, #84]	; (800ca54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9fe:	f000 fd4a 	bl	800d496 <USBD_GetEpDesc>
 800ca02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca04:	2181      	movs	r1, #129	; 0x81
 800ca06:	4813      	ldr	r0, [pc, #76]	; (800ca54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca08:	f000 fd45 	bl	800d496 <USBD_GetEpDesc>
 800ca0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2210      	movs	r2, #16
 800ca18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d006      	beq.n	800ca2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca28:	711a      	strb	r2, [r3, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d006      	beq.n	800ca42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2200      	movs	r2, #0
 800ca38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca3c:	711a      	strb	r2, [r3, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2243      	movs	r2, #67	; 0x43
 800ca46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca48:	4b02      	ldr	r3, [pc, #8]	; (800ca54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20000064 	.word	0x20000064

0800ca58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca60:	2182      	movs	r1, #130	; 0x82
 800ca62:	4818      	ldr	r0, [pc, #96]	; (800cac4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca64:	f000 fd17 	bl	800d496 <USBD_GetEpDesc>
 800ca68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	4815      	ldr	r0, [pc, #84]	; (800cac4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca6e:	f000 fd12 	bl	800d496 <USBD_GetEpDesc>
 800ca72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca74:	2181      	movs	r1, #129	; 0x81
 800ca76:	4813      	ldr	r0, [pc, #76]	; (800cac4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca78:	f000 fd0d 	bl	800d496 <USBD_GetEpDesc>
 800ca7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2210      	movs	r2, #16
 800ca88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d006      	beq.n	800ca9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	2200      	movs	r2, #0
 800ca94:	711a      	strb	r2, [r3, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	f042 0202 	orr.w	r2, r2, #2
 800ca9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d006      	beq.n	800cab2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	711a      	strb	r2, [r3, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f042 0202 	orr.w	r2, r2, #2
 800cab0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2243      	movs	r2, #67	; 0x43
 800cab6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cab8:	4b02      	ldr	r3, [pc, #8]	; (800cac4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	20000064 	.word	0x20000064

0800cac8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cad0:	2182      	movs	r1, #130	; 0x82
 800cad2:	4818      	ldr	r0, [pc, #96]	; (800cb34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cad4:	f000 fcdf 	bl	800d496 <USBD_GetEpDesc>
 800cad8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cada:	2101      	movs	r1, #1
 800cadc:	4815      	ldr	r0, [pc, #84]	; (800cb34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cade:	f000 fcda 	bl	800d496 <USBD_GetEpDesc>
 800cae2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cae4:	2181      	movs	r1, #129	; 0x81
 800cae6:	4813      	ldr	r0, [pc, #76]	; (800cb34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cae8:	f000 fcd5 	bl	800d496 <USBD_GetEpDesc>
 800caec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2210      	movs	r2, #16
 800caf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d006      	beq.n	800cb0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb08:	711a      	strb	r2, [r3, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d006      	beq.n	800cb22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb1c:	711a      	strb	r2, [r3, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2243      	movs	r2, #67	; 0x43
 800cb26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb28:	4b02      	ldr	r3, [pc, #8]	; (800cb34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	20000064 	.word	0x20000064

0800cb38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	220a      	movs	r2, #10
 800cb44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb46:	4b03      	ldr	r3, [pc, #12]	; (800cb54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	20000020 	.word	0x20000020

0800cb58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e009      	b.n	800cb80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	33b0      	adds	r3, #176	; 0xb0
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	683a      	ldr	r2, [r7, #0]
 800cb7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b087      	sub	sp, #28
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	32b0      	adds	r2, #176	; 0xb0
 800cba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e008      	b.n	800cbc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	371c      	adds	r7, #28
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	32b0      	adds	r2, #176	; 0xb0
 800cbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	e004      	b.n	800cbfe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
	...

0800cc0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	32b0      	adds	r2, #176	; 0xb0
 800cc1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc22:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cc24:	2301      	movs	r3, #1
 800cc26:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	32b0      	adds	r2, #176	; 0xb0
 800cc32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e025      	b.n	800cc8a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d11f      	bne.n	800cc88 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cc50:	4b10      	ldr	r3, [pc, #64]	; (800cc94 <USBD_CDC_TransmitPacket+0x88>)
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	f003 020f 	and.w	r2, r3, #15
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	4613      	mov	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4403      	add	r3, r0
 800cc6a:	3318      	adds	r3, #24
 800cc6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cc6e:	4b09      	ldr	r3, [pc, #36]	; (800cc94 <USBD_CDC_TransmitPacket+0x88>)
 800cc70:	7819      	ldrb	r1, [r3, #0]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f006 fdf5 	bl	801386e <USBD_LL_Transmit>

    ret = USBD_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	200000a7 	.word	0x200000a7

0800cc98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	32b0      	adds	r2, #176	; 0xb0
 800ccaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	32b0      	adds	r2, #176	; 0xb0
 800ccba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ccc2:	2303      	movs	r3, #3
 800ccc4:	e018      	b.n	800ccf8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	7c1b      	ldrb	r3, [r3, #16]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10a      	bne.n	800cce4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccce:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <USBD_CDC_ReceivePacket+0x68>)
 800ccd0:	7819      	ldrb	r1, [r3, #0]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f006 fde7 	bl	80138b0 <USBD_LL_PrepareReceive>
 800cce2:	e008      	b.n	800ccf6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cce4:	4b06      	ldr	r3, [pc, #24]	; (800cd00 <USBD_CDC_ReceivePacket+0x68>)
 800cce6:	7819      	ldrb	r1, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccee:	2340      	movs	r3, #64	; 0x40
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f006 fddd 	bl	80138b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	200000a8 	.word	0x200000a8

0800cd04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b086      	sub	sp, #24
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	4613      	mov	r3, r2
 800cd10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e01f      	b.n	800cd5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d003      	beq.n	800cd42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68ba      	ldr	r2, [r7, #8]
 800cd3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	79fa      	ldrb	r2, [r7, #7]
 800cd4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f006 fc57 	bl	8013604 <USBD_LL_Init>
 800cd56:	4603      	mov	r3, r0
 800cd58:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3718      	adds	r7, #24
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e025      	b.n	800cdc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	32ae      	adds	r2, #174	; 0xae
 800cd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00f      	beq.n	800cdb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	32ae      	adds	r2, #174	; 0xae
 800cda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	f107 020e 	add.w	r2, r7, #14
 800cdac:	4610      	mov	r0, r2
 800cdae:	4798      	blx	r3
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cdbe:	1c5a      	adds	r2, r3, #1
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cdc6:	2300      	movs	r3, #0
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f006 fc5f 	bl	801369c <USBD_LL_Start>
 800cdde:	4603      	mov	r3, r0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdf0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr

0800cdfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b084      	sub	sp, #16
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
 800ce06:	460b      	mov	r3, r1
 800ce08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d009      	beq.n	800ce2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	78fa      	ldrb	r2, [r7, #3]
 800ce22:	4611      	mov	r1, r2
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	4798      	blx	r3
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b084      	sub	sp, #16
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
 800ce3e:	460b      	mov	r3, r1
 800ce40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	78fa      	ldrb	r2, [r7, #3]
 800ce50:	4611      	mov	r1, r2
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	4798      	blx	r3
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d001      	beq.n	800ce60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce5c:	2303      	movs	r3, #3
 800ce5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce7a:	6839      	ldr	r1, [r7, #0]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f001 f932 	bl	800e0e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2201      	movs	r2, #1
 800ce86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce90:	461a      	mov	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d01a      	beq.n	800cedc <USBD_LL_SetupStage+0x72>
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d822      	bhi.n	800cef0 <USBD_LL_SetupStage+0x86>
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d002      	beq.n	800ceb4 <USBD_LL_SetupStage+0x4a>
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d00a      	beq.n	800cec8 <USBD_LL_SetupStage+0x5e>
 800ceb2:	e01d      	b.n	800cef0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fb5f 	bl	800d580 <USBD_StdDevReq>
 800cec2:	4603      	mov	r3, r0
 800cec4:	73fb      	strb	r3, [r7, #15]
      break;
 800cec6:	e020      	b.n	800cf0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cece:	4619      	mov	r1, r3
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fbc7 	bl	800d664 <USBD_StdItfReq>
 800ced6:	4603      	mov	r3, r0
 800ced8:	73fb      	strb	r3, [r7, #15]
      break;
 800ceda:	e016      	b.n	800cf0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fc29 	bl	800d73c <USBD_StdEPReq>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73fb      	strb	r3, [r7, #15]
      break;
 800ceee:	e00c      	b.n	800cf0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cef6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f006 fc2c 	bl	801375c <USBD_LL_StallEP>
 800cf04:	4603      	mov	r3, r0
 800cf06:	73fb      	strb	r3, [r7, #15]
      break;
 800cf08:	bf00      	nop
  }

  return ret;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	607a      	str	r2, [r7, #4]
 800cf20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cf26:	7afb      	ldrb	r3, [r7, #11]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d16e      	bne.n	800d00a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	f040 8098 	bne.w	800d070 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	689a      	ldr	r2, [r3, #8]
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d913      	bls.n	800cf74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	689a      	ldr	r2, [r3, #8]
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	1ad2      	subs	r2, r2, r3
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	68da      	ldr	r2, [r3, #12]
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	4293      	cmp	r3, r2
 800cf64:	bf28      	it	cs
 800cf66:	4613      	movcs	r3, r2
 800cf68:	461a      	mov	r2, r3
 800cf6a:	6879      	ldr	r1, [r7, #4]
 800cf6c:	68f8      	ldr	r0, [r7, #12]
 800cf6e:	f001 f9ae 	bl	800e2ce <USBD_CtlContinueRx>
 800cf72:	e07d      	b.n	800d070 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf7a:	f003 031f 	and.w	r3, r3, #31
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d014      	beq.n	800cfac <USBD_LL_DataOutStage+0x98>
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d81d      	bhi.n	800cfc2 <USBD_LL_DataOutStage+0xae>
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <USBD_LL_DataOutStage+0x7c>
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d003      	beq.n	800cf96 <USBD_LL_DataOutStage+0x82>
 800cf8e:	e018      	b.n	800cfc2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cf90:	2300      	movs	r3, #0
 800cf92:	75bb      	strb	r3, [r7, #22]
            break;
 800cf94:	e018      	b.n	800cfc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f000 fa5e 	bl	800d462 <USBD_CoreFindIF>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	75bb      	strb	r3, [r7, #22]
            break;
 800cfaa:	e00d      	b.n	800cfc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	f000 fa60 	bl	800d47c <USBD_CoreFindEP>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	75bb      	strb	r3, [r7, #22]
            break;
 800cfc0:	e002      	b.n	800cfc8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	75bb      	strb	r3, [r7, #22]
            break;
 800cfc6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cfc8:	7dbb      	ldrb	r3, [r7, #22]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d119      	bne.n	800d002 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b03      	cmp	r3, #3
 800cfd8:	d113      	bne.n	800d002 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cfda:	7dba      	ldrb	r2, [r7, #22]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	32ae      	adds	r2, #174	; 0xae
 800cfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00b      	beq.n	800d002 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cfea:	7dba      	ldrb	r2, [r7, #22]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cff2:	7dba      	ldrb	r2, [r7, #22]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	32ae      	adds	r2, #174	; 0xae
 800cff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f001 f974 	bl	800e2f0 <USBD_CtlSendStatus>
 800d008:	e032      	b.n	800d070 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d00a:	7afb      	ldrb	r3, [r7, #11]
 800d00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d010:	b2db      	uxtb	r3, r3
 800d012:	4619      	mov	r1, r3
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f000 fa31 	bl	800d47c <USBD_CoreFindEP>
 800d01a:	4603      	mov	r3, r0
 800d01c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d01e:	7dbb      	ldrb	r3, [r7, #22]
 800d020:	2bff      	cmp	r3, #255	; 0xff
 800d022:	d025      	beq.n	800d070 <USBD_LL_DataOutStage+0x15c>
 800d024:	7dbb      	ldrb	r3, [r7, #22]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d122      	bne.n	800d070 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b03      	cmp	r3, #3
 800d034:	d117      	bne.n	800d066 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d036:	7dba      	ldrb	r2, [r7, #22]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	32ae      	adds	r2, #174	; 0xae
 800d03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00f      	beq.n	800d066 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d046:	7dba      	ldrb	r2, [r7, #22]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d04e:	7dba      	ldrb	r2, [r7, #22]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	32ae      	adds	r2, #174	; 0xae
 800d054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	7afa      	ldrb	r2, [r7, #11]
 800d05c:	4611      	mov	r1, r2
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	4798      	blx	r3
 800d062:	4603      	mov	r3, r0
 800d064:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d066:	7dfb      	ldrb	r3, [r7, #23]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d001      	beq.n	800d070 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d06c:	7dfb      	ldrb	r3, [r7, #23]
 800d06e:	e000      	b.n	800d072 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d070:	2300      	movs	r3, #0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3718      	adds	r7, #24
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b086      	sub	sp, #24
 800d07e:	af00      	add	r7, sp, #0
 800d080:	60f8      	str	r0, [r7, #12]
 800d082:	460b      	mov	r3, r1
 800d084:	607a      	str	r2, [r7, #4]
 800d086:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d088:	7afb      	ldrb	r3, [r7, #11]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d16f      	bne.n	800d16e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3314      	adds	r3, #20
 800d092:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d15a      	bne.n	800d154 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	689a      	ldr	r2, [r3, #8]
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d914      	bls.n	800d0d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	689a      	ldr	r2, [r3, #8]
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	1ad2      	subs	r2, r2, r3
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f001 f8d6 	bl	800e272 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	68f8      	ldr	r0, [r7, #12]
 800d0ce:	f006 fbef 	bl	80138b0 <USBD_LL_PrepareReceive>
 800d0d2:	e03f      	b.n	800d154 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	68da      	ldr	r2, [r3, #12]
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d11c      	bne.n	800d11a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	685a      	ldr	r2, [r3, #4]
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d316      	bcc.n	800d11a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	685a      	ldr	r2, [r3, #4]
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d20f      	bcs.n	800d11a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f001 f8b7 	bl	800e272 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d10c:	2300      	movs	r3, #0
 800d10e:	2200      	movs	r2, #0
 800d110:	2100      	movs	r1, #0
 800d112:	68f8      	ldr	r0, [r7, #12]
 800d114:	f006 fbcc 	bl	80138b0 <USBD_LL_PrepareReceive>
 800d118:	e01c      	b.n	800d154 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b03      	cmp	r3, #3
 800d124:	d10f      	bne.n	800d146 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d12c:	68db      	ldr	r3, [r3, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d009      	beq.n	800d146 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d146:	2180      	movs	r1, #128	; 0x80
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f006 fb07 	bl	801375c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f001 f8e1 	bl	800e316 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d03a      	beq.n	800d1d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	f7ff fe42 	bl	800cde8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d16c:	e032      	b.n	800d1d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d16e:	7afb      	ldrb	r3, [r7, #11]
 800d170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d174:	b2db      	uxtb	r3, r3
 800d176:	4619      	mov	r1, r3
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 f97f 	bl	800d47c <USBD_CoreFindEP>
 800d17e:	4603      	mov	r3, r0
 800d180:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d182:	7dfb      	ldrb	r3, [r7, #23]
 800d184:	2bff      	cmp	r3, #255	; 0xff
 800d186:	d025      	beq.n	800d1d4 <USBD_LL_DataInStage+0x15a>
 800d188:	7dfb      	ldrb	r3, [r7, #23]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d122      	bne.n	800d1d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b03      	cmp	r3, #3
 800d198:	d11c      	bne.n	800d1d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d19a:	7dfa      	ldrb	r2, [r7, #23]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	32ae      	adds	r2, #174	; 0xae
 800d1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d014      	beq.n	800d1d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d1aa:	7dfa      	ldrb	r2, [r7, #23]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d1b2:	7dfa      	ldrb	r2, [r7, #23]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	32ae      	adds	r2, #174	; 0xae
 800d1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1bc:	695b      	ldr	r3, [r3, #20]
 800d1be:	7afa      	ldrb	r2, [r7, #11]
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	4798      	blx	r3
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d1ca:	7dbb      	ldrb	r3, [r7, #22]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d001      	beq.n	800d1d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d1d0:	7dbb      	ldrb	r3, [r7, #22]
 800d1d2:	e000      	b.n	800d1d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d1d4:	2300      	movs	r3, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d216:	2b00      	cmp	r3, #0
 800d218:	d014      	beq.n	800d244 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00e      	beq.n	800d244 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	6852      	ldr	r2, [r2, #4]
 800d232:	b2d2      	uxtb	r2, r2
 800d234:	4611      	mov	r1, r2
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	4798      	blx	r3
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d240:	2303      	movs	r3, #3
 800d242:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d244:	2340      	movs	r3, #64	; 0x40
 800d246:	2200      	movs	r2, #0
 800d248:	2100      	movs	r1, #0
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f006 fa41 	bl	80136d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2240      	movs	r2, #64	; 0x40
 800d25c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d260:	2340      	movs	r3, #64	; 0x40
 800d262:	2200      	movs	r2, #0
 800d264:	2180      	movs	r1, #128	; 0x80
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f006 fa33 	bl	80136d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2240      	movs	r2, #64	; 0x40
 800d276:	621a      	str	r2, [r3, #32]

  return ret;
 800d278:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d282:	b480      	push	{r7}
 800d284:	b083      	sub	sp, #12
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	460b      	mov	r3, r1
 800d28c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	78fa      	ldrb	r2, [r7, #3]
 800d292:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr

0800d2a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2a2:	b480      	push	{r7}
 800d2a4:	b083      	sub	sp, #12
 800d2a6:	af00      	add	r7, sp, #0
 800d2a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2204      	movs	r2, #4
 800d2bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b04      	cmp	r3, #4
 800d2e0:	d106      	bne.n	800d2f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	370c      	adds	r7, #12
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr

0800d2fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b082      	sub	sp, #8
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d30c:	b2db      	uxtb	r3, r3
 800d30e:	2b03      	cmp	r3, #3
 800d310:	d110      	bne.n	800d334 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00b      	beq.n	800d334 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d005      	beq.n	800d334 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d32e:	69db      	ldr	r3, [r3, #28]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	4618      	mov	r0, r3
 800d338:	3708      	adds	r7, #8
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b082      	sub	sp, #8
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	460b      	mov	r3, r1
 800d348:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	32ae      	adds	r2, #174	; 0xae
 800d354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d101      	bne.n	800d360 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d35c:	2303      	movs	r3, #3
 800d35e:	e01c      	b.n	800d39a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2b03      	cmp	r3, #3
 800d36a:	d115      	bne.n	800d398 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	32ae      	adds	r2, #174	; 0xae
 800d376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d37a:	6a1b      	ldr	r3, [r3, #32]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00b      	beq.n	800d398 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	32ae      	adds	r2, #174	; 0xae
 800d38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d38e:	6a1b      	ldr	r3, [r3, #32]
 800d390:	78fa      	ldrb	r2, [r7, #3]
 800d392:	4611      	mov	r1, r2
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b082      	sub	sp, #8
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	32ae      	adds	r2, #174	; 0xae
 800d3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d101      	bne.n	800d3c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e01c      	b.n	800d3fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b03      	cmp	r3, #3
 800d3ce:	d115      	bne.n	800d3fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	32ae      	adds	r2, #174	; 0xae
 800d3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d00b      	beq.n	800d3fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	32ae      	adds	r2, #174	; 0xae
 800d3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f4:	78fa      	ldrb	r2, [r7, #3]
 800d3f6:	4611      	mov	r1, r2
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3fc:	2300      	movs	r3, #0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d406:	b480      	push	{r7}
 800d408:	b083      	sub	sp, #12
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00e      	beq.n	800d458 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	6852      	ldr	r2, [r2, #4]
 800d446:	b2d2      	uxtb	r2, r2
 800d448:	4611      	mov	r1, r2
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	4798      	blx	r3
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d001      	beq.n	800d458 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d454:	2303      	movs	r3, #3
 800d456:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d462:	b480      	push	{r7}
 800d464:	b083      	sub	sp, #12
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	460b      	mov	r3, r1
 800d46c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d46e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d470:	4618      	mov	r0, r3
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d488:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b086      	sub	sp, #24
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	885b      	ldrh	r3, [r3, #2]
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d920      	bls.n	800d500 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d4c6:	e013      	b.n	800d4f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d4c8:	f107 030a 	add.w	r3, r7, #10
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	6978      	ldr	r0, [r7, #20]
 800d4d0:	f000 f81b 	bl	800d50a <USBD_GetNextDesc>
 800d4d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	785b      	ldrb	r3, [r3, #1]
 800d4da:	2b05      	cmp	r3, #5
 800d4dc:	d108      	bne.n	800d4f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	789b      	ldrb	r3, [r3, #2]
 800d4e6:	78fa      	ldrb	r2, [r7, #3]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d008      	beq.n	800d4fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	885b      	ldrh	r3, [r3, #2]
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	897b      	ldrh	r3, [r7, #10]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d8e5      	bhi.n	800d4c8 <USBD_GetEpDesc+0x32>
 800d4fc:	e000      	b.n	800d500 <USBD_GetEpDesc+0x6a>
          break;
 800d4fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d500:	693b      	ldr	r3, [r7, #16]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3718      	adds	r7, #24
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b085      	sub	sp, #20
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	881a      	ldrh	r2, [r3, #0]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	b29b      	uxth	r3, r3
 800d522:	4413      	add	r3, r2
 800d524:	b29a      	uxth	r2, r3
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	461a      	mov	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4413      	add	r3, r2
 800d534:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d536:	68fb      	ldr	r3, [r7, #12]
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3714      	adds	r7, #20
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d544:	b480      	push	{r7}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	3301      	adds	r3, #1
 800d55a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d562:	8a3b      	ldrh	r3, [r7, #16]
 800d564:	021b      	lsls	r3, r3, #8
 800d566:	b21a      	sxth	r2, r3
 800d568:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	b21b      	sxth	r3, r3
 800d570:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d572:	89fb      	ldrh	r3, [r7, #14]
}
 800d574:	4618      	mov	r0, r3
 800d576:	371c      	adds	r7, #28
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b084      	sub	sp, #16
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d58a:	2300      	movs	r3, #0
 800d58c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d596:	2b40      	cmp	r3, #64	; 0x40
 800d598:	d005      	beq.n	800d5a6 <USBD_StdDevReq+0x26>
 800d59a:	2b40      	cmp	r3, #64	; 0x40
 800d59c:	d857      	bhi.n	800d64e <USBD_StdDevReq+0xce>
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00f      	beq.n	800d5c2 <USBD_StdDevReq+0x42>
 800d5a2:	2b20      	cmp	r3, #32
 800d5a4:	d153      	bne.n	800d64e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	32ae      	adds	r2, #174	; 0xae
 800d5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b4:	689b      	ldr	r3, [r3, #8]
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	4798      	blx	r3
 800d5bc:	4603      	mov	r3, r0
 800d5be:	73fb      	strb	r3, [r7, #15]
      break;
 800d5c0:	e04a      	b.n	800d658 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	2b09      	cmp	r3, #9
 800d5c8:	d83b      	bhi.n	800d642 <USBD_StdDevReq+0xc2>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <USBD_StdDevReq+0x50>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d625 	.word	0x0800d625
 800d5d4:	0800d639 	.word	0x0800d639
 800d5d8:	0800d643 	.word	0x0800d643
 800d5dc:	0800d62f 	.word	0x0800d62f
 800d5e0:	0800d643 	.word	0x0800d643
 800d5e4:	0800d603 	.word	0x0800d603
 800d5e8:	0800d5f9 	.word	0x0800d5f9
 800d5ec:	0800d643 	.word	0x0800d643
 800d5f0:	0800d61b 	.word	0x0800d61b
 800d5f4:	0800d60d 	.word	0x0800d60d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d5f8:	6839      	ldr	r1, [r7, #0]
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 fa3c 	bl	800da78 <USBD_GetDescriptor>
          break;
 800d600:	e024      	b.n	800d64c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fbcb 	bl	800dda0 <USBD_SetAddress>
          break;
 800d60a:	e01f      	b.n	800d64c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d60c:	6839      	ldr	r1, [r7, #0]
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f000 fc0a 	bl	800de28 <USBD_SetConfig>
 800d614:	4603      	mov	r3, r0
 800d616:	73fb      	strb	r3, [r7, #15]
          break;
 800d618:	e018      	b.n	800d64c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d61a:	6839      	ldr	r1, [r7, #0]
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 fcad 	bl	800df7c <USBD_GetConfig>
          break;
 800d622:	e013      	b.n	800d64c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d624:	6839      	ldr	r1, [r7, #0]
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 fcde 	bl	800dfe8 <USBD_GetStatus>
          break;
 800d62c:	e00e      	b.n	800d64c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d62e:	6839      	ldr	r1, [r7, #0]
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 fd0d 	bl	800e050 <USBD_SetFeature>
          break;
 800d636:	e009      	b.n	800d64c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d638:	6839      	ldr	r1, [r7, #0]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fd31 	bl	800e0a2 <USBD_ClrFeature>
          break;
 800d640:	e004      	b.n	800d64c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d642:	6839      	ldr	r1, [r7, #0]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 fd88 	bl	800e15a <USBD_CtlError>
          break;
 800d64a:	bf00      	nop
      }
      break;
 800d64c:	e004      	b.n	800d658 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fd82 	bl	800e15a <USBD_CtlError>
      break;
 800d656:	bf00      	nop
  }

  return ret;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop

0800d664 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d67a:	2b40      	cmp	r3, #64	; 0x40
 800d67c:	d005      	beq.n	800d68a <USBD_StdItfReq+0x26>
 800d67e:	2b40      	cmp	r3, #64	; 0x40
 800d680:	d852      	bhi.n	800d728 <USBD_StdItfReq+0xc4>
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <USBD_StdItfReq+0x26>
 800d686:	2b20      	cmp	r3, #32
 800d688:	d14e      	bne.n	800d728 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d690:	b2db      	uxtb	r3, r3
 800d692:	3b01      	subs	r3, #1
 800d694:	2b02      	cmp	r3, #2
 800d696:	d840      	bhi.n	800d71a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	889b      	ldrh	r3, [r3, #4]
 800d69c:	b2db      	uxtb	r3, r3
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d836      	bhi.n	800d710 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	889b      	ldrh	r3, [r3, #4]
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff fed9 	bl	800d462 <USBD_CoreFindIF>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6b4:	7bbb      	ldrb	r3, [r7, #14]
 800d6b6:	2bff      	cmp	r3, #255	; 0xff
 800d6b8:	d01d      	beq.n	800d6f6 <USBD_StdItfReq+0x92>
 800d6ba:	7bbb      	ldrb	r3, [r7, #14]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d11a      	bne.n	800d6f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d6c0:	7bba      	ldrb	r2, [r7, #14]
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	32ae      	adds	r2, #174	; 0xae
 800d6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ca:	689b      	ldr	r3, [r3, #8]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00f      	beq.n	800d6f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d6d0:	7bba      	ldrb	r2, [r7, #14]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d6d8:	7bba      	ldrb	r2, [r7, #14]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	32ae      	adds	r2, #174	; 0xae
 800d6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	4798      	blx	r3
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6ee:	e004      	b.n	800d6fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6f4:	e001      	b.n	800d6fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	88db      	ldrh	r3, [r3, #6]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d110      	bne.n	800d724 <USBD_StdItfReq+0xc0>
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10d      	bne.n	800d724 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 fdf1 	bl	800e2f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d70e:	e009      	b.n	800d724 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d710:	6839      	ldr	r1, [r7, #0]
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 fd21 	bl	800e15a <USBD_CtlError>
          break;
 800d718:	e004      	b.n	800d724 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 fd1c 	bl	800e15a <USBD_CtlError>
          break;
 800d722:	e000      	b.n	800d726 <USBD_StdItfReq+0xc2>
          break;
 800d724:	bf00      	nop
      }
      break;
 800d726:	e004      	b.n	800d732 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d728:	6839      	ldr	r1, [r7, #0]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 fd15 	bl	800e15a <USBD_CtlError>
      break;
 800d730:	bf00      	nop
  }

  return ret;
 800d732:	7bfb      	ldrb	r3, [r7, #15]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d746:	2300      	movs	r3, #0
 800d748:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	889b      	ldrh	r3, [r3, #4]
 800d74e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d758:	2b40      	cmp	r3, #64	; 0x40
 800d75a:	d007      	beq.n	800d76c <USBD_StdEPReq+0x30>
 800d75c:	2b40      	cmp	r3, #64	; 0x40
 800d75e:	f200 817f 	bhi.w	800da60 <USBD_StdEPReq+0x324>
 800d762:	2b00      	cmp	r3, #0
 800d764:	d02a      	beq.n	800d7bc <USBD_StdEPReq+0x80>
 800d766:	2b20      	cmp	r3, #32
 800d768:	f040 817a 	bne.w	800da60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff fe83 	bl	800d47c <USBD_CoreFindEP>
 800d776:	4603      	mov	r3, r0
 800d778:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d77a:	7b7b      	ldrb	r3, [r7, #13]
 800d77c:	2bff      	cmp	r3, #255	; 0xff
 800d77e:	f000 8174 	beq.w	800da6a <USBD_StdEPReq+0x32e>
 800d782:	7b7b      	ldrb	r3, [r7, #13]
 800d784:	2b00      	cmp	r3, #0
 800d786:	f040 8170 	bne.w	800da6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d78a:	7b7a      	ldrb	r2, [r7, #13]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d792:	7b7a      	ldrb	r2, [r7, #13]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	32ae      	adds	r2, #174	; 0xae
 800d798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 8163 	beq.w	800da6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d7a4:	7b7a      	ldrb	r2, [r7, #13]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	32ae      	adds	r2, #174	; 0xae
 800d7aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	6839      	ldr	r1, [r7, #0]
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	4798      	blx	r3
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d7ba:	e156      	b.n	800da6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	785b      	ldrb	r3, [r3, #1]
 800d7c0:	2b03      	cmp	r3, #3
 800d7c2:	d008      	beq.n	800d7d6 <USBD_StdEPReq+0x9a>
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	f300 8145 	bgt.w	800da54 <USBD_StdEPReq+0x318>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 809b 	beq.w	800d906 <USBD_StdEPReq+0x1ca>
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d03c      	beq.n	800d84e <USBD_StdEPReq+0x112>
 800d7d4:	e13e      	b.n	800da54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d002      	beq.n	800d7e8 <USBD_StdEPReq+0xac>
 800d7e2:	2b03      	cmp	r3, #3
 800d7e4:	d016      	beq.n	800d814 <USBD_StdEPReq+0xd8>
 800d7e6:	e02c      	b.n	800d842 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7e8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00d      	beq.n	800d80a <USBD_StdEPReq+0xce>
 800d7ee:	7bbb      	ldrb	r3, [r7, #14]
 800d7f0:	2b80      	cmp	r3, #128	; 0x80
 800d7f2:	d00a      	beq.n	800d80a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7f4:	7bbb      	ldrb	r3, [r7, #14]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f005 ffaf 	bl	801375c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7fe:	2180      	movs	r1, #128	; 0x80
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f005 ffab 	bl	801375c <USBD_LL_StallEP>
 800d806:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d808:	e020      	b.n	800d84c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fca4 	bl	800e15a <USBD_CtlError>
              break;
 800d812:	e01b      	b.n	800d84c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	885b      	ldrh	r3, [r3, #2]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d10e      	bne.n	800d83a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00b      	beq.n	800d83a <USBD_StdEPReq+0xfe>
 800d822:	7bbb      	ldrb	r3, [r7, #14]
 800d824:	2b80      	cmp	r3, #128	; 0x80
 800d826:	d008      	beq.n	800d83a <USBD_StdEPReq+0xfe>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	88db      	ldrh	r3, [r3, #6]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d104      	bne.n	800d83a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d830:	7bbb      	ldrb	r3, [r7, #14]
 800d832:	4619      	mov	r1, r3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f005 ff91 	bl	801375c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fd58 	bl	800e2f0 <USBD_CtlSendStatus>

              break;
 800d840:	e004      	b.n	800d84c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fc88 	bl	800e15a <USBD_CtlError>
              break;
 800d84a:	bf00      	nop
          }
          break;
 800d84c:	e107      	b.n	800da5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d854:	b2db      	uxtb	r3, r3
 800d856:	2b02      	cmp	r3, #2
 800d858:	d002      	beq.n	800d860 <USBD_StdEPReq+0x124>
 800d85a:	2b03      	cmp	r3, #3
 800d85c:	d016      	beq.n	800d88c <USBD_StdEPReq+0x150>
 800d85e:	e04b      	b.n	800d8f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d860:	7bbb      	ldrb	r3, [r7, #14]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00d      	beq.n	800d882 <USBD_StdEPReq+0x146>
 800d866:	7bbb      	ldrb	r3, [r7, #14]
 800d868:	2b80      	cmp	r3, #128	; 0x80
 800d86a:	d00a      	beq.n	800d882 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d86c:	7bbb      	ldrb	r3, [r7, #14]
 800d86e:	4619      	mov	r1, r3
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f005 ff73 	bl	801375c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d876:	2180      	movs	r1, #128	; 0x80
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f005 ff6f 	bl	801375c <USBD_LL_StallEP>
 800d87e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d880:	e040      	b.n	800d904 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fc68 	bl	800e15a <USBD_CtlError>
              break;
 800d88a:	e03b      	b.n	800d904 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	885b      	ldrh	r3, [r3, #2]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d136      	bne.n	800d902 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d894:	7bbb      	ldrb	r3, [r7, #14]
 800d896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d89e:	7bbb      	ldrb	r3, [r7, #14]
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f005 ff79 	bl	801379a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fd21 	bl	800e2f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d8ae:	7bbb      	ldrb	r3, [r7, #14]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fde2 	bl	800d47c <USBD_CoreFindEP>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8bc:	7b7b      	ldrb	r3, [r7, #13]
 800d8be:	2bff      	cmp	r3, #255	; 0xff
 800d8c0:	d01f      	beq.n	800d902 <USBD_StdEPReq+0x1c6>
 800d8c2:	7b7b      	ldrb	r3, [r7, #13]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d11c      	bne.n	800d902 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d8c8:	7b7a      	ldrb	r2, [r7, #13]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d8d0:	7b7a      	ldrb	r2, [r7, #13]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	32ae      	adds	r2, #174	; 0xae
 800d8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8da:	689b      	ldr	r3, [r3, #8]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d010      	beq.n	800d902 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d8e0:	7b7a      	ldrb	r2, [r7, #13]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	32ae      	adds	r2, #174	; 0xae
 800d8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	6839      	ldr	r1, [r7, #0]
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	4798      	blx	r3
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d8f6:	e004      	b.n	800d902 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fc2d 	bl	800e15a <USBD_CtlError>
              break;
 800d900:	e000      	b.n	800d904 <USBD_StdEPReq+0x1c8>
              break;
 800d902:	bf00      	nop
          }
          break;
 800d904:	e0ab      	b.n	800da5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d002      	beq.n	800d918 <USBD_StdEPReq+0x1dc>
 800d912:	2b03      	cmp	r3, #3
 800d914:	d032      	beq.n	800d97c <USBD_StdEPReq+0x240>
 800d916:	e097      	b.n	800da48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d918:	7bbb      	ldrb	r3, [r7, #14]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d007      	beq.n	800d92e <USBD_StdEPReq+0x1f2>
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
 800d920:	2b80      	cmp	r3, #128	; 0x80
 800d922:	d004      	beq.n	800d92e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 fc17 	bl	800e15a <USBD_CtlError>
                break;
 800d92c:	e091      	b.n	800da52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d92e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d932:	2b00      	cmp	r3, #0
 800d934:	da0b      	bge.n	800d94e <USBD_StdEPReq+0x212>
 800d936:	7bbb      	ldrb	r3, [r7, #14]
 800d938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d93c:	4613      	mov	r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	4413      	add	r3, r2
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	3310      	adds	r3, #16
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	4413      	add	r3, r2
 800d94a:	3304      	adds	r3, #4
 800d94c:	e00b      	b.n	800d966 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d94e:	7bbb      	ldrb	r3, [r7, #14]
 800d950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d954:	4613      	mov	r3, r2
 800d956:	009b      	lsls	r3, r3, #2
 800d958:	4413      	add	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	4413      	add	r3, r2
 800d964:	3304      	adds	r3, #4
 800d966:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	2200      	movs	r2, #0
 800d96c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	2202      	movs	r2, #2
 800d972:	4619      	mov	r1, r3
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fc61 	bl	800e23c <USBD_CtlSendData>
              break;
 800d97a:	e06a      	b.n	800da52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d97c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d980:	2b00      	cmp	r3, #0
 800d982:	da11      	bge.n	800d9a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d984:	7bbb      	ldrb	r3, [r7, #14]
 800d986:	f003 020f 	and.w	r2, r3, #15
 800d98a:	6879      	ldr	r1, [r7, #4]
 800d98c:	4613      	mov	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	4413      	add	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	440b      	add	r3, r1
 800d996:	3324      	adds	r3, #36	; 0x24
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d117      	bne.n	800d9ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d99e:	6839      	ldr	r1, [r7, #0]
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fbda 	bl	800e15a <USBD_CtlError>
                  break;
 800d9a6:	e054      	b.n	800da52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9a8:	7bbb      	ldrb	r3, [r7, #14]
 800d9aa:	f003 020f 	and.w	r2, r3, #15
 800d9ae:	6879      	ldr	r1, [r7, #4]
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	440b      	add	r3, r1
 800d9ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d104      	bne.n	800d9ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fbc7 	bl	800e15a <USBD_CtlError>
                  break;
 800d9cc:	e041      	b.n	800da52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da0b      	bge.n	800d9ee <USBD_StdEPReq+0x2b2>
 800d9d6:	7bbb      	ldrb	r3, [r7, #14]
 800d9d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9dc:	4613      	mov	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	4413      	add	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	3310      	adds	r3, #16
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	e00b      	b.n	800da06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d9ee:	7bbb      	ldrb	r3, [r7, #14]
 800d9f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	4413      	add	r3, r2
 800da04:	3304      	adds	r3, #4
 800da06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da08:	7bbb      	ldrb	r3, [r7, #14]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d002      	beq.n	800da14 <USBD_StdEPReq+0x2d8>
 800da0e:	7bbb      	ldrb	r3, [r7, #14]
 800da10:	2b80      	cmp	r3, #128	; 0x80
 800da12:	d103      	bne.n	800da1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	2200      	movs	r2, #0
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	e00e      	b.n	800da3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f005 fed9 	bl	80137d8 <USBD_LL_IsStallEP>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d003      	beq.n	800da34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2201      	movs	r2, #1
 800da30:	601a      	str	r2, [r3, #0]
 800da32:	e002      	b.n	800da3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	2200      	movs	r2, #0
 800da38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2202      	movs	r2, #2
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 fbfb 	bl	800e23c <USBD_CtlSendData>
              break;
 800da46:	e004      	b.n	800da52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800da48:	6839      	ldr	r1, [r7, #0]
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fb85 	bl	800e15a <USBD_CtlError>
              break;
 800da50:	bf00      	nop
          }
          break;
 800da52:	e004      	b.n	800da5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800da54:	6839      	ldr	r1, [r7, #0]
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f000 fb7f 	bl	800e15a <USBD_CtlError>
          break;
 800da5c:	bf00      	nop
      }
      break;
 800da5e:	e005      	b.n	800da6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800da60:	6839      	ldr	r1, [r7, #0]
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fb79 	bl	800e15a <USBD_CtlError>
      break;
 800da68:	e000      	b.n	800da6c <USBD_StdEPReq+0x330>
      break;
 800da6a:	bf00      	nop
  }

  return ret;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
	...

0800da78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da82:	2300      	movs	r3, #0
 800da84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800da86:	2300      	movs	r3, #0
 800da88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800da8a:	2300      	movs	r3, #0
 800da8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	885b      	ldrh	r3, [r3, #2]
 800da92:	0a1b      	lsrs	r3, r3, #8
 800da94:	b29b      	uxth	r3, r3
 800da96:	3b01      	subs	r3, #1
 800da98:	2b0e      	cmp	r3, #14
 800da9a:	f200 8152 	bhi.w	800dd42 <USBD_GetDescriptor+0x2ca>
 800da9e:	a201      	add	r2, pc, #4	; (adr r2, 800daa4 <USBD_GetDescriptor+0x2c>)
 800daa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa4:	0800db15 	.word	0x0800db15
 800daa8:	0800db2d 	.word	0x0800db2d
 800daac:	0800db6d 	.word	0x0800db6d
 800dab0:	0800dd43 	.word	0x0800dd43
 800dab4:	0800dd43 	.word	0x0800dd43
 800dab8:	0800dce3 	.word	0x0800dce3
 800dabc:	0800dd0f 	.word	0x0800dd0f
 800dac0:	0800dd43 	.word	0x0800dd43
 800dac4:	0800dd43 	.word	0x0800dd43
 800dac8:	0800dd43 	.word	0x0800dd43
 800dacc:	0800dd43 	.word	0x0800dd43
 800dad0:	0800dd43 	.word	0x0800dd43
 800dad4:	0800dd43 	.word	0x0800dd43
 800dad8:	0800dd43 	.word	0x0800dd43
 800dadc:	0800dae1 	.word	0x0800dae1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dae6:	69db      	ldr	r3, [r3, #28]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00b      	beq.n	800db04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daf2:	69db      	ldr	r3, [r3, #28]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	7c12      	ldrb	r2, [r2, #16]
 800daf8:	f107 0108 	add.w	r1, r7, #8
 800dafc:	4610      	mov	r0, r2
 800dafe:	4798      	blx	r3
 800db00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db02:	e126      	b.n	800dd52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db04:	6839      	ldr	r1, [r7, #0]
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f000 fb27 	bl	800e15a <USBD_CtlError>
        err++;
 800db0c:	7afb      	ldrb	r3, [r7, #11]
 800db0e:	3301      	adds	r3, #1
 800db10:	72fb      	strb	r3, [r7, #11]
      break;
 800db12:	e11e      	b.n	800dd52 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	7c12      	ldrb	r2, [r2, #16]
 800db20:	f107 0108 	add.w	r1, r7, #8
 800db24:	4610      	mov	r0, r2
 800db26:	4798      	blx	r3
 800db28:	60f8      	str	r0, [r7, #12]
      break;
 800db2a:	e112      	b.n	800dd52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7c1b      	ldrb	r3, [r3, #16]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10d      	bne.n	800db50 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3c:	f107 0208 	add.w	r2, r7, #8
 800db40:	4610      	mov	r0, r2
 800db42:	4798      	blx	r3
 800db44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	3301      	adds	r3, #1
 800db4a:	2202      	movs	r2, #2
 800db4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db4e:	e100      	b.n	800dd52 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db58:	f107 0208 	add.w	r2, r7, #8
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
 800db60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3301      	adds	r3, #1
 800db66:	2202      	movs	r2, #2
 800db68:	701a      	strb	r2, [r3, #0]
      break;
 800db6a:	e0f2      	b.n	800dd52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	885b      	ldrh	r3, [r3, #2]
 800db70:	b2db      	uxtb	r3, r3
 800db72:	2b05      	cmp	r3, #5
 800db74:	f200 80ac 	bhi.w	800dcd0 <USBD_GetDescriptor+0x258>
 800db78:	a201      	add	r2, pc, #4	; (adr r2, 800db80 <USBD_GetDescriptor+0x108>)
 800db7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7e:	bf00      	nop
 800db80:	0800db99 	.word	0x0800db99
 800db84:	0800dbcd 	.word	0x0800dbcd
 800db88:	0800dc01 	.word	0x0800dc01
 800db8c:	0800dc35 	.word	0x0800dc35
 800db90:	0800dc69 	.word	0x0800dc69
 800db94:	0800dc9d 	.word	0x0800dc9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00b      	beq.n	800dbbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbaa:	685b      	ldr	r3, [r3, #4]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	7c12      	ldrb	r2, [r2, #16]
 800dbb0:	f107 0108 	add.w	r1, r7, #8
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	4798      	blx	r3
 800dbb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbba:	e091      	b.n	800dce0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 facb 	bl	800e15a <USBD_CtlError>
            err++;
 800dbc4:	7afb      	ldrb	r3, [r7, #11]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbca:	e089      	b.n	800dce0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00b      	beq.n	800dbf0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	7c12      	ldrb	r2, [r2, #16]
 800dbe4:	f107 0108 	add.w	r1, r7, #8
 800dbe8:	4610      	mov	r0, r2
 800dbea:	4798      	blx	r3
 800dbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbee:	e077      	b.n	800dce0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 fab1 	bl	800e15a <USBD_CtlError>
            err++;
 800dbf8:	7afb      	ldrb	r3, [r7, #11]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800dbfe:	e06f      	b.n	800dce0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc06:	68db      	ldr	r3, [r3, #12]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	7c12      	ldrb	r2, [r2, #16]
 800dc18:	f107 0108 	add.w	r1, r7, #8
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4798      	blx	r3
 800dc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc22:	e05d      	b.n	800dce0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 fa97 	bl	800e15a <USBD_CtlError>
            err++;
 800dc2c:	7afb      	ldrb	r3, [r7, #11]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	72fb      	strb	r3, [r7, #11]
          break;
 800dc32:	e055      	b.n	800dce0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00b      	beq.n	800dc58 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	7c12      	ldrb	r2, [r2, #16]
 800dc4c:	f107 0108 	add.w	r1, r7, #8
 800dc50:	4610      	mov	r0, r2
 800dc52:	4798      	blx	r3
 800dc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc56:	e043      	b.n	800dce0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fa7d 	bl	800e15a <USBD_CtlError>
            err++;
 800dc60:	7afb      	ldrb	r3, [r7, #11]
 800dc62:	3301      	adds	r3, #1
 800dc64:	72fb      	strb	r3, [r7, #11]
          break;
 800dc66:	e03b      	b.n	800dce0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00b      	beq.n	800dc8c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc7a:	695b      	ldr	r3, [r3, #20]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	7c12      	ldrb	r2, [r2, #16]
 800dc80:	f107 0108 	add.w	r1, r7, #8
 800dc84:	4610      	mov	r0, r2
 800dc86:	4798      	blx	r3
 800dc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc8a:	e029      	b.n	800dce0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fa63 	bl	800e15a <USBD_CtlError>
            err++;
 800dc94:	7afb      	ldrb	r3, [r7, #11]
 800dc96:	3301      	adds	r3, #1
 800dc98:	72fb      	strb	r3, [r7, #11]
          break;
 800dc9a:	e021      	b.n	800dce0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00b      	beq.n	800dcc0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	7c12      	ldrb	r2, [r2, #16]
 800dcb4:	f107 0108 	add.w	r1, r7, #8
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
 800dcbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcbe:	e00f      	b.n	800dce0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fa49 	bl	800e15a <USBD_CtlError>
            err++;
 800dcc8:	7afb      	ldrb	r3, [r7, #11]
 800dcca:	3301      	adds	r3, #1
 800dccc:	72fb      	strb	r3, [r7, #11]
          break;
 800dcce:	e007      	b.n	800dce0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dcd0:	6839      	ldr	r1, [r7, #0]
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fa41 	bl	800e15a <USBD_CtlError>
          err++;
 800dcd8:	7afb      	ldrb	r3, [r7, #11]
 800dcda:	3301      	adds	r3, #1
 800dcdc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dcde:	bf00      	nop
      }
      break;
 800dce0:	e037      	b.n	800dd52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	7c1b      	ldrb	r3, [r3, #16]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d109      	bne.n	800dcfe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf2:	f107 0208 	add.w	r2, r7, #8
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	4798      	blx	r3
 800dcfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dcfc:	e029      	b.n	800dd52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fa2a 	bl	800e15a <USBD_CtlError>
        err++;
 800dd06:	7afb      	ldrb	r3, [r7, #11]
 800dd08:	3301      	adds	r3, #1
 800dd0a:	72fb      	strb	r3, [r7, #11]
      break;
 800dd0c:	e021      	b.n	800dd52 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	7c1b      	ldrb	r3, [r3, #16]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d10d      	bne.n	800dd32 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd1e:	f107 0208 	add.w	r2, r7, #8
 800dd22:	4610      	mov	r0, r2
 800dd24:	4798      	blx	r3
 800dd26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	2207      	movs	r2, #7
 800dd2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd30:	e00f      	b.n	800dd52 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fa10 	bl	800e15a <USBD_CtlError>
        err++;
 800dd3a:	7afb      	ldrb	r3, [r7, #11]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd40:	e007      	b.n	800dd52 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f000 fa08 	bl	800e15a <USBD_CtlError>
      err++;
 800dd4a:	7afb      	ldrb	r3, [r7, #11]
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd50:	bf00      	nop
  }

  if (err != 0U)
 800dd52:	7afb      	ldrb	r3, [r7, #11]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d11e      	bne.n	800dd96 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	88db      	ldrh	r3, [r3, #6]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d016      	beq.n	800dd8e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dd60:	893b      	ldrh	r3, [r7, #8]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00e      	beq.n	800dd84 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	88da      	ldrh	r2, [r3, #6]
 800dd6a:	893b      	ldrh	r3, [r7, #8]
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	bf28      	it	cs
 800dd70:	4613      	movcs	r3, r2
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd76:	893b      	ldrh	r3, [r7, #8]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	68f9      	ldr	r1, [r7, #12]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fa5d 	bl	800e23c <USBD_CtlSendData>
 800dd82:	e009      	b.n	800dd98 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f9e7 	bl	800e15a <USBD_CtlError>
 800dd8c:	e004      	b.n	800dd98 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 faae 	bl	800e2f0 <USBD_CtlSendStatus>
 800dd94:	e000      	b.n	800dd98 <USBD_GetDescriptor+0x320>
    return;
 800dd96:	bf00      	nop
  }
}
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop

0800dda0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	889b      	ldrh	r3, [r3, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d131      	bne.n	800de16 <USBD_SetAddress+0x76>
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	88db      	ldrh	r3, [r3, #6]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d12d      	bne.n	800de16 <USBD_SetAddress+0x76>
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	885b      	ldrh	r3, [r3, #2]
 800ddbe:	2b7f      	cmp	r3, #127	; 0x7f
 800ddc0:	d829      	bhi.n	800de16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	885b      	ldrh	r3, [r3, #2]
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	2b03      	cmp	r3, #3
 800ddd8:	d104      	bne.n	800dde4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ddda:	6839      	ldr	r1, [r7, #0]
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f000 f9bc 	bl	800e15a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dde2:	e01d      	b.n	800de20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	7bfa      	ldrb	r2, [r7, #15]
 800dde8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ddec:	7bfb      	ldrb	r3, [r7, #15]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f005 fd1d 	bl	8013830 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fa7a 	bl	800e2f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d004      	beq.n	800de0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2202      	movs	r2, #2
 800de06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0a:	e009      	b.n	800de20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de14:	e004      	b.n	800de20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de16:	6839      	ldr	r1, [r7, #0]
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 f99e 	bl	800e15a <USBD_CtlError>
  }
}
 800de1e:	bf00      	nop
 800de20:	bf00      	nop
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	885b      	ldrh	r3, [r3, #2]
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	4b4e      	ldr	r3, [pc, #312]	; (800df78 <USBD_SetConfig+0x150>)
 800de3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de40:	4b4d      	ldr	r3, [pc, #308]	; (800df78 <USBD_SetConfig+0x150>)
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d905      	bls.n	800de54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 f985 	bl	800e15a <USBD_CtlError>
    return USBD_FAIL;
 800de50:	2303      	movs	r3, #3
 800de52:	e08c      	b.n	800df6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d002      	beq.n	800de66 <USBD_SetConfig+0x3e>
 800de60:	2b03      	cmp	r3, #3
 800de62:	d029      	beq.n	800deb8 <USBD_SetConfig+0x90>
 800de64:	e075      	b.n	800df52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800de66:	4b44      	ldr	r3, [pc, #272]	; (800df78 <USBD_SetConfig+0x150>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d020      	beq.n	800deb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800de6e:	4b42      	ldr	r3, [pc, #264]	; (800df78 <USBD_SetConfig+0x150>)
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de78:	4b3f      	ldr	r3, [pc, #252]	; (800df78 <USBD_SetConfig+0x150>)
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	4619      	mov	r1, r3
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f7fe ffbd 	bl	800cdfe <USBD_SetClassConfig>
 800de84:	4603      	mov	r3, r0
 800de86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de88:	7bfb      	ldrb	r3, [r7, #15]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d008      	beq.n	800dea0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f962 	bl	800e15a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2202      	movs	r2, #2
 800de9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de9e:	e065      	b.n	800df6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 fa25 	bl	800e2f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2203      	movs	r2, #3
 800deaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800deae:	e05d      	b.n	800df6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fa1d 	bl	800e2f0 <USBD_CtlSendStatus>
      break;
 800deb6:	e059      	b.n	800df6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800deb8:	4b2f      	ldr	r3, [pc, #188]	; (800df78 <USBD_SetConfig+0x150>)
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d112      	bne.n	800dee6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2202      	movs	r2, #2
 800dec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dec8:	4b2b      	ldr	r3, [pc, #172]	; (800df78 <USBD_SetConfig+0x150>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	461a      	mov	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ded2:	4b29      	ldr	r3, [pc, #164]	; (800df78 <USBD_SetConfig+0x150>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	4619      	mov	r1, r3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f7fe ffac 	bl	800ce36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fa06 	bl	800e2f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dee4:	e042      	b.n	800df6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dee6:	4b24      	ldr	r3, [pc, #144]	; (800df78 <USBD_SetConfig+0x150>)
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	461a      	mov	r2, r3
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	685b      	ldr	r3, [r3, #4]
 800def0:	429a      	cmp	r2, r3
 800def2:	d02a      	beq.n	800df4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	b2db      	uxtb	r3, r3
 800defa:	4619      	mov	r1, r3
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7fe ff9a 	bl	800ce36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800df02:	4b1d      	ldr	r3, [pc, #116]	; (800df78 <USBD_SetConfig+0x150>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	461a      	mov	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df0c:	4b1a      	ldr	r3, [pc, #104]	; (800df78 <USBD_SetConfig+0x150>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	4619      	mov	r1, r3
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f7fe ff73 	bl	800cdfe <USBD_SetClassConfig>
 800df18:	4603      	mov	r3, r0
 800df1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df1c:	7bfb      	ldrb	r3, [r7, #15]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00f      	beq.n	800df42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f918 	bl	800e15a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7fe ff7f 	bl	800ce36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df40:	e014      	b.n	800df6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 f9d4 	bl	800e2f0 <USBD_CtlSendStatus>
      break;
 800df48:	e010      	b.n	800df6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f9d0 	bl	800e2f0 <USBD_CtlSendStatus>
      break;
 800df50:	e00c      	b.n	800df6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800df52:	6839      	ldr	r1, [r7, #0]
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f000 f900 	bl	800e15a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df5a:	4b07      	ldr	r3, [pc, #28]	; (800df78 <USBD_SetConfig+0x150>)
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	4619      	mov	r1, r3
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7fe ff68 	bl	800ce36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df66:	2303      	movs	r3, #3
 800df68:	73fb      	strb	r3, [r7, #15]
      break;
 800df6a:	bf00      	nop
  }

  return ret;
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	200008b0 	.word	0x200008b0

0800df7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	88db      	ldrh	r3, [r3, #6]
 800df8a:	2b01      	cmp	r3, #1
 800df8c:	d004      	beq.n	800df98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800df8e:	6839      	ldr	r1, [r7, #0]
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 f8e2 	bl	800e15a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df96:	e023      	b.n	800dfe0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b02      	cmp	r3, #2
 800dfa2:	dc02      	bgt.n	800dfaa <USBD_GetConfig+0x2e>
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dc03      	bgt.n	800dfb0 <USBD_GetConfig+0x34>
 800dfa8:	e015      	b.n	800dfd6 <USBD_GetConfig+0x5a>
 800dfaa:	2b03      	cmp	r3, #3
 800dfac:	d00b      	beq.n	800dfc6 <USBD_GetConfig+0x4a>
 800dfae:	e012      	b.n	800dfd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	3308      	adds	r3, #8
 800dfba:	2201      	movs	r2, #1
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f000 f93c 	bl	800e23c <USBD_CtlSendData>
        break;
 800dfc4:	e00c      	b.n	800dfe0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	3304      	adds	r3, #4
 800dfca:	2201      	movs	r2, #1
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f934 	bl	800e23c <USBD_CtlSendData>
        break;
 800dfd4:	e004      	b.n	800dfe0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dfd6:	6839      	ldr	r1, [r7, #0]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f000 f8be 	bl	800e15a <USBD_CtlError>
        break;
 800dfde:	bf00      	nop
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	3b01      	subs	r3, #1
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d81e      	bhi.n	800e03e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	88db      	ldrh	r3, [r3, #6]
 800e004:	2b02      	cmp	r3, #2
 800e006:	d004      	beq.n	800e012 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 f8a5 	bl	800e15a <USBD_CtlError>
        break;
 800e010:	e01a      	b.n	800e048 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2201      	movs	r2, #1
 800e016:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d005      	beq.n	800e02e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	f043 0202 	orr.w	r2, r3, #2
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	330c      	adds	r3, #12
 800e032:	2202      	movs	r2, #2
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f900 	bl	800e23c <USBD_CtlSendData>
      break;
 800e03c:	e004      	b.n	800e048 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e03e:	6839      	ldr	r1, [r7, #0]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 f88a 	bl	800e15a <USBD_CtlError>
      break;
 800e046:	bf00      	nop
  }
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	885b      	ldrh	r3, [r3, #2]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d107      	bne.n	800e072 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f940 	bl	800e2f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e070:	e013      	b.n	800e09a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	885b      	ldrh	r3, [r3, #2]
 800e076:	2b02      	cmp	r3, #2
 800e078:	d10b      	bne.n	800e092 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	889b      	ldrh	r3, [r3, #4]
 800e07e:	0a1b      	lsrs	r3, r3, #8
 800e080:	b29b      	uxth	r3, r3
 800e082:	b2da      	uxtb	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f930 	bl	800e2f0 <USBD_CtlSendStatus>
}
 800e090:	e003      	b.n	800e09a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e092:	6839      	ldr	r1, [r7, #0]
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f000 f860 	bl	800e15a <USBD_CtlError>
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d80b      	bhi.n	800e0d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	885b      	ldrh	r3, [r3, #2]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d10c      	bne.n	800e0dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f910 	bl	800e2f0 <USBD_CtlSendStatus>
      }
      break;
 800e0d0:	e004      	b.n	800e0dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f840 	bl	800e15a <USBD_CtlError>
      break;
 800e0da:	e000      	b.n	800e0de <USBD_ClrFeature+0x3c>
      break;
 800e0dc:	bf00      	nop
  }
}
 800e0de:	bf00      	nop
 800e0e0:	3708      	adds	r7, #8
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}

0800e0e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0e6:	b580      	push	{r7, lr}
 800e0e8:	b084      	sub	sp, #16
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
 800e0ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	781a      	ldrb	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3301      	adds	r3, #1
 800e100:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	781a      	ldrb	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	3301      	adds	r3, #1
 800e10e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e110:	68f8      	ldr	r0, [r7, #12]
 800e112:	f7ff fa17 	bl	800d544 <SWAPBYTE>
 800e116:	4603      	mov	r3, r0
 800e118:	461a      	mov	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	3301      	adds	r3, #1
 800e122:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	3301      	adds	r3, #1
 800e128:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f7ff fa0a 	bl	800d544 <SWAPBYTE>
 800e130:	4603      	mov	r3, r0
 800e132:	461a      	mov	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	3301      	adds	r3, #1
 800e13c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3301      	adds	r3, #1
 800e142:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f7ff f9fd 	bl	800d544 <SWAPBYTE>
 800e14a:	4603      	mov	r3, r0
 800e14c:	461a      	mov	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	80da      	strh	r2, [r3, #6]
}
 800e152:	bf00      	nop
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b082      	sub	sp, #8
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
 800e162:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e164:	2180      	movs	r1, #128	; 0x80
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f005 faf8 	bl	801375c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e16c:	2100      	movs	r1, #0
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f005 faf4 	bl	801375c <USBD_LL_StallEP>
}
 800e174:	bf00      	nop
 800e176:	3708      	adds	r7, #8
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e188:	2300      	movs	r3, #0
 800e18a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d036      	beq.n	800e200 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e196:	6938      	ldr	r0, [r7, #16]
 800e198:	f000 f836 	bl	800e208 <USBD_GetLen>
 800e19c:	4603      	mov	r3, r0
 800e19e:	3301      	adds	r3, #1
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e1aa:	7dfb      	ldrb	r3, [r7, #23]
 800e1ac:	68ba      	ldr	r2, [r7, #8]
 800e1ae:	4413      	add	r3, r2
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	7812      	ldrb	r2, [r2, #0]
 800e1b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e1bc:	7dfb      	ldrb	r3, [r7, #23]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	2203      	movs	r2, #3
 800e1c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1c6:	7dfb      	ldrb	r3, [r7, #23]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e1cc:	e013      	b.n	800e1f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e1ce:	7dfb      	ldrb	r3, [r7, #23]
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	4413      	add	r3, r2
 800e1d4:	693a      	ldr	r2, [r7, #16]
 800e1d6:	7812      	ldrb	r2, [r2, #0]
 800e1d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	613b      	str	r3, [r7, #16]
    idx++;
 800e1e0:	7dfb      	ldrb	r3, [r7, #23]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e1e6:	7dfb      	ldrb	r3, [r7, #23]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800e1f0:	7dfb      	ldrb	r3, [r7, #23]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d1e7      	bne.n	800e1ce <USBD_GetString+0x52>
 800e1fe:	e000      	b.n	800e202 <USBD_GetString+0x86>
    return;
 800e200:	bf00      	nop
  }
}
 800e202:	3718      	adds	r7, #24
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e208:	b480      	push	{r7}
 800e20a:	b085      	sub	sp, #20
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e210:	2300      	movs	r3, #0
 800e212:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e218:	e005      	b.n	800e226 <USBD_GetLen+0x1e>
  {
    len++;
 800e21a:	7bfb      	ldrb	r3, [r7, #15]
 800e21c:	3301      	adds	r3, #1
 800e21e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	3301      	adds	r3, #1
 800e224:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1f5      	bne.n	800e21a <USBD_GetLen+0x12>
  }

  return len;
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2202      	movs	r2, #2
 800e24c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68ba      	ldr	r2, [r7, #8]
 800e260:	2100      	movs	r1, #0
 800e262:	68f8      	ldr	r0, [r7, #12]
 800e264:	f005 fb03 	bl	801386e <USBD_LL_Transmit>

  return USBD_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b084      	sub	sp, #16
 800e276:	af00      	add	r7, sp, #0
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	60b9      	str	r1, [r7, #8]
 800e27c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	2100      	movs	r1, #0
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f005 faf2 	bl	801386e <USBD_LL_Transmit>

  return USBD_OK;
 800e28a:	2300      	movs	r3, #0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2203      	movs	r2, #3
 800e2a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	2100      	movs	r1, #0
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f005 faf6 	bl	80138b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	60f8      	str	r0, [r7, #12]
 800e2d6:	60b9      	str	r1, [r7, #8]
 800e2d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	2100      	movs	r1, #0
 800e2e0:	68f8      	ldr	r0, [r7, #12]
 800e2e2:	f005 fae5 	bl	80138b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2204      	movs	r2, #4
 800e2fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e300:	2300      	movs	r3, #0
 800e302:	2200      	movs	r2, #0
 800e304:	2100      	movs	r1, #0
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f005 fab1 	bl	801386e <USBD_LL_Transmit>

  return USBD_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}

0800e316 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b082      	sub	sp, #8
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2205      	movs	r2, #5
 800e322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e326:	2300      	movs	r3, #0
 800e328:	2200      	movs	r2, #0
 800e32a:	2100      	movs	r1, #0
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f005 fabf 	bl	80138b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	4603      	mov	r3, r0
 800e344:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e346:	79fb      	ldrb	r3, [r7, #7]
 800e348:	4a08      	ldr	r2, [pc, #32]	; (800e36c <disk_status+0x30>)
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	4413      	add	r3, r2
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	79fa      	ldrb	r2, [r7, #7]
 800e354:	4905      	ldr	r1, [pc, #20]	; (800e36c <disk_status+0x30>)
 800e356:	440a      	add	r2, r1
 800e358:	7a12      	ldrb	r2, [r2, #8]
 800e35a:	4610      	mov	r0, r2
 800e35c:	4798      	blx	r3
 800e35e:	4603      	mov	r3, r0
 800e360:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e362:	7bfb      	ldrb	r3, [r7, #15]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3710      	adds	r7, #16
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}
 800e36c:	200008dc 	.word	0x200008dc

0800e370 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e37a:	2300      	movs	r3, #0
 800e37c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	4a0d      	ldr	r2, [pc, #52]	; (800e3b8 <disk_initialize+0x48>)
 800e382:	5cd3      	ldrb	r3, [r2, r3]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d111      	bne.n	800e3ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e388:	79fb      	ldrb	r3, [r7, #7]
 800e38a:	4a0b      	ldr	r2, [pc, #44]	; (800e3b8 <disk_initialize+0x48>)
 800e38c:	2101      	movs	r1, #1
 800e38e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e390:	79fb      	ldrb	r3, [r7, #7]
 800e392:	4a09      	ldr	r2, [pc, #36]	; (800e3b8 <disk_initialize+0x48>)
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	79fa      	ldrb	r2, [r7, #7]
 800e39e:	4906      	ldr	r1, [pc, #24]	; (800e3b8 <disk_initialize+0x48>)
 800e3a0:	440a      	add	r2, r1
 800e3a2:	7a12      	ldrb	r2, [r2, #8]
 800e3a4:	4610      	mov	r0, r2
 800e3a6:	4798      	blx	r3
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3710      	adds	r7, #16
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	200008dc 	.word	0x200008dc

0800e3bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e3bc:	b590      	push	{r4, r7, lr}
 800e3be:	b087      	sub	sp, #28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	607a      	str	r2, [r7, #4]
 800e3c6:	603b      	str	r3, [r7, #0]
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e3cc:	7bfb      	ldrb	r3, [r7, #15]
 800e3ce:	4a0a      	ldr	r2, [pc, #40]	; (800e3f8 <disk_read+0x3c>)
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	689c      	ldr	r4, [r3, #8]
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	4a07      	ldr	r2, [pc, #28]	; (800e3f8 <disk_read+0x3c>)
 800e3dc:	4413      	add	r3, r2
 800e3de:	7a18      	ldrb	r0, [r3, #8]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	68b9      	ldr	r1, [r7, #8]
 800e3e6:	47a0      	blx	r4
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	371c      	adds	r7, #28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd90      	pop	{r4, r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	200008dc 	.word	0x200008dc

0800e3fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e3fc:	b590      	push	{r4, r7, lr}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
 800e402:	60b9      	str	r1, [r7, #8]
 800e404:	607a      	str	r2, [r7, #4]
 800e406:	603b      	str	r3, [r7, #0]
 800e408:	4603      	mov	r3, r0
 800e40a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
 800e40e:	4a0a      	ldr	r2, [pc, #40]	; (800e438 <disk_write+0x3c>)
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4413      	add	r3, r2
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	68dc      	ldr	r4, [r3, #12]
 800e418:	7bfb      	ldrb	r3, [r7, #15]
 800e41a:	4a07      	ldr	r2, [pc, #28]	; (800e438 <disk_write+0x3c>)
 800e41c:	4413      	add	r3, r2
 800e41e:	7a18      	ldrb	r0, [r3, #8]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	68b9      	ldr	r1, [r7, #8]
 800e426:	47a0      	blx	r4
 800e428:	4603      	mov	r3, r0
 800e42a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	371c      	adds	r7, #28
 800e432:	46bd      	mov	sp, r7
 800e434:	bd90      	pop	{r4, r7, pc}
 800e436:	bf00      	nop
 800e438:	200008dc 	.word	0x200008dc

0800e43c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e43c:	b480      	push	{r7}
 800e43e:	b085      	sub	sp, #20
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3301      	adds	r3, #1
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e44c:	89fb      	ldrh	r3, [r7, #14]
 800e44e:	021b      	lsls	r3, r3, #8
 800e450:	b21a      	sxth	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	b21b      	sxth	r3, r3
 800e458:	4313      	orrs	r3, r2
 800e45a:	b21b      	sxth	r3, r3
 800e45c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e45e:	89fb      	ldrh	r3, [r7, #14]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3714      	adds	r7, #20
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	3303      	adds	r3, #3
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	021b      	lsls	r3, r3, #8
 800e480:	687a      	ldr	r2, [r7, #4]
 800e482:	3202      	adds	r2, #2
 800e484:	7812      	ldrb	r2, [r2, #0]
 800e486:	4313      	orrs	r3, r2
 800e488:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	021b      	lsls	r3, r3, #8
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	3201      	adds	r2, #1
 800e492:	7812      	ldrb	r2, [r2, #0]
 800e494:	4313      	orrs	r3, r2
 800e496:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	021b      	lsls	r3, r3, #8
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	7812      	ldrb	r2, [r2, #0]
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3714      	adds	r7, #20
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr

0800e4b2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d009      	beq.n	800e4d4 <lock_fs+0x22>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 fc8f 	bl	800ede8 <ff_req_grant>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <lock_fs+0x22>
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e000      	b.n	800e4d6 <lock_fs+0x24>
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3708      	adds	r7, #8
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b082      	sub	sp, #8
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00d      	beq.n	800e50c <unlock_fs+0x2e>
 800e4f0:	78fb      	ldrb	r3, [r7, #3]
 800e4f2:	2b0c      	cmp	r3, #12
 800e4f4:	d00a      	beq.n	800e50c <unlock_fs+0x2e>
 800e4f6:	78fb      	ldrb	r3, [r7, #3]
 800e4f8:	2b0b      	cmp	r3, #11
 800e4fa:	d007      	beq.n	800e50c <unlock_fs+0x2e>
 800e4fc:	78fb      	ldrb	r3, [r7, #3]
 800e4fe:	2b0f      	cmp	r3, #15
 800e500:	d004      	beq.n	800e50c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	4618      	mov	r0, r3
 800e508:	f000 fc83 	bl	800ee12 <ff_rel_grant>
	}
}
 800e50c:	bf00      	nop
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e51c:	2300      	movs	r3, #0
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	e010      	b.n	800e544 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e522:	4a0d      	ldr	r2, [pc, #52]	; (800e558 <clear_lock+0x44>)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	011b      	lsls	r3, r3, #4
 800e528:	4413      	add	r3, r2
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d105      	bne.n	800e53e <clear_lock+0x2a>
 800e532:	4a09      	ldr	r2, [pc, #36]	; (800e558 <clear_lock+0x44>)
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	011b      	lsls	r3, r3, #4
 800e538:	4413      	add	r3, r2
 800e53a:	2200      	movs	r2, #0
 800e53c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	3301      	adds	r3, #1
 800e542:	60fb      	str	r3, [r7, #12]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2b01      	cmp	r3, #1
 800e548:	d9eb      	bls.n	800e522 <clear_lock+0xe>
	}
}
 800e54a:	bf00      	nop
 800e54c:	bf00      	nop
 800e54e:	3714      	adds	r7, #20
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr
 800e558:	200008bc 	.word	0x200008bc

0800e55c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e564:	2300      	movs	r3, #0
 800e566:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	78db      	ldrb	r3, [r3, #3]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d034      	beq.n	800e5da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e574:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	7858      	ldrb	r0, [r3, #1]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e580:	2301      	movs	r3, #1
 800e582:	697a      	ldr	r2, [r7, #20]
 800e584:	f7ff ff3a 	bl	800e3fc <disk_write>
 800e588:	4603      	mov	r3, r0
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d002      	beq.n	800e594 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e58e:	2301      	movs	r3, #1
 800e590:	73fb      	strb	r3, [r7, #15]
 800e592:	e022      	b.n	800e5da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	1ad2      	subs	r2, r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	69db      	ldr	r3, [r3, #28]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d217      	bcs.n	800e5da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	789b      	ldrb	r3, [r3, #2]
 800e5ae:	613b      	str	r3, [r7, #16]
 800e5b0:	e010      	b.n	800e5d4 <sync_window+0x78>
					wsect += fs->fsize;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	69db      	ldr	r3, [r3, #28]
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	4413      	add	r3, r2
 800e5ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	7858      	ldrb	r0, [r3, #1]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	697a      	ldr	r2, [r7, #20]
 800e5ca:	f7ff ff17 	bl	800e3fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	613b      	str	r3, [r7, #16]
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d8eb      	bhi.n	800e5b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3718      	adds	r7, #24
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f6:	683a      	ldr	r2, [r7, #0]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d01b      	beq.n	800e634 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f7ff ffad 	bl	800e55c <sync_window>
 800e602:	4603      	mov	r3, r0
 800e604:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e606:	7bfb      	ldrb	r3, [r7, #15]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d113      	bne.n	800e634 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7858      	ldrb	r0, [r3, #1]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e616:	2301      	movs	r3, #1
 800e618:	683a      	ldr	r2, [r7, #0]
 800e61a:	f7ff fecf 	bl	800e3bc <disk_read>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d004      	beq.n	800e62e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e624:	f04f 33ff 	mov.w	r3, #4294967295
 800e628:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	683a      	ldr	r2, [r7, #0]
 800e632:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e634:	7bfb      	ldrb	r3, [r7, #15]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e63e:	b480      	push	{r7}
 800e640:	b087      	sub	sp, #28
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e646:	f04f 33ff 	mov.w	r3, #4294967295
 800e64a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d031      	beq.n	800e6b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	617b      	str	r3, [r7, #20]
 800e65a:	e002      	b.n	800e662 <get_ldnumber+0x24>
 800e65c:	697b      	ldr	r3, [r7, #20]
 800e65e:	3301      	adds	r3, #1
 800e660:	617b      	str	r3, [r7, #20]
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	2b20      	cmp	r3, #32
 800e668:	d903      	bls.n	800e672 <get_ldnumber+0x34>
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	2b3a      	cmp	r3, #58	; 0x3a
 800e670:	d1f4      	bne.n	800e65c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	2b3a      	cmp	r3, #58	; 0x3a
 800e678:	d11c      	bne.n	800e6b4 <get_ldnumber+0x76>
			tp = *path;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	60fa      	str	r2, [r7, #12]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	3b30      	subs	r3, #48	; 0x30
 800e68a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	2b09      	cmp	r3, #9
 800e690:	d80e      	bhi.n	800e6b0 <get_ldnumber+0x72>
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	429a      	cmp	r2, r3
 800e698:	d10a      	bne.n	800e6b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d107      	bne.n	800e6b0 <get_ldnumber+0x72>
					vol = (int)i;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	617b      	str	r3, [r7, #20]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	e002      	b.n	800e6ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e6b8:	693b      	ldr	r3, [r7, #16]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	371c      	adds	r7, #28
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr
	...

0800e6c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	70da      	strb	r2, [r3, #3]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f04f 32ff 	mov.w	r2, #4294967295
 800e6de:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f7ff ff7e 	bl	800e5e4 <move_window>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <check_fs+0x2a>
 800e6ee:	2304      	movs	r3, #4
 800e6f0:	e038      	b.n	800e764 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	3334      	adds	r3, #52	; 0x34
 800e6f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f7ff fe9e 	bl	800e43c <ld_word>
 800e700:	4603      	mov	r3, r0
 800e702:	461a      	mov	r2, r3
 800e704:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e708:	429a      	cmp	r2, r3
 800e70a:	d001      	beq.n	800e710 <check_fs+0x48>
 800e70c:	2303      	movs	r3, #3
 800e70e:	e029      	b.n	800e764 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e716:	2be9      	cmp	r3, #233	; 0xe9
 800e718:	d009      	beq.n	800e72e <check_fs+0x66>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e720:	2beb      	cmp	r3, #235	; 0xeb
 800e722:	d11e      	bne.n	800e762 <check_fs+0x9a>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e72a:	2b90      	cmp	r3, #144	; 0x90
 800e72c:	d119      	bne.n	800e762 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3334      	adds	r3, #52	; 0x34
 800e732:	3336      	adds	r3, #54	; 0x36
 800e734:	4618      	mov	r0, r3
 800e736:	f7ff fe99 	bl	800e46c <ld_dword>
 800e73a:	4603      	mov	r3, r0
 800e73c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e740:	4a0a      	ldr	r2, [pc, #40]	; (800e76c <check_fs+0xa4>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d101      	bne.n	800e74a <check_fs+0x82>
 800e746:	2300      	movs	r3, #0
 800e748:	e00c      	b.n	800e764 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	3334      	adds	r3, #52	; 0x34
 800e74e:	3352      	adds	r3, #82	; 0x52
 800e750:	4618      	mov	r0, r3
 800e752:	f7ff fe8b 	bl	800e46c <ld_dword>
 800e756:	4603      	mov	r3, r0
 800e758:	4a05      	ldr	r2, [pc, #20]	; (800e770 <check_fs+0xa8>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d101      	bne.n	800e762 <check_fs+0x9a>
 800e75e:	2300      	movs	r3, #0
 800e760:	e000      	b.n	800e764 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e762:	2302      	movs	r3, #2
}
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	00544146 	.word	0x00544146
 800e770:	33544146 	.word	0x33544146

0800e774 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b096      	sub	sp, #88	; 0x58
 800e778:	af00      	add	r7, sp, #0
 800e77a:	60f8      	str	r0, [r7, #12]
 800e77c:	60b9      	str	r1, [r7, #8]
 800e77e:	4613      	mov	r3, r2
 800e780:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	2200      	movs	r2, #0
 800e786:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f7ff ff58 	bl	800e63e <get_ldnumber>
 800e78e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e792:	2b00      	cmp	r3, #0
 800e794:	da01      	bge.n	800e79a <find_volume+0x26>
 800e796:	230b      	movs	r3, #11
 800e798:	e235      	b.n	800ec06 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e79a:	4aa5      	ldr	r2, [pc, #660]	; (800ea30 <find_volume+0x2bc>)
 800e79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <find_volume+0x3a>
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	e22b      	b.n	800ec06 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800e7ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7b0:	f7ff fe7f 	bl	800e4b2 <lock_fs>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d101      	bne.n	800e7be <find_volume+0x4a>
 800e7ba:	230f      	movs	r3, #15
 800e7bc:	e223      	b.n	800ec06 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e7c4:	79fb      	ldrb	r3, [r7, #7]
 800e7c6:	f023 0301 	bic.w	r3, r3, #1
 800e7ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d01a      	beq.n	800e80a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d6:	785b      	ldrb	r3, [r3, #1]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fdaf 	bl	800e33c <disk_status>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e7e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10c      	bne.n	800e80a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e7f0:	79fb      	ldrb	r3, [r7, #7]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d007      	beq.n	800e806 <find_volume+0x92>
 800e7f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e7fa:	f003 0304 	and.w	r3, r3, #4
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e802:	230a      	movs	r3, #10
 800e804:	e1ff      	b.n	800ec06 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800e806:	2300      	movs	r3, #0
 800e808:	e1fd      	b.n	800ec06 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80c:	2200      	movs	r2, #0
 800e80e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e812:	b2da      	uxtb	r2, r3
 800e814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e816:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	785b      	ldrb	r3, [r3, #1]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff fda7 	bl	800e370 <disk_initialize>
 800e822:	4603      	mov	r3, r0
 800e824:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e828:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e82c:	f003 0301 	and.w	r3, r3, #1
 800e830:	2b00      	cmp	r3, #0
 800e832:	d001      	beq.n	800e838 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e834:	2303      	movs	r3, #3
 800e836:	e1e6      	b.n	800ec06 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e838:	79fb      	ldrb	r3, [r7, #7]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d007      	beq.n	800e84e <find_volume+0xda>
 800e83e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e842:	f003 0304 	and.w	r3, r3, #4
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e84a:	230a      	movs	r3, #10
 800e84c:	e1db      	b.n	800ec06 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e852:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e854:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e856:	f7ff ff37 	bl	800e6c8 <check_fs>
 800e85a:	4603      	mov	r3, r0
 800e85c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e864:	2b02      	cmp	r3, #2
 800e866:	d149      	bne.n	800e8fc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e868:	2300      	movs	r3, #0
 800e86a:	643b      	str	r3, [r7, #64]	; 0x40
 800e86c:	e01e      	b.n	800e8ac <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e870:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e876:	011b      	lsls	r3, r3, #4
 800e878:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e87c:	4413      	add	r3, r2
 800e87e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e882:	3304      	adds	r3, #4
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d006      	beq.n	800e898 <find_volume+0x124>
 800e88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88c:	3308      	adds	r3, #8
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff fdec 	bl	800e46c <ld_dword>
 800e894:	4602      	mov	r2, r0
 800e896:	e000      	b.n	800e89a <find_volume+0x126>
 800e898:	2200      	movs	r2, #0
 800e89a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	3358      	adds	r3, #88	; 0x58
 800e8a0:	443b      	add	r3, r7
 800e8a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	643b      	str	r3, [r7, #64]	; 0x40
 800e8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ae:	2b03      	cmp	r3, #3
 800e8b0:	d9dd      	bls.n	800e86e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d002      	beq.n	800e8c2 <find_volume+0x14e>
 800e8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8be:	3b01      	subs	r3, #1
 800e8c0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e8c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8c4:	009b      	lsls	r3, r3, #2
 800e8c6:	3358      	adds	r3, #88	; 0x58
 800e8c8:	443b      	add	r3, r7
 800e8ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e8ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d005      	beq.n	800e8e2 <find_volume+0x16e>
 800e8d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e8d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e8da:	f7ff fef5 	bl	800e6c8 <check_fs>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	e000      	b.n	800e8e4 <find_volume+0x170>
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e8e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d905      	bls.n	800e8fc <find_volume+0x188>
 800e8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	643b      	str	r3, [r7, #64]	; 0x40
 800e8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f8:	2b03      	cmp	r3, #3
 800e8fa:	d9e2      	bls.n	800e8c2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e8fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e900:	2b04      	cmp	r3, #4
 800e902:	d101      	bne.n	800e908 <find_volume+0x194>
 800e904:	2301      	movs	r3, #1
 800e906:	e17e      	b.n	800ec06 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d901      	bls.n	800e914 <find_volume+0x1a0>
 800e910:	230d      	movs	r3, #13
 800e912:	e178      	b.n	800ec06 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e916:	3334      	adds	r3, #52	; 0x34
 800e918:	330b      	adds	r3, #11
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7ff fd8e 	bl	800e43c <ld_word>
 800e920:	4603      	mov	r3, r0
 800e922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e926:	d001      	beq.n	800e92c <find_volume+0x1b8>
 800e928:	230d      	movs	r3, #13
 800e92a:	e16c      	b.n	800ec06 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92e:	3334      	adds	r3, #52	; 0x34
 800e930:	3316      	adds	r3, #22
 800e932:	4618      	mov	r0, r3
 800e934:	f7ff fd82 	bl	800e43c <ld_word>
 800e938:	4603      	mov	r3, r0
 800e93a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d106      	bne.n	800e950 <find_volume+0x1dc>
 800e942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e944:	3334      	adds	r3, #52	; 0x34
 800e946:	3324      	adds	r3, #36	; 0x24
 800e948:	4618      	mov	r0, r3
 800e94a:	f7ff fd8f 	bl	800e46c <ld_dword>
 800e94e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e952:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e954:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e958:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e962:	789b      	ldrb	r3, [r3, #2]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d005      	beq.n	800e974 <find_volume+0x200>
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	789b      	ldrb	r3, [r3, #2]
 800e96c:	2b02      	cmp	r3, #2
 800e96e:	d001      	beq.n	800e974 <find_volume+0x200>
 800e970:	230d      	movs	r3, #13
 800e972:	e148      	b.n	800ec06 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e976:	789b      	ldrb	r3, [r3, #2]
 800e978:	461a      	mov	r2, r3
 800e97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e97c:	fb02 f303 	mul.w	r3, r2, r3
 800e980:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e988:	b29a      	uxth	r2, r3
 800e98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e990:	895b      	ldrh	r3, [r3, #10]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d008      	beq.n	800e9a8 <find_volume+0x234>
 800e996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e998:	895b      	ldrh	r3, [r3, #10]
 800e99a:	461a      	mov	r2, r3
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	895b      	ldrh	r3, [r3, #10]
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d001      	beq.n	800e9ac <find_volume+0x238>
 800e9a8:	230d      	movs	r3, #13
 800e9aa:	e12c      	b.n	800ec06 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	3334      	adds	r3, #52	; 0x34
 800e9b0:	3311      	adds	r3, #17
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff fd42 	bl	800e43c <ld_word>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c2:	891b      	ldrh	r3, [r3, #8]
 800e9c4:	f003 030f 	and.w	r3, r3, #15
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <find_volume+0x25e>
 800e9ce:	230d      	movs	r3, #13
 800e9d0:	e119      	b.n	800ec06 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	3334      	adds	r3, #52	; 0x34
 800e9d6:	3313      	adds	r3, #19
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7ff fd2f 	bl	800e43c <ld_word>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e9e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d106      	bne.n	800e9f6 <find_volume+0x282>
 800e9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ea:	3334      	adds	r3, #52	; 0x34
 800e9ec:	3320      	adds	r3, #32
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7ff fd3c 	bl	800e46c <ld_dword>
 800e9f4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f8:	3334      	adds	r3, #52	; 0x34
 800e9fa:	330e      	adds	r3, #14
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7ff fd1d 	bl	800e43c <ld_word>
 800ea02:	4603      	mov	r3, r0
 800ea04:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ea06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d101      	bne.n	800ea10 <find_volume+0x29c>
 800ea0c:	230d      	movs	r3, #13
 800ea0e:	e0fa      	b.n	800ec06 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ea10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea14:	4413      	add	r3, r2
 800ea16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea18:	8912      	ldrh	r2, [r2, #8]
 800ea1a:	0912      	lsrs	r2, r2, #4
 800ea1c:	b292      	uxth	r2, r2
 800ea1e:	4413      	add	r3, r2
 800ea20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ea22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d204      	bcs.n	800ea34 <find_volume+0x2c0>
 800ea2a:	230d      	movs	r3, #13
 800ea2c:	e0eb      	b.n	800ec06 <find_volume+0x492>
 800ea2e:	bf00      	nop
 800ea30:	200008b4 	.word	0x200008b4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ea34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea3c:	8952      	ldrh	r2, [r2, #10]
 800ea3e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea42:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ea44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d101      	bne.n	800ea4e <find_volume+0x2da>
 800ea4a:	230d      	movs	r3, #13
 800ea4c:	e0db      	b.n	800ec06 <find_volume+0x492>
		fmt = FS_FAT32;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d802      	bhi.n	800ea64 <find_volume+0x2f0>
 800ea5e:	2302      	movs	r3, #2
 800ea60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d802      	bhi.n	800ea74 <find_volume+0x300>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	1c9a      	adds	r2, r3, #2
 800ea78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea80:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ea82:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea86:	441a      	add	r2, r3
 800ea88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ea8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ea8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea90:	441a      	add	r2, r3
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ea96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ea9a:	2b03      	cmp	r3, #3
 800ea9c:	d11e      	bne.n	800eadc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ea9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa0:	3334      	adds	r3, #52	; 0x34
 800eaa2:	332a      	adds	r3, #42	; 0x2a
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fcc9 	bl	800e43c <ld_word>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d001      	beq.n	800eab4 <find_volume+0x340>
 800eab0:	230d      	movs	r3, #13
 800eab2:	e0a8      	b.n	800ec06 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	891b      	ldrh	r3, [r3, #8]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <find_volume+0x34c>
 800eabc:	230d      	movs	r3, #13
 800eabe:	e0a2      	b.n	800ec06 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac2:	3334      	adds	r3, #52	; 0x34
 800eac4:	332c      	adds	r3, #44	; 0x2c
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7ff fcd0 	bl	800e46c <ld_dword>
 800eacc:	4602      	mov	r2, r0
 800eace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ead2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead4:	699b      	ldr	r3, [r3, #24]
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	647b      	str	r3, [r7, #68]	; 0x44
 800eada:	e01f      	b.n	800eb1c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eade:	891b      	ldrh	r3, [r3, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <find_volume+0x374>
 800eae4:	230d      	movs	r3, #13
 800eae6:	e08e      	b.n	800ec06 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaee:	441a      	add	r2, r3
 800eaf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eaf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d103      	bne.n	800eb04 <find_volume+0x390>
 800eafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	005b      	lsls	r3, r3, #1
 800eb02:	e00a      	b.n	800eb1a <find_volume+0x3a6>
 800eb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb06:	699a      	ldr	r2, [r3, #24]
 800eb08:	4613      	mov	r3, r2
 800eb0a:	005b      	lsls	r3, r3, #1
 800eb0c:	4413      	add	r3, r2
 800eb0e:	085a      	lsrs	r2, r3, #1
 800eb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb12:	699b      	ldr	r3, [r3, #24]
 800eb14:	f003 0301 	and.w	r3, r3, #1
 800eb18:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eb1a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb1e:	69da      	ldr	r2, [r3, #28]
 800eb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb22:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eb26:	0a5b      	lsrs	r3, r3, #9
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d201      	bcs.n	800eb30 <find_volume+0x3bc>
 800eb2c:	230d      	movs	r3, #13
 800eb2e:	e06a      	b.n	800ec06 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb32:	f04f 32ff 	mov.w	r2, #4294967295
 800eb36:	615a      	str	r2, [r3, #20]
 800eb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3a:	695a      	ldr	r2, [r3, #20]
 800eb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb3e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb42:	2280      	movs	r2, #128	; 0x80
 800eb44:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eb46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb4a:	2b03      	cmp	r3, #3
 800eb4c:	d149      	bne.n	800ebe2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb50:	3334      	adds	r3, #52	; 0x34
 800eb52:	3330      	adds	r3, #48	; 0x30
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff fc71 	bl	800e43c <ld_word>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d140      	bne.n	800ebe2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb62:	3301      	adds	r3, #1
 800eb64:	4619      	mov	r1, r3
 800eb66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb68:	f7ff fd3c 	bl	800e5e4 <move_window>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d137      	bne.n	800ebe2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	2200      	movs	r2, #0
 800eb76:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	3334      	adds	r3, #52	; 0x34
 800eb7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7ff fc5b 	bl	800e43c <ld_word>
 800eb86:	4603      	mov	r3, r0
 800eb88:	461a      	mov	r2, r3
 800eb8a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d127      	bne.n	800ebe2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800eb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb94:	3334      	adds	r3, #52	; 0x34
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff fc68 	bl	800e46c <ld_dword>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	4a1c      	ldr	r2, [pc, #112]	; (800ec10 <find_volume+0x49c>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d11e      	bne.n	800ebe2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800eba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba6:	3334      	adds	r3, #52	; 0x34
 800eba8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7ff fc5d 	bl	800e46c <ld_dword>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4a17      	ldr	r2, [pc, #92]	; (800ec14 <find_volume+0x4a0>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d113      	bne.n	800ebe2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ebba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbc:	3334      	adds	r3, #52	; 0x34
 800ebbe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7ff fc52 	bl	800e46c <ld_dword>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebcc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ebce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd0:	3334      	adds	r3, #52	; 0x34
 800ebd2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7ff fc48 	bl	800e46c <ld_dword>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ebe8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ebea:	4b0b      	ldr	r3, [pc, #44]	; (800ec18 <find_volume+0x4a4>)
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <find_volume+0x4a4>)
 800ebf4:	801a      	strh	r2, [r3, #0]
 800ebf6:	4b08      	ldr	r3, [pc, #32]	; (800ec18 <find_volume+0x4a4>)
 800ebf8:	881a      	ldrh	r2, [r3, #0]
 800ebfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ebfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec00:	f7ff fc88 	bl	800e514 <clear_lock>
#endif
	return FR_OK;
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3758      	adds	r7, #88	; 0x58
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	41615252 	.word	0x41615252
 800ec14:	61417272 	.word	0x61417272
 800ec18:	200008b8 	.word	0x200008b8

0800ec1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b088      	sub	sp, #32
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	4613      	mov	r3, r2
 800ec28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ec2e:	f107 0310 	add.w	r3, r7, #16
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7ff fd03 	bl	800e63e <get_ldnumber>
 800ec38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	da01      	bge.n	800ec44 <f_mount+0x28>
 800ec40:	230b      	movs	r3, #11
 800ec42:	e048      	b.n	800ecd6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ec44:	4a26      	ldr	r2, [pc, #152]	; (800ece0 <f_mount+0xc4>)
 800ec46:	69fb      	ldr	r3, [r7, #28]
 800ec48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ec4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00f      	beq.n	800ec74 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ec54:	69b8      	ldr	r0, [r7, #24]
 800ec56:	f7ff fc5d 	bl	800e514 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f000 f8b6 	bl	800edd0 <ff_del_syncobj>
 800ec64:	4603      	mov	r3, r0
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d101      	bne.n	800ec6e <f_mount+0x52>
 800ec6a:	2302      	movs	r3, #2
 800ec6c:	e033      	b.n	800ecd6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ec6e:	69bb      	ldr	r3, [r7, #24]
 800ec70:	2200      	movs	r2, #0
 800ec72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00f      	beq.n	800ec9a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	b2da      	uxtb	r2, r3
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	330c      	adds	r3, #12
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	f000 f885 	bl	800ed9a <ff_cre_syncobj>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d101      	bne.n	800ec9a <f_mount+0x7e>
 800ec96:	2302      	movs	r3, #2
 800ec98:	e01d      	b.n	800ecd6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	4910      	ldr	r1, [pc, #64]	; (800ece0 <f_mount+0xc4>)
 800ec9e:	69fb      	ldr	r3, [r7, #28]
 800eca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <f_mount+0x94>
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d001      	beq.n	800ecb4 <f_mount+0x98>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e010      	b.n	800ecd6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ecb4:	f107 010c 	add.w	r1, r7, #12
 800ecb8:	f107 0308 	add.w	r3, r7, #8
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7ff fd58 	bl	800e774 <find_volume>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	7dfa      	ldrb	r2, [r7, #23]
 800eccc:	4611      	mov	r1, r2
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7ff fc05 	bl	800e4de <unlock_fs>
 800ecd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3720      	adds	r7, #32
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	200008b4 	.word	0x200008b4

0800ece4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b087      	sub	sp, #28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ecfa:	4b1f      	ldr	r3, [pc, #124]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ecfc:	7a5b      	ldrb	r3, [r3, #9]
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d131      	bne.n	800ed68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed04:	4b1c      	ldr	r3, [pc, #112]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed06:	7a5b      	ldrb	r3, [r3, #9]
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	4b1a      	ldr	r3, [pc, #104]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed0e:	2100      	movs	r1, #0
 800ed10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed12:	4b19      	ldr	r3, [pc, #100]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed14:	7a5b      	ldrb	r3, [r3, #9]
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	4a17      	ldr	r2, [pc, #92]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed22:	4b15      	ldr	r3, [pc, #84]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed24:	7a5b      	ldrb	r3, [r3, #9]
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	461a      	mov	r2, r3
 800ed2a:	4b13      	ldr	r3, [pc, #76]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed2c:	4413      	add	r3, r2
 800ed2e:	79fa      	ldrb	r2, [r7, #7]
 800ed30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed32:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed34:	7a5b      	ldrb	r3, [r3, #9]
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	1c5a      	adds	r2, r3, #1
 800ed3a:	b2d1      	uxtb	r1, r2
 800ed3c:	4a0e      	ldr	r2, [pc, #56]	; (800ed78 <FATFS_LinkDriverEx+0x94>)
 800ed3e:	7251      	strb	r1, [r2, #9]
 800ed40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed42:	7dbb      	ldrb	r3, [r7, #22]
 800ed44:	3330      	adds	r3, #48	; 0x30
 800ed46:	b2da      	uxtb	r2, r3
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	223a      	movs	r2, #58	; 0x3a
 800ed52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	3302      	adds	r3, #2
 800ed58:	222f      	movs	r2, #47	; 0x2f
 800ed5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	3303      	adds	r3, #3
 800ed60:	2200      	movs	r2, #0
 800ed62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	371c      	adds	r7, #28
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	200008dc 	.word	0x200008dc

0800ed7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed86:	2200      	movs	r2, #0
 800ed88:	6839      	ldr	r1, [r7, #0]
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff ffaa 	bl	800ece4 <FATFS_LinkDriverEx>
 800ed90:	4603      	mov	r3, r0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	4603      	mov	r3, r0
 800eda2:	6039      	str	r1, [r7, #0]
 800eda4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800eda6:	2200      	movs	r2, #0
 800eda8:	2101      	movs	r1, #1
 800edaa:	2001      	movs	r0, #1
 800edac:	f000 fb20 	bl	800f3f0 <osSemaphoreNew>
 800edb0:	4602      	mov	r2, r0
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	bf14      	ite	ne
 800edbe:	2301      	movne	r3, #1
 800edc0:	2300      	moveq	r3, #0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	60fb      	str	r3, [r7, #12]

    return ret;
 800edc6:	68fb      	ldr	r3, [r7, #12]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 fc29 	bl	800f630 <osSemaphoreDelete>
#endif
    return 1;
 800edde:	2301      	movs	r3, #1
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800edf0:	2300      	movs	r3, #0
 800edf2:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800edf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 fb83 	bl	800f504 <osSemaphoreAcquire>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d101      	bne.n	800ee08 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800ee04:	2301      	movs	r3, #1
 800ee06:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ee08:	68fb      	ldr	r3, [r7, #12]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b082      	sub	sp, #8
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f000 fbc4 	bl	800f5a8 <osSemaphoreRelease>
#endif
}
 800ee20:	bf00      	nop
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <__NVIC_SetPriority>:
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	6039      	str	r1, [r7, #0]
 800ee32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ee34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	db0a      	blt.n	800ee52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	b2da      	uxtb	r2, r3
 800ee40:	490c      	ldr	r1, [pc, #48]	; (800ee74 <__NVIC_SetPriority+0x4c>)
 800ee42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee46:	0112      	lsls	r2, r2, #4
 800ee48:	b2d2      	uxtb	r2, r2
 800ee4a:	440b      	add	r3, r1
 800ee4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ee50:	e00a      	b.n	800ee68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	4908      	ldr	r1, [pc, #32]	; (800ee78 <__NVIC_SetPriority+0x50>)
 800ee58:	79fb      	ldrb	r3, [r7, #7]
 800ee5a:	f003 030f 	and.w	r3, r3, #15
 800ee5e:	3b04      	subs	r3, #4
 800ee60:	0112      	lsls	r2, r2, #4
 800ee62:	b2d2      	uxtb	r2, r2
 800ee64:	440b      	add	r3, r1
 800ee66:	761a      	strb	r2, [r3, #24]
}
 800ee68:	bf00      	nop
 800ee6a:	370c      	adds	r7, #12
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr
 800ee74:	e000e100 	.word	0xe000e100
 800ee78:	e000ed00 	.word	0xe000ed00

0800ee7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ee80:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <SysTick_Handler+0x1c>)
 800ee82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ee84:	f002 fdc2 	bl	8011a0c <xTaskGetSchedulerState>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b01      	cmp	r3, #1
 800ee8c:	d001      	beq.n	800ee92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ee8e:	f003 fd9b 	bl	80129c8 <xPortSysTickHandler>
  }
}
 800ee92:	bf00      	nop
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	e000e010 	.word	0xe000e010

0800ee9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800eea0:	2100      	movs	r1, #0
 800eea2:	f06f 0004 	mvn.w	r0, #4
 800eea6:	f7ff ffbf 	bl	800ee28 <__NVIC_SetPriority>
#endif
}
 800eeaa:	bf00      	nop
 800eeac:	bd80      	pop	{r7, pc}
	...

0800eeb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eeb6:	f3ef 8305 	mrs	r3, IPSR
 800eeba:	603b      	str	r3, [r7, #0]
  return(result);
 800eebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d003      	beq.n	800eeca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800eec2:	f06f 0305 	mvn.w	r3, #5
 800eec6:	607b      	str	r3, [r7, #4]
 800eec8:	e00c      	b.n	800eee4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800eeca:	4b0a      	ldr	r3, [pc, #40]	; (800eef4 <osKernelInitialize+0x44>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d105      	bne.n	800eede <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800eed2:	4b08      	ldr	r3, [pc, #32]	; (800eef4 <osKernelInitialize+0x44>)
 800eed4:	2201      	movs	r2, #1
 800eed6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800eed8:	2300      	movs	r3, #0
 800eeda:	607b      	str	r3, [r7, #4]
 800eedc:	e002      	b.n	800eee4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800eede:	f04f 33ff 	mov.w	r3, #4294967295
 800eee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eee4:	687b      	ldr	r3, [r7, #4]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	200008e8 	.word	0x200008e8

0800eef8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b082      	sub	sp, #8
 800eefc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eefe:	f3ef 8305 	mrs	r3, IPSR
 800ef02:	603b      	str	r3, [r7, #0]
  return(result);
 800ef04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ef0a:	f06f 0305 	mvn.w	r3, #5
 800ef0e:	607b      	str	r3, [r7, #4]
 800ef10:	e010      	b.n	800ef34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ef12:	4b0b      	ldr	r3, [pc, #44]	; (800ef40 <osKernelStart+0x48>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d109      	bne.n	800ef2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ef1a:	f7ff ffbf 	bl	800ee9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ef1e:	4b08      	ldr	r3, [pc, #32]	; (800ef40 <osKernelStart+0x48>)
 800ef20:	2202      	movs	r2, #2
 800ef22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ef24:	f002 f878 	bl	8011018 <vTaskStartScheduler>
      stat = osOK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	607b      	str	r3, [r7, #4]
 800ef2c:	e002      	b.n	800ef34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ef2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ef32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ef34:	687b      	ldr	r3, [r7, #4]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	200008e8 	.word	0x200008e8

0800ef44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b08e      	sub	sp, #56	; 0x38
 800ef48:	af04      	add	r7, sp, #16
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef54:	f3ef 8305 	mrs	r3, IPSR
 800ef58:	617b      	str	r3, [r7, #20]
  return(result);
 800ef5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d17e      	bne.n	800f05e <osThreadNew+0x11a>
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d07b      	beq.n	800f05e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ef66:	2380      	movs	r3, #128	; 0x80
 800ef68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ef6a:	2318      	movs	r3, #24
 800ef6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ef72:	f04f 33ff 	mov.w	r3, #4294967295
 800ef76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d045      	beq.n	800f00a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d002      	beq.n	800ef8c <osThreadNew+0x48>
        name = attr->name;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	699b      	ldr	r3, [r3, #24]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	699b      	ldr	r3, [r3, #24]
 800ef98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d008      	beq.n	800efb2 <osThreadNew+0x6e>
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	2b38      	cmp	r3, #56	; 0x38
 800efa4:	d805      	bhi.n	800efb2 <osThreadNew+0x6e>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	f003 0301 	and.w	r3, r3, #1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d001      	beq.n	800efb6 <osThreadNew+0x72>
        return (NULL);
 800efb2:	2300      	movs	r3, #0
 800efb4:	e054      	b.n	800f060 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	695b      	ldr	r3, [r3, #20]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d003      	beq.n	800efc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	089b      	lsrs	r3, r3, #2
 800efc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00e      	beq.n	800efec <osThreadNew+0xa8>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	2bbb      	cmp	r3, #187	; 0xbb
 800efd4:	d90a      	bls.n	800efec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d006      	beq.n	800efec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	695b      	ldr	r3, [r3, #20]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d002      	beq.n	800efec <osThreadNew+0xa8>
        mem = 1;
 800efe6:	2301      	movs	r3, #1
 800efe8:	61bb      	str	r3, [r7, #24]
 800efea:	e010      	b.n	800f00e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d10c      	bne.n	800f00e <osThreadNew+0xca>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d108      	bne.n	800f00e <osThreadNew+0xca>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d104      	bne.n	800f00e <osThreadNew+0xca>
          mem = 0;
 800f004:	2300      	movs	r3, #0
 800f006:	61bb      	str	r3, [r7, #24]
 800f008:	e001      	b.n	800f00e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f00e:	69bb      	ldr	r3, [r7, #24]
 800f010:	2b01      	cmp	r3, #1
 800f012:	d110      	bne.n	800f036 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f01c:	9202      	str	r2, [sp, #8]
 800f01e:	9301      	str	r3, [sp, #4]
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	9300      	str	r3, [sp, #0]
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	6a3a      	ldr	r2, [r7, #32]
 800f028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f001 fe08 	bl	8010c40 <xTaskCreateStatic>
 800f030:	4603      	mov	r3, r0
 800f032:	613b      	str	r3, [r7, #16]
 800f034:	e013      	b.n	800f05e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f036:	69bb      	ldr	r3, [r7, #24]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d110      	bne.n	800f05e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f03c:	6a3b      	ldr	r3, [r7, #32]
 800f03e:	b29a      	uxth	r2, r3
 800f040:	f107 0310 	add.w	r3, r7, #16
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	9300      	str	r3, [sp, #0]
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f04e:	68f8      	ldr	r0, [r7, #12]
 800f050:	f001 fe53 	bl	8010cfa <xTaskCreate>
 800f054:	4603      	mov	r3, r0
 800f056:	2b01      	cmp	r3, #1
 800f058:	d001      	beq.n	800f05e <osThreadNew+0x11a>
            hTask = NULL;
 800f05a:	2300      	movs	r3, #0
 800f05c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f05e:	693b      	ldr	r3, [r7, #16]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3728      	adds	r7, #40	; 0x28
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}

0800f068 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f070:	f3ef 8305 	mrs	r3, IPSR
 800f074:	60bb      	str	r3, [r7, #8]
  return(result);
 800f076:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d003      	beq.n	800f084 <osDelay+0x1c>
    stat = osErrorISR;
 800f07c:	f06f 0305 	mvn.w	r3, #5
 800f080:	60fb      	str	r3, [r7, #12]
 800f082:	e007      	b.n	800f094 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f084:	2300      	movs	r3, #0
 800f086:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f001 ff8e 	bl	8010fb0 <vTaskDelay>
    }
  }

  return (stat);
 800f094:	68fb      	ldr	r3, [r7, #12]
}
 800f096:	4618      	mov	r0, r3
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b084      	sub	sp, #16
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f003 fa8e 	bl	80125c8 <pvTimerGetTimerID>
 800f0ac:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d005      	beq.n	800f0c0 <TimerCallback+0x22>
    callb->func (callb->arg);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	6852      	ldr	r2, [r2, #4]
 800f0bc:	4610      	mov	r0, r2
 800f0be:	4798      	blx	r3
  }
}
 800f0c0:	bf00      	nop
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08c      	sub	sp, #48	; 0x30
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	607a      	str	r2, [r7, #4]
 800f0d2:	603b      	str	r3, [r7, #0]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0dc:	f3ef 8305 	mrs	r3, IPSR
 800f0e0:	613b      	str	r3, [r7, #16]
  return(result);
 800f0e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d163      	bne.n	800f1b0 <osTimerNew+0xe8>
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d060      	beq.n	800f1b0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f0ee:	2008      	movs	r0, #8
 800f0f0:	f003 fcfa 	bl	8012ae8 <pvPortMalloc>
 800f0f4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d059      	beq.n	800f1b0 <osTimerNew+0xe8>
      callb->func = func;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f108:	7afb      	ldrb	r3, [r7, #11]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d102      	bne.n	800f114 <osTimerNew+0x4c>
        reload = pdFALSE;
 800f10e:	2300      	movs	r3, #0
 800f110:	61fb      	str	r3, [r7, #28]
 800f112:	e001      	b.n	800f118 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800f114:	2301      	movs	r3, #1
 800f116:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f118:	f04f 33ff 	mov.w	r3, #4294967295
 800f11c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f11e:	2300      	movs	r3, #0
 800f120:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d01c      	beq.n	800f162 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d002      	beq.n	800f136 <osTimerNew+0x6e>
          name = attr->name;
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d006      	beq.n	800f14c <osTimerNew+0x84>
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	68db      	ldr	r3, [r3, #12]
 800f142:	2b2b      	cmp	r3, #43	; 0x2b
 800f144:	d902      	bls.n	800f14c <osTimerNew+0x84>
          mem = 1;
 800f146:	2301      	movs	r3, #1
 800f148:	61bb      	str	r3, [r7, #24]
 800f14a:	e00c      	b.n	800f166 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	689b      	ldr	r3, [r3, #8]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d108      	bne.n	800f166 <osTimerNew+0x9e>
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d104      	bne.n	800f166 <osTimerNew+0x9e>
            mem = 0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	61bb      	str	r3, [r7, #24]
 800f160:	e001      	b.n	800f166 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d10c      	bne.n	800f186 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	9301      	str	r3, [sp, #4]
 800f172:	4b12      	ldr	r3, [pc, #72]	; (800f1bc <osTimerNew+0xf4>)
 800f174:	9300      	str	r3, [sp, #0]
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	69fa      	ldr	r2, [r7, #28]
 800f17a:	2101      	movs	r1, #1
 800f17c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f17e:	f002 fea4 	bl	8011eca <xTimerCreateStatic>
 800f182:	6238      	str	r0, [r7, #32]
 800f184:	e00b      	b.n	800f19e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800f186:	69bb      	ldr	r3, [r7, #24]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d108      	bne.n	800f19e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f18c:	4b0b      	ldr	r3, [pc, #44]	; (800f1bc <osTimerNew+0xf4>)
 800f18e:	9300      	str	r3, [sp, #0]
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	69fa      	ldr	r2, [r7, #28]
 800f194:	2101      	movs	r1, #1
 800f196:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f198:	f002 fe76 	bl	8011e88 <xTimerCreate>
 800f19c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f19e:	6a3b      	ldr	r3, [r7, #32]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d105      	bne.n	800f1b0 <osTimerNew+0xe8>
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <osTimerNew+0xe8>
        vPortFree (callb);
 800f1aa:	6978      	ldr	r0, [r7, #20]
 800f1ac:	f003 fd68 	bl	8012c80 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f1b0:	6a3b      	ldr	r3, [r7, #32]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3728      	adds	r7, #40	; 0x28
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	0800f09f 	.word	0x0800f09f

0800f1c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1ce:	f3ef 8305 	mrs	r3, IPSR
 800f1d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d003      	beq.n	800f1e2 <osTimerStart+0x22>
    stat = osErrorISR;
 800f1da:	f06f 0305 	mvn.w	r3, #5
 800f1de:	617b      	str	r3, [r7, #20]
 800f1e0:	e017      	b.n	800f212 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d103      	bne.n	800f1f0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f1e8:	f06f 0303 	mvn.w	r3, #3
 800f1ec:	617b      	str	r3, [r7, #20]
 800f1ee:	e010      	b.n	800f212 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	9300      	str	r3, [sp, #0]
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	2104      	movs	r1, #4
 800f1fa:	6938      	ldr	r0, [r7, #16]
 800f1fc:	f002 fede 	bl	8011fbc <xTimerGenericCommand>
 800f200:	4603      	mov	r3, r0
 800f202:	2b01      	cmp	r3, #1
 800f204:	d102      	bne.n	800f20c <osTimerStart+0x4c>
      stat = osOK;
 800f206:	2300      	movs	r3, #0
 800f208:	617b      	str	r3, [r7, #20]
 800f20a:	e002      	b.n	800f212 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f20c:	f06f 0302 	mvn.w	r3, #2
 800f210:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f212:	697b      	ldr	r3, [r7, #20]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3718      	adds	r7, #24
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800f224:	2300      	movs	r3, #0
 800f226:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f228:	f3ef 8305 	mrs	r3, IPSR
 800f22c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f22e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800f230:	2b00      	cmp	r3, #0
 800f232:	d12d      	bne.n	800f290 <osEventFlagsNew+0x74>
    mem = -1;
 800f234:	f04f 33ff 	mov.w	r3, #4294967295
 800f238:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d015      	beq.n	800f26c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d006      	beq.n	800f256 <osEventFlagsNew+0x3a>
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	68db      	ldr	r3, [r3, #12]
 800f24c:	2b1f      	cmp	r3, #31
 800f24e:	d902      	bls.n	800f256 <osEventFlagsNew+0x3a>
        mem = 1;
 800f250:	2301      	movs	r3, #1
 800f252:	613b      	str	r3, [r7, #16]
 800f254:	e00c      	b.n	800f270 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d108      	bne.n	800f270 <osEventFlagsNew+0x54>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d104      	bne.n	800f270 <osEventFlagsNew+0x54>
          mem = 0;
 800f266:	2300      	movs	r3, #0
 800f268:	613b      	str	r3, [r7, #16]
 800f26a:	e001      	b.n	800f270 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800f26c:	2300      	movs	r3, #0
 800f26e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	2b01      	cmp	r3, #1
 800f274:	d106      	bne.n	800f284 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 fa30 	bl	800f6e0 <xEventGroupCreateStatic>
 800f280:	6178      	str	r0, [r7, #20]
 800f282:	e005      	b.n	800f290 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800f28a:	f000 fa60 	bl	800f74e <xEventGroupCreate>
 800f28e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800f290:	697b      	ldr	r3, [r7, #20]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3718      	adds	r7, #24
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
	...

0800f29c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d004      	beq.n	800f2ba <osEventFlagsSet+0x1e>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d003      	beq.n	800f2c2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800f2ba:	f06f 0303 	mvn.w	r3, #3
 800f2be:	617b      	str	r3, [r7, #20]
 800f2c0:	e028      	b.n	800f314 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2c2:	f3ef 8305 	mrs	r3, IPSR
 800f2c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d01d      	beq.n	800f30a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800f2d2:	f107 0308 	add.w	r3, r7, #8
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6938      	ldr	r0, [r7, #16]
 800f2dc:	f000 fbda 	bl	800fa94 <xEventGroupSetBitsFromISR>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d103      	bne.n	800f2ee <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800f2e6:	f06f 0302 	mvn.w	r3, #2
 800f2ea:	617b      	str	r3, [r7, #20]
 800f2ec:	e012      	b.n	800f314 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00d      	beq.n	800f314 <osEventFlagsSet+0x78>
 800f2f8:	4b09      	ldr	r3, [pc, #36]	; (800f320 <osEventFlagsSet+0x84>)
 800f2fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2fe:	601a      	str	r2, [r3, #0]
 800f300:	f3bf 8f4f 	dsb	sy
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	e004      	b.n	800f314 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800f30a:	6839      	ldr	r1, [r7, #0]
 800f30c:	6938      	ldr	r0, [r7, #16]
 800f30e:	f000 fb07 	bl	800f920 <xEventGroupSetBits>
 800f312:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800f314:	697b      	ldr	r3, [r7, #20]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3718      	adds	r7, #24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	e000ed04 	.word	0xe000ed04

0800f324 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800f324:	b580      	push	{r7, lr}
 800f326:	b08c      	sub	sp, #48	; 0x30
 800f328:	af02      	add	r7, sp, #8
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
 800f330:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d004      	beq.n	800f346 <osEventFlagsWait+0x22>
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f342:	2b00      	cmp	r3, #0
 800f344:	d003      	beq.n	800f34e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800f346:	f06f 0303 	mvn.w	r3, #3
 800f34a:	61fb      	str	r3, [r7, #28]
 800f34c:	e04b      	b.n	800f3e6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f34e:	f3ef 8305 	mrs	r3, IPSR
 800f352:	617b      	str	r3, [r7, #20]
  return(result);
 800f354:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f356:	2b00      	cmp	r3, #0
 800f358:	d003      	beq.n	800f362 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800f35a:	f06f 0305 	mvn.w	r3, #5
 800f35e:	61fb      	str	r3, [r7, #28]
 800f360:	e041      	b.n	800f3e6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800f36c:	2301      	movs	r3, #1
 800f36e:	627b      	str	r3, [r7, #36]	; 0x24
 800f370:	e001      	b.n	800f376 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800f372:	2300      	movs	r3, #0
 800f374:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f003 0302 	and.w	r3, r3, #2
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d002      	beq.n	800f386 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800f380:	2300      	movs	r3, #0
 800f382:	623b      	str	r3, [r7, #32]
 800f384:	e001      	b.n	800f38a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800f386:	2301      	movs	r3, #1
 800f388:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f390:	6a3a      	ldr	r2, [r7, #32]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	69b8      	ldr	r0, [r7, #24]
 800f396:	f000 f9f5 	bl	800f784 <xEventGroupWaitBits>
 800f39a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f003 0301 	and.w	r3, r3, #1
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d010      	beq.n	800f3c8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	4013      	ands	r3, r2
 800f3ac:	68ba      	ldr	r2, [r7, #8]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d019      	beq.n	800f3e6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d003      	beq.n	800f3c0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800f3b8:	f06f 0301 	mvn.w	r3, #1
 800f3bc:	61fb      	str	r3, [r7, #28]
 800f3be:	e012      	b.n	800f3e6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800f3c0:	f06f 0302 	mvn.w	r3, #2
 800f3c4:	61fb      	str	r3, [r7, #28]
 800f3c6:	e00e      	b.n	800f3e6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	4013      	ands	r3, r2
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d109      	bne.n	800f3e6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d003      	beq.n	800f3e0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800f3d8:	f06f 0301 	mvn.w	r3, #1
 800f3dc:	61fb      	str	r3, [r7, #28]
 800f3de:	e002      	b.n	800f3e6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800f3e0:	f06f 0302 	mvn.w	r3, #2
 800f3e4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800f3e6:	69fb      	ldr	r3, [r7, #28]
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3728      	adds	r7, #40	; 0x28
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b08a      	sub	sp, #40	; 0x28
 800f3f4:	af02      	add	r7, sp, #8
 800f3f6:	60f8      	str	r0, [r7, #12]
 800f3f8:	60b9      	str	r1, [r7, #8]
 800f3fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f400:	f3ef 8305 	mrs	r3, IPSR
 800f404:	613b      	str	r3, [r7, #16]
  return(result);
 800f406:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d175      	bne.n	800f4f8 <osSemaphoreNew+0x108>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d072      	beq.n	800f4f8 <osSemaphoreNew+0x108>
 800f412:	68ba      	ldr	r2, [r7, #8]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	429a      	cmp	r2, r3
 800f418:	d86e      	bhi.n	800f4f8 <osSemaphoreNew+0x108>
    mem = -1;
 800f41a:	f04f 33ff 	mov.w	r3, #4294967295
 800f41e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d015      	beq.n	800f452 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	689b      	ldr	r3, [r3, #8]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d006      	beq.n	800f43c <osSemaphoreNew+0x4c>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	2b4f      	cmp	r3, #79	; 0x4f
 800f434:	d902      	bls.n	800f43c <osSemaphoreNew+0x4c>
        mem = 1;
 800f436:	2301      	movs	r3, #1
 800f438:	61bb      	str	r3, [r7, #24]
 800f43a:	e00c      	b.n	800f456 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	689b      	ldr	r3, [r3, #8]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d108      	bne.n	800f456 <osSemaphoreNew+0x66>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	68db      	ldr	r3, [r3, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d104      	bne.n	800f456 <osSemaphoreNew+0x66>
          mem = 0;
 800f44c:	2300      	movs	r3, #0
 800f44e:	61bb      	str	r3, [r7, #24]
 800f450:	e001      	b.n	800f456 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f45c:	d04c      	beq.n	800f4f8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d128      	bne.n	800f4b6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d10a      	bne.n	800f480 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	689b      	ldr	r3, [r3, #8]
 800f46e:	2203      	movs	r2, #3
 800f470:	9200      	str	r2, [sp, #0]
 800f472:	2200      	movs	r2, #0
 800f474:	2100      	movs	r1, #0
 800f476:	2001      	movs	r0, #1
 800f478:	f000 fc3c 	bl	800fcf4 <xQueueGenericCreateStatic>
 800f47c:	61f8      	str	r0, [r7, #28]
 800f47e:	e005      	b.n	800f48c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f480:	2203      	movs	r2, #3
 800f482:	2100      	movs	r1, #0
 800f484:	2001      	movs	r0, #1
 800f486:	f000 fcad 	bl	800fde4 <xQueueGenericCreate>
 800f48a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d022      	beq.n	800f4d8 <osSemaphoreNew+0xe8>
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d01f      	beq.n	800f4d8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f498:	2300      	movs	r3, #0
 800f49a:	2200      	movs	r2, #0
 800f49c:	2100      	movs	r1, #0
 800f49e:	69f8      	ldr	r0, [r7, #28]
 800f4a0:	f000 fd68 	bl	800ff74 <xQueueGenericSend>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d016      	beq.n	800f4d8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f4aa:	69f8      	ldr	r0, [r7, #28]
 800f4ac:	f001 f9f4 	bl	8010898 <vQueueDelete>
            hSemaphore = NULL;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	61fb      	str	r3, [r7, #28]
 800f4b4:	e010      	b.n	800f4d8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d108      	bne.n	800f4ce <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	68b9      	ldr	r1, [r7, #8]
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f000 fcea 	bl	800fe9e <xQueueCreateCountingSemaphoreStatic>
 800f4ca:	61f8      	str	r0, [r7, #28]
 800f4cc:	e004      	b.n	800f4d8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	68f8      	ldr	r0, [r7, #12]
 800f4d2:	f000 fd1b 	bl	800ff0c <xQueueCreateCountingSemaphore>
 800f4d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f4d8:	69fb      	ldr	r3, [r7, #28]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00c      	beq.n	800f4f8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <osSemaphoreNew+0xfc>
          name = attr->name;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	617b      	str	r3, [r7, #20]
 800f4ea:	e001      	b.n	800f4f0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f4f0:	6979      	ldr	r1, [r7, #20]
 800f4f2:	69f8      	ldr	r0, [r7, #28]
 800f4f4:	f001 fb1c 	bl	8010b30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f4f8:	69fb      	ldr	r3, [r7, #28]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f504:	b580      	push	{r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f512:	2300      	movs	r3, #0
 800f514:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d103      	bne.n	800f524 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f51c:	f06f 0303 	mvn.w	r3, #3
 800f520:	617b      	str	r3, [r7, #20]
 800f522:	e039      	b.n	800f598 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f524:	f3ef 8305 	mrs	r3, IPSR
 800f528:	60fb      	str	r3, [r7, #12]
  return(result);
 800f52a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d022      	beq.n	800f576 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d003      	beq.n	800f53e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f536:	f06f 0303 	mvn.w	r3, #3
 800f53a:	617b      	str	r3, [r7, #20]
 800f53c:	e02c      	b.n	800f598 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f53e:	2300      	movs	r3, #0
 800f540:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f542:	f107 0308 	add.w	r3, r7, #8
 800f546:	461a      	mov	r2, r3
 800f548:	2100      	movs	r1, #0
 800f54a:	6938      	ldr	r0, [r7, #16]
 800f54c:	f001 f924 	bl	8010798 <xQueueReceiveFromISR>
 800f550:	4603      	mov	r3, r0
 800f552:	2b01      	cmp	r3, #1
 800f554:	d003      	beq.n	800f55e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f556:	f06f 0302 	mvn.w	r3, #2
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	e01c      	b.n	800f598 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d019      	beq.n	800f598 <osSemaphoreAcquire+0x94>
 800f564:	4b0f      	ldr	r3, [pc, #60]	; (800f5a4 <osSemaphoreAcquire+0xa0>)
 800f566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f56a:	601a      	str	r2, [r3, #0]
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	e010      	b.n	800f598 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f576:	6839      	ldr	r1, [r7, #0]
 800f578:	6938      	ldr	r0, [r7, #16]
 800f57a:	f001 f801 	bl	8010580 <xQueueSemaphoreTake>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b01      	cmp	r3, #1
 800f582:	d009      	beq.n	800f598 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d003      	beq.n	800f592 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f58a:	f06f 0301 	mvn.w	r3, #1
 800f58e:	617b      	str	r3, [r7, #20]
 800f590:	e002      	b.n	800f598 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f592:	f06f 0302 	mvn.w	r3, #2
 800f596:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f598:	697b      	ldr	r3, [r7, #20]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3718      	adds	r7, #24
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
 800f5a2:	bf00      	nop
 800f5a4:	e000ed04 	.word	0xe000ed04

0800f5a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b086      	sub	sp, #24
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d103      	bne.n	800f5c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f5be:	f06f 0303 	mvn.w	r3, #3
 800f5c2:	617b      	str	r3, [r7, #20]
 800f5c4:	e02c      	b.n	800f620 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5c6:	f3ef 8305 	mrs	r3, IPSR
 800f5ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d01a      	beq.n	800f608 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f5d6:	f107 0308 	add.w	r3, r7, #8
 800f5da:	4619      	mov	r1, r3
 800f5dc:	6938      	ldr	r0, [r7, #16]
 800f5de:	f000 fe62 	bl	80102a6 <xQueueGiveFromISR>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d003      	beq.n	800f5f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f5e8:	f06f 0302 	mvn.w	r3, #2
 800f5ec:	617b      	str	r3, [r7, #20]
 800f5ee:	e017      	b.n	800f620 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d014      	beq.n	800f620 <osSemaphoreRelease+0x78>
 800f5f6:	4b0d      	ldr	r3, [pc, #52]	; (800f62c <osSemaphoreRelease+0x84>)
 800f5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5fc:	601a      	str	r2, [r3, #0]
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	e00b      	b.n	800f620 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f608:	2300      	movs	r3, #0
 800f60a:	2200      	movs	r2, #0
 800f60c:	2100      	movs	r1, #0
 800f60e:	6938      	ldr	r0, [r7, #16]
 800f610:	f000 fcb0 	bl	800ff74 <xQueueGenericSend>
 800f614:	4603      	mov	r3, r0
 800f616:	2b01      	cmp	r3, #1
 800f618:	d002      	beq.n	800f620 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f61a:	f06f 0302 	mvn.w	r3, #2
 800f61e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f620:	697b      	ldr	r3, [r7, #20]
}
 800f622:	4618      	mov	r0, r3
 800f624:	3718      	adds	r7, #24
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	e000ed04 	.word	0xe000ed04

0800f630 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f63c:	f3ef 8305 	mrs	r3, IPSR
 800f640:	60fb      	str	r3, [r7, #12]
  return(result);
 800f642:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f644:	2b00      	cmp	r3, #0
 800f646:	d003      	beq.n	800f650 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f648:	f06f 0305 	mvn.w	r3, #5
 800f64c:	617b      	str	r3, [r7, #20]
 800f64e:	e00e      	b.n	800f66e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d103      	bne.n	800f65e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f656:	f06f 0303 	mvn.w	r3, #3
 800f65a:	617b      	str	r3, [r7, #20]
 800f65c:	e007      	b.n	800f66e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f65e:	6938      	ldr	r0, [r7, #16]
 800f660:	f001 fa90 	bl	8010b84 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f664:	2300      	movs	r3, #0
 800f666:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f668:	6938      	ldr	r0, [r7, #16]
 800f66a:	f001 f915 	bl	8010898 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f66e:	697b      	ldr	r3, [r7, #20]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3718      	adds	r7, #24
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f678:	b480      	push	{r7}
 800f67a:	b085      	sub	sp, #20
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	4a07      	ldr	r2, [pc, #28]	; (800f6a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800f688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	4a06      	ldr	r2, [pc, #24]	; (800f6a8 <vApplicationGetIdleTaskMemory+0x30>)
 800f68e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2280      	movs	r2, #128	; 0x80
 800f694:	601a      	str	r2, [r3, #0]
}
 800f696:	bf00      	nop
 800f698:	3714      	adds	r7, #20
 800f69a:	46bd      	mov	sp, r7
 800f69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a0:	4770      	bx	lr
 800f6a2:	bf00      	nop
 800f6a4:	200008ec 	.word	0x200008ec
 800f6a8:	200009a8 	.word	0x200009a8

0800f6ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	4a07      	ldr	r2, [pc, #28]	; (800f6d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800f6bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	4a06      	ldr	r2, [pc, #24]	; (800f6dc <vApplicationGetTimerTaskMemory+0x30>)
 800f6c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6ca:	601a      	str	r2, [r3, #0]
}
 800f6cc:	bf00      	nop
 800f6ce:	3714      	adds	r7, #20
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	20000ba8 	.word	0x20000ba8
 800f6dc:	20000c64 	.word	0x20000c64

0800f6e0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10a      	bne.n	800f704 <xEventGroupCreateStatic+0x24>
	__asm volatile
 800f6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f2:	f383 8811 	msr	BASEPRI, r3
 800f6f6:	f3bf 8f6f 	isb	sy
 800f6fa:	f3bf 8f4f 	dsb	sy
 800f6fe:	613b      	str	r3, [r7, #16]
}
 800f700:	bf00      	nop
 800f702:	e7fe      	b.n	800f702 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800f704:	2320      	movs	r3, #32
 800f706:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	2b20      	cmp	r3, #32
 800f70c:	d00a      	beq.n	800f724 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800f70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f712:	f383 8811 	msr	BASEPRI, r3
 800f716:	f3bf 8f6f 	isb	sy
 800f71a:	f3bf 8f4f 	dsb	sy
 800f71e:	60fb      	str	r3, [r7, #12]
}
 800f720:	bf00      	nop
 800f722:	e7fe      	b.n	800f722 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00a      	beq.n	800f744 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	2200      	movs	r2, #0
 800f732:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	3304      	adds	r3, #4
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 f9bf 	bl	800fabc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	2201      	movs	r2, #1
 800f742:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800f744:	697b      	ldr	r3, [r7, #20]
	}
 800f746:	4618      	mov	r0, r3
 800f748:	3718      	adds	r7, #24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800f754:	2020      	movs	r0, #32
 800f756:	f003 f9c7 	bl	8012ae8 <pvPortMalloc>
 800f75a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d00a      	beq.n	800f778 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	3304      	adds	r3, #4
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 f9a5 	bl	800fabc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2200      	movs	r2, #0
 800f776:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800f778:	687b      	ldr	r3, [r7, #4]
	}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3708      	adds	r7, #8
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
	...

0800f784 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b090      	sub	sp, #64	; 0x40
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800f796:	2300      	movs	r3, #0
 800f798:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800f79a:	2300      	movs	r3, #0
 800f79c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10a      	bne.n	800f7ba <xEventGroupWaitBits+0x36>
	__asm volatile
 800f7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a8:	f383 8811 	msr	BASEPRI, r3
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	623b      	str	r3, [r7, #32]
}
 800f7b6:	bf00      	nop
 800f7b8:	e7fe      	b.n	800f7b8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d00a      	beq.n	800f7da <xEventGroupWaitBits+0x56>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	61fb      	str	r3, [r7, #28]
}
 800f7d6:	bf00      	nop
 800f7d8:	e7fe      	b.n	800f7d8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d10a      	bne.n	800f7f6 <xEventGroupWaitBits+0x72>
	__asm volatile
 800f7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e4:	f383 8811 	msr	BASEPRI, r3
 800f7e8:	f3bf 8f6f 	isb	sy
 800f7ec:	f3bf 8f4f 	dsb	sy
 800f7f0:	61bb      	str	r3, [r7, #24]
}
 800f7f2:	bf00      	nop
 800f7f4:	e7fe      	b.n	800f7f4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f7f6:	f002 f909 	bl	8011a0c <xTaskGetSchedulerState>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d102      	bne.n	800f806 <xEventGroupWaitBits+0x82>
 800f800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f802:	2b00      	cmp	r3, #0
 800f804:	d101      	bne.n	800f80a <xEventGroupWaitBits+0x86>
 800f806:	2301      	movs	r3, #1
 800f808:	e000      	b.n	800f80c <xEventGroupWaitBits+0x88>
 800f80a:	2300      	movs	r3, #0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d10a      	bne.n	800f826 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	617b      	str	r3, [r7, #20]
}
 800f822:	bf00      	nop
 800f824:	e7fe      	b.n	800f824 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800f826:	f001 fc67 	bl	80110f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800f82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800f830:	683a      	ldr	r2, [r7, #0]
 800f832:	68b9      	ldr	r1, [r7, #8]
 800f834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f836:	f000 f90b 	bl	800fa50 <prvTestWaitCondition>
 800f83a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800f83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00e      	beq.n	800f860 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f844:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800f846:	2300      	movs	r3, #0
 800f848:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d028      	beq.n	800f8a2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	43db      	mvns	r3, r3
 800f858:	401a      	ands	r2, r3
 800f85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f85c:	601a      	str	r2, [r3, #0]
 800f85e:	e020      	b.n	800f8a2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800f860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f862:	2b00      	cmp	r3, #0
 800f864:	d104      	bne.n	800f870 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800f866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f868:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800f86a:	2301      	movs	r3, #1
 800f86c:	633b      	str	r3, [r7, #48]	; 0x30
 800f86e:	e018      	b.n	800f8a2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d003      	beq.n	800f87e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f87c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d003      	beq.n	800f88c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f88a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800f88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88e:	1d18      	adds	r0, r3, #4
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f894:	4313      	orrs	r3, r2
 800f896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f898:	4619      	mov	r1, r3
 800f89a:	f001 fe2b 	bl	80114f4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800f89e:	2300      	movs	r3, #0
 800f8a0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800f8a2:	f001 fc37 	bl	8011114 <xTaskResumeAll>
 800f8a6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800f8a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d031      	beq.n	800f912 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800f8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d107      	bne.n	800f8c4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800f8b4:	4b19      	ldr	r3, [pc, #100]	; (800f91c <xEventGroupWaitBits+0x198>)
 800f8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ba:	601a      	str	r2, [r3, #0]
 800f8bc:	f3bf 8f4f 	dsb	sy
 800f8c0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800f8c4:	f002 fa18 	bl	8011cf8 <uxTaskResetEventItemValue>
 800f8c8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800f8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d11a      	bne.n	800f90a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800f8d4:	f002 ffe6 	bl	80128a4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800f8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800f8de:	683a      	ldr	r2, [r7, #0]
 800f8e0:	68b9      	ldr	r1, [r7, #8]
 800f8e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f8e4:	f000 f8b4 	bl	800fa50 <prvTestWaitCondition>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d009      	beq.n	800f902 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d006      	beq.n	800f902 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	43db      	mvns	r3, r3
 800f8fc:	401a      	ands	r2, r3
 800f8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f900:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800f902:	2301      	movs	r3, #1
 800f904:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800f906:	f002 fffd 	bl	8012904 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f910:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800f912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f914:	4618      	mov	r0, r3
 800f916:	3740      	adds	r7, #64	; 0x40
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	e000ed04 	.word	0xe000ed04

0800f920 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b08e      	sub	sp, #56	; 0x38
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800f92a:	2300      	movs	r3, #0
 800f92c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800f932:	2300      	movs	r3, #0
 800f934:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d10a      	bne.n	800f952 <xEventGroupSetBits+0x32>
	__asm volatile
 800f93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f940:	f383 8811 	msr	BASEPRI, r3
 800f944:	f3bf 8f6f 	isb	sy
 800f948:	f3bf 8f4f 	dsb	sy
 800f94c:	613b      	str	r3, [r7, #16]
}
 800f94e:	bf00      	nop
 800f950:	e7fe      	b.n	800f950 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00a      	beq.n	800f972 <xEventGroupSetBits+0x52>
	__asm volatile
 800f95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f960:	f383 8811 	msr	BASEPRI, r3
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	60fb      	str	r3, [r7, #12]
}
 800f96e:	bf00      	nop
 800f970:	e7fe      	b.n	800f970 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800f972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f974:	3304      	adds	r3, #4
 800f976:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	3308      	adds	r3, #8
 800f97c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800f97e:	f001 fbbb 	bl	80110f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800f988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98a:	681a      	ldr	r2, [r3, #0]
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	431a      	orrs	r2, r3
 800f990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f992:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800f994:	e03c      	b.n	800fa10 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800f996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800f99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f9ac:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f9b4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d108      	bne.n	800f9d2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800f9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	4013      	ands	r3, r2
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00b      	beq.n	800f9e4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9d0:	e008      	b.n	800f9e4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	4013      	ands	r3, r2
 800f9da:	69ba      	ldr	r2, [r7, #24]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	d101      	bne.n	800f9e4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d010      	beq.n	800fa0c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d003      	beq.n	800f9fc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9f6:	69bb      	ldr	r3, [r7, #24]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fa04:	4619      	mov	r1, r3
 800fa06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa08:	f001 fe40 	bl	801168c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800fa10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa12:	6a3b      	ldr	r3, [r7, #32]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d1be      	bne.n	800f996 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800fa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1e:	43db      	mvns	r3, r3
 800fa20:	401a      	ands	r2, r3
 800fa22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa24:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800fa26:	f001 fb75 	bl	8011114 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800fa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2c:	681b      	ldr	r3, [r3, #0]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3738      	adds	r7, #56	; 0x38
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b082      	sub	sp, #8
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
 800fa3e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7ff ff6c 	bl	800f920 <xEventGroupSetBits>
}
 800fa48:	bf00      	nop
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800fa50:	b480      	push	{r7}
 800fa52:	b087      	sub	sp, #28
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d107      	bne.n	800fa76 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	4013      	ands	r3, r2
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00a      	beq.n	800fa86 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800fa70:	2301      	movs	r3, #1
 800fa72:	617b      	str	r3, [r7, #20]
 800fa74:	e007      	b.n	800fa86 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800fa76:	68fa      	ldr	r2, [r7, #12]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	4013      	ands	r3, r2
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d101      	bne.n	800fa86 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800fa82:	2301      	movs	r3, #1
 800fa84:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800fa86:	697b      	ldr	r3, [r7, #20]
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	371c      	adds	r7, #28
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa92:	4770      	bx	lr

0800fa94 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68ba      	ldr	r2, [r7, #8]
 800faa4:	68f9      	ldr	r1, [r7, #12]
 800faa6:	4804      	ldr	r0, [pc, #16]	; (800fab8 <xEventGroupSetBitsFromISR+0x24>)
 800faa8:	f002 fdae 	bl	8012608 <xTimerPendFunctionCallFromISR>
 800faac:	6178      	str	r0, [r7, #20]

		return xReturn;
 800faae:	697b      	ldr	r3, [r7, #20]
	}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3718      	adds	r7, #24
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	0800fa37 	.word	0x0800fa37

0800fabc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f103 0208 	add.w	r2, r3, #8
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f04f 32ff 	mov.w	r2, #4294967295
 800fad4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f103 0208 	add.w	r2, r3, #8
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f103 0208 	add.w	r2, r3, #8
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800faf0:	bf00      	nop
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb0a:	bf00      	nop
 800fb0c:	370c      	adds	r7, #12
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr

0800fb16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb16:	b480      	push	{r7}
 800fb18:	b085      	sub	sp, #20
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
 800fb1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	689a      	ldr	r2, [r3, #8]
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	683a      	ldr	r2, [r7, #0]
 800fb3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	683a      	ldr	r2, [r7, #0]
 800fb40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	601a      	str	r2, [r3, #0]
}
 800fb52:	bf00      	nop
 800fb54:	3714      	adds	r7, #20
 800fb56:	46bd      	mov	sp, r7
 800fb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5c:	4770      	bx	lr

0800fb5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb5e:	b480      	push	{r7}
 800fb60:	b085      	sub	sp, #20
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
 800fb66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb74:	d103      	bne.n	800fb7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	60fb      	str	r3, [r7, #12]
 800fb7c:	e00c      	b.n	800fb98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	3308      	adds	r3, #8
 800fb82:	60fb      	str	r3, [r7, #12]
 800fb84:	e002      	b.n	800fb8c <vListInsert+0x2e>
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	60fb      	str	r3, [r7, #12]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	685b      	ldr	r3, [r3, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d2f6      	bcs.n	800fb86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	685a      	ldr	r2, [r3, #4]
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	683a      	ldr	r2, [r7, #0]
 800fba6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	68fa      	ldr	r2, [r7, #12]
 800fbac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	683a      	ldr	r2, [r7, #0]
 800fbb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	601a      	str	r2, [r3, #0]
}
 800fbc4:	bf00      	nop
 800fbc6:	3714      	adds	r7, #20
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	691b      	ldr	r3, [r3, #16]
 800fbdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	6892      	ldr	r2, [r2, #8]
 800fbe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	689b      	ldr	r3, [r3, #8]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	6852      	ldr	r2, [r2, #4]
 800fbf0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d103      	bne.n	800fc04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	689a      	ldr	r2, [r3, #8]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	1e5a      	subs	r2, r3, #1
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d10a      	bne.n	800fc4e <xQueueGenericReset+0x2a>
	__asm volatile
 800fc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3c:	f383 8811 	msr	BASEPRI, r3
 800fc40:	f3bf 8f6f 	isb	sy
 800fc44:	f3bf 8f4f 	dsb	sy
 800fc48:	60bb      	str	r3, [r7, #8]
}
 800fc4a:	bf00      	nop
 800fc4c:	e7fe      	b.n	800fc4c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fc4e:	f002 fe29 	bl	80128a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc5a:	68f9      	ldr	r1, [r7, #12]
 800fc5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc5e:	fb01 f303 	mul.w	r3, r1, r3
 800fc62:	441a      	add	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	68f9      	ldr	r1, [r7, #12]
 800fc82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc84:	fb01 f303 	mul.w	r3, r1, r3
 800fc88:	441a      	add	r2, r3
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	22ff      	movs	r2, #255	; 0xff
 800fc92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	22ff      	movs	r2, #255	; 0xff
 800fc9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d114      	bne.n	800fcce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	691b      	ldr	r3, [r3, #16]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d01a      	beq.n	800fce2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	3310      	adds	r3, #16
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f001 fc87 	bl	80115c4 <xTaskRemoveFromEventList>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d012      	beq.n	800fce2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fcbc:	4b0c      	ldr	r3, [pc, #48]	; (800fcf0 <xQueueGenericReset+0xcc>)
 800fcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc2:	601a      	str	r2, [r3, #0]
 800fcc4:	f3bf 8f4f 	dsb	sy
 800fcc8:	f3bf 8f6f 	isb	sy
 800fccc:	e009      	b.n	800fce2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3310      	adds	r3, #16
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fef2 	bl	800fabc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	3324      	adds	r3, #36	; 0x24
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff feed 	bl	800fabc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fce2:	f002 fe0f 	bl	8012904 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fce6:	2301      	movs	r3, #1
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3710      	adds	r7, #16
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	e000ed04 	.word	0xe000ed04

0800fcf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b08e      	sub	sp, #56	; 0x38
 800fcf8:	af02      	add	r7, sp, #8
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	607a      	str	r2, [r7, #4]
 800fd00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10a      	bne.n	800fd1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd1a:	bf00      	nop
 800fd1c:	e7fe      	b.n	800fd1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d10a      	bne.n	800fd3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fd24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd28:	f383 8811 	msr	BASEPRI, r3
 800fd2c:	f3bf 8f6f 	isb	sy
 800fd30:	f3bf 8f4f 	dsb	sy
 800fd34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd36:	bf00      	nop
 800fd38:	e7fe      	b.n	800fd38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <xQueueGenericCreateStatic+0x52>
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <xQueueGenericCreateStatic+0x56>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e000      	b.n	800fd4c <xQueueGenericCreateStatic+0x58>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10a      	bne.n	800fd66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	623b      	str	r3, [r7, #32]
}
 800fd62:	bf00      	nop
 800fd64:	e7fe      	b.n	800fd64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d102      	bne.n	800fd72 <xQueueGenericCreateStatic+0x7e>
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <xQueueGenericCreateStatic+0x82>
 800fd72:	2301      	movs	r3, #1
 800fd74:	e000      	b.n	800fd78 <xQueueGenericCreateStatic+0x84>
 800fd76:	2300      	movs	r3, #0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d10a      	bne.n	800fd92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd80:	f383 8811 	msr	BASEPRI, r3
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	61fb      	str	r3, [r7, #28]
}
 800fd8e:	bf00      	nop
 800fd90:	e7fe      	b.n	800fd90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fd92:	2350      	movs	r3, #80	; 0x50
 800fd94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b50      	cmp	r3, #80	; 0x50
 800fd9a:	d00a      	beq.n	800fdb2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda0:	f383 8811 	msr	BASEPRI, r3
 800fda4:	f3bf 8f6f 	isb	sy
 800fda8:	f3bf 8f4f 	dsb	sy
 800fdac:	61bb      	str	r3, [r7, #24]
}
 800fdae:	bf00      	nop
 800fdb0:	e7fe      	b.n	800fdb0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fdb2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00d      	beq.n	800fdda <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fdc6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	4613      	mov	r3, r2
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	68b9      	ldr	r1, [r7, #8]
 800fdd4:	68f8      	ldr	r0, [r7, #12]
 800fdd6:	f000 f83f 	bl	800fe58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3730      	adds	r7, #48	; 0x30
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08a      	sub	sp, #40	; 0x28
 800fde8:	af02      	add	r7, sp, #8
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	4613      	mov	r3, r2
 800fdf0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d10a      	bne.n	800fe0e <xQueueGenericCreate+0x2a>
	__asm volatile
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	f383 8811 	msr	BASEPRI, r3
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	613b      	str	r3, [r7, #16]
}
 800fe0a:	bf00      	nop
 800fe0c:	e7fe      	b.n	800fe0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	fb02 f303 	mul.w	r3, r2, r3
 800fe16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	3350      	adds	r3, #80	; 0x50
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f002 fe63 	bl	8012ae8 <pvPortMalloc>
 800fe22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d011      	beq.n	800fe4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	3350      	adds	r3, #80	; 0x50
 800fe32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	2200      	movs	r2, #0
 800fe38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe3c:	79fa      	ldrb	r2, [r7, #7]
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	4613      	mov	r3, r2
 800fe44:	697a      	ldr	r2, [r7, #20]
 800fe46:	68b9      	ldr	r1, [r7, #8]
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f000 f805 	bl	800fe58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe4e:	69bb      	ldr	r3, [r7, #24]
	}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3720      	adds	r7, #32
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
 800fe64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d103      	bne.n	800fe74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	69ba      	ldr	r2, [r7, #24]
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	e002      	b.n	800fe7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	68ba      	ldr	r2, [r7, #8]
 800fe84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fe86:	2101      	movs	r1, #1
 800fe88:	69b8      	ldr	r0, [r7, #24]
 800fe8a:	f7ff fecb 	bl	800fc24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	78fa      	ldrb	r2, [r7, #3]
 800fe92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fe96:	bf00      	nop
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b08a      	sub	sp, #40	; 0x28
 800fea2:	af02      	add	r7, sp, #8
 800fea4:	60f8      	str	r0, [r7, #12]
 800fea6:	60b9      	str	r1, [r7, #8]
 800fea8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d10a      	bne.n	800fec6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800feb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb4:	f383 8811 	msr	BASEPRI, r3
 800feb8:	f3bf 8f6f 	isb	sy
 800febc:	f3bf 8f4f 	dsb	sy
 800fec0:	61bb      	str	r3, [r7, #24]
}
 800fec2:	bf00      	nop
 800fec4:	e7fe      	b.n	800fec4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fec6:	68ba      	ldr	r2, [r7, #8]
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d90a      	bls.n	800fee4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed2:	f383 8811 	msr	BASEPRI, r3
 800fed6:	f3bf 8f6f 	isb	sy
 800feda:	f3bf 8f4f 	dsb	sy
 800fede:	617b      	str	r3, [r7, #20]
}
 800fee0:	bf00      	nop
 800fee2:	e7fe      	b.n	800fee2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fee4:	2302      	movs	r3, #2
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	2100      	movs	r1, #0
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f7ff ff00 	bl	800fcf4 <xQueueGenericCreateStatic>
 800fef4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fef6:	69fb      	ldr	r3, [r7, #28]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fefc:	69fb      	ldr	r3, [r7, #28]
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ff02:	69fb      	ldr	r3, [r7, #28]
	}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3720      	adds	r7, #32
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d10a      	bne.n	800ff32 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ff1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	613b      	str	r3, [r7, #16]
}
 800ff2e:	bf00      	nop
 800ff30:	e7fe      	b.n	800ff30 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ff32:	683a      	ldr	r2, [r7, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d90a      	bls.n	800ff50 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ff3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3e:	f383 8811 	msr	BASEPRI, r3
 800ff42:	f3bf 8f6f 	isb	sy
 800ff46:	f3bf 8f4f 	dsb	sy
 800ff4a:	60fb      	str	r3, [r7, #12]
}
 800ff4c:	bf00      	nop
 800ff4e:	e7fe      	b.n	800ff4e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ff50:	2202      	movs	r2, #2
 800ff52:	2100      	movs	r1, #0
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f7ff ff45 	bl	800fde4 <xQueueGenericCreate>
 800ff5a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d002      	beq.n	800ff68 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	683a      	ldr	r2, [r7, #0]
 800ff66:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ff68:	697b      	ldr	r3, [r7, #20]
	}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3718      	adds	r7, #24
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
	...

0800ff74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b08e      	sub	sp, #56	; 0x38
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
 800ff80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ff82:	2300      	movs	r3, #0
 800ff84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ff8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10a      	bne.n	800ffa6 <xQueueGenericSend+0x32>
	__asm volatile
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ffa2:	bf00      	nop
 800ffa4:	e7fe      	b.n	800ffa4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d103      	bne.n	800ffb4 <xQueueGenericSend+0x40>
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d101      	bne.n	800ffb8 <xQueueGenericSend+0x44>
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	e000      	b.n	800ffba <xQueueGenericSend+0x46>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d10a      	bne.n	800ffd4 <xQueueGenericSend+0x60>
	__asm volatile
 800ffbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc2:	f383 8811 	msr	BASEPRI, r3
 800ffc6:	f3bf 8f6f 	isb	sy
 800ffca:	f3bf 8f4f 	dsb	sy
 800ffce:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ffd0:	bf00      	nop
 800ffd2:	e7fe      	b.n	800ffd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	2b02      	cmp	r3, #2
 800ffd8:	d103      	bne.n	800ffe2 <xQueueGenericSend+0x6e>
 800ffda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffde:	2b01      	cmp	r3, #1
 800ffe0:	d101      	bne.n	800ffe6 <xQueueGenericSend+0x72>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e000      	b.n	800ffe8 <xQueueGenericSend+0x74>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d10a      	bne.n	8010002 <xQueueGenericSend+0x8e>
	__asm volatile
 800ffec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff0:	f383 8811 	msr	BASEPRI, r3
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	623b      	str	r3, [r7, #32]
}
 800fffe:	bf00      	nop
 8010000:	e7fe      	b.n	8010000 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010002:	f001 fd03 	bl	8011a0c <xTaskGetSchedulerState>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d102      	bne.n	8010012 <xQueueGenericSend+0x9e>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d101      	bne.n	8010016 <xQueueGenericSend+0xa2>
 8010012:	2301      	movs	r3, #1
 8010014:	e000      	b.n	8010018 <xQueueGenericSend+0xa4>
 8010016:	2300      	movs	r3, #0
 8010018:	2b00      	cmp	r3, #0
 801001a:	d10a      	bne.n	8010032 <xQueueGenericSend+0xbe>
	__asm volatile
 801001c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010020:	f383 8811 	msr	BASEPRI, r3
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	f3bf 8f4f 	dsb	sy
 801002c:	61fb      	str	r3, [r7, #28]
}
 801002e:	bf00      	nop
 8010030:	e7fe      	b.n	8010030 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010032:	f002 fc37 	bl	80128a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801003e:	429a      	cmp	r2, r3
 8010040:	d302      	bcc.n	8010048 <xQueueGenericSend+0xd4>
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	2b02      	cmp	r3, #2
 8010046:	d129      	bne.n	801009c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010048:	683a      	ldr	r2, [r7, #0]
 801004a:	68b9      	ldr	r1, [r7, #8]
 801004c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801004e:	f000 fc5e 	bl	801090e <prvCopyDataToQueue>
 8010052:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010058:	2b00      	cmp	r3, #0
 801005a:	d010      	beq.n	801007e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801005c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801005e:	3324      	adds	r3, #36	; 0x24
 8010060:	4618      	mov	r0, r3
 8010062:	f001 faaf 	bl	80115c4 <xTaskRemoveFromEventList>
 8010066:	4603      	mov	r3, r0
 8010068:	2b00      	cmp	r3, #0
 801006a:	d013      	beq.n	8010094 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801006c:	4b3f      	ldr	r3, [pc, #252]	; (801016c <xQueueGenericSend+0x1f8>)
 801006e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010072:	601a      	str	r2, [r3, #0]
 8010074:	f3bf 8f4f 	dsb	sy
 8010078:	f3bf 8f6f 	isb	sy
 801007c:	e00a      	b.n	8010094 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801007e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010080:	2b00      	cmp	r3, #0
 8010082:	d007      	beq.n	8010094 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010084:	4b39      	ldr	r3, [pc, #228]	; (801016c <xQueueGenericSend+0x1f8>)
 8010086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801008a:	601a      	str	r2, [r3, #0]
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010094:	f002 fc36 	bl	8012904 <vPortExitCritical>
				return pdPASS;
 8010098:	2301      	movs	r3, #1
 801009a:	e063      	b.n	8010164 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d103      	bne.n	80100aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80100a2:	f002 fc2f 	bl	8012904 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80100a6:	2300      	movs	r3, #0
 80100a8:	e05c      	b.n	8010164 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d106      	bne.n	80100be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100b0:	f107 0314 	add.w	r3, r7, #20
 80100b4:	4618      	mov	r0, r3
 80100b6:	f001 fb4b 	bl	8011750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80100ba:	2301      	movs	r3, #1
 80100bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80100be:	f002 fc21 	bl	8012904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80100c2:	f001 f819 	bl	80110f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100c6:	f002 fbed 	bl	80128a4 <vPortEnterCritical>
 80100ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100d0:	b25b      	sxtb	r3, r3
 80100d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d6:	d103      	bne.n	80100e0 <xQueueGenericSend+0x16c>
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	2200      	movs	r2, #0
 80100dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100e6:	b25b      	sxtb	r3, r3
 80100e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ec:	d103      	bne.n	80100f6 <xQueueGenericSend+0x182>
 80100ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f0:	2200      	movs	r2, #0
 80100f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100f6:	f002 fc05 	bl	8012904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100fa:	1d3a      	adds	r2, r7, #4
 80100fc:	f107 0314 	add.w	r3, r7, #20
 8010100:	4611      	mov	r1, r2
 8010102:	4618      	mov	r0, r3
 8010104:	f001 fb3a 	bl	801177c <xTaskCheckForTimeOut>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d124      	bne.n	8010158 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801010e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010110:	f000 fcf5 	bl	8010afe <prvIsQueueFull>
 8010114:	4603      	mov	r3, r0
 8010116:	2b00      	cmp	r3, #0
 8010118:	d018      	beq.n	801014c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801011a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011c:	3310      	adds	r3, #16
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	4611      	mov	r1, r2
 8010122:	4618      	mov	r0, r3
 8010124:	f001 f9c2 	bl	80114ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801012a:	f000 fc80 	bl	8010a2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801012e:	f000 fff1 	bl	8011114 <xTaskResumeAll>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	f47f af7c 	bne.w	8010032 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801013a:	4b0c      	ldr	r3, [pc, #48]	; (801016c <xQueueGenericSend+0x1f8>)
 801013c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010140:	601a      	str	r2, [r3, #0]
 8010142:	f3bf 8f4f 	dsb	sy
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	e772      	b.n	8010032 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801014c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801014e:	f000 fc6e 	bl	8010a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010152:	f000 ffdf 	bl	8011114 <xTaskResumeAll>
 8010156:	e76c      	b.n	8010032 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801015a:	f000 fc68 	bl	8010a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801015e:	f000 ffd9 	bl	8011114 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010162:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010164:	4618      	mov	r0, r3
 8010166:	3738      	adds	r7, #56	; 0x38
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	e000ed04 	.word	0xe000ed04

08010170 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b090      	sub	sp, #64	; 0x40
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
 801017c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10a      	bne.n	801019e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018c:	f383 8811 	msr	BASEPRI, r3
 8010190:	f3bf 8f6f 	isb	sy
 8010194:	f3bf 8f4f 	dsb	sy
 8010198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801019a:	bf00      	nop
 801019c:	e7fe      	b.n	801019c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d103      	bne.n	80101ac <xQueueGenericSendFromISR+0x3c>
 80101a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d101      	bne.n	80101b0 <xQueueGenericSendFromISR+0x40>
 80101ac:	2301      	movs	r3, #1
 80101ae:	e000      	b.n	80101b2 <xQueueGenericSendFromISR+0x42>
 80101b0:	2300      	movs	r3, #0
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d10a      	bne.n	80101cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80101b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ba:	f383 8811 	msr	BASEPRI, r3
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	f3bf 8f4f 	dsb	sy
 80101c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80101c8:	bf00      	nop
 80101ca:	e7fe      	b.n	80101ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	2b02      	cmp	r3, #2
 80101d0:	d103      	bne.n	80101da <xQueueGenericSendFromISR+0x6a>
 80101d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d101      	bne.n	80101de <xQueueGenericSendFromISR+0x6e>
 80101da:	2301      	movs	r3, #1
 80101dc:	e000      	b.n	80101e0 <xQueueGenericSendFromISR+0x70>
 80101de:	2300      	movs	r3, #0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10a      	bne.n	80101fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	623b      	str	r3, [r7, #32]
}
 80101f6:	bf00      	nop
 80101f8:	e7fe      	b.n	80101f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101fa:	f002 fc35 	bl	8012a68 <vPortValidateInterruptPriority>
	__asm volatile
 80101fe:	f3ef 8211 	mrs	r2, BASEPRI
 8010202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	61fa      	str	r2, [r7, #28]
 8010214:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8010216:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010218:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801021e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010222:	429a      	cmp	r2, r3
 8010224:	d302      	bcc.n	801022c <xQueueGenericSendFromISR+0xbc>
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	2b02      	cmp	r3, #2
 801022a:	d12f      	bne.n	801028c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801023a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801023c:	683a      	ldr	r2, [r7, #0]
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010242:	f000 fb64 	bl	801090e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010246:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801024a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024e:	d112      	bne.n	8010276 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010254:	2b00      	cmp	r3, #0
 8010256:	d016      	beq.n	8010286 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	3324      	adds	r3, #36	; 0x24
 801025c:	4618      	mov	r0, r3
 801025e:	f001 f9b1 	bl	80115c4 <xTaskRemoveFromEventList>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d00e      	beq.n	8010286 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00b      	beq.n	8010286 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2201      	movs	r2, #1
 8010272:	601a      	str	r2, [r3, #0]
 8010274:	e007      	b.n	8010286 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010276:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801027a:	3301      	adds	r3, #1
 801027c:	b2db      	uxtb	r3, r3
 801027e:	b25a      	sxtb	r2, r3
 8010280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010286:	2301      	movs	r3, #1
 8010288:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801028a:	e001      	b.n	8010290 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801028c:	2300      	movs	r3, #0
 801028e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010292:	617b      	str	r3, [r7, #20]
	__asm volatile
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	f383 8811 	msr	BASEPRI, r3
}
 801029a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801029c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3740      	adds	r7, #64	; 0x40
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b08e      	sub	sp, #56	; 0x38
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80102b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10a      	bne.n	80102d0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80102ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	623b      	str	r3, [r7, #32]
}
 80102cc:	bf00      	nop
 80102ce:	e7fe      	b.n	80102ce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80102d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00a      	beq.n	80102ee <xQueueGiveFromISR+0x48>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	61fb      	str	r3, [r7, #28]
}
 80102ea:	bf00      	nop
 80102ec:	e7fe      	b.n	80102ec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80102ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d103      	bne.n	80102fe <xQueueGiveFromISR+0x58>
 80102f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f8:	689b      	ldr	r3, [r3, #8]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d101      	bne.n	8010302 <xQueueGiveFromISR+0x5c>
 80102fe:	2301      	movs	r3, #1
 8010300:	e000      	b.n	8010304 <xQueueGiveFromISR+0x5e>
 8010302:	2300      	movs	r3, #0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d10a      	bne.n	801031e <xQueueGiveFromISR+0x78>
	__asm volatile
 8010308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030c:	f383 8811 	msr	BASEPRI, r3
 8010310:	f3bf 8f6f 	isb	sy
 8010314:	f3bf 8f4f 	dsb	sy
 8010318:	61bb      	str	r3, [r7, #24]
}
 801031a:	bf00      	nop
 801031c:	e7fe      	b.n	801031c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801031e:	f002 fba3 	bl	8012a68 <vPortValidateInterruptPriority>
	__asm volatile
 8010322:	f3ef 8211 	mrs	r2, BASEPRI
 8010326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032a:	f383 8811 	msr	BASEPRI, r3
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	f3bf 8f4f 	dsb	sy
 8010336:	617a      	str	r2, [r7, #20]
 8010338:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801033a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801033c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010342:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801034a:	429a      	cmp	r2, r3
 801034c:	d22b      	bcs.n	80103a6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801034e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035a:	1c5a      	adds	r2, r3, #1
 801035c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010360:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010368:	d112      	bne.n	8010390 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801036a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801036c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801036e:	2b00      	cmp	r3, #0
 8010370:	d016      	beq.n	80103a0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010374:	3324      	adds	r3, #36	; 0x24
 8010376:	4618      	mov	r0, r3
 8010378:	f001 f924 	bl	80115c4 <xTaskRemoveFromEventList>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00e      	beq.n	80103a0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d00b      	beq.n	80103a0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	2201      	movs	r2, #1
 801038c:	601a      	str	r2, [r3, #0]
 801038e:	e007      	b.n	80103a0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010394:	3301      	adds	r3, #1
 8010396:	b2db      	uxtb	r3, r3
 8010398:	b25a      	sxtb	r2, r3
 801039a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80103a0:	2301      	movs	r3, #1
 80103a2:	637b      	str	r3, [r7, #52]	; 0x34
 80103a4:	e001      	b.n	80103aa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	637b      	str	r3, [r7, #52]	; 0x34
 80103aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f383 8811 	msr	BASEPRI, r3
}
 80103b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80103b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3738      	adds	r7, #56	; 0x38
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b08c      	sub	sp, #48	; 0x30
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80103cc:	2300      	movs	r3, #0
 80103ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80103d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10a      	bne.n	80103f0 <xQueueReceive+0x30>
	__asm volatile
 80103da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103de:	f383 8811 	msr	BASEPRI, r3
 80103e2:	f3bf 8f6f 	isb	sy
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	623b      	str	r3, [r7, #32]
}
 80103ec:	bf00      	nop
 80103ee:	e7fe      	b.n	80103ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d103      	bne.n	80103fe <xQueueReceive+0x3e>
 80103f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d101      	bne.n	8010402 <xQueueReceive+0x42>
 80103fe:	2301      	movs	r3, #1
 8010400:	e000      	b.n	8010404 <xQueueReceive+0x44>
 8010402:	2300      	movs	r3, #0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d10a      	bne.n	801041e <xQueueReceive+0x5e>
	__asm volatile
 8010408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801040c:	f383 8811 	msr	BASEPRI, r3
 8010410:	f3bf 8f6f 	isb	sy
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	61fb      	str	r3, [r7, #28]
}
 801041a:	bf00      	nop
 801041c:	e7fe      	b.n	801041c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801041e:	f001 faf5 	bl	8011a0c <xTaskGetSchedulerState>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d102      	bne.n	801042e <xQueueReceive+0x6e>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d101      	bne.n	8010432 <xQueueReceive+0x72>
 801042e:	2301      	movs	r3, #1
 8010430:	e000      	b.n	8010434 <xQueueReceive+0x74>
 8010432:	2300      	movs	r3, #0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d10a      	bne.n	801044e <xQueueReceive+0x8e>
	__asm volatile
 8010438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043c:	f383 8811 	msr	BASEPRI, r3
 8010440:	f3bf 8f6f 	isb	sy
 8010444:	f3bf 8f4f 	dsb	sy
 8010448:	61bb      	str	r3, [r7, #24]
}
 801044a:	bf00      	nop
 801044c:	e7fe      	b.n	801044c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801044e:	f002 fa29 	bl	80128a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010456:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045a:	2b00      	cmp	r3, #0
 801045c:	d01f      	beq.n	801049e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801045e:	68b9      	ldr	r1, [r7, #8]
 8010460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010462:	f000 fabe 	bl	80109e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010468:	1e5a      	subs	r2, r3, #1
 801046a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801046e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00f      	beq.n	8010496 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010478:	3310      	adds	r3, #16
 801047a:	4618      	mov	r0, r3
 801047c:	f001 f8a2 	bl	80115c4 <xTaskRemoveFromEventList>
 8010480:	4603      	mov	r3, r0
 8010482:	2b00      	cmp	r3, #0
 8010484:	d007      	beq.n	8010496 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010486:	4b3d      	ldr	r3, [pc, #244]	; (801057c <xQueueReceive+0x1bc>)
 8010488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	f3bf 8f4f 	dsb	sy
 8010492:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010496:	f002 fa35 	bl	8012904 <vPortExitCritical>
				return pdPASS;
 801049a:	2301      	movs	r3, #1
 801049c:	e069      	b.n	8010572 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d103      	bne.n	80104ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80104a4:	f002 fa2e 	bl	8012904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104a8:	2300      	movs	r3, #0
 80104aa:	e062      	b.n	8010572 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d106      	bne.n	80104c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104b2:	f107 0310 	add.w	r3, r7, #16
 80104b6:	4618      	mov	r0, r3
 80104b8:	f001 f94a 	bl	8011750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80104bc:	2301      	movs	r3, #1
 80104be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80104c0:	f002 fa20 	bl	8012904 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80104c4:	f000 fe18 	bl	80110f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80104c8:	f002 f9ec 	bl	80128a4 <vPortEnterCritical>
 80104cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104d2:	b25b      	sxtb	r3, r3
 80104d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d8:	d103      	bne.n	80104e2 <xQueueReceive+0x122>
 80104da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104dc:	2200      	movs	r2, #0
 80104de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104e8:	b25b      	sxtb	r3, r3
 80104ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ee:	d103      	bne.n	80104f8 <xQueueReceive+0x138>
 80104f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104f2:	2200      	movs	r2, #0
 80104f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104f8:	f002 fa04 	bl	8012904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104fc:	1d3a      	adds	r2, r7, #4
 80104fe:	f107 0310 	add.w	r3, r7, #16
 8010502:	4611      	mov	r1, r2
 8010504:	4618      	mov	r0, r3
 8010506:	f001 f939 	bl	801177c <xTaskCheckForTimeOut>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d123      	bne.n	8010558 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010512:	f000 fade 	bl	8010ad2 <prvIsQueueEmpty>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d017      	beq.n	801054c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801051c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051e:	3324      	adds	r3, #36	; 0x24
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	4611      	mov	r1, r2
 8010524:	4618      	mov	r0, r3
 8010526:	f000 ffc1 	bl	80114ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801052a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801052c:	f000 fa7f 	bl	8010a2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010530:	f000 fdf0 	bl	8011114 <xTaskResumeAll>
 8010534:	4603      	mov	r3, r0
 8010536:	2b00      	cmp	r3, #0
 8010538:	d189      	bne.n	801044e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801053a:	4b10      	ldr	r3, [pc, #64]	; (801057c <xQueueReceive+0x1bc>)
 801053c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010540:	601a      	str	r2, [r3, #0]
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	e780      	b.n	801044e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801054c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801054e:	f000 fa6e 	bl	8010a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010552:	f000 fddf 	bl	8011114 <xTaskResumeAll>
 8010556:	e77a      	b.n	801044e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801055a:	f000 fa68 	bl	8010a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801055e:	f000 fdd9 	bl	8011114 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010564:	f000 fab5 	bl	8010ad2 <prvIsQueueEmpty>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	f43f af6f 	beq.w	801044e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010570:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010572:	4618      	mov	r0, r3
 8010574:	3730      	adds	r7, #48	; 0x30
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	e000ed04 	.word	0xe000ed04

08010580 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b08e      	sub	sp, #56	; 0x38
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801058a:	2300      	movs	r3, #0
 801058c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010592:	2300      	movs	r3, #0
 8010594:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010598:	2b00      	cmp	r3, #0
 801059a:	d10a      	bne.n	80105b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801059c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a0:	f383 8811 	msr	BASEPRI, r3
 80105a4:	f3bf 8f6f 	isb	sy
 80105a8:	f3bf 8f4f 	dsb	sy
 80105ac:	623b      	str	r3, [r7, #32]
}
 80105ae:	bf00      	nop
 80105b0:	e7fe      	b.n	80105b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80105b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00a      	beq.n	80105d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80105ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105be:	f383 8811 	msr	BASEPRI, r3
 80105c2:	f3bf 8f6f 	isb	sy
 80105c6:	f3bf 8f4f 	dsb	sy
 80105ca:	61fb      	str	r3, [r7, #28]
}
 80105cc:	bf00      	nop
 80105ce:	e7fe      	b.n	80105ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80105d0:	f001 fa1c 	bl	8011a0c <xTaskGetSchedulerState>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d102      	bne.n	80105e0 <xQueueSemaphoreTake+0x60>
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d101      	bne.n	80105e4 <xQueueSemaphoreTake+0x64>
 80105e0:	2301      	movs	r3, #1
 80105e2:	e000      	b.n	80105e6 <xQueueSemaphoreTake+0x66>
 80105e4:	2300      	movs	r3, #0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d10a      	bne.n	8010600 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80105ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ee:	f383 8811 	msr	BASEPRI, r3
 80105f2:	f3bf 8f6f 	isb	sy
 80105f6:	f3bf 8f4f 	dsb	sy
 80105fa:	61bb      	str	r3, [r7, #24]
}
 80105fc:	bf00      	nop
 80105fe:	e7fe      	b.n	80105fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010600:	f002 f950 	bl	80128a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010608:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801060a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060c:	2b00      	cmp	r3, #0
 801060e:	d024      	beq.n	801065a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010612:	1e5a      	subs	r2, r3, #1
 8010614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010616:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d104      	bne.n	801062a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010620:	f001 fb82 	bl	8011d28 <pvTaskIncrementMutexHeldCount>
 8010624:	4602      	mov	r2, r0
 8010626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010628:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062c:	691b      	ldr	r3, [r3, #16]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d00f      	beq.n	8010652 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010634:	3310      	adds	r3, #16
 8010636:	4618      	mov	r0, r3
 8010638:	f000 ffc4 	bl	80115c4 <xTaskRemoveFromEventList>
 801063c:	4603      	mov	r3, r0
 801063e:	2b00      	cmp	r3, #0
 8010640:	d007      	beq.n	8010652 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010642:	4b54      	ldr	r3, [pc, #336]	; (8010794 <xQueueSemaphoreTake+0x214>)
 8010644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010648:	601a      	str	r2, [r3, #0]
 801064a:	f3bf 8f4f 	dsb	sy
 801064e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010652:	f002 f957 	bl	8012904 <vPortExitCritical>
				return pdPASS;
 8010656:	2301      	movs	r3, #1
 8010658:	e097      	b.n	801078a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d111      	bne.n	8010684 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00a      	beq.n	801067c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066a:	f383 8811 	msr	BASEPRI, r3
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	617b      	str	r3, [r7, #20]
}
 8010678:	bf00      	nop
 801067a:	e7fe      	b.n	801067a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801067c:	f002 f942 	bl	8012904 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010680:	2300      	movs	r3, #0
 8010682:	e082      	b.n	801078a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010686:	2b00      	cmp	r3, #0
 8010688:	d106      	bne.n	8010698 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801068a:	f107 030c 	add.w	r3, r7, #12
 801068e:	4618      	mov	r0, r3
 8010690:	f001 f85e 	bl	8011750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010694:	2301      	movs	r3, #1
 8010696:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010698:	f002 f934 	bl	8012904 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801069c:	f000 fd2c 	bl	80110f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106a0:	f002 f900 	bl	80128a4 <vPortEnterCritical>
 80106a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106aa:	b25b      	sxtb	r3, r3
 80106ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b0:	d103      	bne.n	80106ba <xQueueSemaphoreTake+0x13a>
 80106b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b4:	2200      	movs	r2, #0
 80106b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106c0:	b25b      	sxtb	r3, r3
 80106c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c6:	d103      	bne.n	80106d0 <xQueueSemaphoreTake+0x150>
 80106c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ca:	2200      	movs	r2, #0
 80106cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80106d0:	f002 f918 	bl	8012904 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80106d4:	463a      	mov	r2, r7
 80106d6:	f107 030c 	add.w	r3, r7, #12
 80106da:	4611      	mov	r1, r2
 80106dc:	4618      	mov	r0, r3
 80106de:	f001 f84d 	bl	801177c <xTaskCheckForTimeOut>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d132      	bne.n	801074e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80106e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106ea:	f000 f9f2 	bl	8010ad2 <prvIsQueueEmpty>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d026      	beq.n	8010742 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d109      	bne.n	8010710 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80106fc:	f002 f8d2 	bl	80128a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010702:	689b      	ldr	r3, [r3, #8]
 8010704:	4618      	mov	r0, r3
 8010706:	f001 f99f 	bl	8011a48 <xTaskPriorityInherit>
 801070a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801070c:	f002 f8fa 	bl	8012904 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	3324      	adds	r3, #36	; 0x24
 8010714:	683a      	ldr	r2, [r7, #0]
 8010716:	4611      	mov	r1, r2
 8010718:	4618      	mov	r0, r3
 801071a:	f000 fec7 	bl	80114ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801071e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010720:	f000 f985 	bl	8010a2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010724:	f000 fcf6 	bl	8011114 <xTaskResumeAll>
 8010728:	4603      	mov	r3, r0
 801072a:	2b00      	cmp	r3, #0
 801072c:	f47f af68 	bne.w	8010600 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010730:	4b18      	ldr	r3, [pc, #96]	; (8010794 <xQueueSemaphoreTake+0x214>)
 8010732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010736:	601a      	str	r2, [r3, #0]
 8010738:	f3bf 8f4f 	dsb	sy
 801073c:	f3bf 8f6f 	isb	sy
 8010740:	e75e      	b.n	8010600 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010744:	f000 f973 	bl	8010a2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010748:	f000 fce4 	bl	8011114 <xTaskResumeAll>
 801074c:	e758      	b.n	8010600 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801074e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010750:	f000 f96d 	bl	8010a2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010754:	f000 fcde 	bl	8011114 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801075a:	f000 f9ba 	bl	8010ad2 <prvIsQueueEmpty>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	f43f af4d 	beq.w	8010600 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010768:	2b00      	cmp	r3, #0
 801076a:	d00d      	beq.n	8010788 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801076c:	f002 f89a 	bl	80128a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010772:	f000 f8b4 	bl	80108de <prvGetDisinheritPriorityAfterTimeout>
 8010776:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801077e:	4618      	mov	r0, r3
 8010780:	f001 fa38 	bl	8011bf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010784:	f002 f8be 	bl	8012904 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010788:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801078a:	4618      	mov	r0, r3
 801078c:	3738      	adds	r7, #56	; 0x38
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	e000ed04 	.word	0xe000ed04

08010798 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08e      	sub	sp, #56	; 0x38
 801079c:	af00      	add	r7, sp, #0
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d10a      	bne.n	80107c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80107ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b2:	f383 8811 	msr	BASEPRI, r3
 80107b6:	f3bf 8f6f 	isb	sy
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	623b      	str	r3, [r7, #32]
}
 80107c0:	bf00      	nop
 80107c2:	e7fe      	b.n	80107c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d103      	bne.n	80107d2 <xQueueReceiveFromISR+0x3a>
 80107ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d101      	bne.n	80107d6 <xQueueReceiveFromISR+0x3e>
 80107d2:	2301      	movs	r3, #1
 80107d4:	e000      	b.n	80107d8 <xQueueReceiveFromISR+0x40>
 80107d6:	2300      	movs	r3, #0
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d10a      	bne.n	80107f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80107dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e0:	f383 8811 	msr	BASEPRI, r3
 80107e4:	f3bf 8f6f 	isb	sy
 80107e8:	f3bf 8f4f 	dsb	sy
 80107ec:	61fb      	str	r3, [r7, #28]
}
 80107ee:	bf00      	nop
 80107f0:	e7fe      	b.n	80107f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80107f2:	f002 f939 	bl	8012a68 <vPortValidateInterruptPriority>
	__asm volatile
 80107f6:	f3ef 8211 	mrs	r2, BASEPRI
 80107fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fe:	f383 8811 	msr	BASEPRI, r3
 8010802:	f3bf 8f6f 	isb	sy
 8010806:	f3bf 8f4f 	dsb	sy
 801080a:	61ba      	str	r2, [r7, #24]
 801080c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801080e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010810:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010816:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801081a:	2b00      	cmp	r3, #0
 801081c:	d02f      	beq.n	801087e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010828:	68b9      	ldr	r1, [r7, #8]
 801082a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801082c:	f000 f8d9 	bl	80109e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	1e5a      	subs	r2, r3, #1
 8010834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010836:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010838:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010840:	d112      	bne.n	8010868 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010844:	691b      	ldr	r3, [r3, #16]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d016      	beq.n	8010878 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	3310      	adds	r3, #16
 801084e:	4618      	mov	r0, r3
 8010850:	f000 feb8 	bl	80115c4 <xTaskRemoveFromEventList>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00e      	beq.n	8010878 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00b      	beq.n	8010878 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2201      	movs	r2, #1
 8010864:	601a      	str	r2, [r3, #0]
 8010866:	e007      	b.n	8010878 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801086c:	3301      	adds	r3, #1
 801086e:	b2db      	uxtb	r3, r3
 8010870:	b25a      	sxtb	r2, r3
 8010872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010878:	2301      	movs	r3, #1
 801087a:	637b      	str	r3, [r7, #52]	; 0x34
 801087c:	e001      	b.n	8010882 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801087e:	2300      	movs	r3, #0
 8010880:	637b      	str	r3, [r7, #52]	; 0x34
 8010882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010884:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	f383 8811 	msr	BASEPRI, r3
}
 801088c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801088e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010890:	4618      	mov	r0, r3
 8010892:	3738      	adds	r7, #56	; 0x38
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d10a      	bne.n	80108c0 <vQueueDelete+0x28>
	__asm volatile
 80108aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ae:	f383 8811 	msr	BASEPRI, r3
 80108b2:	f3bf 8f6f 	isb	sy
 80108b6:	f3bf 8f4f 	dsb	sy
 80108ba:	60bb      	str	r3, [r7, #8]
}
 80108bc:	bf00      	nop
 80108be:	e7fe      	b.n	80108be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80108c0:	68f8      	ldr	r0, [r7, #12]
 80108c2:	f000 f95f 	bl	8010b84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d102      	bne.n	80108d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80108d0:	68f8      	ldr	r0, [r7, #12]
 80108d2:	f002 f9d5 	bl	8012c80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80108d6:	bf00      	nop
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80108de:	b480      	push	{r7}
 80108e0:	b085      	sub	sp, #20
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d006      	beq.n	80108fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80108f8:	60fb      	str	r3, [r7, #12]
 80108fa:	e001      	b.n	8010900 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80108fc:	2300      	movs	r3, #0
 80108fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010900:	68fb      	ldr	r3, [r7, #12]
	}
 8010902:	4618      	mov	r0, r3
 8010904:	3714      	adds	r7, #20
 8010906:	46bd      	mov	sp, r7
 8010908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090c:	4770      	bx	lr

0801090e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b086      	sub	sp, #24
 8010912:	af00      	add	r7, sp, #0
 8010914:	60f8      	str	r0, [r7, #12]
 8010916:	60b9      	str	r1, [r7, #8]
 8010918:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801091a:	2300      	movs	r3, #0
 801091c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010922:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10d      	bne.n	8010948 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d14d      	bne.n	80109d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	689b      	ldr	r3, [r3, #8]
 8010938:	4618      	mov	r0, r3
 801093a:	f001 f8ed 	bl	8011b18 <xTaskPriorityDisinherit>
 801093e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2200      	movs	r2, #0
 8010944:	609a      	str	r2, [r3, #8]
 8010946:	e043      	b.n	80109d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d119      	bne.n	8010982 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	6858      	ldr	r0, [r3, #4]
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010956:	461a      	mov	r2, r3
 8010958:	68b9      	ldr	r1, [r7, #8]
 801095a:	f003 f997 	bl	8013c8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	685a      	ldr	r2, [r3, #4]
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010966:	441a      	add	r2, r3
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	685a      	ldr	r2, [r3, #4]
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	429a      	cmp	r2, r3
 8010976:	d32b      	bcc.n	80109d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	605a      	str	r2, [r3, #4]
 8010980:	e026      	b.n	80109d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	68d8      	ldr	r0, [r3, #12]
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098a:	461a      	mov	r2, r3
 801098c:	68b9      	ldr	r1, [r7, #8]
 801098e:	f003 f97d 	bl	8013c8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	68da      	ldr	r2, [r3, #12]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099a:	425b      	negs	r3, r3
 801099c:	441a      	add	r2, r3
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	68da      	ldr	r2, [r3, #12]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d207      	bcs.n	80109be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	689a      	ldr	r2, [r3, #8]
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b6:	425b      	negs	r3, r3
 80109b8:	441a      	add	r2, r3
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d105      	bne.n	80109d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d002      	beq.n	80109d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	3b01      	subs	r3, #1
 80109ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	1c5a      	adds	r2, r3, #1
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80109d8:	697b      	ldr	r3, [r7, #20]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3718      	adds	r7, #24
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}

080109e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80109e2:	b580      	push	{r7, lr}
 80109e4:	b082      	sub	sp, #8
 80109e6:	af00      	add	r7, sp, #0
 80109e8:	6078      	str	r0, [r7, #4]
 80109ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d018      	beq.n	8010a26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	68da      	ldr	r2, [r3, #12]
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fc:	441a      	add	r2, r3
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	68da      	ldr	r2, [r3, #12]
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d303      	bcc.n	8010a16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	68d9      	ldr	r1, [r3, #12]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1e:	461a      	mov	r2, r3
 8010a20:	6838      	ldr	r0, [r7, #0]
 8010a22:	f003 f933 	bl	8013c8c <memcpy>
	}
}
 8010a26:	bf00      	nop
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b084      	sub	sp, #16
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010a36:	f001 ff35 	bl	80128a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a42:	e011      	b.n	8010a68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d012      	beq.n	8010a72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	3324      	adds	r3, #36	; 0x24
 8010a50:	4618      	mov	r0, r3
 8010a52:	f000 fdb7 	bl	80115c4 <xTaskRemoveFromEventList>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d001      	beq.n	8010a60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010a5c:	f000 fef0 	bl	8011840 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010a60:	7bfb      	ldrb	r3, [r7, #15]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	b2db      	uxtb	r3, r3
 8010a66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	dce9      	bgt.n	8010a44 <prvUnlockQueue+0x16>
 8010a70:	e000      	b.n	8010a74 <prvUnlockQueue+0x46>
					break;
 8010a72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	22ff      	movs	r2, #255	; 0xff
 8010a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010a7c:	f001 ff42 	bl	8012904 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010a80:	f001 ff10 	bl	80128a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010a8c:	e011      	b.n	8010ab2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	691b      	ldr	r3, [r3, #16]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d012      	beq.n	8010abc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	3310      	adds	r3, #16
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f000 fd92 	bl	80115c4 <xTaskRemoveFromEventList>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010aa6:	f000 fecb 	bl	8011840 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010aaa:	7bbb      	ldrb	r3, [r7, #14]
 8010aac:	3b01      	subs	r3, #1
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dce9      	bgt.n	8010a8e <prvUnlockQueue+0x60>
 8010aba:	e000      	b.n	8010abe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010abc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	22ff      	movs	r2, #255	; 0xff
 8010ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010ac6:	f001 ff1d 	bl	8012904 <vPortExitCritical>
}
 8010aca:	bf00      	nop
 8010acc:	3710      	adds	r7, #16
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b084      	sub	sp, #16
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010ada:	f001 fee3 	bl	80128a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d102      	bne.n	8010aec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	60fb      	str	r3, [r7, #12]
 8010aea:	e001      	b.n	8010af0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010aec:	2300      	movs	r3, #0
 8010aee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010af0:	f001 ff08 	bl	8012904 <vPortExitCritical>

	return xReturn;
 8010af4:	68fb      	ldr	r3, [r7, #12]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3710      	adds	r7, #16
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b084      	sub	sp, #16
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b06:	f001 fecd 	bl	80128a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d102      	bne.n	8010b1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010b16:	2301      	movs	r3, #1
 8010b18:	60fb      	str	r3, [r7, #12]
 8010b1a:	e001      	b.n	8010b20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b20:	f001 fef0 	bl	8012904 <vPortExitCritical>

	return xReturn;
 8010b24:	68fb      	ldr	r3, [r7, #12]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
	...

08010b30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	60fb      	str	r3, [r7, #12]
 8010b3e:	e014      	b.n	8010b6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010b40:	4a0f      	ldr	r2, [pc, #60]	; (8010b80 <vQueueAddToRegistry+0x50>)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d10b      	bne.n	8010b64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010b4c:	490c      	ldr	r1, [pc, #48]	; (8010b80 <vQueueAddToRegistry+0x50>)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	683a      	ldr	r2, [r7, #0]
 8010b52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010b56:	4a0a      	ldr	r2, [pc, #40]	; (8010b80 <vQueueAddToRegistry+0x50>)
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	00db      	lsls	r3, r3, #3
 8010b5c:	4413      	add	r3, r2
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010b62:	e006      	b.n	8010b72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	3301      	adds	r3, #1
 8010b68:	60fb      	str	r3, [r7, #12]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2b07      	cmp	r3, #7
 8010b6e:	d9e7      	bls.n	8010b40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010b70:	bf00      	nop
 8010b72:	bf00      	nop
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr
 8010b7e:	bf00      	nop
 8010b80:	20001064 	.word	0x20001064

08010b84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010b84:	b480      	push	{r7}
 8010b86:	b085      	sub	sp, #20
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	60fb      	str	r3, [r7, #12]
 8010b90:	e016      	b.n	8010bc0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010b92:	4a10      	ldr	r2, [pc, #64]	; (8010bd4 <vQueueUnregisterQueue+0x50>)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	4413      	add	r3, r2
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d10b      	bne.n	8010bba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010ba2:	4a0c      	ldr	r2, [pc, #48]	; (8010bd4 <vQueueUnregisterQueue+0x50>)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010bac:	4a09      	ldr	r2, [pc, #36]	; (8010bd4 <vQueueUnregisterQueue+0x50>)
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	00db      	lsls	r3, r3, #3
 8010bb2:	4413      	add	r3, r2
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	605a      	str	r2, [r3, #4]
				break;
 8010bb8:	e006      	b.n	8010bc8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	60fb      	str	r3, [r7, #12]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	2b07      	cmp	r3, #7
 8010bc4:	d9e5      	bls.n	8010b92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010bc6:	bf00      	nop
 8010bc8:	bf00      	nop
 8010bca:	3714      	adds	r7, #20
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd2:	4770      	bx	lr
 8010bd4:	20001064 	.word	0x20001064

08010bd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b086      	sub	sp, #24
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010be8:	f001 fe5c 	bl	80128a4 <vPortEnterCritical>
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bf2:	b25b      	sxtb	r3, r3
 8010bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bf8:	d103      	bne.n	8010c02 <vQueueWaitForMessageRestricted+0x2a>
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c08:	b25b      	sxtb	r3, r3
 8010c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c0e:	d103      	bne.n	8010c18 <vQueueWaitForMessageRestricted+0x40>
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c18:	f001 fe74 	bl	8012904 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d106      	bne.n	8010c32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	3324      	adds	r3, #36	; 0x24
 8010c28:	687a      	ldr	r2, [r7, #4]
 8010c2a:	68b9      	ldr	r1, [r7, #8]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f000 fc9d 	bl	801156c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010c32:	6978      	ldr	r0, [r7, #20]
 8010c34:	f7ff fefb 	bl	8010a2e <prvUnlockQueue>
	}
 8010c38:	bf00      	nop
 8010c3a:	3718      	adds	r7, #24
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b08e      	sub	sp, #56	; 0x38
 8010c44:	af04      	add	r7, sp, #16
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
 8010c4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d10a      	bne.n	8010c6a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c58:	f383 8811 	msr	BASEPRI, r3
 8010c5c:	f3bf 8f6f 	isb	sy
 8010c60:	f3bf 8f4f 	dsb	sy
 8010c64:	623b      	str	r3, [r7, #32]
}
 8010c66:	bf00      	nop
 8010c68:	e7fe      	b.n	8010c68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d10a      	bne.n	8010c86 <xTaskCreateStatic+0x46>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	61fb      	str	r3, [r7, #28]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c86:	23bc      	movs	r3, #188	; 0xbc
 8010c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	2bbc      	cmp	r3, #188	; 0xbc
 8010c8e:	d00a      	beq.n	8010ca6 <xTaskCreateStatic+0x66>
	__asm volatile
 8010c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	61bb      	str	r3, [r7, #24]
}
 8010ca2:	bf00      	nop
 8010ca4:	e7fe      	b.n	8010ca4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010ca6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d01e      	beq.n	8010cec <xTaskCreateStatic+0xac>
 8010cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d01b      	beq.n	8010cec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	2202      	movs	r2, #2
 8010cc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	9303      	str	r3, [sp, #12]
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	9302      	str	r3, [sp, #8]
 8010cce:	f107 0314 	add.w	r3, r7, #20
 8010cd2:	9301      	str	r3, [sp, #4]
 8010cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd6:	9300      	str	r3, [sp, #0]
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	68b9      	ldr	r1, [r7, #8]
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f000 f850 	bl	8010d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ce4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ce6:	f000 f8f3 	bl	8010ed0 <prvAddNewTaskToReadyList>
 8010cea:	e001      	b.n	8010cf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010cec:	2300      	movs	r3, #0
 8010cee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010cf0:	697b      	ldr	r3, [r7, #20]
	}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3728      	adds	r7, #40	; 0x28
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b08c      	sub	sp, #48	; 0x30
 8010cfe:	af04      	add	r7, sp, #16
 8010d00:	60f8      	str	r0, [r7, #12]
 8010d02:	60b9      	str	r1, [r7, #8]
 8010d04:	603b      	str	r3, [r7, #0]
 8010d06:	4613      	mov	r3, r2
 8010d08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d0a:	88fb      	ldrh	r3, [r7, #6]
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f001 feea 	bl	8012ae8 <pvPortMalloc>
 8010d14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d00e      	beq.n	8010d3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d1c:	20bc      	movs	r0, #188	; 0xbc
 8010d1e:	f001 fee3 	bl	8012ae8 <pvPortMalloc>
 8010d22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d24:	69fb      	ldr	r3, [r7, #28]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d003      	beq.n	8010d32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d2a:	69fb      	ldr	r3, [r7, #28]
 8010d2c:	697a      	ldr	r2, [r7, #20]
 8010d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8010d30:	e005      	b.n	8010d3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d32:	6978      	ldr	r0, [r7, #20]
 8010d34:	f001 ffa4 	bl	8012c80 <vPortFree>
 8010d38:	e001      	b.n	8010d3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d017      	beq.n	8010d74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d44:	69fb      	ldr	r3, [r7, #28]
 8010d46:	2200      	movs	r2, #0
 8010d48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d4c:	88fa      	ldrh	r2, [r7, #6]
 8010d4e:	2300      	movs	r3, #0
 8010d50:	9303      	str	r3, [sp, #12]
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	9302      	str	r3, [sp, #8]
 8010d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d58:	9301      	str	r3, [sp, #4]
 8010d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5c:	9300      	str	r3, [sp, #0]
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	68b9      	ldr	r1, [r7, #8]
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	f000 f80e 	bl	8010d84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d68:	69f8      	ldr	r0, [r7, #28]
 8010d6a:	f000 f8b1 	bl	8010ed0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	61bb      	str	r3, [r7, #24]
 8010d72:	e002      	b.n	8010d7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d74:	f04f 33ff 	mov.w	r3, #4294967295
 8010d78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d7a:	69bb      	ldr	r3, [r7, #24]
	}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3720      	adds	r7, #32
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b088      	sub	sp, #32
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
 8010d90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	21a5      	movs	r1, #165	; 0xa5
 8010d9e:	f002 ff83 	bl	8013ca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010dac:	3b01      	subs	r3, #1
 8010dae:	009b      	lsls	r3, r3, #2
 8010db0:	4413      	add	r3, r2
 8010db2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	f023 0307 	bic.w	r3, r3, #7
 8010dba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	f003 0307 	and.w	r3, r3, #7
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d00a      	beq.n	8010ddc <prvInitialiseNewTask+0x58>
	__asm volatile
 8010dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	617b      	str	r3, [r7, #20]
}
 8010dd8:	bf00      	nop
 8010dda:	e7fe      	b.n	8010dda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d01f      	beq.n	8010e22 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010de2:	2300      	movs	r3, #0
 8010de4:	61fb      	str	r3, [r7, #28]
 8010de6:	e012      	b.n	8010e0e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010de8:	68ba      	ldr	r2, [r7, #8]
 8010dea:	69fb      	ldr	r3, [r7, #28]
 8010dec:	4413      	add	r3, r2
 8010dee:	7819      	ldrb	r1, [r3, #0]
 8010df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010df2:	69fb      	ldr	r3, [r7, #28]
 8010df4:	4413      	add	r3, r2
 8010df6:	3334      	adds	r3, #52	; 0x34
 8010df8:	460a      	mov	r2, r1
 8010dfa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010dfc:	68ba      	ldr	r2, [r7, #8]
 8010dfe:	69fb      	ldr	r3, [r7, #28]
 8010e00:	4413      	add	r3, r2
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d006      	beq.n	8010e16 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	61fb      	str	r3, [r7, #28]
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	2b0f      	cmp	r3, #15
 8010e12:	d9e9      	bls.n	8010de8 <prvInitialiseNewTask+0x64>
 8010e14:	e000      	b.n	8010e18 <prvInitialiseNewTask+0x94>
			{
				break;
 8010e16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e20:	e003      	b.n	8010e2a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e24:	2200      	movs	r2, #0
 8010e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2c:	2b37      	cmp	r3, #55	; 0x37
 8010e2e:	d901      	bls.n	8010e34 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e30:	2337      	movs	r3, #55	; 0x37
 8010e32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e3e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e42:	2200      	movs	r2, #0
 8010e44:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e48:	3304      	adds	r3, #4
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7fe fe56 	bl	800fafc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e52:	3318      	adds	r3, #24
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fe fe51 	bl	800fafc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e72:	2200      	movs	r2, #0
 8010e74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e82:	3354      	adds	r3, #84	; 0x54
 8010e84:	2260      	movs	r2, #96	; 0x60
 8010e86:	2100      	movs	r1, #0
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f002 ff0d 	bl	8013ca8 <memset>
 8010e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e90:	4a0c      	ldr	r2, [pc, #48]	; (8010ec4 <prvInitialiseNewTask+0x140>)
 8010e92:	659a      	str	r2, [r3, #88]	; 0x58
 8010e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e96:	4a0c      	ldr	r2, [pc, #48]	; (8010ec8 <prvInitialiseNewTask+0x144>)
 8010e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9c:	4a0b      	ldr	r2, [pc, #44]	; (8010ecc <prvInitialiseNewTask+0x148>)
 8010e9e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ea0:	683a      	ldr	r2, [r7, #0]
 8010ea2:	68f9      	ldr	r1, [r7, #12]
 8010ea4:	69b8      	ldr	r0, [r7, #24]
 8010ea6:	f001 fbcf 	bl	8012648 <pxPortInitialiseStack>
 8010eaa:	4602      	mov	r2, r0
 8010eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d002      	beq.n	8010ebc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ebc:	bf00      	nop
 8010ebe:	3720      	adds	r7, #32
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	08016c28 	.word	0x08016c28
 8010ec8:	08016c48 	.word	0x08016c48
 8010ecc:	08016c08 	.word	0x08016c08

08010ed0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ed8:	f001 fce4 	bl	80128a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010edc:	4b2d      	ldr	r3, [pc, #180]	; (8010f94 <prvAddNewTaskToReadyList+0xc4>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	4a2c      	ldr	r2, [pc, #176]	; (8010f94 <prvAddNewTaskToReadyList+0xc4>)
 8010ee4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ee6:	4b2c      	ldr	r3, [pc, #176]	; (8010f98 <prvAddNewTaskToReadyList+0xc8>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d109      	bne.n	8010f02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010eee:	4a2a      	ldr	r2, [pc, #168]	; (8010f98 <prvAddNewTaskToReadyList+0xc8>)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ef4:	4b27      	ldr	r3, [pc, #156]	; (8010f94 <prvAddNewTaskToReadyList+0xc4>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d110      	bne.n	8010f1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010efc:	f000 fcc4 	bl	8011888 <prvInitialiseTaskLists>
 8010f00:	e00d      	b.n	8010f1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f02:	4b26      	ldr	r3, [pc, #152]	; (8010f9c <prvAddNewTaskToReadyList+0xcc>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d109      	bne.n	8010f1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f0a:	4b23      	ldr	r3, [pc, #140]	; (8010f98 <prvAddNewTaskToReadyList+0xc8>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d802      	bhi.n	8010f1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f18:	4a1f      	ldr	r2, [pc, #124]	; (8010f98 <prvAddNewTaskToReadyList+0xc8>)
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f1e:	4b20      	ldr	r3, [pc, #128]	; (8010fa0 <prvAddNewTaskToReadyList+0xd0>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	3301      	adds	r3, #1
 8010f24:	4a1e      	ldr	r2, [pc, #120]	; (8010fa0 <prvAddNewTaskToReadyList+0xd0>)
 8010f26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f28:	4b1d      	ldr	r3, [pc, #116]	; (8010fa0 <prvAddNewTaskToReadyList+0xd0>)
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f34:	4b1b      	ldr	r3, [pc, #108]	; (8010fa4 <prvAddNewTaskToReadyList+0xd4>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d903      	bls.n	8010f44 <prvAddNewTaskToReadyList+0x74>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f40:	4a18      	ldr	r2, [pc, #96]	; (8010fa4 <prvAddNewTaskToReadyList+0xd4>)
 8010f42:	6013      	str	r3, [r2, #0]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f48:	4613      	mov	r3, r2
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	4413      	add	r3, r2
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	4a15      	ldr	r2, [pc, #84]	; (8010fa8 <prvAddNewTaskToReadyList+0xd8>)
 8010f52:	441a      	add	r2, r3
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3304      	adds	r3, #4
 8010f58:	4619      	mov	r1, r3
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	f7fe fddb 	bl	800fb16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f60:	f001 fcd0 	bl	8012904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f64:	4b0d      	ldr	r3, [pc, #52]	; (8010f9c <prvAddNewTaskToReadyList+0xcc>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d00e      	beq.n	8010f8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <prvAddNewTaskToReadyList+0xc8>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d207      	bcs.n	8010f8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f7a:	4b0c      	ldr	r3, [pc, #48]	; (8010fac <prvAddNewTaskToReadyList+0xdc>)
 8010f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f80:	601a      	str	r2, [r3, #0]
 8010f82:	f3bf 8f4f 	dsb	sy
 8010f86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f8a:	bf00      	nop
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	20001578 	.word	0x20001578
 8010f98:	200010a4 	.word	0x200010a4
 8010f9c:	20001584 	.word	0x20001584
 8010fa0:	20001594 	.word	0x20001594
 8010fa4:	20001580 	.word	0x20001580
 8010fa8:	200010a8 	.word	0x200010a8
 8010fac:	e000ed04 	.word	0xe000ed04

08010fb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d017      	beq.n	8010ff2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fc2:	4b13      	ldr	r3, [pc, #76]	; (8011010 <vTaskDelay+0x60>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00a      	beq.n	8010fe0 <vTaskDelay+0x30>
	__asm volatile
 8010fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fce:	f383 8811 	msr	BASEPRI, r3
 8010fd2:	f3bf 8f6f 	isb	sy
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	60bb      	str	r3, [r7, #8]
}
 8010fdc:	bf00      	nop
 8010fde:	e7fe      	b.n	8010fde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010fe0:	f000 f88a 	bl	80110f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 feb2 	bl	8011d50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fec:	f000 f892 	bl	8011114 <xTaskResumeAll>
 8010ff0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d107      	bne.n	8011008 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010ff8:	4b06      	ldr	r3, [pc, #24]	; (8011014 <vTaskDelay+0x64>)
 8010ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ffe:	601a      	str	r2, [r3, #0]
 8011000:	f3bf 8f4f 	dsb	sy
 8011004:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011008:	bf00      	nop
 801100a:	3710      	adds	r7, #16
 801100c:	46bd      	mov	sp, r7
 801100e:	bd80      	pop	{r7, pc}
 8011010:	200015a0 	.word	0x200015a0
 8011014:	e000ed04 	.word	0xe000ed04

08011018 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b08a      	sub	sp, #40	; 0x28
 801101c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801101e:	2300      	movs	r3, #0
 8011020:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011022:	2300      	movs	r3, #0
 8011024:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011026:	463a      	mov	r2, r7
 8011028:	1d39      	adds	r1, r7, #4
 801102a:	f107 0308 	add.w	r3, r7, #8
 801102e:	4618      	mov	r0, r3
 8011030:	f7fe fb22 	bl	800f678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011034:	6839      	ldr	r1, [r7, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	68ba      	ldr	r2, [r7, #8]
 801103a:	9202      	str	r2, [sp, #8]
 801103c:	9301      	str	r3, [sp, #4]
 801103e:	2300      	movs	r3, #0
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	2300      	movs	r3, #0
 8011044:	460a      	mov	r2, r1
 8011046:	4924      	ldr	r1, [pc, #144]	; (80110d8 <vTaskStartScheduler+0xc0>)
 8011048:	4824      	ldr	r0, [pc, #144]	; (80110dc <vTaskStartScheduler+0xc4>)
 801104a:	f7ff fdf9 	bl	8010c40 <xTaskCreateStatic>
 801104e:	4603      	mov	r3, r0
 8011050:	4a23      	ldr	r2, [pc, #140]	; (80110e0 <vTaskStartScheduler+0xc8>)
 8011052:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011054:	4b22      	ldr	r3, [pc, #136]	; (80110e0 <vTaskStartScheduler+0xc8>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d002      	beq.n	8011062 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801105c:	2301      	movs	r3, #1
 801105e:	617b      	str	r3, [r7, #20]
 8011060:	e001      	b.n	8011066 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011062:	2300      	movs	r3, #0
 8011064:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d102      	bne.n	8011072 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801106c:	f000 fec4 	bl	8011df8 <xTimerCreateTimerTask>
 8011070:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	2b01      	cmp	r3, #1
 8011076:	d11b      	bne.n	80110b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8011078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107c:	f383 8811 	msr	BASEPRI, r3
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	613b      	str	r3, [r7, #16]
}
 801108a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801108c:	4b15      	ldr	r3, [pc, #84]	; (80110e4 <vTaskStartScheduler+0xcc>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3354      	adds	r3, #84	; 0x54
 8011092:	4a15      	ldr	r2, [pc, #84]	; (80110e8 <vTaskStartScheduler+0xd0>)
 8011094:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011096:	4b15      	ldr	r3, [pc, #84]	; (80110ec <vTaskStartScheduler+0xd4>)
 8011098:	f04f 32ff 	mov.w	r2, #4294967295
 801109c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801109e:	4b14      	ldr	r3, [pc, #80]	; (80110f0 <vTaskStartScheduler+0xd8>)
 80110a0:	2201      	movs	r2, #1
 80110a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110a4:	4b13      	ldr	r3, [pc, #76]	; (80110f4 <vTaskStartScheduler+0xdc>)
 80110a6:	2200      	movs	r2, #0
 80110a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110aa:	f001 fb59 	bl	8012760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110ae:	e00e      	b.n	80110ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b6:	d10a      	bne.n	80110ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80110b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	60fb      	str	r3, [r7, #12]
}
 80110ca:	bf00      	nop
 80110cc:	e7fe      	b.n	80110cc <vTaskStartScheduler+0xb4>
}
 80110ce:	bf00      	nop
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	08016a7c 	.word	0x08016a7c
 80110dc:	08011859 	.word	0x08011859
 80110e0:	2000159c 	.word	0x2000159c
 80110e4:	200010a4 	.word	0x200010a4
 80110e8:	20000124 	.word	0x20000124
 80110ec:	20001598 	.word	0x20001598
 80110f0:	20001584 	.word	0x20001584
 80110f4:	2000157c 	.word	0x2000157c

080110f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110f8:	b480      	push	{r7}
 80110fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110fc:	4b04      	ldr	r3, [pc, #16]	; (8011110 <vTaskSuspendAll+0x18>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	3301      	adds	r3, #1
 8011102:	4a03      	ldr	r2, [pc, #12]	; (8011110 <vTaskSuspendAll+0x18>)
 8011104:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011106:	bf00      	nop
 8011108:	46bd      	mov	sp, r7
 801110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110e:	4770      	bx	lr
 8011110:	200015a0 	.word	0x200015a0

08011114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801111a:	2300      	movs	r3, #0
 801111c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801111e:	2300      	movs	r3, #0
 8011120:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011122:	4b42      	ldr	r3, [pc, #264]	; (801122c <xTaskResumeAll+0x118>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d10a      	bne.n	8011140 <xTaskResumeAll+0x2c>
	__asm volatile
 801112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112e:	f383 8811 	msr	BASEPRI, r3
 8011132:	f3bf 8f6f 	isb	sy
 8011136:	f3bf 8f4f 	dsb	sy
 801113a:	603b      	str	r3, [r7, #0]
}
 801113c:	bf00      	nop
 801113e:	e7fe      	b.n	801113e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011140:	f001 fbb0 	bl	80128a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011144:	4b39      	ldr	r3, [pc, #228]	; (801122c <xTaskResumeAll+0x118>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	3b01      	subs	r3, #1
 801114a:	4a38      	ldr	r2, [pc, #224]	; (801122c <xTaskResumeAll+0x118>)
 801114c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801114e:	4b37      	ldr	r3, [pc, #220]	; (801122c <xTaskResumeAll+0x118>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d162      	bne.n	801121c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011156:	4b36      	ldr	r3, [pc, #216]	; (8011230 <xTaskResumeAll+0x11c>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d05e      	beq.n	801121c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801115e:	e02f      	b.n	80111c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011160:	4b34      	ldr	r3, [pc, #208]	; (8011234 <xTaskResumeAll+0x120>)
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	3318      	adds	r3, #24
 801116c:	4618      	mov	r0, r3
 801116e:	f7fe fd2f 	bl	800fbd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3304      	adds	r3, #4
 8011176:	4618      	mov	r0, r3
 8011178:	f7fe fd2a 	bl	800fbd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011180:	4b2d      	ldr	r3, [pc, #180]	; (8011238 <xTaskResumeAll+0x124>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	429a      	cmp	r2, r3
 8011186:	d903      	bls.n	8011190 <xTaskResumeAll+0x7c>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118c:	4a2a      	ldr	r2, [pc, #168]	; (8011238 <xTaskResumeAll+0x124>)
 801118e:	6013      	str	r3, [r2, #0]
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011194:	4613      	mov	r3, r2
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	4413      	add	r3, r2
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	4a27      	ldr	r2, [pc, #156]	; (801123c <xTaskResumeAll+0x128>)
 801119e:	441a      	add	r2, r3
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	3304      	adds	r3, #4
 80111a4:	4619      	mov	r1, r3
 80111a6:	4610      	mov	r0, r2
 80111a8:	f7fe fcb5 	bl	800fb16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111b0:	4b23      	ldr	r3, [pc, #140]	; (8011240 <xTaskResumeAll+0x12c>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d302      	bcc.n	80111c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80111ba:	4b22      	ldr	r3, [pc, #136]	; (8011244 <xTaskResumeAll+0x130>)
 80111bc:	2201      	movs	r2, #1
 80111be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111c0:	4b1c      	ldr	r3, [pc, #112]	; (8011234 <xTaskResumeAll+0x120>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d1cb      	bne.n	8011160 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d001      	beq.n	80111d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111ce:	f000 fbfd 	bl	80119cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80111d2:	4b1d      	ldr	r3, [pc, #116]	; (8011248 <xTaskResumeAll+0x134>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d010      	beq.n	8011200 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111de:	f000 f847 	bl	8011270 <xTaskIncrementTick>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d002      	beq.n	80111ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111e8:	4b16      	ldr	r3, [pc, #88]	; (8011244 <xTaskResumeAll+0x130>)
 80111ea:	2201      	movs	r2, #1
 80111ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	3b01      	subs	r3, #1
 80111f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1f1      	bne.n	80111de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80111fa:	4b13      	ldr	r3, [pc, #76]	; (8011248 <xTaskResumeAll+0x134>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011200:	4b10      	ldr	r3, [pc, #64]	; (8011244 <xTaskResumeAll+0x130>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d009      	beq.n	801121c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011208:	2301      	movs	r3, #1
 801120a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801120c:	4b0f      	ldr	r3, [pc, #60]	; (801124c <xTaskResumeAll+0x138>)
 801120e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011212:	601a      	str	r2, [r3, #0]
 8011214:	f3bf 8f4f 	dsb	sy
 8011218:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801121c:	f001 fb72 	bl	8012904 <vPortExitCritical>

	return xAlreadyYielded;
 8011220:	68bb      	ldr	r3, [r7, #8]
}
 8011222:	4618      	mov	r0, r3
 8011224:	3710      	adds	r7, #16
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	200015a0 	.word	0x200015a0
 8011230:	20001578 	.word	0x20001578
 8011234:	20001538 	.word	0x20001538
 8011238:	20001580 	.word	0x20001580
 801123c:	200010a8 	.word	0x200010a8
 8011240:	200010a4 	.word	0x200010a4
 8011244:	2000158c 	.word	0x2000158c
 8011248:	20001588 	.word	0x20001588
 801124c:	e000ed04 	.word	0xe000ed04

08011250 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011256:	4b05      	ldr	r3, [pc, #20]	; (801126c <xTaskGetTickCount+0x1c>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801125c:	687b      	ldr	r3, [r7, #4]
}
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	2000157c 	.word	0x2000157c

08011270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b086      	sub	sp, #24
 8011274:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011276:	2300      	movs	r3, #0
 8011278:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801127a:	4b4f      	ldr	r3, [pc, #316]	; (80113b8 <xTaskIncrementTick+0x148>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	f040 808f 	bne.w	80113a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011284:	4b4d      	ldr	r3, [pc, #308]	; (80113bc <xTaskIncrementTick+0x14c>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	3301      	adds	r3, #1
 801128a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801128c:	4a4b      	ldr	r2, [pc, #300]	; (80113bc <xTaskIncrementTick+0x14c>)
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d120      	bne.n	80112da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011298:	4b49      	ldr	r3, [pc, #292]	; (80113c0 <xTaskIncrementTick+0x150>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d00a      	beq.n	80112b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80112a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a6:	f383 8811 	msr	BASEPRI, r3
 80112aa:	f3bf 8f6f 	isb	sy
 80112ae:	f3bf 8f4f 	dsb	sy
 80112b2:	603b      	str	r3, [r7, #0]
}
 80112b4:	bf00      	nop
 80112b6:	e7fe      	b.n	80112b6 <xTaskIncrementTick+0x46>
 80112b8:	4b41      	ldr	r3, [pc, #260]	; (80113c0 <xTaskIncrementTick+0x150>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	60fb      	str	r3, [r7, #12]
 80112be:	4b41      	ldr	r3, [pc, #260]	; (80113c4 <xTaskIncrementTick+0x154>)
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	4a3f      	ldr	r2, [pc, #252]	; (80113c0 <xTaskIncrementTick+0x150>)
 80112c4:	6013      	str	r3, [r2, #0]
 80112c6:	4a3f      	ldr	r2, [pc, #252]	; (80113c4 <xTaskIncrementTick+0x154>)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	6013      	str	r3, [r2, #0]
 80112cc:	4b3e      	ldr	r3, [pc, #248]	; (80113c8 <xTaskIncrementTick+0x158>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	3301      	adds	r3, #1
 80112d2:	4a3d      	ldr	r2, [pc, #244]	; (80113c8 <xTaskIncrementTick+0x158>)
 80112d4:	6013      	str	r3, [r2, #0]
 80112d6:	f000 fb79 	bl	80119cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112da:	4b3c      	ldr	r3, [pc, #240]	; (80113cc <xTaskIncrementTick+0x15c>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	693a      	ldr	r2, [r7, #16]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d349      	bcc.n	8011378 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112e4:	4b36      	ldr	r3, [pc, #216]	; (80113c0 <xTaskIncrementTick+0x150>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d104      	bne.n	80112f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112ee:	4b37      	ldr	r3, [pc, #220]	; (80113cc <xTaskIncrementTick+0x15c>)
 80112f0:	f04f 32ff 	mov.w	r2, #4294967295
 80112f4:	601a      	str	r2, [r3, #0]
					break;
 80112f6:	e03f      	b.n	8011378 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112f8:	4b31      	ldr	r3, [pc, #196]	; (80113c0 <xTaskIncrementTick+0x150>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011308:	693a      	ldr	r2, [r7, #16]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	429a      	cmp	r2, r3
 801130e:	d203      	bcs.n	8011318 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011310:	4a2e      	ldr	r2, [pc, #184]	; (80113cc <xTaskIncrementTick+0x15c>)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011316:	e02f      	b.n	8011378 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	3304      	adds	r3, #4
 801131c:	4618      	mov	r0, r3
 801131e:	f7fe fc57 	bl	800fbd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011326:	2b00      	cmp	r3, #0
 8011328:	d004      	beq.n	8011334 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	3318      	adds	r3, #24
 801132e:	4618      	mov	r0, r3
 8011330:	f7fe fc4e 	bl	800fbd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011338:	4b25      	ldr	r3, [pc, #148]	; (80113d0 <xTaskIncrementTick+0x160>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	429a      	cmp	r2, r3
 801133e:	d903      	bls.n	8011348 <xTaskIncrementTick+0xd8>
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011344:	4a22      	ldr	r2, [pc, #136]	; (80113d0 <xTaskIncrementTick+0x160>)
 8011346:	6013      	str	r3, [r2, #0]
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801134c:	4613      	mov	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4413      	add	r3, r2
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	4a1f      	ldr	r2, [pc, #124]	; (80113d4 <xTaskIncrementTick+0x164>)
 8011356:	441a      	add	r2, r3
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	3304      	adds	r3, #4
 801135c:	4619      	mov	r1, r3
 801135e:	4610      	mov	r0, r2
 8011360:	f7fe fbd9 	bl	800fb16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011368:	4b1b      	ldr	r3, [pc, #108]	; (80113d8 <xTaskIncrementTick+0x168>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136e:	429a      	cmp	r2, r3
 8011370:	d3b8      	bcc.n	80112e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011372:	2301      	movs	r3, #1
 8011374:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011376:	e7b5      	b.n	80112e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011378:	4b17      	ldr	r3, [pc, #92]	; (80113d8 <xTaskIncrementTick+0x168>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801137e:	4915      	ldr	r1, [pc, #84]	; (80113d4 <xTaskIncrementTick+0x164>)
 8011380:	4613      	mov	r3, r2
 8011382:	009b      	lsls	r3, r3, #2
 8011384:	4413      	add	r3, r2
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	440b      	add	r3, r1
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b01      	cmp	r3, #1
 801138e:	d901      	bls.n	8011394 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011390:	2301      	movs	r3, #1
 8011392:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011394:	4b11      	ldr	r3, [pc, #68]	; (80113dc <xTaskIncrementTick+0x16c>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d007      	beq.n	80113ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801139c:	2301      	movs	r3, #1
 801139e:	617b      	str	r3, [r7, #20]
 80113a0:	e004      	b.n	80113ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80113a2:	4b0f      	ldr	r3, [pc, #60]	; (80113e0 <xTaskIncrementTick+0x170>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	3301      	adds	r3, #1
 80113a8:	4a0d      	ldr	r2, [pc, #52]	; (80113e0 <xTaskIncrementTick+0x170>)
 80113aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113ac:	697b      	ldr	r3, [r7, #20]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3718      	adds	r7, #24
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	200015a0 	.word	0x200015a0
 80113bc:	2000157c 	.word	0x2000157c
 80113c0:	20001530 	.word	0x20001530
 80113c4:	20001534 	.word	0x20001534
 80113c8:	20001590 	.word	0x20001590
 80113cc:	20001598 	.word	0x20001598
 80113d0:	20001580 	.word	0x20001580
 80113d4:	200010a8 	.word	0x200010a8
 80113d8:	200010a4 	.word	0x200010a4
 80113dc:	2000158c 	.word	0x2000158c
 80113e0:	20001588 	.word	0x20001588

080113e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113e4:	b480      	push	{r7}
 80113e6:	b085      	sub	sp, #20
 80113e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113ea:	4b2a      	ldr	r3, [pc, #168]	; (8011494 <vTaskSwitchContext+0xb0>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113f2:	4b29      	ldr	r3, [pc, #164]	; (8011498 <vTaskSwitchContext+0xb4>)
 80113f4:	2201      	movs	r2, #1
 80113f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113f8:	e046      	b.n	8011488 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80113fa:	4b27      	ldr	r3, [pc, #156]	; (8011498 <vTaskSwitchContext+0xb4>)
 80113fc:	2200      	movs	r2, #0
 80113fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011400:	4b26      	ldr	r3, [pc, #152]	; (801149c <vTaskSwitchContext+0xb8>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	60fb      	str	r3, [r7, #12]
 8011406:	e010      	b.n	801142a <vTaskSwitchContext+0x46>
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d10a      	bne.n	8011424 <vTaskSwitchContext+0x40>
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	607b      	str	r3, [r7, #4]
}
 8011420:	bf00      	nop
 8011422:	e7fe      	b.n	8011422 <vTaskSwitchContext+0x3e>
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	3b01      	subs	r3, #1
 8011428:	60fb      	str	r3, [r7, #12]
 801142a:	491d      	ldr	r1, [pc, #116]	; (80114a0 <vTaskSwitchContext+0xbc>)
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	4613      	mov	r3, r2
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	4413      	add	r3, r2
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	440b      	add	r3, r1
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d0e4      	beq.n	8011408 <vTaskSwitchContext+0x24>
 801143e:	68fa      	ldr	r2, [r7, #12]
 8011440:	4613      	mov	r3, r2
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	4413      	add	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4a15      	ldr	r2, [pc, #84]	; (80114a0 <vTaskSwitchContext+0xbc>)
 801144a:	4413      	add	r3, r2
 801144c:	60bb      	str	r3, [r7, #8]
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	685a      	ldr	r2, [r3, #4]
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	605a      	str	r2, [r3, #4]
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	3308      	adds	r3, #8
 8011460:	429a      	cmp	r2, r3
 8011462:	d104      	bne.n	801146e <vTaskSwitchContext+0x8a>
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	685b      	ldr	r3, [r3, #4]
 8011468:	685a      	ldr	r2, [r3, #4]
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	605a      	str	r2, [r3, #4]
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	4a0b      	ldr	r2, [pc, #44]	; (80114a4 <vTaskSwitchContext+0xc0>)
 8011476:	6013      	str	r3, [r2, #0]
 8011478:	4a08      	ldr	r2, [pc, #32]	; (801149c <vTaskSwitchContext+0xb8>)
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801147e:	4b09      	ldr	r3, [pc, #36]	; (80114a4 <vTaskSwitchContext+0xc0>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	3354      	adds	r3, #84	; 0x54
 8011484:	4a08      	ldr	r2, [pc, #32]	; (80114a8 <vTaskSwitchContext+0xc4>)
 8011486:	6013      	str	r3, [r2, #0]
}
 8011488:	bf00      	nop
 801148a:	3714      	adds	r7, #20
 801148c:	46bd      	mov	sp, r7
 801148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011492:	4770      	bx	lr
 8011494:	200015a0 	.word	0x200015a0
 8011498:	2000158c 	.word	0x2000158c
 801149c:	20001580 	.word	0x20001580
 80114a0:	200010a8 	.word	0x200010a8
 80114a4:	200010a4 	.word	0x200010a4
 80114a8:	20000124 	.word	0x20000124

080114ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d10a      	bne.n	80114d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80114bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c0:	f383 8811 	msr	BASEPRI, r3
 80114c4:	f3bf 8f6f 	isb	sy
 80114c8:	f3bf 8f4f 	dsb	sy
 80114cc:	60fb      	str	r3, [r7, #12]
}
 80114ce:	bf00      	nop
 80114d0:	e7fe      	b.n	80114d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114d2:	4b07      	ldr	r3, [pc, #28]	; (80114f0 <vTaskPlaceOnEventList+0x44>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	3318      	adds	r3, #24
 80114d8:	4619      	mov	r1, r3
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f7fe fb3f 	bl	800fb5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114e0:	2101      	movs	r1, #1
 80114e2:	6838      	ldr	r0, [r7, #0]
 80114e4:	f000 fc34 	bl	8011d50 <prvAddCurrentTaskToDelayedList>
}
 80114e8:	bf00      	nop
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}
 80114f0:	200010a4 	.word	0x200010a4

080114f4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b086      	sub	sp, #24
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d10a      	bne.n	801151c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8011506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150a:	f383 8811 	msr	BASEPRI, r3
 801150e:	f3bf 8f6f 	isb	sy
 8011512:	f3bf 8f4f 	dsb	sy
 8011516:	617b      	str	r3, [r7, #20]
}
 8011518:	bf00      	nop
 801151a:	e7fe      	b.n	801151a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801151c:	4b11      	ldr	r3, [pc, #68]	; (8011564 <vTaskPlaceOnUnorderedEventList+0x70>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d10a      	bne.n	801153a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8011524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011528:	f383 8811 	msr	BASEPRI, r3
 801152c:	f3bf 8f6f 	isb	sy
 8011530:	f3bf 8f4f 	dsb	sy
 8011534:	613b      	str	r3, [r7, #16]
}
 8011536:	bf00      	nop
 8011538:	e7fe      	b.n	8011538 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801153a:	4b0b      	ldr	r3, [pc, #44]	; (8011568 <vTaskPlaceOnUnorderedEventList+0x74>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8011544:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011546:	4b08      	ldr	r3, [pc, #32]	; (8011568 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	3318      	adds	r3, #24
 801154c:	4619      	mov	r1, r3
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f7fe fae1 	bl	800fb16 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011554:	2101      	movs	r1, #1
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f000 fbfa 	bl	8011d50 <prvAddCurrentTaskToDelayedList>
}
 801155c:	bf00      	nop
 801155e:	3718      	adds	r7, #24
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}
 8011564:	200015a0 	.word	0x200015a0
 8011568:	200010a4 	.word	0x200010a4

0801156c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	60f8      	str	r0, [r7, #12]
 8011574:	60b9      	str	r1, [r7, #8]
 8011576:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d10a      	bne.n	8011594 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	617b      	str	r3, [r7, #20]
}
 8011590:	bf00      	nop
 8011592:	e7fe      	b.n	8011592 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011594:	4b0a      	ldr	r3, [pc, #40]	; (80115c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	3318      	adds	r3, #24
 801159a:	4619      	mov	r1, r3
 801159c:	68f8      	ldr	r0, [r7, #12]
 801159e:	f7fe faba 	bl	800fb16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d002      	beq.n	80115ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80115a8:	f04f 33ff 	mov.w	r3, #4294967295
 80115ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80115ae:	6879      	ldr	r1, [r7, #4]
 80115b0:	68b8      	ldr	r0, [r7, #8]
 80115b2:	f000 fbcd 	bl	8011d50 <prvAddCurrentTaskToDelayedList>
	}
 80115b6:	bf00      	nop
 80115b8:	3718      	adds	r7, #24
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	200010a4 	.word	0x200010a4

080115c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b086      	sub	sp, #24
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d10a      	bne.n	80115f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80115da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	60fb      	str	r3, [r7, #12]
}
 80115ec:	bf00      	nop
 80115ee:	e7fe      	b.n	80115ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	3318      	adds	r3, #24
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fe faeb 	bl	800fbd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115fa:	4b1e      	ldr	r3, [pc, #120]	; (8011674 <xTaskRemoveFromEventList+0xb0>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d11d      	bne.n	801163e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	3304      	adds	r3, #4
 8011606:	4618      	mov	r0, r3
 8011608:	f7fe fae2 	bl	800fbd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011610:	4b19      	ldr	r3, [pc, #100]	; (8011678 <xTaskRemoveFromEventList+0xb4>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	429a      	cmp	r2, r3
 8011616:	d903      	bls.n	8011620 <xTaskRemoveFromEventList+0x5c>
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801161c:	4a16      	ldr	r2, [pc, #88]	; (8011678 <xTaskRemoveFromEventList+0xb4>)
 801161e:	6013      	str	r3, [r2, #0]
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011624:	4613      	mov	r3, r2
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	4413      	add	r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4a13      	ldr	r2, [pc, #76]	; (801167c <xTaskRemoveFromEventList+0xb8>)
 801162e:	441a      	add	r2, r3
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	3304      	adds	r3, #4
 8011634:	4619      	mov	r1, r3
 8011636:	4610      	mov	r0, r2
 8011638:	f7fe fa6d 	bl	800fb16 <vListInsertEnd>
 801163c:	e005      	b.n	801164a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	3318      	adds	r3, #24
 8011642:	4619      	mov	r1, r3
 8011644:	480e      	ldr	r0, [pc, #56]	; (8011680 <xTaskRemoveFromEventList+0xbc>)
 8011646:	f7fe fa66 	bl	800fb16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801164e:	4b0d      	ldr	r3, [pc, #52]	; (8011684 <xTaskRemoveFromEventList+0xc0>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011654:	429a      	cmp	r2, r3
 8011656:	d905      	bls.n	8011664 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011658:	2301      	movs	r3, #1
 801165a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801165c:	4b0a      	ldr	r3, [pc, #40]	; (8011688 <xTaskRemoveFromEventList+0xc4>)
 801165e:	2201      	movs	r2, #1
 8011660:	601a      	str	r2, [r3, #0]
 8011662:	e001      	b.n	8011668 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011664:	2300      	movs	r3, #0
 8011666:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011668:	697b      	ldr	r3, [r7, #20]
}
 801166a:	4618      	mov	r0, r3
 801166c:	3718      	adds	r7, #24
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	200015a0 	.word	0x200015a0
 8011678:	20001580 	.word	0x20001580
 801167c:	200010a8 	.word	0x200010a8
 8011680:	20001538 	.word	0x20001538
 8011684:	200010a4 	.word	0x200010a4
 8011688:	2000158c 	.word	0x2000158c

0801168c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b086      	sub	sp, #24
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011696:	4b29      	ldr	r3, [pc, #164]	; (801173c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d10a      	bne.n	80116b4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801169e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	613b      	str	r3, [r7, #16]
}
 80116b0:	bf00      	nop
 80116b2:	e7fe      	b.n	80116b2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d10a      	bne.n	80116e0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80116ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ce:	f383 8811 	msr	BASEPRI, r3
 80116d2:	f3bf 8f6f 	isb	sy
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	60fb      	str	r3, [r7, #12]
}
 80116dc:	bf00      	nop
 80116de:	e7fe      	b.n	80116de <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f7fe fa75 	bl	800fbd0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	3304      	adds	r3, #4
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7fe fa70 	bl	800fbd0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116f4:	4b12      	ldr	r3, [pc, #72]	; (8011740 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d903      	bls.n	8011704 <vTaskRemoveFromUnorderedEventList+0x78>
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011700:	4a0f      	ldr	r2, [pc, #60]	; (8011740 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8011702:	6013      	str	r3, [r2, #0]
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011708:	4613      	mov	r3, r2
 801170a:	009b      	lsls	r3, r3, #2
 801170c:	4413      	add	r3, r2
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	4a0c      	ldr	r2, [pc, #48]	; (8011744 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011712:	441a      	add	r2, r3
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	3304      	adds	r3, #4
 8011718:	4619      	mov	r1, r3
 801171a:	4610      	mov	r0, r2
 801171c:	f7fe f9fb 	bl	800fb16 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011724:	4b08      	ldr	r3, [pc, #32]	; (8011748 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801172a:	429a      	cmp	r2, r3
 801172c:	d902      	bls.n	8011734 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801172e:	4b07      	ldr	r3, [pc, #28]	; (801174c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011730:	2201      	movs	r2, #1
 8011732:	601a      	str	r2, [r3, #0]
	}
}
 8011734:	bf00      	nop
 8011736:	3718      	adds	r7, #24
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	200015a0 	.word	0x200015a0
 8011740:	20001580 	.word	0x20001580
 8011744:	200010a8 	.word	0x200010a8
 8011748:	200010a4 	.word	0x200010a4
 801174c:	2000158c 	.word	0x2000158c

08011750 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011758:	4b06      	ldr	r3, [pc, #24]	; (8011774 <vTaskInternalSetTimeOutState+0x24>)
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011760:	4b05      	ldr	r3, [pc, #20]	; (8011778 <vTaskInternalSetTimeOutState+0x28>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	605a      	str	r2, [r3, #4]
}
 8011768:	bf00      	nop
 801176a:	370c      	adds	r7, #12
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr
 8011774:	20001590 	.word	0x20001590
 8011778:	2000157c 	.word	0x2000157c

0801177c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b088      	sub	sp, #32
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d10a      	bne.n	80117a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801178c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011790:	f383 8811 	msr	BASEPRI, r3
 8011794:	f3bf 8f6f 	isb	sy
 8011798:	f3bf 8f4f 	dsb	sy
 801179c:	613b      	str	r3, [r7, #16]
}
 801179e:	bf00      	nop
 80117a0:	e7fe      	b.n	80117a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d10a      	bne.n	80117be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80117a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	60fb      	str	r3, [r7, #12]
}
 80117ba:	bf00      	nop
 80117bc:	e7fe      	b.n	80117bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80117be:	f001 f871 	bl	80128a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80117c2:	4b1d      	ldr	r3, [pc, #116]	; (8011838 <xTaskCheckForTimeOut+0xbc>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	69ba      	ldr	r2, [r7, #24]
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117da:	d102      	bne.n	80117e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80117dc:	2300      	movs	r3, #0
 80117de:	61fb      	str	r3, [r7, #28]
 80117e0:	e023      	b.n	801182a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681a      	ldr	r2, [r3, #0]
 80117e6:	4b15      	ldr	r3, [pc, #84]	; (801183c <xTaskCheckForTimeOut+0xc0>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d007      	beq.n	80117fe <xTaskCheckForTimeOut+0x82>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	69ba      	ldr	r2, [r7, #24]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d302      	bcc.n	80117fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80117f8:	2301      	movs	r3, #1
 80117fa:	61fb      	str	r3, [r7, #28]
 80117fc:	e015      	b.n	801182a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	697a      	ldr	r2, [r7, #20]
 8011804:	429a      	cmp	r2, r3
 8011806:	d20b      	bcs.n	8011820 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	697b      	ldr	r3, [r7, #20]
 801180e:	1ad2      	subs	r2, r2, r3
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011814:	6878      	ldr	r0, [r7, #4]
 8011816:	f7ff ff9b 	bl	8011750 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801181a:	2300      	movs	r3, #0
 801181c:	61fb      	str	r3, [r7, #28]
 801181e:	e004      	b.n	801182a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	2200      	movs	r2, #0
 8011824:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011826:	2301      	movs	r3, #1
 8011828:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801182a:	f001 f86b 	bl	8012904 <vPortExitCritical>

	return xReturn;
 801182e:	69fb      	ldr	r3, [r7, #28]
}
 8011830:	4618      	mov	r0, r3
 8011832:	3720      	adds	r7, #32
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	2000157c 	.word	0x2000157c
 801183c:	20001590 	.word	0x20001590

08011840 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011840:	b480      	push	{r7}
 8011842:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011844:	4b03      	ldr	r3, [pc, #12]	; (8011854 <vTaskMissedYield+0x14>)
 8011846:	2201      	movs	r2, #1
 8011848:	601a      	str	r2, [r3, #0]
}
 801184a:	bf00      	nop
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	2000158c 	.word	0x2000158c

08011858 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011860:	f000 f852 	bl	8011908 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011864:	4b06      	ldr	r3, [pc, #24]	; (8011880 <prvIdleTask+0x28>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b01      	cmp	r3, #1
 801186a:	d9f9      	bls.n	8011860 <prvIdleTask+0x8>
			{
				taskYIELD();
 801186c:	4b05      	ldr	r3, [pc, #20]	; (8011884 <prvIdleTask+0x2c>)
 801186e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011872:	601a      	str	r2, [r3, #0]
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801187c:	e7f0      	b.n	8011860 <prvIdleTask+0x8>
 801187e:	bf00      	nop
 8011880:	200010a8 	.word	0x200010a8
 8011884:	e000ed04 	.word	0xe000ed04

08011888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801188e:	2300      	movs	r3, #0
 8011890:	607b      	str	r3, [r7, #4]
 8011892:	e00c      	b.n	80118ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	4613      	mov	r3, r2
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	4413      	add	r3, r2
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	4a12      	ldr	r2, [pc, #72]	; (80118e8 <prvInitialiseTaskLists+0x60>)
 80118a0:	4413      	add	r3, r2
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fe f90a 	bl	800fabc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	3301      	adds	r3, #1
 80118ac:	607b      	str	r3, [r7, #4]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2b37      	cmp	r3, #55	; 0x37
 80118b2:	d9ef      	bls.n	8011894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80118b4:	480d      	ldr	r0, [pc, #52]	; (80118ec <prvInitialiseTaskLists+0x64>)
 80118b6:	f7fe f901 	bl	800fabc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80118ba:	480d      	ldr	r0, [pc, #52]	; (80118f0 <prvInitialiseTaskLists+0x68>)
 80118bc:	f7fe f8fe 	bl	800fabc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80118c0:	480c      	ldr	r0, [pc, #48]	; (80118f4 <prvInitialiseTaskLists+0x6c>)
 80118c2:	f7fe f8fb 	bl	800fabc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80118c6:	480c      	ldr	r0, [pc, #48]	; (80118f8 <prvInitialiseTaskLists+0x70>)
 80118c8:	f7fe f8f8 	bl	800fabc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80118cc:	480b      	ldr	r0, [pc, #44]	; (80118fc <prvInitialiseTaskLists+0x74>)
 80118ce:	f7fe f8f5 	bl	800fabc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80118d2:	4b0b      	ldr	r3, [pc, #44]	; (8011900 <prvInitialiseTaskLists+0x78>)
 80118d4:	4a05      	ldr	r2, [pc, #20]	; (80118ec <prvInitialiseTaskLists+0x64>)
 80118d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80118d8:	4b0a      	ldr	r3, [pc, #40]	; (8011904 <prvInitialiseTaskLists+0x7c>)
 80118da:	4a05      	ldr	r2, [pc, #20]	; (80118f0 <prvInitialiseTaskLists+0x68>)
 80118dc:	601a      	str	r2, [r3, #0]
}
 80118de:	bf00      	nop
 80118e0:	3708      	adds	r7, #8
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	200010a8 	.word	0x200010a8
 80118ec:	20001508 	.word	0x20001508
 80118f0:	2000151c 	.word	0x2000151c
 80118f4:	20001538 	.word	0x20001538
 80118f8:	2000154c 	.word	0x2000154c
 80118fc:	20001564 	.word	0x20001564
 8011900:	20001530 	.word	0x20001530
 8011904:	20001534 	.word	0x20001534

08011908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801190e:	e019      	b.n	8011944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011910:	f000 ffc8 	bl	80128a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011914:	4b10      	ldr	r3, [pc, #64]	; (8011958 <prvCheckTasksWaitingTermination+0x50>)
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	3304      	adds	r3, #4
 8011920:	4618      	mov	r0, r3
 8011922:	f7fe f955 	bl	800fbd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011926:	4b0d      	ldr	r3, [pc, #52]	; (801195c <prvCheckTasksWaitingTermination+0x54>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	3b01      	subs	r3, #1
 801192c:	4a0b      	ldr	r2, [pc, #44]	; (801195c <prvCheckTasksWaitingTermination+0x54>)
 801192e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011930:	4b0b      	ldr	r3, [pc, #44]	; (8011960 <prvCheckTasksWaitingTermination+0x58>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	3b01      	subs	r3, #1
 8011936:	4a0a      	ldr	r2, [pc, #40]	; (8011960 <prvCheckTasksWaitingTermination+0x58>)
 8011938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801193a:	f000 ffe3 	bl	8012904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 f810 	bl	8011964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011944:	4b06      	ldr	r3, [pc, #24]	; (8011960 <prvCheckTasksWaitingTermination+0x58>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1e1      	bne.n	8011910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801194c:	bf00      	nop
 801194e:	bf00      	nop
 8011950:	3708      	adds	r7, #8
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	2000154c 	.word	0x2000154c
 801195c:	20001578 	.word	0x20001578
 8011960:	20001560 	.word	0x20001560

08011964 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	3354      	adds	r3, #84	; 0x54
 8011970:	4618      	mov	r0, r3
 8011972:	f002 ff87 	bl	8014884 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801197c:	2b00      	cmp	r3, #0
 801197e:	d108      	bne.n	8011992 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011984:	4618      	mov	r0, r3
 8011986:	f001 f97b 	bl	8012c80 <vPortFree>
				vPortFree( pxTCB );
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f001 f978 	bl	8012c80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011990:	e018      	b.n	80119c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011998:	2b01      	cmp	r3, #1
 801199a:	d103      	bne.n	80119a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f001 f96f 	bl	8012c80 <vPortFree>
	}
 80119a2:	e00f      	b.n	80119c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80119aa:	2b02      	cmp	r3, #2
 80119ac:	d00a      	beq.n	80119c4 <prvDeleteTCB+0x60>
	__asm volatile
 80119ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b2:	f383 8811 	msr	BASEPRI, r3
 80119b6:	f3bf 8f6f 	isb	sy
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	60fb      	str	r3, [r7, #12]
}
 80119c0:	bf00      	nop
 80119c2:	e7fe      	b.n	80119c2 <prvDeleteTCB+0x5e>
	}
 80119c4:	bf00      	nop
 80119c6:	3710      	adds	r7, #16
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}

080119cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119d2:	4b0c      	ldr	r3, [pc, #48]	; (8011a04 <prvResetNextTaskUnblockTime+0x38>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d104      	bne.n	80119e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80119dc:	4b0a      	ldr	r3, [pc, #40]	; (8011a08 <prvResetNextTaskUnblockTime+0x3c>)
 80119de:	f04f 32ff 	mov.w	r2, #4294967295
 80119e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80119e4:	e008      	b.n	80119f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119e6:	4b07      	ldr	r3, [pc, #28]	; (8011a04 <prvResetNextTaskUnblockTime+0x38>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	4a04      	ldr	r2, [pc, #16]	; (8011a08 <prvResetNextTaskUnblockTime+0x3c>)
 80119f6:	6013      	str	r3, [r2, #0]
}
 80119f8:	bf00      	nop
 80119fa:	370c      	adds	r7, #12
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr
 8011a04:	20001530 	.word	0x20001530
 8011a08:	20001598 	.word	0x20001598

08011a0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a0c:	b480      	push	{r7}
 8011a0e:	b083      	sub	sp, #12
 8011a10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a12:	4b0b      	ldr	r3, [pc, #44]	; (8011a40 <xTaskGetSchedulerState+0x34>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d102      	bne.n	8011a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	607b      	str	r3, [r7, #4]
 8011a1e:	e008      	b.n	8011a32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a20:	4b08      	ldr	r3, [pc, #32]	; (8011a44 <xTaskGetSchedulerState+0x38>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d102      	bne.n	8011a2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a28:	2302      	movs	r3, #2
 8011a2a:	607b      	str	r3, [r7, #4]
 8011a2c:	e001      	b.n	8011a32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011a32:	687b      	ldr	r3, [r7, #4]
	}
 8011a34:	4618      	mov	r0, r3
 8011a36:	370c      	adds	r7, #12
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3e:	4770      	bx	lr
 8011a40:	20001584 	.word	0x20001584
 8011a44:	200015a0 	.word	0x200015a0

08011a48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011a54:	2300      	movs	r3, #0
 8011a56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d051      	beq.n	8011b02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a62:	4b2a      	ldr	r3, [pc, #168]	; (8011b0c <xTaskPriorityInherit+0xc4>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d241      	bcs.n	8011af0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	699b      	ldr	r3, [r3, #24]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	db06      	blt.n	8011a82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a74:	4b25      	ldr	r3, [pc, #148]	; (8011b0c <xTaskPriorityInherit+0xc4>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	6959      	ldr	r1, [r3, #20]
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	4413      	add	r3, r2
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	4a1f      	ldr	r2, [pc, #124]	; (8011b10 <xTaskPriorityInherit+0xc8>)
 8011a94:	4413      	add	r3, r2
 8011a96:	4299      	cmp	r1, r3
 8011a98:	d122      	bne.n	8011ae0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	3304      	adds	r3, #4
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fe f896 	bl	800fbd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011aa4:	4b19      	ldr	r3, [pc, #100]	; (8011b0c <xTaskPriorityInherit+0xc4>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab2:	4b18      	ldr	r3, [pc, #96]	; (8011b14 <xTaskPriorityInherit+0xcc>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d903      	bls.n	8011ac2 <xTaskPriorityInherit+0x7a>
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011abe:	4a15      	ldr	r2, [pc, #84]	; (8011b14 <xTaskPriorityInherit+0xcc>)
 8011ac0:	6013      	str	r3, [r2, #0]
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	4413      	add	r3, r2
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	4a10      	ldr	r2, [pc, #64]	; (8011b10 <xTaskPriorityInherit+0xc8>)
 8011ad0:	441a      	add	r2, r3
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	4610      	mov	r0, r2
 8011ada:	f7fe f81c 	bl	800fb16 <vListInsertEnd>
 8011ade:	e004      	b.n	8011aea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ae0:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <xTaskPriorityInherit+0xc4>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011aea:	2301      	movs	r3, #1
 8011aec:	60fb      	str	r3, [r7, #12]
 8011aee:	e008      	b.n	8011b02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011af4:	4b05      	ldr	r3, [pc, #20]	; (8011b0c <xTaskPriorityInherit+0xc4>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d201      	bcs.n	8011b02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011afe:	2301      	movs	r3, #1
 8011b00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b02:	68fb      	ldr	r3, [r7, #12]
	}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3710      	adds	r7, #16
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	200010a4 	.word	0x200010a4
 8011b10:	200010a8 	.word	0x200010a8
 8011b14:	20001580 	.word	0x20001580

08011b18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b086      	sub	sp, #24
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011b24:	2300      	movs	r3, #0
 8011b26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d056      	beq.n	8011bdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011b2e:	4b2e      	ldr	r3, [pc, #184]	; (8011be8 <xTaskPriorityDisinherit+0xd0>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	693a      	ldr	r2, [r7, #16]
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d00a      	beq.n	8011b4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b3c:	f383 8811 	msr	BASEPRI, r3
 8011b40:	f3bf 8f6f 	isb	sy
 8011b44:	f3bf 8f4f 	dsb	sy
 8011b48:	60fb      	str	r3, [r7, #12]
}
 8011b4a:	bf00      	nop
 8011b4c:	e7fe      	b.n	8011b4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d10a      	bne.n	8011b6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5a:	f383 8811 	msr	BASEPRI, r3
 8011b5e:	f3bf 8f6f 	isb	sy
 8011b62:	f3bf 8f4f 	dsb	sy
 8011b66:	60bb      	str	r3, [r7, #8]
}
 8011b68:	bf00      	nop
 8011b6a:	e7fe      	b.n	8011b6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b70:	1e5a      	subs	r2, r3, #1
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7a:	693b      	ldr	r3, [r7, #16]
 8011b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d02c      	beq.n	8011bdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d128      	bne.n	8011bdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	3304      	adds	r3, #4
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7fe f81e 	bl	800fbd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bac:	4b0f      	ldr	r3, [pc, #60]	; (8011bec <xTaskPriorityDisinherit+0xd4>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d903      	bls.n	8011bbc <xTaskPriorityDisinherit+0xa4>
 8011bb4:	693b      	ldr	r3, [r7, #16]
 8011bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb8:	4a0c      	ldr	r2, [pc, #48]	; (8011bec <xTaskPriorityDisinherit+0xd4>)
 8011bba:	6013      	str	r3, [r2, #0]
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bc0:	4613      	mov	r3, r2
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	4413      	add	r3, r2
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	4a09      	ldr	r2, [pc, #36]	; (8011bf0 <xTaskPriorityDisinherit+0xd8>)
 8011bca:	441a      	add	r2, r3
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	3304      	adds	r3, #4
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	4610      	mov	r0, r2
 8011bd4:	f7fd ff9f 	bl	800fb16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011bd8:	2301      	movs	r3, #1
 8011bda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011bdc:	697b      	ldr	r3, [r7, #20]
	}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3718      	adds	r7, #24
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	200010a4 	.word	0x200010a4
 8011bec:	20001580 	.word	0x20001580
 8011bf0:	200010a8 	.word	0x200010a8

08011bf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b088      	sub	sp, #32
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011c02:	2301      	movs	r3, #1
 8011c04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d06a      	beq.n	8011ce2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10a      	bne.n	8011c2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c18:	f383 8811 	msr	BASEPRI, r3
 8011c1c:	f3bf 8f6f 	isb	sy
 8011c20:	f3bf 8f4f 	dsb	sy
 8011c24:	60fb      	str	r3, [r7, #12]
}
 8011c26:	bf00      	nop
 8011c28:	e7fe      	b.n	8011c28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c2e:	683a      	ldr	r2, [r7, #0]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d902      	bls.n	8011c3a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	61fb      	str	r3, [r7, #28]
 8011c38:	e002      	b.n	8011c40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011c3a:	69bb      	ldr	r3, [r7, #24]
 8011c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011c3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011c40:	69bb      	ldr	r3, [r7, #24]
 8011c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c44:	69fa      	ldr	r2, [r7, #28]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d04b      	beq.n	8011ce2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c4e:	697a      	ldr	r2, [r7, #20]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d146      	bne.n	8011ce2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011c54:	4b25      	ldr	r3, [pc, #148]	; (8011cec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	69ba      	ldr	r2, [r7, #24]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d10a      	bne.n	8011c74 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c62:	f383 8811 	msr	BASEPRI, r3
 8011c66:	f3bf 8f6f 	isb	sy
 8011c6a:	f3bf 8f4f 	dsb	sy
 8011c6e:	60bb      	str	r3, [r7, #8]
}
 8011c70:	bf00      	nop
 8011c72:	e7fe      	b.n	8011c72 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011c74:	69bb      	ldr	r3, [r7, #24]
 8011c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011c7a:	69bb      	ldr	r3, [r7, #24]
 8011c7c:	69fa      	ldr	r2, [r7, #28]
 8011c7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c80:	69bb      	ldr	r3, [r7, #24]
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	db04      	blt.n	8011c92 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011c8e:	69bb      	ldr	r3, [r7, #24]
 8011c90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	6959      	ldr	r1, [r3, #20]
 8011c96:	693a      	ldr	r2, [r7, #16]
 8011c98:	4613      	mov	r3, r2
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	4413      	add	r3, r2
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	4a13      	ldr	r2, [pc, #76]	; (8011cf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011ca2:	4413      	add	r3, r2
 8011ca4:	4299      	cmp	r1, r3
 8011ca6:	d11c      	bne.n	8011ce2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ca8:	69bb      	ldr	r3, [r7, #24]
 8011caa:	3304      	adds	r3, #4
 8011cac:	4618      	mov	r0, r3
 8011cae:	f7fd ff8f 	bl	800fbd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cb6:	4b0f      	ldr	r3, [pc, #60]	; (8011cf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d903      	bls.n	8011cc6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc2:	4a0c      	ldr	r2, [pc, #48]	; (8011cf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011cc4:	6013      	str	r3, [r2, #0]
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cca:	4613      	mov	r3, r2
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	4413      	add	r3, r2
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	4a07      	ldr	r2, [pc, #28]	; (8011cf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011cd4:	441a      	add	r2, r3
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	3304      	adds	r3, #4
 8011cda:	4619      	mov	r1, r3
 8011cdc:	4610      	mov	r0, r2
 8011cde:	f7fd ff1a 	bl	800fb16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ce2:	bf00      	nop
 8011ce4:	3720      	adds	r7, #32
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	200010a4 	.word	0x200010a4
 8011cf0:	200010a8 	.word	0x200010a8
 8011cf4:	20001580 	.word	0x20001580

08011cf8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8011cfe:	4b09      	ldr	r3, [pc, #36]	; (8011d24 <uxTaskResetEventItemValue+0x2c>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	699b      	ldr	r3, [r3, #24]
 8011d04:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d06:	4b07      	ldr	r3, [pc, #28]	; (8011d24 <uxTaskResetEventItemValue+0x2c>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d0c:	4b05      	ldr	r3, [pc, #20]	; (8011d24 <uxTaskResetEventItemValue+0x2c>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011d14:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011d16:	687b      	ldr	r3, [r7, #4]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr
 8011d24:	200010a4 	.word	0x200010a4

08011d28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011d28:	b480      	push	{r7}
 8011d2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011d2c:	4b07      	ldr	r3, [pc, #28]	; (8011d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d004      	beq.n	8011d3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011d34:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d3a:	3201      	adds	r2, #1
 8011d3c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011d3e:	4b03      	ldr	r3, [pc, #12]	; (8011d4c <pvTaskIncrementMutexHeldCount+0x24>)
 8011d40:	681b      	ldr	r3, [r3, #0]
	}
 8011d42:	4618      	mov	r0, r3
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr
 8011d4c:	200010a4 	.word	0x200010a4

08011d50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b084      	sub	sp, #16
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011d5a:	4b21      	ldr	r3, [pc, #132]	; (8011de0 <prvAddCurrentTaskToDelayedList+0x90>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d60:	4b20      	ldr	r3, [pc, #128]	; (8011de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	3304      	adds	r3, #4
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fd ff32 	bl	800fbd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d72:	d10a      	bne.n	8011d8a <prvAddCurrentTaskToDelayedList+0x3a>
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d007      	beq.n	8011d8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d7a:	4b1a      	ldr	r3, [pc, #104]	; (8011de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	3304      	adds	r3, #4
 8011d80:	4619      	mov	r1, r3
 8011d82:	4819      	ldr	r0, [pc, #100]	; (8011de8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011d84:	f7fd fec7 	bl	800fb16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011d88:	e026      	b.n	8011dd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011d8a:	68fa      	ldr	r2, [r7, #12]
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	4413      	add	r3, r2
 8011d90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011d92:	4b14      	ldr	r3, [pc, #80]	; (8011de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	68ba      	ldr	r2, [r7, #8]
 8011d98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011d9a:	68ba      	ldr	r2, [r7, #8]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d209      	bcs.n	8011db6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011da2:	4b12      	ldr	r3, [pc, #72]	; (8011dec <prvAddCurrentTaskToDelayedList+0x9c>)
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	4b0f      	ldr	r3, [pc, #60]	; (8011de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	3304      	adds	r3, #4
 8011dac:	4619      	mov	r1, r3
 8011dae:	4610      	mov	r0, r2
 8011db0:	f7fd fed5 	bl	800fb5e <vListInsert>
}
 8011db4:	e010      	b.n	8011dd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011db6:	4b0e      	ldr	r3, [pc, #56]	; (8011df0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011db8:	681a      	ldr	r2, [r3, #0]
 8011dba:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	3304      	adds	r3, #4
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	4610      	mov	r0, r2
 8011dc4:	f7fd fecb 	bl	800fb5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011dc8:	4b0a      	ldr	r3, [pc, #40]	; (8011df4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d202      	bcs.n	8011dd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011dd2:	4a08      	ldr	r2, [pc, #32]	; (8011df4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	6013      	str	r3, [r2, #0]
}
 8011dd8:	bf00      	nop
 8011dda:	3710      	adds	r7, #16
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	2000157c 	.word	0x2000157c
 8011de4:	200010a4 	.word	0x200010a4
 8011de8:	20001564 	.word	0x20001564
 8011dec:	20001534 	.word	0x20001534
 8011df0:	20001530 	.word	0x20001530
 8011df4:	20001598 	.word	0x20001598

08011df8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b08a      	sub	sp, #40	; 0x28
 8011dfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011e02:	f000 fba1 	bl	8012548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011e06:	4b1c      	ldr	r3, [pc, #112]	; (8011e78 <xTimerCreateTimerTask+0x80>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d021      	beq.n	8011e52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011e12:	2300      	movs	r3, #0
 8011e14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011e16:	1d3a      	adds	r2, r7, #4
 8011e18:	f107 0108 	add.w	r1, r7, #8
 8011e1c:	f107 030c 	add.w	r3, r7, #12
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fd fc43 	bl	800f6ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011e26:	6879      	ldr	r1, [r7, #4]
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	68fa      	ldr	r2, [r7, #12]
 8011e2c:	9202      	str	r2, [sp, #8]
 8011e2e:	9301      	str	r3, [sp, #4]
 8011e30:	2302      	movs	r3, #2
 8011e32:	9300      	str	r3, [sp, #0]
 8011e34:	2300      	movs	r3, #0
 8011e36:	460a      	mov	r2, r1
 8011e38:	4910      	ldr	r1, [pc, #64]	; (8011e7c <xTimerCreateTimerTask+0x84>)
 8011e3a:	4811      	ldr	r0, [pc, #68]	; (8011e80 <xTimerCreateTimerTask+0x88>)
 8011e3c:	f7fe ff00 	bl	8010c40 <xTaskCreateStatic>
 8011e40:	4603      	mov	r3, r0
 8011e42:	4a10      	ldr	r2, [pc, #64]	; (8011e84 <xTimerCreateTimerTask+0x8c>)
 8011e44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011e46:	4b0f      	ldr	r3, [pc, #60]	; (8011e84 <xTimerCreateTimerTask+0x8c>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d001      	beq.n	8011e52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011e4e:	2301      	movs	r3, #1
 8011e50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d10a      	bne.n	8011e6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5c:	f383 8811 	msr	BASEPRI, r3
 8011e60:	f3bf 8f6f 	isb	sy
 8011e64:	f3bf 8f4f 	dsb	sy
 8011e68:	613b      	str	r3, [r7, #16]
}
 8011e6a:	bf00      	nop
 8011e6c:	e7fe      	b.n	8011e6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011e6e:	697b      	ldr	r3, [r7, #20]
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3718      	adds	r7, #24
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	200015d4 	.word	0x200015d4
 8011e7c:	08016a84 	.word	0x08016a84
 8011e80:	080120f1 	.word	0x080120f1
 8011e84:	200015d8 	.word	0x200015d8

08011e88 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b088      	sub	sp, #32
 8011e8c:	af02      	add	r7, sp, #8
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
 8011e94:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011e96:	202c      	movs	r0, #44	; 0x2c
 8011e98:	f000 fe26 	bl	8012ae8 <pvPortMalloc>
 8011e9c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d00d      	beq.n	8011ec0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	2200      	movs	r2, #0
 8011ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	9301      	str	r3, [sp, #4]
 8011eb0:	6a3b      	ldr	r3, [r7, #32]
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	68b9      	ldr	r1, [r7, #8]
 8011eba:	68f8      	ldr	r0, [r7, #12]
 8011ebc:	f000 f843 	bl	8011f46 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011ec0:	697b      	ldr	r3, [r7, #20]
	}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	3718      	adds	r7, #24
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}

08011eca <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011eca:	b580      	push	{r7, lr}
 8011ecc:	b08a      	sub	sp, #40	; 0x28
 8011ece:	af02      	add	r7, sp, #8
 8011ed0:	60f8      	str	r0, [r7, #12]
 8011ed2:	60b9      	str	r1, [r7, #8]
 8011ed4:	607a      	str	r2, [r7, #4]
 8011ed6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011ed8:	232c      	movs	r3, #44	; 0x2c
 8011eda:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	2b2c      	cmp	r3, #44	; 0x2c
 8011ee0:	d00a      	beq.n	8011ef8 <xTimerCreateStatic+0x2e>
	__asm volatile
 8011ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee6:	f383 8811 	msr	BASEPRI, r3
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	f3bf 8f4f 	dsb	sy
 8011ef2:	61bb      	str	r3, [r7, #24]
}
 8011ef4:	bf00      	nop
 8011ef6:	e7fe      	b.n	8011ef6 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011ef8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d10a      	bne.n	8011f16 <xTimerCreateStatic+0x4c>
	__asm volatile
 8011f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	617b      	str	r3, [r7, #20]
}
 8011f12:	bf00      	nop
 8011f14:	e7fe      	b.n	8011f14 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f18:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00d      	beq.n	8011f3c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	2202      	movs	r2, #2
 8011f24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	9301      	str	r3, [sp, #4]
 8011f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2e:	9300      	str	r3, [sp, #0]
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	68b9      	ldr	r1, [r7, #8]
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f000 f805 	bl	8011f46 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011f3c:	69fb      	ldr	r3, [r7, #28]
	}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3720      	adds	r7, #32
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b086      	sub	sp, #24
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	60f8      	str	r0, [r7, #12]
 8011f4e:	60b9      	str	r1, [r7, #8]
 8011f50:	607a      	str	r2, [r7, #4]
 8011f52:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d10a      	bne.n	8011f70 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8011f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f5e:	f383 8811 	msr	BASEPRI, r3
 8011f62:	f3bf 8f6f 	isb	sy
 8011f66:	f3bf 8f4f 	dsb	sy
 8011f6a:	617b      	str	r3, [r7, #20]
}
 8011f6c:	bf00      	nop
 8011f6e:	e7fe      	b.n	8011f6e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d01e      	beq.n	8011fb4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011f76:	f000 fae7 	bl	8012548 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7c:	68fa      	ldr	r2, [r7, #12]
 8011f7e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f82:	68ba      	ldr	r2, [r7, #8]
 8011f84:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	683a      	ldr	r2, [r7, #0]
 8011f8a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8e:	6a3a      	ldr	r2, [r7, #32]
 8011f90:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f94:	3304      	adds	r3, #4
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fd fdb0 	bl	800fafc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d008      	beq.n	8011fb4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fa8:	f043 0304 	orr.w	r3, r3, #4
 8011fac:	b2da      	uxtb	r2, r3
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011fb4:	bf00      	nop
 8011fb6:	3718      	adds	r7, #24
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b08a      	sub	sp, #40	; 0x28
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	60f8      	str	r0, [r7, #12]
 8011fc4:	60b9      	str	r1, [r7, #8]
 8011fc6:	607a      	str	r2, [r7, #4]
 8011fc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d10a      	bne.n	8011fea <xTimerGenericCommand+0x2e>
	__asm volatile
 8011fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd8:	f383 8811 	msr	BASEPRI, r3
 8011fdc:	f3bf 8f6f 	isb	sy
 8011fe0:	f3bf 8f4f 	dsb	sy
 8011fe4:	623b      	str	r3, [r7, #32]
}
 8011fe6:	bf00      	nop
 8011fe8:	e7fe      	b.n	8011fe8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011fea:	4b1a      	ldr	r3, [pc, #104]	; (8012054 <xTimerGenericCommand+0x98>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d02a      	beq.n	8012048 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	2b05      	cmp	r3, #5
 8012002:	dc18      	bgt.n	8012036 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012004:	f7ff fd02 	bl	8011a0c <xTaskGetSchedulerState>
 8012008:	4603      	mov	r3, r0
 801200a:	2b02      	cmp	r3, #2
 801200c:	d109      	bne.n	8012022 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801200e:	4b11      	ldr	r3, [pc, #68]	; (8012054 <xTimerGenericCommand+0x98>)
 8012010:	6818      	ldr	r0, [r3, #0]
 8012012:	f107 0110 	add.w	r1, r7, #16
 8012016:	2300      	movs	r3, #0
 8012018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801201a:	f7fd ffab 	bl	800ff74 <xQueueGenericSend>
 801201e:	6278      	str	r0, [r7, #36]	; 0x24
 8012020:	e012      	b.n	8012048 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012022:	4b0c      	ldr	r3, [pc, #48]	; (8012054 <xTimerGenericCommand+0x98>)
 8012024:	6818      	ldr	r0, [r3, #0]
 8012026:	f107 0110 	add.w	r1, r7, #16
 801202a:	2300      	movs	r3, #0
 801202c:	2200      	movs	r2, #0
 801202e:	f7fd ffa1 	bl	800ff74 <xQueueGenericSend>
 8012032:	6278      	str	r0, [r7, #36]	; 0x24
 8012034:	e008      	b.n	8012048 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012036:	4b07      	ldr	r3, [pc, #28]	; (8012054 <xTimerGenericCommand+0x98>)
 8012038:	6818      	ldr	r0, [r3, #0]
 801203a:	f107 0110 	add.w	r1, r7, #16
 801203e:	2300      	movs	r3, #0
 8012040:	683a      	ldr	r2, [r7, #0]
 8012042:	f7fe f895 	bl	8010170 <xQueueGenericSendFromISR>
 8012046:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801204a:	4618      	mov	r0, r3
 801204c:	3728      	adds	r7, #40	; 0x28
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	200015d4 	.word	0x200015d4

08012058 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b088      	sub	sp, #32
 801205c:	af02      	add	r7, sp, #8
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012062:	4b22      	ldr	r3, [pc, #136]	; (80120ec <prvProcessExpiredTimer+0x94>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	68db      	ldr	r3, [r3, #12]
 8012068:	68db      	ldr	r3, [r3, #12]
 801206a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	3304      	adds	r3, #4
 8012070:	4618      	mov	r0, r3
 8012072:	f7fd fdad 	bl	800fbd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012076:	697b      	ldr	r3, [r7, #20]
 8012078:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801207c:	f003 0304 	and.w	r3, r3, #4
 8012080:	2b00      	cmp	r3, #0
 8012082:	d022      	beq.n	80120ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	699a      	ldr	r2, [r3, #24]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	18d1      	adds	r1, r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	683a      	ldr	r2, [r7, #0]
 8012090:	6978      	ldr	r0, [r7, #20]
 8012092:	f000 f8d1 	bl	8012238 <prvInsertTimerInActiveList>
 8012096:	4603      	mov	r3, r0
 8012098:	2b00      	cmp	r3, #0
 801209a:	d01f      	beq.n	80120dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801209c:	2300      	movs	r3, #0
 801209e:	9300      	str	r3, [sp, #0]
 80120a0:	2300      	movs	r3, #0
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	2100      	movs	r1, #0
 80120a6:	6978      	ldr	r0, [r7, #20]
 80120a8:	f7ff ff88 	bl	8011fbc <xTimerGenericCommand>
 80120ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d113      	bne.n	80120dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80120b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b8:	f383 8811 	msr	BASEPRI, r3
 80120bc:	f3bf 8f6f 	isb	sy
 80120c0:	f3bf 8f4f 	dsb	sy
 80120c4:	60fb      	str	r3, [r7, #12]
}
 80120c6:	bf00      	nop
 80120c8:	e7fe      	b.n	80120c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120d0:	f023 0301 	bic.w	r3, r3, #1
 80120d4:	b2da      	uxtb	r2, r3
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	6a1b      	ldr	r3, [r3, #32]
 80120e0:	6978      	ldr	r0, [r7, #20]
 80120e2:	4798      	blx	r3
}
 80120e4:	bf00      	nop
 80120e6:	3718      	adds	r7, #24
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	200015cc 	.word	0x200015cc

080120f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80120f8:	f107 0308 	add.w	r3, r7, #8
 80120fc:	4618      	mov	r0, r3
 80120fe:	f000 f857 	bl	80121b0 <prvGetNextExpireTime>
 8012102:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	4619      	mov	r1, r3
 8012108:	68f8      	ldr	r0, [r7, #12]
 801210a:	f000 f803 	bl	8012114 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801210e:	f000 f8d5 	bl	80122bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012112:	e7f1      	b.n	80120f8 <prvTimerTask+0x8>

08012114 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801211e:	f7fe ffeb 	bl	80110f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012122:	f107 0308 	add.w	r3, r7, #8
 8012126:	4618      	mov	r0, r3
 8012128:	f000 f866 	bl	80121f8 <prvSampleTimeNow>
 801212c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d130      	bne.n	8012196 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d10a      	bne.n	8012150 <prvProcessTimerOrBlockTask+0x3c>
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	429a      	cmp	r2, r3
 8012140:	d806      	bhi.n	8012150 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012142:	f7fe ffe7 	bl	8011114 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012146:	68f9      	ldr	r1, [r7, #12]
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7ff ff85 	bl	8012058 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801214e:	e024      	b.n	801219a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d008      	beq.n	8012168 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012156:	4b13      	ldr	r3, [pc, #76]	; (80121a4 <prvProcessTimerOrBlockTask+0x90>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d101      	bne.n	8012164 <prvProcessTimerOrBlockTask+0x50>
 8012160:	2301      	movs	r3, #1
 8012162:	e000      	b.n	8012166 <prvProcessTimerOrBlockTask+0x52>
 8012164:	2300      	movs	r3, #0
 8012166:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012168:	4b0f      	ldr	r3, [pc, #60]	; (80121a8 <prvProcessTimerOrBlockTask+0x94>)
 801216a:	6818      	ldr	r0, [r3, #0]
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	1ad3      	subs	r3, r2, r3
 8012172:	683a      	ldr	r2, [r7, #0]
 8012174:	4619      	mov	r1, r3
 8012176:	f7fe fd2f 	bl	8010bd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801217a:	f7fe ffcb 	bl	8011114 <xTaskResumeAll>
 801217e:	4603      	mov	r3, r0
 8012180:	2b00      	cmp	r3, #0
 8012182:	d10a      	bne.n	801219a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012184:	4b09      	ldr	r3, [pc, #36]	; (80121ac <prvProcessTimerOrBlockTask+0x98>)
 8012186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801218a:	601a      	str	r2, [r3, #0]
 801218c:	f3bf 8f4f 	dsb	sy
 8012190:	f3bf 8f6f 	isb	sy
}
 8012194:	e001      	b.n	801219a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012196:	f7fe ffbd 	bl	8011114 <xTaskResumeAll>
}
 801219a:	bf00      	nop
 801219c:	3710      	adds	r7, #16
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	200015d0 	.word	0x200015d0
 80121a8:	200015d4 	.word	0x200015d4
 80121ac:	e000ed04 	.word	0xe000ed04

080121b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80121b0:	b480      	push	{r7}
 80121b2:	b085      	sub	sp, #20
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80121b8:	4b0e      	ldr	r3, [pc, #56]	; (80121f4 <prvGetNextExpireTime+0x44>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d101      	bne.n	80121c6 <prvGetNextExpireTime+0x16>
 80121c2:	2201      	movs	r2, #1
 80121c4:	e000      	b.n	80121c8 <prvGetNextExpireTime+0x18>
 80121c6:	2200      	movs	r2, #0
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d105      	bne.n	80121e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80121d4:	4b07      	ldr	r3, [pc, #28]	; (80121f4 <prvGetNextExpireTime+0x44>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	60fb      	str	r3, [r7, #12]
 80121de:	e001      	b.n	80121e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80121e0:	2300      	movs	r3, #0
 80121e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80121e4:	68fb      	ldr	r3, [r7, #12]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3714      	adds	r7, #20
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	200015cc 	.word	0x200015cc

080121f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012200:	f7ff f826 	bl	8011250 <xTaskGetTickCount>
 8012204:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012206:	4b0b      	ldr	r3, [pc, #44]	; (8012234 <prvSampleTimeNow+0x3c>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	68fa      	ldr	r2, [r7, #12]
 801220c:	429a      	cmp	r2, r3
 801220e:	d205      	bcs.n	801221c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012210:	f000 f936 	bl	8012480 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2201      	movs	r2, #1
 8012218:	601a      	str	r2, [r3, #0]
 801221a:	e002      	b.n	8012222 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2200      	movs	r2, #0
 8012220:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012222:	4a04      	ldr	r2, [pc, #16]	; (8012234 <prvSampleTimeNow+0x3c>)
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012228:	68fb      	ldr	r3, [r7, #12]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	200015dc 	.word	0x200015dc

08012238 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b086      	sub	sp, #24
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]
 8012244:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012246:	2300      	movs	r3, #0
 8012248:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	68ba      	ldr	r2, [r7, #8]
 801224e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	68fa      	ldr	r2, [r7, #12]
 8012254:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012256:	68ba      	ldr	r2, [r7, #8]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	429a      	cmp	r2, r3
 801225c:	d812      	bhi.n	8012284 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801225e:	687a      	ldr	r2, [r7, #4]
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	1ad2      	subs	r2, r2, r3
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	699b      	ldr	r3, [r3, #24]
 8012268:	429a      	cmp	r2, r3
 801226a:	d302      	bcc.n	8012272 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801226c:	2301      	movs	r3, #1
 801226e:	617b      	str	r3, [r7, #20]
 8012270:	e01b      	b.n	80122aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012272:	4b10      	ldr	r3, [pc, #64]	; (80122b4 <prvInsertTimerInActiveList+0x7c>)
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	3304      	adds	r3, #4
 801227a:	4619      	mov	r1, r3
 801227c:	4610      	mov	r0, r2
 801227e:	f7fd fc6e 	bl	800fb5e <vListInsert>
 8012282:	e012      	b.n	80122aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012284:	687a      	ldr	r2, [r7, #4]
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	429a      	cmp	r2, r3
 801228a:	d206      	bcs.n	801229a <prvInsertTimerInActiveList+0x62>
 801228c:	68ba      	ldr	r2, [r7, #8]
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	429a      	cmp	r2, r3
 8012292:	d302      	bcc.n	801229a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012294:	2301      	movs	r3, #1
 8012296:	617b      	str	r3, [r7, #20]
 8012298:	e007      	b.n	80122aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801229a:	4b07      	ldr	r3, [pc, #28]	; (80122b8 <prvInsertTimerInActiveList+0x80>)
 801229c:	681a      	ldr	r2, [r3, #0]
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	3304      	adds	r3, #4
 80122a2:	4619      	mov	r1, r3
 80122a4:	4610      	mov	r0, r2
 80122a6:	f7fd fc5a 	bl	800fb5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80122aa:	697b      	ldr	r3, [r7, #20]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}
 80122b4:	200015d0 	.word	0x200015d0
 80122b8:	200015cc 	.word	0x200015cc

080122bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b08e      	sub	sp, #56	; 0x38
 80122c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80122c2:	e0ca      	b.n	801245a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	da18      	bge.n	80122fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80122ca:	1d3b      	adds	r3, r7, #4
 80122cc:	3304      	adds	r3, #4
 80122ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80122d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d10a      	bne.n	80122ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80122d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122da:	f383 8811 	msr	BASEPRI, r3
 80122de:	f3bf 8f6f 	isb	sy
 80122e2:	f3bf 8f4f 	dsb	sy
 80122e6:	61fb      	str	r3, [r7, #28]
}
 80122e8:	bf00      	nop
 80122ea:	e7fe      	b.n	80122ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80122ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122f2:	6850      	ldr	r0, [r2, #4]
 80122f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122f6:	6892      	ldr	r2, [r2, #8]
 80122f8:	4611      	mov	r1, r2
 80122fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f2c0 80aa 	blt.w	8012458 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230a:	695b      	ldr	r3, [r3, #20]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d004      	beq.n	801231a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012312:	3304      	adds	r3, #4
 8012314:	4618      	mov	r0, r3
 8012316:	f7fd fc5b 	bl	800fbd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801231a:	463b      	mov	r3, r7
 801231c:	4618      	mov	r0, r3
 801231e:	f7ff ff6b 	bl	80121f8 <prvSampleTimeNow>
 8012322:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b09      	cmp	r3, #9
 8012328:	f200 8097 	bhi.w	801245a <prvProcessReceivedCommands+0x19e>
 801232c:	a201      	add	r2, pc, #4	; (adr r2, 8012334 <prvProcessReceivedCommands+0x78>)
 801232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012332:	bf00      	nop
 8012334:	0801235d 	.word	0x0801235d
 8012338:	0801235d 	.word	0x0801235d
 801233c:	0801235d 	.word	0x0801235d
 8012340:	080123d1 	.word	0x080123d1
 8012344:	080123e5 	.word	0x080123e5
 8012348:	0801242f 	.word	0x0801242f
 801234c:	0801235d 	.word	0x0801235d
 8012350:	0801235d 	.word	0x0801235d
 8012354:	080123d1 	.word	0x080123d1
 8012358:	080123e5 	.word	0x080123e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801235c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012362:	f043 0301 	orr.w	r3, r3, #1
 8012366:	b2da      	uxtb	r2, r3
 8012368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801236a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012372:	699b      	ldr	r3, [r3, #24]
 8012374:	18d1      	adds	r1, r2, r3
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801237a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801237c:	f7ff ff5c 	bl	8012238 <prvInsertTimerInActiveList>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d069      	beq.n	801245a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012388:	6a1b      	ldr	r3, [r3, #32]
 801238a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801238c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012390:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012394:	f003 0304 	and.w	r3, r3, #4
 8012398:	2b00      	cmp	r3, #0
 801239a:	d05e      	beq.n	801245a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a0:	699b      	ldr	r3, [r3, #24]
 80123a2:	441a      	add	r2, r3
 80123a4:	2300      	movs	r3, #0
 80123a6:	9300      	str	r3, [sp, #0]
 80123a8:	2300      	movs	r3, #0
 80123aa:	2100      	movs	r1, #0
 80123ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80123ae:	f7ff fe05 	bl	8011fbc <xTimerGenericCommand>
 80123b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80123b4:	6a3b      	ldr	r3, [r7, #32]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d14f      	bne.n	801245a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80123ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123be:	f383 8811 	msr	BASEPRI, r3
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	61bb      	str	r3, [r7, #24]
}
 80123cc:	bf00      	nop
 80123ce:	e7fe      	b.n	80123ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80123d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123d6:	f023 0301 	bic.w	r3, r3, #1
 80123da:	b2da      	uxtb	r2, r3
 80123dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80123e2:	e03a      	b.n	801245a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80123e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123ea:	f043 0301 	orr.w	r3, r3, #1
 80123ee:	b2da      	uxtb	r2, r3
 80123f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80123f6:	68ba      	ldr	r2, [r7, #8]
 80123f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	699b      	ldr	r3, [r3, #24]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d10a      	bne.n	801241a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012408:	f383 8811 	msr	BASEPRI, r3
 801240c:	f3bf 8f6f 	isb	sy
 8012410:	f3bf 8f4f 	dsb	sy
 8012414:	617b      	str	r3, [r7, #20]
}
 8012416:	bf00      	nop
 8012418:	e7fe      	b.n	8012418 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801241c:	699a      	ldr	r2, [r3, #24]
 801241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012420:	18d1      	adds	r1, r2, r3
 8012422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012428:	f7ff ff06 	bl	8012238 <prvInsertTimerInActiveList>
					break;
 801242c:	e015      	b.n	801245a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012434:	f003 0302 	and.w	r3, r3, #2
 8012438:	2b00      	cmp	r3, #0
 801243a:	d103      	bne.n	8012444 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801243c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801243e:	f000 fc1f 	bl	8012c80 <vPortFree>
 8012442:	e00a      	b.n	801245a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801244a:	f023 0301 	bic.w	r3, r3, #1
 801244e:	b2da      	uxtb	r2, r3
 8012450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012456:	e000      	b.n	801245a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012458:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801245a:	4b08      	ldr	r3, [pc, #32]	; (801247c <prvProcessReceivedCommands+0x1c0>)
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	1d39      	adds	r1, r7, #4
 8012460:	2200      	movs	r2, #0
 8012462:	4618      	mov	r0, r3
 8012464:	f7fd ffac 	bl	80103c0 <xQueueReceive>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	f47f af2a 	bne.w	80122c4 <prvProcessReceivedCommands+0x8>
	}
}
 8012470:	bf00      	nop
 8012472:	bf00      	nop
 8012474:	3730      	adds	r7, #48	; 0x30
 8012476:	46bd      	mov	sp, r7
 8012478:	bd80      	pop	{r7, pc}
 801247a:	bf00      	nop
 801247c:	200015d4 	.word	0x200015d4

08012480 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b088      	sub	sp, #32
 8012484:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012486:	e048      	b.n	801251a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012488:	4b2d      	ldr	r3, [pc, #180]	; (8012540 <prvSwitchTimerLists+0xc0>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	68db      	ldr	r3, [r3, #12]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012492:	4b2b      	ldr	r3, [pc, #172]	; (8012540 <prvSwitchTimerLists+0xc0>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	3304      	adds	r3, #4
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fd fb95 	bl	800fbd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	6a1b      	ldr	r3, [r3, #32]
 80124aa:	68f8      	ldr	r0, [r7, #12]
 80124ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b4:	f003 0304 	and.w	r3, r3, #4
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d02e      	beq.n	801251a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	693a      	ldr	r2, [r7, #16]
 80124c2:	4413      	add	r3, r2
 80124c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d90e      	bls.n	80124ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	68ba      	ldr	r2, [r7, #8]
 80124d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	68fa      	ldr	r2, [r7, #12]
 80124d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80124da:	4b19      	ldr	r3, [pc, #100]	; (8012540 <prvSwitchTimerLists+0xc0>)
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	3304      	adds	r3, #4
 80124e2:	4619      	mov	r1, r3
 80124e4:	4610      	mov	r0, r2
 80124e6:	f7fd fb3a 	bl	800fb5e <vListInsert>
 80124ea:	e016      	b.n	801251a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80124ec:	2300      	movs	r3, #0
 80124ee:	9300      	str	r3, [sp, #0]
 80124f0:	2300      	movs	r3, #0
 80124f2:	693a      	ldr	r2, [r7, #16]
 80124f4:	2100      	movs	r1, #0
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	f7ff fd60 	bl	8011fbc <xTimerGenericCommand>
 80124fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d10a      	bne.n	801251a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012508:	f383 8811 	msr	BASEPRI, r3
 801250c:	f3bf 8f6f 	isb	sy
 8012510:	f3bf 8f4f 	dsb	sy
 8012514:	603b      	str	r3, [r7, #0]
}
 8012516:	bf00      	nop
 8012518:	e7fe      	b.n	8012518 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801251a:	4b09      	ldr	r3, [pc, #36]	; (8012540 <prvSwitchTimerLists+0xc0>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d1b1      	bne.n	8012488 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012524:	4b06      	ldr	r3, [pc, #24]	; (8012540 <prvSwitchTimerLists+0xc0>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801252a:	4b06      	ldr	r3, [pc, #24]	; (8012544 <prvSwitchTimerLists+0xc4>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	4a04      	ldr	r2, [pc, #16]	; (8012540 <prvSwitchTimerLists+0xc0>)
 8012530:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012532:	4a04      	ldr	r2, [pc, #16]	; (8012544 <prvSwitchTimerLists+0xc4>)
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	6013      	str	r3, [r2, #0]
}
 8012538:	bf00      	nop
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	200015cc 	.word	0x200015cc
 8012544:	200015d0 	.word	0x200015d0

08012548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801254e:	f000 f9a9 	bl	80128a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012552:	4b15      	ldr	r3, [pc, #84]	; (80125a8 <prvCheckForValidListAndQueue+0x60>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d120      	bne.n	801259c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801255a:	4814      	ldr	r0, [pc, #80]	; (80125ac <prvCheckForValidListAndQueue+0x64>)
 801255c:	f7fd faae 	bl	800fabc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012560:	4813      	ldr	r0, [pc, #76]	; (80125b0 <prvCheckForValidListAndQueue+0x68>)
 8012562:	f7fd faab 	bl	800fabc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012566:	4b13      	ldr	r3, [pc, #76]	; (80125b4 <prvCheckForValidListAndQueue+0x6c>)
 8012568:	4a10      	ldr	r2, [pc, #64]	; (80125ac <prvCheckForValidListAndQueue+0x64>)
 801256a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801256c:	4b12      	ldr	r3, [pc, #72]	; (80125b8 <prvCheckForValidListAndQueue+0x70>)
 801256e:	4a10      	ldr	r2, [pc, #64]	; (80125b0 <prvCheckForValidListAndQueue+0x68>)
 8012570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012572:	2300      	movs	r3, #0
 8012574:	9300      	str	r3, [sp, #0]
 8012576:	4b11      	ldr	r3, [pc, #68]	; (80125bc <prvCheckForValidListAndQueue+0x74>)
 8012578:	4a11      	ldr	r2, [pc, #68]	; (80125c0 <prvCheckForValidListAndQueue+0x78>)
 801257a:	2110      	movs	r1, #16
 801257c:	200a      	movs	r0, #10
 801257e:	f7fd fbb9 	bl	800fcf4 <xQueueGenericCreateStatic>
 8012582:	4603      	mov	r3, r0
 8012584:	4a08      	ldr	r2, [pc, #32]	; (80125a8 <prvCheckForValidListAndQueue+0x60>)
 8012586:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012588:	4b07      	ldr	r3, [pc, #28]	; (80125a8 <prvCheckForValidListAndQueue+0x60>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d005      	beq.n	801259c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012590:	4b05      	ldr	r3, [pc, #20]	; (80125a8 <prvCheckForValidListAndQueue+0x60>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	490b      	ldr	r1, [pc, #44]	; (80125c4 <prvCheckForValidListAndQueue+0x7c>)
 8012596:	4618      	mov	r0, r3
 8012598:	f7fe faca 	bl	8010b30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801259c:	f000 f9b2 	bl	8012904 <vPortExitCritical>
}
 80125a0:	bf00      	nop
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	200015d4 	.word	0x200015d4
 80125ac:	200015a4 	.word	0x200015a4
 80125b0:	200015b8 	.word	0x200015b8
 80125b4:	200015cc 	.word	0x200015cc
 80125b8:	200015d0 	.word	0x200015d0
 80125bc:	20001680 	.word	0x20001680
 80125c0:	200015e0 	.word	0x200015e0
 80125c4:	08016a8c 	.word	0x08016a8c

080125c8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b086      	sub	sp, #24
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10a      	bne.n	80125f0 <pvTimerGetTimerID+0x28>
	__asm volatile
 80125da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125de:	f383 8811 	msr	BASEPRI, r3
 80125e2:	f3bf 8f6f 	isb	sy
 80125e6:	f3bf 8f4f 	dsb	sy
 80125ea:	60fb      	str	r3, [r7, #12]
}
 80125ec:	bf00      	nop
 80125ee:	e7fe      	b.n	80125ee <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80125f0:	f000 f958 	bl	80128a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	69db      	ldr	r3, [r3, #28]
 80125f8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80125fa:	f000 f983 	bl	8012904 <vPortExitCritical>

	return pvReturn;
 80125fe:	693b      	ldr	r3, [r7, #16]
}
 8012600:	4618      	mov	r0, r3
 8012602:	3718      	adds	r7, #24
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012608:	b580      	push	{r7, lr}
 801260a:	b08a      	sub	sp, #40	; 0x28
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
 8012614:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012616:	f06f 0301 	mvn.w	r3, #1
 801261a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012628:	4b06      	ldr	r3, [pc, #24]	; (8012644 <xTimerPendFunctionCallFromISR+0x3c>)
 801262a:	6818      	ldr	r0, [r3, #0]
 801262c:	f107 0114 	add.w	r1, r7, #20
 8012630:	2300      	movs	r3, #0
 8012632:	683a      	ldr	r2, [r7, #0]
 8012634:	f7fd fd9c 	bl	8010170 <xQueueGenericSendFromISR>
 8012638:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801263c:	4618      	mov	r0, r3
 801263e:	3728      	adds	r7, #40	; 0x28
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	200015d4 	.word	0x200015d4

08012648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012648:	b480      	push	{r7}
 801264a:	b085      	sub	sp, #20
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	3b04      	subs	r3, #4
 8012658:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	3b04      	subs	r3, #4
 8012666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	f023 0201 	bic.w	r2, r3, #1
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	3b04      	subs	r3, #4
 8012676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012678:	4a0c      	ldr	r2, [pc, #48]	; (80126ac <pxPortInitialiseStack+0x64>)
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	3b14      	subs	r3, #20
 8012682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	3b04      	subs	r3, #4
 801268e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	f06f 0202 	mvn.w	r2, #2
 8012696:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	3b20      	subs	r3, #32
 801269c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801269e:	68fb      	ldr	r3, [r7, #12]
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3714      	adds	r7, #20
 80126a4:	46bd      	mov	sp, r7
 80126a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126aa:	4770      	bx	lr
 80126ac:	080126b1 	.word	0x080126b1

080126b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126b0:	b480      	push	{r7}
 80126b2:	b085      	sub	sp, #20
 80126b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126b6:	2300      	movs	r3, #0
 80126b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126ba:	4b12      	ldr	r3, [pc, #72]	; (8012704 <prvTaskExitError+0x54>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126c2:	d00a      	beq.n	80126da <prvTaskExitError+0x2a>
	__asm volatile
 80126c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126c8:	f383 8811 	msr	BASEPRI, r3
 80126cc:	f3bf 8f6f 	isb	sy
 80126d0:	f3bf 8f4f 	dsb	sy
 80126d4:	60fb      	str	r3, [r7, #12]
}
 80126d6:	bf00      	nop
 80126d8:	e7fe      	b.n	80126d8 <prvTaskExitError+0x28>
	__asm volatile
 80126da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126de:	f383 8811 	msr	BASEPRI, r3
 80126e2:	f3bf 8f6f 	isb	sy
 80126e6:	f3bf 8f4f 	dsb	sy
 80126ea:	60bb      	str	r3, [r7, #8]
}
 80126ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80126ee:	bf00      	nop
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d0fc      	beq.n	80126f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80126f6:	bf00      	nop
 80126f8:	bf00      	nop
 80126fa:	3714      	adds	r7, #20
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr
 8012704:	200000ac 	.word	0x200000ac
	...

08012710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012710:	4b07      	ldr	r3, [pc, #28]	; (8012730 <pxCurrentTCBConst2>)
 8012712:	6819      	ldr	r1, [r3, #0]
 8012714:	6808      	ldr	r0, [r1, #0]
 8012716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801271a:	f380 8809 	msr	PSP, r0
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f04f 0000 	mov.w	r0, #0
 8012726:	f380 8811 	msr	BASEPRI, r0
 801272a:	4770      	bx	lr
 801272c:	f3af 8000 	nop.w

08012730 <pxCurrentTCBConst2>:
 8012730:	200010a4 	.word	0x200010a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012734:	bf00      	nop
 8012736:	bf00      	nop

08012738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012738:	4808      	ldr	r0, [pc, #32]	; (801275c <prvPortStartFirstTask+0x24>)
 801273a:	6800      	ldr	r0, [r0, #0]
 801273c:	6800      	ldr	r0, [r0, #0]
 801273e:	f380 8808 	msr	MSP, r0
 8012742:	f04f 0000 	mov.w	r0, #0
 8012746:	f380 8814 	msr	CONTROL, r0
 801274a:	b662      	cpsie	i
 801274c:	b661      	cpsie	f
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	f3bf 8f6f 	isb	sy
 8012756:	df00      	svc	0
 8012758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801275a:	bf00      	nop
 801275c:	e000ed08 	.word	0xe000ed08

08012760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b086      	sub	sp, #24
 8012764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012766:	4b46      	ldr	r3, [pc, #280]	; (8012880 <xPortStartScheduler+0x120>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	4a46      	ldr	r2, [pc, #280]	; (8012884 <xPortStartScheduler+0x124>)
 801276c:	4293      	cmp	r3, r2
 801276e:	d10a      	bne.n	8012786 <xPortStartScheduler+0x26>
	__asm volatile
 8012770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012774:	f383 8811 	msr	BASEPRI, r3
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	613b      	str	r3, [r7, #16]
}
 8012782:	bf00      	nop
 8012784:	e7fe      	b.n	8012784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012786:	4b3e      	ldr	r3, [pc, #248]	; (8012880 <xPortStartScheduler+0x120>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	4a3f      	ldr	r2, [pc, #252]	; (8012888 <xPortStartScheduler+0x128>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d10a      	bne.n	80127a6 <xPortStartScheduler+0x46>
	__asm volatile
 8012790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	60fb      	str	r3, [r7, #12]
}
 80127a2:	bf00      	nop
 80127a4:	e7fe      	b.n	80127a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127a6:	4b39      	ldr	r3, [pc, #228]	; (801288c <xPortStartScheduler+0x12c>)
 80127a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	b2db      	uxtb	r3, r3
 80127b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	22ff      	movs	r2, #255	; 0xff
 80127b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127c0:	78fb      	ldrb	r3, [r7, #3]
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	4b31      	ldr	r3, [pc, #196]	; (8012890 <xPortStartScheduler+0x130>)
 80127cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127ce:	4b31      	ldr	r3, [pc, #196]	; (8012894 <xPortStartScheduler+0x134>)
 80127d0:	2207      	movs	r2, #7
 80127d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127d4:	e009      	b.n	80127ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80127d6:	4b2f      	ldr	r3, [pc, #188]	; (8012894 <xPortStartScheduler+0x134>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	3b01      	subs	r3, #1
 80127dc:	4a2d      	ldr	r2, [pc, #180]	; (8012894 <xPortStartScheduler+0x134>)
 80127de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80127e0:	78fb      	ldrb	r3, [r7, #3]
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	005b      	lsls	r3, r3, #1
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127ea:	78fb      	ldrb	r3, [r7, #3]
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127f2:	2b80      	cmp	r3, #128	; 0x80
 80127f4:	d0ef      	beq.n	80127d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80127f6:	4b27      	ldr	r3, [pc, #156]	; (8012894 <xPortStartScheduler+0x134>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	f1c3 0307 	rsb	r3, r3, #7
 80127fe:	2b04      	cmp	r3, #4
 8012800:	d00a      	beq.n	8012818 <xPortStartScheduler+0xb8>
	__asm volatile
 8012802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012806:	f383 8811 	msr	BASEPRI, r3
 801280a:	f3bf 8f6f 	isb	sy
 801280e:	f3bf 8f4f 	dsb	sy
 8012812:	60bb      	str	r3, [r7, #8]
}
 8012814:	bf00      	nop
 8012816:	e7fe      	b.n	8012816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012818:	4b1e      	ldr	r3, [pc, #120]	; (8012894 <xPortStartScheduler+0x134>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	021b      	lsls	r3, r3, #8
 801281e:	4a1d      	ldr	r2, [pc, #116]	; (8012894 <xPortStartScheduler+0x134>)
 8012820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012822:	4b1c      	ldr	r3, [pc, #112]	; (8012894 <xPortStartScheduler+0x134>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801282a:	4a1a      	ldr	r2, [pc, #104]	; (8012894 <xPortStartScheduler+0x134>)
 801282c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	b2da      	uxtb	r2, r3
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012836:	4b18      	ldr	r3, [pc, #96]	; (8012898 <xPortStartScheduler+0x138>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a17      	ldr	r2, [pc, #92]	; (8012898 <xPortStartScheduler+0x138>)
 801283c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012842:	4b15      	ldr	r3, [pc, #84]	; (8012898 <xPortStartScheduler+0x138>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	4a14      	ldr	r2, [pc, #80]	; (8012898 <xPortStartScheduler+0x138>)
 8012848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801284c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801284e:	f000 f8dd 	bl	8012a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012852:	4b12      	ldr	r3, [pc, #72]	; (801289c <xPortStartScheduler+0x13c>)
 8012854:	2200      	movs	r2, #0
 8012856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012858:	f000 f8fc 	bl	8012a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801285c:	4b10      	ldr	r3, [pc, #64]	; (80128a0 <xPortStartScheduler+0x140>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4a0f      	ldr	r2, [pc, #60]	; (80128a0 <xPortStartScheduler+0x140>)
 8012862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012868:	f7ff ff66 	bl	8012738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801286c:	f7fe fdba 	bl	80113e4 <vTaskSwitchContext>
	prvTaskExitError();
 8012870:	f7ff ff1e 	bl	80126b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012874:	2300      	movs	r3, #0
}
 8012876:	4618      	mov	r0, r3
 8012878:	3718      	adds	r7, #24
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}
 801287e:	bf00      	nop
 8012880:	e000ed00 	.word	0xe000ed00
 8012884:	410fc271 	.word	0x410fc271
 8012888:	410fc270 	.word	0x410fc270
 801288c:	e000e400 	.word	0xe000e400
 8012890:	200016d0 	.word	0x200016d0
 8012894:	200016d4 	.word	0x200016d4
 8012898:	e000ed20 	.word	0xe000ed20
 801289c:	200000ac 	.word	0x200000ac
 80128a0:	e000ef34 	.word	0xe000ef34

080128a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128a4:	b480      	push	{r7}
 80128a6:	b083      	sub	sp, #12
 80128a8:	af00      	add	r7, sp, #0
	__asm volatile
 80128aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ae:	f383 8811 	msr	BASEPRI, r3
 80128b2:	f3bf 8f6f 	isb	sy
 80128b6:	f3bf 8f4f 	dsb	sy
 80128ba:	607b      	str	r3, [r7, #4]
}
 80128bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128be:	4b0f      	ldr	r3, [pc, #60]	; (80128fc <vPortEnterCritical+0x58>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	3301      	adds	r3, #1
 80128c4:	4a0d      	ldr	r2, [pc, #52]	; (80128fc <vPortEnterCritical+0x58>)
 80128c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128c8:	4b0c      	ldr	r3, [pc, #48]	; (80128fc <vPortEnterCritical+0x58>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	2b01      	cmp	r3, #1
 80128ce:	d10f      	bne.n	80128f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80128d0:	4b0b      	ldr	r3, [pc, #44]	; (8012900 <vPortEnterCritical+0x5c>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	b2db      	uxtb	r3, r3
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d00a      	beq.n	80128f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80128da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128de:	f383 8811 	msr	BASEPRI, r3
 80128e2:	f3bf 8f6f 	isb	sy
 80128e6:	f3bf 8f4f 	dsb	sy
 80128ea:	603b      	str	r3, [r7, #0]
}
 80128ec:	bf00      	nop
 80128ee:	e7fe      	b.n	80128ee <vPortEnterCritical+0x4a>
	}
}
 80128f0:	bf00      	nop
 80128f2:	370c      	adds	r7, #12
 80128f4:	46bd      	mov	sp, r7
 80128f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fa:	4770      	bx	lr
 80128fc:	200000ac 	.word	0x200000ac
 8012900:	e000ed04 	.word	0xe000ed04

08012904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012904:	b480      	push	{r7}
 8012906:	b083      	sub	sp, #12
 8012908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801290a:	4b12      	ldr	r3, [pc, #72]	; (8012954 <vPortExitCritical+0x50>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d10a      	bne.n	8012928 <vPortExitCritical+0x24>
	__asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	607b      	str	r3, [r7, #4]
}
 8012924:	bf00      	nop
 8012926:	e7fe      	b.n	8012926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012928:	4b0a      	ldr	r3, [pc, #40]	; (8012954 <vPortExitCritical+0x50>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	3b01      	subs	r3, #1
 801292e:	4a09      	ldr	r2, [pc, #36]	; (8012954 <vPortExitCritical+0x50>)
 8012930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012932:	4b08      	ldr	r3, [pc, #32]	; (8012954 <vPortExitCritical+0x50>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d105      	bne.n	8012946 <vPortExitCritical+0x42>
 801293a:	2300      	movs	r3, #0
 801293c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	f383 8811 	msr	BASEPRI, r3
}
 8012944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012946:	bf00      	nop
 8012948:	370c      	adds	r7, #12
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr
 8012952:	bf00      	nop
 8012954:	200000ac 	.word	0x200000ac
	...

08012960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012960:	f3ef 8009 	mrs	r0, PSP
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	4b15      	ldr	r3, [pc, #84]	; (80129c0 <pxCurrentTCBConst>)
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	f01e 0f10 	tst.w	lr, #16
 8012970:	bf08      	it	eq
 8012972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297a:	6010      	str	r0, [r2, #0]
 801297c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012984:	f380 8811 	msr	BASEPRI, r0
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f7fe fd28 	bl	80113e4 <vTaskSwitchContext>
 8012994:	f04f 0000 	mov.w	r0, #0
 8012998:	f380 8811 	msr	BASEPRI, r0
 801299c:	bc09      	pop	{r0, r3}
 801299e:	6819      	ldr	r1, [r3, #0]
 80129a0:	6808      	ldr	r0, [r1, #0]
 80129a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a6:	f01e 0f10 	tst.w	lr, #16
 80129aa:	bf08      	it	eq
 80129ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129b0:	f380 8809 	msr	PSP, r0
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	f3af 8000 	nop.w

080129c0 <pxCurrentTCBConst>:
 80129c0:	200010a4 	.word	0x200010a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129c4:	bf00      	nop
 80129c6:	bf00      	nop

080129c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129c8:	b580      	push	{r7, lr}
 80129ca:	b082      	sub	sp, #8
 80129cc:	af00      	add	r7, sp, #0
	__asm volatile
 80129ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d2:	f383 8811 	msr	BASEPRI, r3
 80129d6:	f3bf 8f6f 	isb	sy
 80129da:	f3bf 8f4f 	dsb	sy
 80129de:	607b      	str	r3, [r7, #4]
}
 80129e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80129e2:	f7fe fc45 	bl	8011270 <xTaskIncrementTick>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d003      	beq.n	80129f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80129ec:	4b06      	ldr	r3, [pc, #24]	; (8012a08 <xPortSysTickHandler+0x40>)
 80129ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129f2:	601a      	str	r2, [r3, #0]
 80129f4:	2300      	movs	r3, #0
 80129f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	f383 8811 	msr	BASEPRI, r3
}
 80129fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a00:	bf00      	nop
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	e000ed04 	.word	0xe000ed04

08012a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a10:	4b0b      	ldr	r3, [pc, #44]	; (8012a40 <vPortSetupTimerInterrupt+0x34>)
 8012a12:	2200      	movs	r2, #0
 8012a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a16:	4b0b      	ldr	r3, [pc, #44]	; (8012a44 <vPortSetupTimerInterrupt+0x38>)
 8012a18:	2200      	movs	r2, #0
 8012a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a1c:	4b0a      	ldr	r3, [pc, #40]	; (8012a48 <vPortSetupTimerInterrupt+0x3c>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4a0a      	ldr	r2, [pc, #40]	; (8012a4c <vPortSetupTimerInterrupt+0x40>)
 8012a22:	fba2 2303 	umull	r2, r3, r2, r3
 8012a26:	099b      	lsrs	r3, r3, #6
 8012a28:	4a09      	ldr	r2, [pc, #36]	; (8012a50 <vPortSetupTimerInterrupt+0x44>)
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a2e:	4b04      	ldr	r3, [pc, #16]	; (8012a40 <vPortSetupTimerInterrupt+0x34>)
 8012a30:	2207      	movs	r2, #7
 8012a32:	601a      	str	r2, [r3, #0]
}
 8012a34:	bf00      	nop
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	e000e010 	.word	0xe000e010
 8012a44:	e000e018 	.word	0xe000e018
 8012a48:	20000000 	.word	0x20000000
 8012a4c:	10624dd3 	.word	0x10624dd3
 8012a50:	e000e014 	.word	0xe000e014

08012a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012a64 <vPortEnableVFP+0x10>
 8012a58:	6801      	ldr	r1, [r0, #0]
 8012a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012a5e:	6001      	str	r1, [r0, #0]
 8012a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a62:	bf00      	nop
 8012a64:	e000ed88 	.word	0xe000ed88

08012a68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012a68:	b480      	push	{r7}
 8012a6a:	b085      	sub	sp, #20
 8012a6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a6e:	f3ef 8305 	mrs	r3, IPSR
 8012a72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2b0f      	cmp	r3, #15
 8012a78:	d914      	bls.n	8012aa4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a7a:	4a17      	ldr	r2, [pc, #92]	; (8012ad8 <vPortValidateInterruptPriority+0x70>)
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	4413      	add	r3, r2
 8012a80:	781b      	ldrb	r3, [r3, #0]
 8012a82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a84:	4b15      	ldr	r3, [pc, #84]	; (8012adc <vPortValidateInterruptPriority+0x74>)
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	7afa      	ldrb	r2, [r7, #11]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d20a      	bcs.n	8012aa4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a92:	f383 8811 	msr	BASEPRI, r3
 8012a96:	f3bf 8f6f 	isb	sy
 8012a9a:	f3bf 8f4f 	dsb	sy
 8012a9e:	607b      	str	r3, [r7, #4]
}
 8012aa0:	bf00      	nop
 8012aa2:	e7fe      	b.n	8012aa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012aa4:	4b0e      	ldr	r3, [pc, #56]	; (8012ae0 <vPortValidateInterruptPriority+0x78>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012aac:	4b0d      	ldr	r3, [pc, #52]	; (8012ae4 <vPortValidateInterruptPriority+0x7c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d90a      	bls.n	8012aca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab8:	f383 8811 	msr	BASEPRI, r3
 8012abc:	f3bf 8f6f 	isb	sy
 8012ac0:	f3bf 8f4f 	dsb	sy
 8012ac4:	603b      	str	r3, [r7, #0]
}
 8012ac6:	bf00      	nop
 8012ac8:	e7fe      	b.n	8012ac8 <vPortValidateInterruptPriority+0x60>
	}
 8012aca:	bf00      	nop
 8012acc:	3714      	adds	r7, #20
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	bf00      	nop
 8012ad8:	e000e3f0 	.word	0xe000e3f0
 8012adc:	200016d0 	.word	0x200016d0
 8012ae0:	e000ed0c 	.word	0xe000ed0c
 8012ae4:	200016d4 	.word	0x200016d4

08012ae8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b08a      	sub	sp, #40	; 0x28
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012af0:	2300      	movs	r3, #0
 8012af2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012af4:	f7fe fb00 	bl	80110f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012af8:	4b5b      	ldr	r3, [pc, #364]	; (8012c68 <pvPortMalloc+0x180>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d101      	bne.n	8012b04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b00:	f000 f920 	bl	8012d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b04:	4b59      	ldr	r3, [pc, #356]	; (8012c6c <pvPortMalloc+0x184>)
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	4013      	ands	r3, r2
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	f040 8093 	bne.w	8012c38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d01d      	beq.n	8012b54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b18:	2208      	movs	r2, #8
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	f003 0307 	and.w	r3, r3, #7
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d014      	beq.n	8012b54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f023 0307 	bic.w	r3, r3, #7
 8012b30:	3308      	adds	r3, #8
 8012b32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f003 0307 	and.w	r3, r3, #7
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d00a      	beq.n	8012b54 <pvPortMalloc+0x6c>
	__asm volatile
 8012b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b42:	f383 8811 	msr	BASEPRI, r3
 8012b46:	f3bf 8f6f 	isb	sy
 8012b4a:	f3bf 8f4f 	dsb	sy
 8012b4e:	617b      	str	r3, [r7, #20]
}
 8012b50:	bf00      	nop
 8012b52:	e7fe      	b.n	8012b52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d06e      	beq.n	8012c38 <pvPortMalloc+0x150>
 8012b5a:	4b45      	ldr	r3, [pc, #276]	; (8012c70 <pvPortMalloc+0x188>)
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d869      	bhi.n	8012c38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b64:	4b43      	ldr	r3, [pc, #268]	; (8012c74 <pvPortMalloc+0x18c>)
 8012b66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b68:	4b42      	ldr	r3, [pc, #264]	; (8012c74 <pvPortMalloc+0x18c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b6e:	e004      	b.n	8012b7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d903      	bls.n	8012b8c <pvPortMalloc+0xa4>
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d1f1      	bne.n	8012b70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b8c:	4b36      	ldr	r3, [pc, #216]	; (8012c68 <pvPortMalloc+0x180>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d050      	beq.n	8012c38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b96:	6a3b      	ldr	r3, [r7, #32]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	2208      	movs	r2, #8
 8012b9c:	4413      	add	r3, r2
 8012b9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	6a3b      	ldr	r3, [r7, #32]
 8012ba6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012baa:	685a      	ldr	r2, [r3, #4]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	1ad2      	subs	r2, r2, r3
 8012bb0:	2308      	movs	r3, #8
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d91f      	bls.n	8012bf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	f003 0307 	and.w	r3, r3, #7
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d00a      	beq.n	8012be0 <pvPortMalloc+0xf8>
	__asm volatile
 8012bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bce:	f383 8811 	msr	BASEPRI, r3
 8012bd2:	f3bf 8f6f 	isb	sy
 8012bd6:	f3bf 8f4f 	dsb	sy
 8012bda:	613b      	str	r3, [r7, #16]
}
 8012bdc:	bf00      	nop
 8012bde:	e7fe      	b.n	8012bde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	685a      	ldr	r2, [r3, #4]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	1ad2      	subs	r2, r2, r3
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012bf2:	69b8      	ldr	r0, [r7, #24]
 8012bf4:	f000 f908 	bl	8012e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012bf8:	4b1d      	ldr	r3, [pc, #116]	; (8012c70 <pvPortMalloc+0x188>)
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bfe:	685b      	ldr	r3, [r3, #4]
 8012c00:	1ad3      	subs	r3, r2, r3
 8012c02:	4a1b      	ldr	r2, [pc, #108]	; (8012c70 <pvPortMalloc+0x188>)
 8012c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c06:	4b1a      	ldr	r3, [pc, #104]	; (8012c70 <pvPortMalloc+0x188>)
 8012c08:	681a      	ldr	r2, [r3, #0]
 8012c0a:	4b1b      	ldr	r3, [pc, #108]	; (8012c78 <pvPortMalloc+0x190>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d203      	bcs.n	8012c1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c12:	4b17      	ldr	r3, [pc, #92]	; (8012c70 <pvPortMalloc+0x188>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4a18      	ldr	r2, [pc, #96]	; (8012c78 <pvPortMalloc+0x190>)
 8012c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	685a      	ldr	r2, [r3, #4]
 8012c1e:	4b13      	ldr	r3, [pc, #76]	; (8012c6c <pvPortMalloc+0x184>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	431a      	orrs	r2, r3
 8012c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c2e:	4b13      	ldr	r3, [pc, #76]	; (8012c7c <pvPortMalloc+0x194>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	3301      	adds	r3, #1
 8012c34:	4a11      	ldr	r2, [pc, #68]	; (8012c7c <pvPortMalloc+0x194>)
 8012c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c38:	f7fe fa6c 	bl	8011114 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	f003 0307 	and.w	r3, r3, #7
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00a      	beq.n	8012c5c <pvPortMalloc+0x174>
	__asm volatile
 8012c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4a:	f383 8811 	msr	BASEPRI, r3
 8012c4e:	f3bf 8f6f 	isb	sy
 8012c52:	f3bf 8f4f 	dsb	sy
 8012c56:	60fb      	str	r3, [r7, #12]
}
 8012c58:	bf00      	nop
 8012c5a:	e7fe      	b.n	8012c5a <pvPortMalloc+0x172>
	return pvReturn;
 8012c5c:	69fb      	ldr	r3, [r7, #28]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3728      	adds	r7, #40	; 0x28
 8012c62:	46bd      	mov	sp, r7
 8012c64:	bd80      	pop	{r7, pc}
 8012c66:	bf00      	nop
 8012c68:	200052e0 	.word	0x200052e0
 8012c6c:	200052f4 	.word	0x200052f4
 8012c70:	200052e4 	.word	0x200052e4
 8012c74:	200052d8 	.word	0x200052d8
 8012c78:	200052e8 	.word	0x200052e8
 8012c7c:	200052ec 	.word	0x200052ec

08012c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d04d      	beq.n	8012d2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c92:	2308      	movs	r3, #8
 8012c94:	425b      	negs	r3, r3
 8012c96:	697a      	ldr	r2, [r7, #20]
 8012c98:	4413      	add	r3, r2
 8012c9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	685a      	ldr	r2, [r3, #4]
 8012ca4:	4b24      	ldr	r3, [pc, #144]	; (8012d38 <vPortFree+0xb8>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	4013      	ands	r3, r2
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d10a      	bne.n	8012cc4 <vPortFree+0x44>
	__asm volatile
 8012cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	60fb      	str	r3, [r7, #12]
}
 8012cc0:	bf00      	nop
 8012cc2:	e7fe      	b.n	8012cc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00a      	beq.n	8012ce2 <vPortFree+0x62>
	__asm volatile
 8012ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd0:	f383 8811 	msr	BASEPRI, r3
 8012cd4:	f3bf 8f6f 	isb	sy
 8012cd8:	f3bf 8f4f 	dsb	sy
 8012cdc:	60bb      	str	r3, [r7, #8]
}
 8012cde:	bf00      	nop
 8012ce0:	e7fe      	b.n	8012ce0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	685a      	ldr	r2, [r3, #4]
 8012ce6:	4b14      	ldr	r3, [pc, #80]	; (8012d38 <vPortFree+0xb8>)
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	4013      	ands	r3, r2
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d01e      	beq.n	8012d2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d11a      	bne.n	8012d2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	685a      	ldr	r2, [r3, #4]
 8012cfc:	4b0e      	ldr	r3, [pc, #56]	; (8012d38 <vPortFree+0xb8>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	43db      	mvns	r3, r3
 8012d02:	401a      	ands	r2, r3
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d08:	f7fe f9f6 	bl	80110f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d0c:	693b      	ldr	r3, [r7, #16]
 8012d0e:	685a      	ldr	r2, [r3, #4]
 8012d10:	4b0a      	ldr	r3, [pc, #40]	; (8012d3c <vPortFree+0xbc>)
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	4413      	add	r3, r2
 8012d16:	4a09      	ldr	r2, [pc, #36]	; (8012d3c <vPortFree+0xbc>)
 8012d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d1a:	6938      	ldr	r0, [r7, #16]
 8012d1c:	f000 f874 	bl	8012e08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d20:	4b07      	ldr	r3, [pc, #28]	; (8012d40 <vPortFree+0xc0>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	3301      	adds	r3, #1
 8012d26:	4a06      	ldr	r2, [pc, #24]	; (8012d40 <vPortFree+0xc0>)
 8012d28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d2a:	f7fe f9f3 	bl	8011114 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d2e:	bf00      	nop
 8012d30:	3718      	adds	r7, #24
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
 8012d36:	bf00      	nop
 8012d38:	200052f4 	.word	0x200052f4
 8012d3c:	200052e4 	.word	0x200052e4
 8012d40:	200052f0 	.word	0x200052f0

08012d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d44:	b480      	push	{r7}
 8012d46:	b085      	sub	sp, #20
 8012d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d50:	4b27      	ldr	r3, [pc, #156]	; (8012df0 <prvHeapInit+0xac>)
 8012d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	f003 0307 	and.w	r3, r3, #7
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00c      	beq.n	8012d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	3307      	adds	r3, #7
 8012d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f023 0307 	bic.w	r3, r3, #7
 8012d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d6c:	68ba      	ldr	r2, [r7, #8]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	1ad3      	subs	r3, r2, r3
 8012d72:	4a1f      	ldr	r2, [pc, #124]	; (8012df0 <prvHeapInit+0xac>)
 8012d74:	4413      	add	r3, r2
 8012d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d7c:	4a1d      	ldr	r2, [pc, #116]	; (8012df4 <prvHeapInit+0xb0>)
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012d82:	4b1c      	ldr	r3, [pc, #112]	; (8012df4 <prvHeapInit+0xb0>)
 8012d84:	2200      	movs	r2, #0
 8012d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	68ba      	ldr	r2, [r7, #8]
 8012d8c:	4413      	add	r3, r2
 8012d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d90:	2208      	movs	r2, #8
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	1a9b      	subs	r3, r3, r2
 8012d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	f023 0307 	bic.w	r3, r3, #7
 8012d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	4a15      	ldr	r2, [pc, #84]	; (8012df8 <prvHeapInit+0xb4>)
 8012da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012da6:	4b14      	ldr	r3, [pc, #80]	; (8012df8 <prvHeapInit+0xb4>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2200      	movs	r2, #0
 8012dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012dae:	4b12      	ldr	r3, [pc, #72]	; (8012df8 <prvHeapInit+0xb4>)
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	2200      	movs	r2, #0
 8012db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	68fa      	ldr	r2, [r7, #12]
 8012dbe:	1ad2      	subs	r2, r2, r3
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012dc4:	4b0c      	ldr	r3, [pc, #48]	; (8012df8 <prvHeapInit+0xb4>)
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	4a0a      	ldr	r2, [pc, #40]	; (8012dfc <prvHeapInit+0xb8>)
 8012dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	4a09      	ldr	r2, [pc, #36]	; (8012e00 <prvHeapInit+0xbc>)
 8012dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ddc:	4b09      	ldr	r3, [pc, #36]	; (8012e04 <prvHeapInit+0xc0>)
 8012dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012de2:	601a      	str	r2, [r3, #0]
}
 8012de4:	bf00      	nop
 8012de6:	3714      	adds	r7, #20
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr
 8012df0:	200016d8 	.word	0x200016d8
 8012df4:	200052d8 	.word	0x200052d8
 8012df8:	200052e0 	.word	0x200052e0
 8012dfc:	200052e8 	.word	0x200052e8
 8012e00:	200052e4 	.word	0x200052e4
 8012e04:	200052f4 	.word	0x200052f4

08012e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e08:	b480      	push	{r7}
 8012e0a:	b085      	sub	sp, #20
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e10:	4b28      	ldr	r3, [pc, #160]	; (8012eb4 <prvInsertBlockIntoFreeList+0xac>)
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	e002      	b.n	8012e1c <prvInsertBlockIntoFreeList+0x14>
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	60fb      	str	r3, [r7, #12]
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	d8f7      	bhi.n	8012e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	68ba      	ldr	r2, [r7, #8]
 8012e30:	4413      	add	r3, r2
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d108      	bne.n	8012e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	685a      	ldr	r2, [r3, #4]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	441a      	add	r2, r3
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	68ba      	ldr	r2, [r7, #8]
 8012e54:	441a      	add	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d118      	bne.n	8012e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	681a      	ldr	r2, [r3, #0]
 8012e62:	4b15      	ldr	r3, [pc, #84]	; (8012eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d00d      	beq.n	8012e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	685a      	ldr	r2, [r3, #4]
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	441a      	add	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	601a      	str	r2, [r3, #0]
 8012e84:	e008      	b.n	8012e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012e86:	4b0c      	ldr	r3, [pc, #48]	; (8012eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	601a      	str	r2, [r3, #0]
 8012e8e:	e003      	b.n	8012e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	681a      	ldr	r2, [r3, #0]
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e98:	68fa      	ldr	r2, [r7, #12]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d002      	beq.n	8012ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	687a      	ldr	r2, [r7, #4]
 8012ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ea6:	bf00      	nop
 8012ea8:	3714      	adds	r7, #20
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
 8012eb2:	bf00      	nop
 8012eb4:	200052d8 	.word	0x200052d8
 8012eb8:	200052e0 	.word	0x200052e0

08012ebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	4912      	ldr	r1, [pc, #72]	; (8012f0c <MX_USB_DEVICE_Init+0x50>)
 8012ec4:	4812      	ldr	r0, [pc, #72]	; (8012f10 <MX_USB_DEVICE_Init+0x54>)
 8012ec6:	f7f9 ff1d 	bl	800cd04 <USBD_Init>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012ed0:	f7ef fc86 	bl	80027e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012ed4:	490f      	ldr	r1, [pc, #60]	; (8012f14 <MX_USB_DEVICE_Init+0x58>)
 8012ed6:	480e      	ldr	r0, [pc, #56]	; (8012f10 <MX_USB_DEVICE_Init+0x54>)
 8012ed8:	f7f9 ff44 	bl	800cd64 <USBD_RegisterClass>
 8012edc:	4603      	mov	r3, r0
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d001      	beq.n	8012ee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012ee2:	f7ef fc7d 	bl	80027e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012ee6:	490c      	ldr	r1, [pc, #48]	; (8012f18 <MX_USB_DEVICE_Init+0x5c>)
 8012ee8:	4809      	ldr	r0, [pc, #36]	; (8012f10 <MX_USB_DEVICE_Init+0x54>)
 8012eea:	f7f9 fe35 	bl	800cb58 <USBD_CDC_RegisterInterface>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d001      	beq.n	8012ef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012ef4:	f7ef fc74 	bl	80027e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012ef8:	4805      	ldr	r0, [pc, #20]	; (8012f10 <MX_USB_DEVICE_Init+0x54>)
 8012efa:	f7f9 ff69 	bl	800cdd0 <USBD_Start>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d001      	beq.n	8012f08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012f04:	f7ef fc6c 	bl	80027e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012f08:	bf00      	nop
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	200000c4 	.word	0x200000c4
 8012f10:	200052f8 	.word	0x200052f8
 8012f14:	2000002c 	.word	0x2000002c
 8012f18:	200000b0 	.word	0x200000b0

08012f1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012f20:	2200      	movs	r2, #0
 8012f22:	4905      	ldr	r1, [pc, #20]	; (8012f38 <CDC_Init_FS+0x1c>)
 8012f24:	4805      	ldr	r0, [pc, #20]	; (8012f3c <CDC_Init_FS+0x20>)
 8012f26:	f7f9 fe31 	bl	800cb8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8012f2a:	4905      	ldr	r1, [pc, #20]	; (8012f40 <CDC_Init_FS+0x24>)
 8012f2c:	4803      	ldr	r0, [pc, #12]	; (8012f3c <CDC_Init_FS+0x20>)
 8012f2e:	f7f9 fe4f 	bl	800cbd0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012f32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	20005de0 	.word	0x20005de0
 8012f3c:	200052f8 	.word	0x200052f8
 8012f40:	200055e0 	.word	0x200055e0

08012f44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012f44:	b480      	push	{r7}
 8012f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012f48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f52:	4770      	bx	lr

08012f54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012f54:	b480      	push	{r7}
 8012f56:	b083      	sub	sp, #12
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	6039      	str	r1, [r7, #0]
 8012f5e:	71fb      	strb	r3, [r7, #7]
 8012f60:	4613      	mov	r3, r2
 8012f62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012f64:	79fb      	ldrb	r3, [r7, #7]
 8012f66:	2b23      	cmp	r3, #35	; 0x23
 8012f68:	d84a      	bhi.n	8013000 <CDC_Control_FS+0xac>
 8012f6a:	a201      	add	r2, pc, #4	; (adr r2, 8012f70 <CDC_Control_FS+0x1c>)
 8012f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f70:	08013001 	.word	0x08013001
 8012f74:	08013001 	.word	0x08013001
 8012f78:	08013001 	.word	0x08013001
 8012f7c:	08013001 	.word	0x08013001
 8012f80:	08013001 	.word	0x08013001
 8012f84:	08013001 	.word	0x08013001
 8012f88:	08013001 	.word	0x08013001
 8012f8c:	08013001 	.word	0x08013001
 8012f90:	08013001 	.word	0x08013001
 8012f94:	08013001 	.word	0x08013001
 8012f98:	08013001 	.word	0x08013001
 8012f9c:	08013001 	.word	0x08013001
 8012fa0:	08013001 	.word	0x08013001
 8012fa4:	08013001 	.word	0x08013001
 8012fa8:	08013001 	.word	0x08013001
 8012fac:	08013001 	.word	0x08013001
 8012fb0:	08013001 	.word	0x08013001
 8012fb4:	08013001 	.word	0x08013001
 8012fb8:	08013001 	.word	0x08013001
 8012fbc:	08013001 	.word	0x08013001
 8012fc0:	08013001 	.word	0x08013001
 8012fc4:	08013001 	.word	0x08013001
 8012fc8:	08013001 	.word	0x08013001
 8012fcc:	08013001 	.word	0x08013001
 8012fd0:	08013001 	.word	0x08013001
 8012fd4:	08013001 	.word	0x08013001
 8012fd8:	08013001 	.word	0x08013001
 8012fdc:	08013001 	.word	0x08013001
 8012fe0:	08013001 	.word	0x08013001
 8012fe4:	08013001 	.word	0x08013001
 8012fe8:	08013001 	.word	0x08013001
 8012fec:	08013001 	.word	0x08013001
 8012ff0:	08013001 	.word	0x08013001
 8012ff4:	08013001 	.word	0x08013001
 8012ff8:	08013001 	.word	0x08013001
 8012ffc:	08013001 	.word	0x08013001
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013000:	bf00      	nop
  }

  return (USBD_OK);
 8013002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013004:	4618      	mov	r0, r3
 8013006:	370c      	adds	r7, #12
 8013008:	46bd      	mov	sp, r7
 801300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300e:	4770      	bx	lr

08013010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801301a:	6879      	ldr	r1, [r7, #4]
 801301c:	481a      	ldr	r0, [pc, #104]	; (8013088 <CDC_Receive_FS+0x78>)
 801301e:	f7f9 fdd7 	bl	800cbd0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013022:	4819      	ldr	r0, [pc, #100]	; (8013088 <CDC_Receive_FS+0x78>)
 8013024:	f7f9 fe38 	bl	800cc98 <USBD_CDC_ReceivePacket>

	if (Buf[0] == '\r') {
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	2b0d      	cmp	r3, #13
 801302e:	d112      	bne.n	8013056 <CDC_Receive_FS+0x46>
		memcpy(usb_rx_buffer.buffer, _buffer.buffer, sizeof(usb_rx_buffer.buffer));
 8013030:	4a16      	ldr	r2, [pc, #88]	; (801308c <CDC_Receive_FS+0x7c>)
 8013032:	4b17      	ldr	r3, [pc, #92]	; (8013090 <CDC_Receive_FS+0x80>)
 8013034:	cb03      	ldmia	r3!, {r0, r1}
 8013036:	6010      	str	r0, [r2, #0]
 8013038:	6051      	str	r1, [r2, #4]
 801303a:	4b15      	ldr	r3, [pc, #84]	; (8013090 <CDC_Receive_FS+0x80>)
 801303c:	2200      	movs	r2, #0
 801303e:	701a      	strb	r2, [r3, #0]
		memset(_buffer.buffer, 0, RECEIVED_USB);
		_buffer.pos = 0;
 8013040:	4b13      	ldr	r3, [pc, #76]	; (8013090 <CDC_Receive_FS+0x80>)
 8013042:	2200      	movs	r2, #0
 8013044:	811a      	strh	r2, [r3, #8]
		osEventFlagsSet(USBEventHandle, RECEIVED_USB);
 8013046:	4b13      	ldr	r3, [pc, #76]	; (8013094 <CDC_Receive_FS+0x84>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	2101      	movs	r1, #1
 801304c:	4618      	mov	r0, r3
 801304e:	f7fc f925 	bl	800f29c <osEventFlagsSet>
		return (USBD_OK);
 8013052:	2300      	movs	r3, #0
 8013054:	e014      	b.n	8013080 <CDC_Receive_FS+0x70>
	}

	_buffer.buffer[_buffer.pos++] = Buf[0];
 8013056:	4b0e      	ldr	r3, [pc, #56]	; (8013090 <CDC_Receive_FS+0x80>)
 8013058:	891b      	ldrh	r3, [r3, #8]
 801305a:	b29b      	uxth	r3, r3
 801305c:	1c5a      	adds	r2, r3, #1
 801305e:	b291      	uxth	r1, r2
 8013060:	4a0b      	ldr	r2, [pc, #44]	; (8013090 <CDC_Receive_FS+0x80>)
 8013062:	8111      	strh	r1, [r2, #8]
 8013064:	461a      	mov	r2, r3
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	7819      	ldrb	r1, [r3, #0]
 801306a:	4b09      	ldr	r3, [pc, #36]	; (8013090 <CDC_Receive_FS+0x80>)
 801306c:	5499      	strb	r1, [r3, r2]
	if (_buffer.pos > USB_BUFFER_SIZE) {
 801306e:	4b08      	ldr	r3, [pc, #32]	; (8013090 <CDC_Receive_FS+0x80>)
 8013070:	891b      	ldrh	r3, [r3, #8]
 8013072:	b29b      	uxth	r3, r3
 8013074:	2b08      	cmp	r3, #8
 8013076:	d902      	bls.n	801307e <CDC_Receive_FS+0x6e>

		_buffer.pos = 0;
 8013078:	4b05      	ldr	r3, [pc, #20]	; (8013090 <CDC_Receive_FS+0x80>)
 801307a:	2200      	movs	r2, #0
 801307c:	811a      	strh	r2, [r3, #8]
	}

	return (USBD_OK);
 801307e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013080:	4618      	mov	r0, r3
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	200052f8 	.word	0x200052f8
 801308c:	200003cc 	.word	0x200003cc
 8013090:	200055d4 	.word	0x200055d4
 8013094:	200003a8 	.word	0x200003a8

08013098 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
 80130a0:	460b      	mov	r3, r1
 80130a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80130a4:	2300      	movs	r3, #0
 80130a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80130a8:	4b0d      	ldr	r3, [pc, #52]	; (80130e0 <CDC_Transmit_FS+0x48>)
 80130aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80130ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d001      	beq.n	80130be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80130ba:	2301      	movs	r3, #1
 80130bc:	e00b      	b.n	80130d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80130be:	887b      	ldrh	r3, [r7, #2]
 80130c0:	461a      	mov	r2, r3
 80130c2:	6879      	ldr	r1, [r7, #4]
 80130c4:	4806      	ldr	r0, [pc, #24]	; (80130e0 <CDC_Transmit_FS+0x48>)
 80130c6:	f7f9 fd61 	bl	800cb8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80130ca:	4805      	ldr	r0, [pc, #20]	; (80130e0 <CDC_Transmit_FS+0x48>)
 80130cc:	f7f9 fd9e 	bl	800cc0c <USBD_CDC_TransmitPacket>
 80130d0:	4603      	mov	r3, r0
 80130d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80130d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3710      	adds	r7, #16
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	200052f8 	.word	0x200052f8

080130e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80130e4:	b480      	push	{r7}
 80130e6:	b087      	sub	sp, #28
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	60b9      	str	r1, [r7, #8]
 80130ee:	4613      	mov	r3, r2
 80130f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80130f2:	2300      	movs	r3, #0
 80130f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80130f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	371c      	adds	r7, #28
 80130fe:	46bd      	mov	sp, r7
 8013100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013104:	4770      	bx	lr
	...

08013108 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	4603      	mov	r3, r0
 8013110:	6039      	str	r1, [r7, #0]
 8013112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	2212      	movs	r2, #18
 8013118:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801311a:	4b03      	ldr	r3, [pc, #12]	; (8013128 <USBD_FS_DeviceDescriptor+0x20>)
}
 801311c:	4618      	mov	r0, r3
 801311e:	370c      	adds	r7, #12
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr
 8013128:	200000e4 	.word	0x200000e4

0801312c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
 8013132:	4603      	mov	r3, r0
 8013134:	6039      	str	r1, [r7, #0]
 8013136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	2204      	movs	r2, #4
 801313c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801313e:	4b03      	ldr	r3, [pc, #12]	; (801314c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013140:	4618      	mov	r0, r3
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr
 801314c:	20000104 	.word	0x20000104

08013150 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	4603      	mov	r3, r0
 8013158:	6039      	str	r1, [r7, #0]
 801315a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801315c:	79fb      	ldrb	r3, [r7, #7]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d105      	bne.n	801316e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013162:	683a      	ldr	r2, [r7, #0]
 8013164:	4907      	ldr	r1, [pc, #28]	; (8013184 <USBD_FS_ProductStrDescriptor+0x34>)
 8013166:	4808      	ldr	r0, [pc, #32]	; (8013188 <USBD_FS_ProductStrDescriptor+0x38>)
 8013168:	f7fb f808 	bl	800e17c <USBD_GetString>
 801316c:	e004      	b.n	8013178 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801316e:	683a      	ldr	r2, [r7, #0]
 8013170:	4904      	ldr	r1, [pc, #16]	; (8013184 <USBD_FS_ProductStrDescriptor+0x34>)
 8013172:	4805      	ldr	r0, [pc, #20]	; (8013188 <USBD_FS_ProductStrDescriptor+0x38>)
 8013174:	f7fb f802 	bl	800e17c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013178:	4b02      	ldr	r3, [pc, #8]	; (8013184 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801317a:	4618      	mov	r0, r3
 801317c:	3708      	adds	r7, #8
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	200065e0 	.word	0x200065e0
 8013188:	08016a94 	.word	0x08016a94

0801318c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	4603      	mov	r3, r0
 8013194:	6039      	str	r1, [r7, #0]
 8013196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013198:	683a      	ldr	r2, [r7, #0]
 801319a:	4904      	ldr	r1, [pc, #16]	; (80131ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801319c:	4804      	ldr	r0, [pc, #16]	; (80131b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801319e:	f7fa ffed 	bl	800e17c <USBD_GetString>
  return USBD_StrDesc;
 80131a2:	4b02      	ldr	r3, [pc, #8]	; (80131ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80131a4:	4618      	mov	r0, r3
 80131a6:	3708      	adds	r7, #8
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	200065e0 	.word	0x200065e0
 80131b0:	08016aac 	.word	0x08016aac

080131b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	4603      	mov	r3, r0
 80131bc:	6039      	str	r1, [r7, #0]
 80131be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	221a      	movs	r2, #26
 80131c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80131c6:	f000 f855 	bl	8013274 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80131ca:	4b02      	ldr	r3, [pc, #8]	; (80131d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	20000108 	.word	0x20000108

080131d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	4603      	mov	r3, r0
 80131e0:	6039      	str	r1, [r7, #0]
 80131e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80131e4:	79fb      	ldrb	r3, [r7, #7]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d105      	bne.n	80131f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80131ea:	683a      	ldr	r2, [r7, #0]
 80131ec:	4907      	ldr	r1, [pc, #28]	; (801320c <USBD_FS_ConfigStrDescriptor+0x34>)
 80131ee:	4808      	ldr	r0, [pc, #32]	; (8013210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80131f0:	f7fa ffc4 	bl	800e17c <USBD_GetString>
 80131f4:	e004      	b.n	8013200 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80131f6:	683a      	ldr	r2, [r7, #0]
 80131f8:	4904      	ldr	r1, [pc, #16]	; (801320c <USBD_FS_ConfigStrDescriptor+0x34>)
 80131fa:	4805      	ldr	r0, [pc, #20]	; (8013210 <USBD_FS_ConfigStrDescriptor+0x38>)
 80131fc:	f7fa ffbe 	bl	800e17c <USBD_GetString>
  }
  return USBD_StrDesc;
 8013200:	4b02      	ldr	r3, [pc, #8]	; (801320c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013202:	4618      	mov	r0, r3
 8013204:	3708      	adds	r7, #8
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	200065e0 	.word	0x200065e0
 8013210:	08016ac0 	.word	0x08016ac0

08013214 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	4603      	mov	r3, r0
 801321c:	6039      	str	r1, [r7, #0]
 801321e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013220:	79fb      	ldrb	r3, [r7, #7]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d105      	bne.n	8013232 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013226:	683a      	ldr	r2, [r7, #0]
 8013228:	4907      	ldr	r1, [pc, #28]	; (8013248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801322a:	4808      	ldr	r0, [pc, #32]	; (801324c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801322c:	f7fa ffa6 	bl	800e17c <USBD_GetString>
 8013230:	e004      	b.n	801323c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	4904      	ldr	r1, [pc, #16]	; (8013248 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013236:	4805      	ldr	r0, [pc, #20]	; (801324c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013238:	f7fa ffa0 	bl	800e17c <USBD_GetString>
  }
  return USBD_StrDesc;
 801323c:	4b02      	ldr	r3, [pc, #8]	; (8013248 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801323e:	4618      	mov	r0, r3
 8013240:	3708      	adds	r7, #8
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	200065e0 	.word	0x200065e0
 801324c:	08016acc 	.word	0x08016acc

08013250 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	4603      	mov	r3, r0
 8013258:	6039      	str	r1, [r7, #0]
 801325a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	220c      	movs	r2, #12
 8013260:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8013262:	4b03      	ldr	r3, [pc, #12]	; (8013270 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8013264:	4618      	mov	r0, r3
 8013266:	370c      	adds	r7, #12
 8013268:	46bd      	mov	sp, r7
 801326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326e:	4770      	bx	lr
 8013270:	200000f8 	.word	0x200000f8

08013274 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801327a:	4b0f      	ldr	r3, [pc, #60]	; (80132b8 <Get_SerialNum+0x44>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013280:	4b0e      	ldr	r3, [pc, #56]	; (80132bc <Get_SerialNum+0x48>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013286:	4b0e      	ldr	r3, [pc, #56]	; (80132c0 <Get_SerialNum+0x4c>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	4413      	add	r3, r2
 8013292:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d009      	beq.n	80132ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801329a:	2208      	movs	r2, #8
 801329c:	4909      	ldr	r1, [pc, #36]	; (80132c4 <Get_SerialNum+0x50>)
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	f000 f814 	bl	80132cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80132a4:	2204      	movs	r2, #4
 80132a6:	4908      	ldr	r1, [pc, #32]	; (80132c8 <Get_SerialNum+0x54>)
 80132a8:	68b8      	ldr	r0, [r7, #8]
 80132aa:	f000 f80f 	bl	80132cc <IntToUnicode>
  }
}
 80132ae:	bf00      	nop
 80132b0:	3710      	adds	r7, #16
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	1fff7a10 	.word	0x1fff7a10
 80132bc:	1fff7a14 	.word	0x1fff7a14
 80132c0:	1fff7a18 	.word	0x1fff7a18
 80132c4:	2000010a 	.word	0x2000010a
 80132c8:	2000011a 	.word	0x2000011a

080132cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b087      	sub	sp, #28
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	4613      	mov	r3, r2
 80132d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80132da:	2300      	movs	r3, #0
 80132dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80132de:	2300      	movs	r3, #0
 80132e0:	75fb      	strb	r3, [r7, #23]
 80132e2:	e027      	b.n	8013334 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	0f1b      	lsrs	r3, r3, #28
 80132e8:	2b09      	cmp	r3, #9
 80132ea:	d80b      	bhi.n	8013304 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	0f1b      	lsrs	r3, r3, #28
 80132f0:	b2da      	uxtb	r2, r3
 80132f2:	7dfb      	ldrb	r3, [r7, #23]
 80132f4:	005b      	lsls	r3, r3, #1
 80132f6:	4619      	mov	r1, r3
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	440b      	add	r3, r1
 80132fc:	3230      	adds	r2, #48	; 0x30
 80132fe:	b2d2      	uxtb	r2, r2
 8013300:	701a      	strb	r2, [r3, #0]
 8013302:	e00a      	b.n	801331a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	0f1b      	lsrs	r3, r3, #28
 8013308:	b2da      	uxtb	r2, r3
 801330a:	7dfb      	ldrb	r3, [r7, #23]
 801330c:	005b      	lsls	r3, r3, #1
 801330e:	4619      	mov	r1, r3
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	440b      	add	r3, r1
 8013314:	3237      	adds	r2, #55	; 0x37
 8013316:	b2d2      	uxtb	r2, r2
 8013318:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	011b      	lsls	r3, r3, #4
 801331e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013320:	7dfb      	ldrb	r3, [r7, #23]
 8013322:	005b      	lsls	r3, r3, #1
 8013324:	3301      	adds	r3, #1
 8013326:	68ba      	ldr	r2, [r7, #8]
 8013328:	4413      	add	r3, r2
 801332a:	2200      	movs	r2, #0
 801332c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801332e:	7dfb      	ldrb	r3, [r7, #23]
 8013330:	3301      	adds	r3, #1
 8013332:	75fb      	strb	r3, [r7, #23]
 8013334:	7dfa      	ldrb	r2, [r7, #23]
 8013336:	79fb      	ldrb	r3, [r7, #7]
 8013338:	429a      	cmp	r2, r3
 801333a:	d3d3      	bcc.n	80132e4 <IntToUnicode+0x18>
  }
}
 801333c:	bf00      	nop
 801333e:	bf00      	nop
 8013340:	371c      	adds	r7, #28
 8013342:	46bd      	mov	sp, r7
 8013344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013348:	4770      	bx	lr
	...

0801334c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b0a0      	sub	sp, #128	; 0x80
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013354:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013358:	2200      	movs	r2, #0
 801335a:	601a      	str	r2, [r3, #0]
 801335c:	605a      	str	r2, [r3, #4]
 801335e:	609a      	str	r2, [r3, #8]
 8013360:	60da      	str	r2, [r3, #12]
 8013362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013364:	f107 0310 	add.w	r3, r7, #16
 8013368:	225c      	movs	r2, #92	; 0x5c
 801336a:	2100      	movs	r1, #0
 801336c:	4618      	mov	r0, r3
 801336e:	f000 fc9b 	bl	8013ca8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801337a:	d149      	bne.n	8013410 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801337c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013380:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8013382:	2300      	movs	r3, #0
 8013384:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013386:	f107 0310 	add.w	r3, r7, #16
 801338a:	4618      	mov	r0, r3
 801338c:	f7f4 f8a6 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d001      	beq.n	801339a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8013396:	f7ef fa23 	bl	80027e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801339a:	2300      	movs	r3, #0
 801339c:	60fb      	str	r3, [r7, #12]
 801339e:	4b1e      	ldr	r3, [pc, #120]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a2:	4a1d      	ldr	r2, [pc, #116]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133a4:	f043 0301 	orr.w	r3, r3, #1
 80133a8:	6313      	str	r3, [r2, #48]	; 0x30
 80133aa:	4b1b      	ldr	r3, [pc, #108]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ae:	f003 0301 	and.w	r3, r3, #1
 80133b2:	60fb      	str	r3, [r7, #12]
 80133b4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80133b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80133ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80133bc:	2302      	movs	r3, #2
 80133be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133c0:	2300      	movs	r3, #0
 80133c2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133c4:	2303      	movs	r3, #3
 80133c6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80133c8:	230a      	movs	r3, #10
 80133ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80133cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80133d0:	4619      	mov	r1, r3
 80133d2:	4812      	ldr	r0, [pc, #72]	; (801341c <HAL_PCD_MspInit+0xd0>)
 80133d4:	f7f0 fe58 	bl	8004088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80133d8:	4b0f      	ldr	r3, [pc, #60]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133dc:	4a0e      	ldr	r2, [pc, #56]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133e2:	6353      	str	r3, [r2, #52]	; 0x34
 80133e4:	2300      	movs	r3, #0
 80133e6:	60bb      	str	r3, [r7, #8]
 80133e8:	4b0b      	ldr	r3, [pc, #44]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133ec:	4a0a      	ldr	r2, [pc, #40]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80133f2:	6453      	str	r3, [r2, #68]	; 0x44
 80133f4:	4b08      	ldr	r3, [pc, #32]	; (8013418 <HAL_PCD_MspInit+0xcc>)
 80133f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133fc:	60bb      	str	r3, [r7, #8]
 80133fe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013400:	2200      	movs	r2, #0
 8013402:	2105      	movs	r1, #5
 8013404:	2043      	movs	r0, #67	; 0x43
 8013406:	f7f0 fd83 	bl	8003f10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801340a:	2043      	movs	r0, #67	; 0x43
 801340c:	f7f0 fd9c 	bl	8003f48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013410:	bf00      	nop
 8013412:	3780      	adds	r7, #128	; 0x80
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	40023800 	.word	0x40023800
 801341c:	40020000 	.word	0x40020000

08013420 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013434:	4619      	mov	r1, r3
 8013436:	4610      	mov	r0, r2
 8013438:	f7f9 fd17 	bl	800ce6a <USBD_LL_SetupStage>
}
 801343c:	bf00      	nop
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b082      	sub	sp, #8
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	460b      	mov	r3, r1
 801344e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013456:	78fa      	ldrb	r2, [r7, #3]
 8013458:	6879      	ldr	r1, [r7, #4]
 801345a:	4613      	mov	r3, r2
 801345c:	00db      	lsls	r3, r3, #3
 801345e:	4413      	add	r3, r2
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	440b      	add	r3, r1
 8013464:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	78fb      	ldrb	r3, [r7, #3]
 801346c:	4619      	mov	r1, r3
 801346e:	f7f9 fd51 	bl	800cf14 <USBD_LL_DataOutStage>
}
 8013472:	bf00      	nop
 8013474:	3708      	adds	r7, #8
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}

0801347a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801347a:	b580      	push	{r7, lr}
 801347c:	b082      	sub	sp, #8
 801347e:	af00      	add	r7, sp, #0
 8013480:	6078      	str	r0, [r7, #4]
 8013482:	460b      	mov	r3, r1
 8013484:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801348c:	78fa      	ldrb	r2, [r7, #3]
 801348e:	6879      	ldr	r1, [r7, #4]
 8013490:	4613      	mov	r3, r2
 8013492:	00db      	lsls	r3, r3, #3
 8013494:	4413      	add	r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	440b      	add	r3, r1
 801349a:	334c      	adds	r3, #76	; 0x4c
 801349c:	681a      	ldr	r2, [r3, #0]
 801349e:	78fb      	ldrb	r3, [r7, #3]
 80134a0:	4619      	mov	r1, r3
 80134a2:	f7f9 fdea 	bl	800d07a <USBD_LL_DataInStage>
}
 80134a6:	bf00      	nop
 80134a8:	3708      	adds	r7, #8
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}

080134ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134ae:	b580      	push	{r7, lr}
 80134b0:	b082      	sub	sp, #8
 80134b2:	af00      	add	r7, sp, #0
 80134b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80134bc:	4618      	mov	r0, r3
 80134be:	f7f9 ff1e 	bl	800d2fe <USBD_LL_SOF>
}
 80134c2:	bf00      	nop
 80134c4:	3708      	adds	r7, #8
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}

080134ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80134ca:	b580      	push	{r7, lr}
 80134cc:	b084      	sub	sp, #16
 80134ce:	af00      	add	r7, sp, #0
 80134d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80134d2:	2301      	movs	r3, #1
 80134d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d102      	bne.n	80134e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80134de:	2300      	movs	r3, #0
 80134e0:	73fb      	strb	r3, [r7, #15]
 80134e2:	e008      	b.n	80134f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	68db      	ldr	r3, [r3, #12]
 80134e8:	2b02      	cmp	r3, #2
 80134ea:	d102      	bne.n	80134f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80134ec:	2301      	movs	r3, #1
 80134ee:	73fb      	strb	r3, [r7, #15]
 80134f0:	e001      	b.n	80134f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80134f2:	f7ef f975 	bl	80027e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80134fc:	7bfa      	ldrb	r2, [r7, #15]
 80134fe:	4611      	mov	r1, r2
 8013500:	4618      	mov	r0, r3
 8013502:	f7f9 febe 	bl	800d282 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801350c:	4618      	mov	r0, r3
 801350e:	f7f9 fe66 	bl	800d1de <USBD_LL_Reset>
}
 8013512:	bf00      	nop
 8013514:	3710      	adds	r7, #16
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
	...

0801351c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801352a:	4618      	mov	r0, r3
 801352c:	f7f9 feb9 	bl	800d2a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	687a      	ldr	r2, [r7, #4]
 801353c:	6812      	ldr	r2, [r2, #0]
 801353e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013542:	f043 0301 	orr.w	r3, r3, #1
 8013546:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6a1b      	ldr	r3, [r3, #32]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d005      	beq.n	801355c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013550:	4b04      	ldr	r3, [pc, #16]	; (8013564 <HAL_PCD_SuspendCallback+0x48>)
 8013552:	691b      	ldr	r3, [r3, #16]
 8013554:	4a03      	ldr	r2, [pc, #12]	; (8013564 <HAL_PCD_SuspendCallback+0x48>)
 8013556:	f043 0306 	orr.w	r3, r3, #6
 801355a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801355c:	bf00      	nop
 801355e:	3708      	adds	r7, #8
 8013560:	46bd      	mov	sp, r7
 8013562:	bd80      	pop	{r7, pc}
 8013564:	e000ed00 	.word	0xe000ed00

08013568 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013576:	4618      	mov	r0, r3
 8013578:	f7f9 fea9 	bl	800d2ce <USBD_LL_Resume>
}
 801357c:	bf00      	nop
 801357e:	3708      	adds	r7, #8
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	460b      	mov	r3, r1
 801358e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013596:	78fa      	ldrb	r2, [r7, #3]
 8013598:	4611      	mov	r1, r2
 801359a:	4618      	mov	r0, r3
 801359c:	f7f9 ff01 	bl	800d3a2 <USBD_LL_IsoOUTIncomplete>
}
 80135a0:	bf00      	nop
 80135a2:	3708      	adds	r7, #8
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b082      	sub	sp, #8
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	460b      	mov	r3, r1
 80135b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135ba:	78fa      	ldrb	r2, [r7, #3]
 80135bc:	4611      	mov	r1, r2
 80135be:	4618      	mov	r0, r3
 80135c0:	f7f9 febd 	bl	800d33e <USBD_LL_IsoINIncomplete>
}
 80135c4:	bf00      	nop
 80135c6:	3708      	adds	r7, #8
 80135c8:	46bd      	mov	sp, r7
 80135ca:	bd80      	pop	{r7, pc}

080135cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135da:	4618      	mov	r0, r3
 80135dc:	f7f9 ff13 	bl	800d406 <USBD_LL_DevConnected>
}
 80135e0:	bf00      	nop
 80135e2:	3708      	adds	r7, #8
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b082      	sub	sp, #8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7f9 ff10 	bl	800d41c <USBD_LL_DevDisconnected>
}
 80135fc:	bf00      	nop
 80135fe:	3708      	adds	r7, #8
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}

08013604 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	781b      	ldrb	r3, [r3, #0]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d13c      	bne.n	801368e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013614:	4a20      	ldr	r2, [pc, #128]	; (8013698 <USBD_LL_Init+0x94>)
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	4a1e      	ldr	r2, [pc, #120]	; (8013698 <USBD_LL_Init+0x94>)
 8013620:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013624:	4b1c      	ldr	r3, [pc, #112]	; (8013698 <USBD_LL_Init+0x94>)
 8013626:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801362a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801362c:	4b1a      	ldr	r3, [pc, #104]	; (8013698 <USBD_LL_Init+0x94>)
 801362e:	2206      	movs	r2, #6
 8013630:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013632:	4b19      	ldr	r3, [pc, #100]	; (8013698 <USBD_LL_Init+0x94>)
 8013634:	2202      	movs	r2, #2
 8013636:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013638:	4b17      	ldr	r3, [pc, #92]	; (8013698 <USBD_LL_Init+0x94>)
 801363a:	2200      	movs	r2, #0
 801363c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801363e:	4b16      	ldr	r3, [pc, #88]	; (8013698 <USBD_LL_Init+0x94>)
 8013640:	2202      	movs	r2, #2
 8013642:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013644:	4b14      	ldr	r3, [pc, #80]	; (8013698 <USBD_LL_Init+0x94>)
 8013646:	2200      	movs	r2, #0
 8013648:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801364a:	4b13      	ldr	r3, [pc, #76]	; (8013698 <USBD_LL_Init+0x94>)
 801364c:	2200      	movs	r2, #0
 801364e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013650:	4b11      	ldr	r3, [pc, #68]	; (8013698 <USBD_LL_Init+0x94>)
 8013652:	2200      	movs	r2, #0
 8013654:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013656:	4b10      	ldr	r3, [pc, #64]	; (8013698 <USBD_LL_Init+0x94>)
 8013658:	2200      	movs	r2, #0
 801365a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801365c:	4b0e      	ldr	r3, [pc, #56]	; (8013698 <USBD_LL_Init+0x94>)
 801365e:	2200      	movs	r2, #0
 8013660:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013662:	480d      	ldr	r0, [pc, #52]	; (8013698 <USBD_LL_Init+0x94>)
 8013664:	f7f2 fb25 	bl	8005cb2 <HAL_PCD_Init>
 8013668:	4603      	mov	r3, r0
 801366a:	2b00      	cmp	r3, #0
 801366c:	d001      	beq.n	8013672 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801366e:	f7ef f8b7 	bl	80027e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013672:	2180      	movs	r1, #128	; 0x80
 8013674:	4808      	ldr	r0, [pc, #32]	; (8013698 <USBD_LL_Init+0x94>)
 8013676:	f7f3 fdb0 	bl	80071da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801367a:	2240      	movs	r2, #64	; 0x40
 801367c:	2100      	movs	r1, #0
 801367e:	4806      	ldr	r0, [pc, #24]	; (8013698 <USBD_LL_Init+0x94>)
 8013680:	f7f3 fd64 	bl	800714c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013684:	2280      	movs	r2, #128	; 0x80
 8013686:	2101      	movs	r1, #1
 8013688:	4803      	ldr	r0, [pc, #12]	; (8013698 <USBD_LL_Init+0x94>)
 801368a:	f7f3 fd5f 	bl	800714c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801368e:	2300      	movs	r3, #0
}
 8013690:	4618      	mov	r0, r3
 8013692:	3708      	adds	r7, #8
 8013694:	46bd      	mov	sp, r7
 8013696:	bd80      	pop	{r7, pc}
 8013698:	200067e0 	.word	0x200067e0

0801369c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b084      	sub	sp, #16
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136a4:	2300      	movs	r3, #0
 80136a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136a8:	2300      	movs	r3, #0
 80136aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7f2 fc21 	bl	8005efa <HAL_PCD_Start>
 80136b8:	4603      	mov	r3, r0
 80136ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80136bc:	7bfb      	ldrb	r3, [r7, #15]
 80136be:	4618      	mov	r0, r3
 80136c0:	f000 f990 	bl	80139e4 <USBD_Get_USB_Status>
 80136c4:	4603      	mov	r3, r0
 80136c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80136c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3710      	adds	r7, #16
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}

080136d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80136d2:	b580      	push	{r7, lr}
 80136d4:	b084      	sub	sp, #16
 80136d6:	af00      	add	r7, sp, #0
 80136d8:	6078      	str	r0, [r7, #4]
 80136da:	4608      	mov	r0, r1
 80136dc:	4611      	mov	r1, r2
 80136de:	461a      	mov	r2, r3
 80136e0:	4603      	mov	r3, r0
 80136e2:	70fb      	strb	r3, [r7, #3]
 80136e4:	460b      	mov	r3, r1
 80136e6:	70bb      	strb	r3, [r7, #2]
 80136e8:	4613      	mov	r3, r2
 80136ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80136ec:	2300      	movs	r3, #0
 80136ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80136f0:	2300      	movs	r3, #0
 80136f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80136fa:	78bb      	ldrb	r3, [r7, #2]
 80136fc:	883a      	ldrh	r2, [r7, #0]
 80136fe:	78f9      	ldrb	r1, [r7, #3]
 8013700:	f7f3 f91f 	bl	8006942 <HAL_PCD_EP_Open>
 8013704:	4603      	mov	r3, r0
 8013706:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013708:	7bfb      	ldrb	r3, [r7, #15]
 801370a:	4618      	mov	r0, r3
 801370c:	f000 f96a 	bl	80139e4 <USBD_Get_USB_Status>
 8013710:	4603      	mov	r3, r0
 8013712:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013714:	7bbb      	ldrb	r3, [r7, #14]
}
 8013716:	4618      	mov	r0, r3
 8013718:	3710      	adds	r7, #16
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}

0801371e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801371e:	b580      	push	{r7, lr}
 8013720:	b084      	sub	sp, #16
 8013722:	af00      	add	r7, sp, #0
 8013724:	6078      	str	r0, [r7, #4]
 8013726:	460b      	mov	r3, r1
 8013728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801372a:	2300      	movs	r3, #0
 801372c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801372e:	2300      	movs	r3, #0
 8013730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013738:	78fa      	ldrb	r2, [r7, #3]
 801373a:	4611      	mov	r1, r2
 801373c:	4618      	mov	r0, r3
 801373e:	f7f3 f968 	bl	8006a12 <HAL_PCD_EP_Close>
 8013742:	4603      	mov	r3, r0
 8013744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013746:	7bfb      	ldrb	r3, [r7, #15]
 8013748:	4618      	mov	r0, r3
 801374a:	f000 f94b 	bl	80139e4 <USBD_Get_USB_Status>
 801374e:	4603      	mov	r3, r0
 8013750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013752:	7bbb      	ldrb	r3, [r7, #14]
}
 8013754:	4618      	mov	r0, r3
 8013756:	3710      	adds	r7, #16
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	460b      	mov	r3, r1
 8013766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013768:	2300      	movs	r3, #0
 801376a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801376c:	2300      	movs	r3, #0
 801376e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013776:	78fa      	ldrb	r2, [r7, #3]
 8013778:	4611      	mov	r1, r2
 801377a:	4618      	mov	r0, r3
 801377c:	f7f3 fa40 	bl	8006c00 <HAL_PCD_EP_SetStall>
 8013780:	4603      	mov	r3, r0
 8013782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013784:	7bfb      	ldrb	r3, [r7, #15]
 8013786:	4618      	mov	r0, r3
 8013788:	f000 f92c 	bl	80139e4 <USBD_Get_USB_Status>
 801378c:	4603      	mov	r3, r0
 801378e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013790:	7bbb      	ldrb	r3, [r7, #14]
}
 8013792:	4618      	mov	r0, r3
 8013794:	3710      	adds	r7, #16
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}

0801379a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801379a:	b580      	push	{r7, lr}
 801379c:	b084      	sub	sp, #16
 801379e:	af00      	add	r7, sp, #0
 80137a0:	6078      	str	r0, [r7, #4]
 80137a2:	460b      	mov	r3, r1
 80137a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80137a6:	2300      	movs	r3, #0
 80137a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80137aa:	2300      	movs	r3, #0
 80137ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80137b4:	78fa      	ldrb	r2, [r7, #3]
 80137b6:	4611      	mov	r1, r2
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f3 fa85 	bl	8006cc8 <HAL_PCD_EP_ClrStall>
 80137be:	4603      	mov	r3, r0
 80137c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80137c2:	7bfb      	ldrb	r3, [r7, #15]
 80137c4:	4618      	mov	r0, r3
 80137c6:	f000 f90d 	bl	80139e4 <USBD_Get_USB_Status>
 80137ca:	4603      	mov	r3, r0
 80137cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80137ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80137d0:	4618      	mov	r0, r3
 80137d2:	3710      	adds	r7, #16
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}

080137d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80137d8:	b480      	push	{r7}
 80137da:	b085      	sub	sp, #20
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	460b      	mov	r3, r1
 80137e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80137ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80137ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	da0b      	bge.n	801380c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80137f4:	78fb      	ldrb	r3, [r7, #3]
 80137f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80137fa:	68f9      	ldr	r1, [r7, #12]
 80137fc:	4613      	mov	r3, r2
 80137fe:	00db      	lsls	r3, r3, #3
 8013800:	4413      	add	r3, r2
 8013802:	009b      	lsls	r3, r3, #2
 8013804:	440b      	add	r3, r1
 8013806:	333e      	adds	r3, #62	; 0x3e
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	e00b      	b.n	8013824 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801380c:	78fb      	ldrb	r3, [r7, #3]
 801380e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013812:	68f9      	ldr	r1, [r7, #12]
 8013814:	4613      	mov	r3, r2
 8013816:	00db      	lsls	r3, r3, #3
 8013818:	4413      	add	r3, r2
 801381a:	009b      	lsls	r3, r3, #2
 801381c:	440b      	add	r3, r1
 801381e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013822:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013824:	4618      	mov	r0, r3
 8013826:	3714      	adds	r7, #20
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	460b      	mov	r3, r1
 801383a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801383c:	2300      	movs	r3, #0
 801383e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013840:	2300      	movs	r3, #0
 8013842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801384a:	78fa      	ldrb	r2, [r7, #3]
 801384c:	4611      	mov	r1, r2
 801384e:	4618      	mov	r0, r3
 8013850:	f7f3 f852 	bl	80068f8 <HAL_PCD_SetAddress>
 8013854:	4603      	mov	r3, r0
 8013856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013858:	7bfb      	ldrb	r3, [r7, #15]
 801385a:	4618      	mov	r0, r3
 801385c:	f000 f8c2 	bl	80139e4 <USBD_Get_USB_Status>
 8013860:	4603      	mov	r3, r0
 8013862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013864:	7bbb      	ldrb	r3, [r7, #14]
}
 8013866:	4618      	mov	r0, r3
 8013868:	3710      	adds	r7, #16
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}

0801386e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801386e:	b580      	push	{r7, lr}
 8013870:	b086      	sub	sp, #24
 8013872:	af00      	add	r7, sp, #0
 8013874:	60f8      	str	r0, [r7, #12]
 8013876:	607a      	str	r2, [r7, #4]
 8013878:	603b      	str	r3, [r7, #0]
 801387a:	460b      	mov	r3, r1
 801387c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801387e:	2300      	movs	r3, #0
 8013880:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013882:	2300      	movs	r3, #0
 8013884:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801388c:	7af9      	ldrb	r1, [r7, #11]
 801388e:	683b      	ldr	r3, [r7, #0]
 8013890:	687a      	ldr	r2, [r7, #4]
 8013892:	f7f3 f96b 	bl	8006b6c <HAL_PCD_EP_Transmit>
 8013896:	4603      	mov	r3, r0
 8013898:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801389a:	7dfb      	ldrb	r3, [r7, #23]
 801389c:	4618      	mov	r0, r3
 801389e:	f000 f8a1 	bl	80139e4 <USBD_Get_USB_Status>
 80138a2:	4603      	mov	r3, r0
 80138a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80138a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	3718      	adds	r7, #24
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}

080138b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b086      	sub	sp, #24
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	607a      	str	r2, [r7, #4]
 80138ba:	603b      	str	r3, [r7, #0]
 80138bc:	460b      	mov	r3, r1
 80138be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138c0:	2300      	movs	r3, #0
 80138c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138c4:	2300      	movs	r3, #0
 80138c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80138ce:	7af9      	ldrb	r1, [r7, #11]
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	687a      	ldr	r2, [r7, #4]
 80138d4:	f7f3 f8e7 	bl	8006aa6 <HAL_PCD_EP_Receive>
 80138d8:	4603      	mov	r3, r0
 80138da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138dc:	7dfb      	ldrb	r3, [r7, #23]
 80138de:	4618      	mov	r0, r3
 80138e0:	f000 f880 	bl	80139e4 <USBD_Get_USB_Status>
 80138e4:	4603      	mov	r3, r0
 80138e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80138e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	3718      	adds	r7, #24
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}

080138f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b082      	sub	sp, #8
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
 80138fa:	460b      	mov	r3, r1
 80138fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013904:	78fa      	ldrb	r2, [r7, #3]
 8013906:	4611      	mov	r1, r2
 8013908:	4618      	mov	r0, r3
 801390a:	f7f3 f917 	bl	8006b3c <HAL_PCD_EP_GetRxCount>
 801390e:	4603      	mov	r3, r0
}
 8013910:	4618      	mov	r0, r3
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	460b      	mov	r3, r1
 8013922:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013924:	78fb      	ldrb	r3, [r7, #3]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d002      	beq.n	8013930 <HAL_PCDEx_LPM_Callback+0x18>
 801392a:	2b01      	cmp	r3, #1
 801392c:	d01f      	beq.n	801396e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801392e:	e03b      	b.n	80139a8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6a1b      	ldr	r3, [r3, #32]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d007      	beq.n	8013948 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8013938:	f7ef fb76 	bl	8003028 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801393c:	4b1c      	ldr	r3, [pc, #112]	; (80139b0 <HAL_PCDEx_LPM_Callback+0x98>)
 801393e:	691b      	ldr	r3, [r3, #16]
 8013940:	4a1b      	ldr	r2, [pc, #108]	; (80139b0 <HAL_PCDEx_LPM_Callback+0x98>)
 8013942:	f023 0306 	bic.w	r3, r3, #6
 8013946:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	687a      	ldr	r2, [r7, #4]
 8013954:	6812      	ldr	r2, [r2, #0]
 8013956:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801395a:	f023 0301 	bic.w	r3, r3, #1
 801395e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013966:	4618      	mov	r0, r3
 8013968:	f7f9 fcb1 	bl	800d2ce <USBD_LL_Resume>
    break;
 801396c:	e01c      	b.n	80139a8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	687a      	ldr	r2, [r7, #4]
 801397a:	6812      	ldr	r2, [r2, #0]
 801397c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013980:	f043 0301 	orr.w	r3, r3, #1
 8013984:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801398c:	4618      	mov	r0, r3
 801398e:	f7f9 fc88 	bl	800d2a2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	6a1b      	ldr	r3, [r3, #32]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d005      	beq.n	80139a6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801399a:	4b05      	ldr	r3, [pc, #20]	; (80139b0 <HAL_PCDEx_LPM_Callback+0x98>)
 801399c:	691b      	ldr	r3, [r3, #16]
 801399e:	4a04      	ldr	r2, [pc, #16]	; (80139b0 <HAL_PCDEx_LPM_Callback+0x98>)
 80139a0:	f043 0306 	orr.w	r3, r3, #6
 80139a4:	6113      	str	r3, [r2, #16]
    break;
 80139a6:	bf00      	nop
}
 80139a8:	bf00      	nop
 80139aa:	3708      	adds	r7, #8
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	e000ed00 	.word	0xe000ed00

080139b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80139b4:	b480      	push	{r7}
 80139b6:	b083      	sub	sp, #12
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80139bc:	4b03      	ldr	r3, [pc, #12]	; (80139cc <USBD_static_malloc+0x18>)
}
 80139be:	4618      	mov	r0, r3
 80139c0:	370c      	adds	r7, #12
 80139c2:	46bd      	mov	sp, r7
 80139c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c8:	4770      	bx	lr
 80139ca:	bf00      	nop
 80139cc:	20006cec 	.word	0x20006cec

080139d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]

}
 80139d8:	bf00      	nop
 80139da:	370c      	adds	r7, #12
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr

080139e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80139e4:	b480      	push	{r7}
 80139e6:	b085      	sub	sp, #20
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	4603      	mov	r3, r0
 80139ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139ee:	2300      	movs	r3, #0
 80139f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80139f2:	79fb      	ldrb	r3, [r7, #7]
 80139f4:	2b03      	cmp	r3, #3
 80139f6:	d817      	bhi.n	8013a28 <USBD_Get_USB_Status+0x44>
 80139f8:	a201      	add	r2, pc, #4	; (adr r2, 8013a00 <USBD_Get_USB_Status+0x1c>)
 80139fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139fe:	bf00      	nop
 8013a00:	08013a11 	.word	0x08013a11
 8013a04:	08013a17 	.word	0x08013a17
 8013a08:	08013a1d 	.word	0x08013a1d
 8013a0c:	08013a23 	.word	0x08013a23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013a10:	2300      	movs	r3, #0
 8013a12:	73fb      	strb	r3, [r7, #15]
    break;
 8013a14:	e00b      	b.n	8013a2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013a16:	2303      	movs	r3, #3
 8013a18:	73fb      	strb	r3, [r7, #15]
    break;
 8013a1a:	e008      	b.n	8013a2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8013a20:	e005      	b.n	8013a2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013a22:	2303      	movs	r3, #3
 8013a24:	73fb      	strb	r3, [r7, #15]
    break;
 8013a26:	e002      	b.n	8013a2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013a28:	2303      	movs	r3, #3
 8013a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8013a2c:	bf00      	nop
  }
  return usb_status;
 8013a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	3714      	adds	r7, #20
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <__errno>:
 8013a3c:	4b01      	ldr	r3, [pc, #4]	; (8013a44 <__errno+0x8>)
 8013a3e:	6818      	ldr	r0, [r3, #0]
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop
 8013a44:	20000124 	.word	0x20000124

08013a48 <std>:
 8013a48:	2300      	movs	r3, #0
 8013a4a:	b510      	push	{r4, lr}
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8013a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013a56:	6083      	str	r3, [r0, #8]
 8013a58:	8181      	strh	r1, [r0, #12]
 8013a5a:	6643      	str	r3, [r0, #100]	; 0x64
 8013a5c:	81c2      	strh	r2, [r0, #14]
 8013a5e:	6183      	str	r3, [r0, #24]
 8013a60:	4619      	mov	r1, r3
 8013a62:	2208      	movs	r2, #8
 8013a64:	305c      	adds	r0, #92	; 0x5c
 8013a66:	f000 f91f 	bl	8013ca8 <memset>
 8013a6a:	4b05      	ldr	r3, [pc, #20]	; (8013a80 <std+0x38>)
 8013a6c:	6263      	str	r3, [r4, #36]	; 0x24
 8013a6e:	4b05      	ldr	r3, [pc, #20]	; (8013a84 <std+0x3c>)
 8013a70:	62a3      	str	r3, [r4, #40]	; 0x28
 8013a72:	4b05      	ldr	r3, [pc, #20]	; (8013a88 <std+0x40>)
 8013a74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013a76:	4b05      	ldr	r3, [pc, #20]	; (8013a8c <std+0x44>)
 8013a78:	6224      	str	r4, [r4, #32]
 8013a7a:	6323      	str	r3, [r4, #48]	; 0x30
 8013a7c:	bd10      	pop	{r4, pc}
 8013a7e:	bf00      	nop
 8013a80:	0801495d 	.word	0x0801495d
 8013a84:	0801497f 	.word	0x0801497f
 8013a88:	080149b7 	.word	0x080149b7
 8013a8c:	080149db 	.word	0x080149db

08013a90 <_cleanup_r>:
 8013a90:	4901      	ldr	r1, [pc, #4]	; (8013a98 <_cleanup_r+0x8>)
 8013a92:	f000 b8af 	b.w	8013bf4 <_fwalk_reent>
 8013a96:	bf00      	nop
 8013a98:	080159d9 	.word	0x080159d9

08013a9c <__sfmoreglue>:
 8013a9c:	b570      	push	{r4, r5, r6, lr}
 8013a9e:	2268      	movs	r2, #104	; 0x68
 8013aa0:	1e4d      	subs	r5, r1, #1
 8013aa2:	4355      	muls	r5, r2
 8013aa4:	460e      	mov	r6, r1
 8013aa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013aaa:	f000 f971 	bl	8013d90 <_malloc_r>
 8013aae:	4604      	mov	r4, r0
 8013ab0:	b140      	cbz	r0, 8013ac4 <__sfmoreglue+0x28>
 8013ab2:	2100      	movs	r1, #0
 8013ab4:	e9c0 1600 	strd	r1, r6, [r0]
 8013ab8:	300c      	adds	r0, #12
 8013aba:	60a0      	str	r0, [r4, #8]
 8013abc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013ac0:	f000 f8f2 	bl	8013ca8 <memset>
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}

08013ac8 <__sfp_lock_acquire>:
 8013ac8:	4801      	ldr	r0, [pc, #4]	; (8013ad0 <__sfp_lock_acquire+0x8>)
 8013aca:	f7ef be69 	b.w	80037a0 <__retarget_lock_acquire_recursive>
 8013ace:	bf00      	nop
 8013ad0:	20000658 	.word	0x20000658

08013ad4 <__sfp_lock_release>:
 8013ad4:	4801      	ldr	r0, [pc, #4]	; (8013adc <__sfp_lock_release+0x8>)
 8013ad6:	f7ef be77 	b.w	80037c8 <__retarget_lock_release_recursive>
 8013ada:	bf00      	nop
 8013adc:	20000658 	.word	0x20000658

08013ae0 <__sinit_lock_acquire>:
 8013ae0:	4801      	ldr	r0, [pc, #4]	; (8013ae8 <__sinit_lock_acquire+0x8>)
 8013ae2:	f7ef be5d 	b.w	80037a0 <__retarget_lock_acquire_recursive>
 8013ae6:	bf00      	nop
 8013ae8:	2000064c 	.word	0x2000064c

08013aec <__sinit_lock_release>:
 8013aec:	4801      	ldr	r0, [pc, #4]	; (8013af4 <__sinit_lock_release+0x8>)
 8013aee:	f7ef be6b 	b.w	80037c8 <__retarget_lock_release_recursive>
 8013af2:	bf00      	nop
 8013af4:	2000064c 	.word	0x2000064c

08013af8 <__sinit>:
 8013af8:	b510      	push	{r4, lr}
 8013afa:	4604      	mov	r4, r0
 8013afc:	f7ff fff0 	bl	8013ae0 <__sinit_lock_acquire>
 8013b00:	69a3      	ldr	r3, [r4, #24]
 8013b02:	b11b      	cbz	r3, 8013b0c <__sinit+0x14>
 8013b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b08:	f7ff bff0 	b.w	8013aec <__sinit_lock_release>
 8013b0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b10:	6523      	str	r3, [r4, #80]	; 0x50
 8013b12:	4b13      	ldr	r3, [pc, #76]	; (8013b60 <__sinit+0x68>)
 8013b14:	4a13      	ldr	r2, [pc, #76]	; (8013b64 <__sinit+0x6c>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	62a2      	str	r2, [r4, #40]	; 0x28
 8013b1a:	42a3      	cmp	r3, r4
 8013b1c:	bf04      	itt	eq
 8013b1e:	2301      	moveq	r3, #1
 8013b20:	61a3      	streq	r3, [r4, #24]
 8013b22:	4620      	mov	r0, r4
 8013b24:	f000 f820 	bl	8013b68 <__sfp>
 8013b28:	6060      	str	r0, [r4, #4]
 8013b2a:	4620      	mov	r0, r4
 8013b2c:	f000 f81c 	bl	8013b68 <__sfp>
 8013b30:	60a0      	str	r0, [r4, #8]
 8013b32:	4620      	mov	r0, r4
 8013b34:	f000 f818 	bl	8013b68 <__sfp>
 8013b38:	2200      	movs	r2, #0
 8013b3a:	60e0      	str	r0, [r4, #12]
 8013b3c:	2104      	movs	r1, #4
 8013b3e:	6860      	ldr	r0, [r4, #4]
 8013b40:	f7ff ff82 	bl	8013a48 <std>
 8013b44:	68a0      	ldr	r0, [r4, #8]
 8013b46:	2201      	movs	r2, #1
 8013b48:	2109      	movs	r1, #9
 8013b4a:	f7ff ff7d 	bl	8013a48 <std>
 8013b4e:	68e0      	ldr	r0, [r4, #12]
 8013b50:	2202      	movs	r2, #2
 8013b52:	2112      	movs	r1, #18
 8013b54:	f7ff ff78 	bl	8013a48 <std>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	61a3      	str	r3, [r4, #24]
 8013b5c:	e7d2      	b.n	8013b04 <__sinit+0xc>
 8013b5e:	bf00      	nop
 8013b60:	08016c68 	.word	0x08016c68
 8013b64:	08013a91 	.word	0x08013a91

08013b68 <__sfp>:
 8013b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6a:	4607      	mov	r7, r0
 8013b6c:	f7ff ffac 	bl	8013ac8 <__sfp_lock_acquire>
 8013b70:	4b1e      	ldr	r3, [pc, #120]	; (8013bec <__sfp+0x84>)
 8013b72:	681e      	ldr	r6, [r3, #0]
 8013b74:	69b3      	ldr	r3, [r6, #24]
 8013b76:	b913      	cbnz	r3, 8013b7e <__sfp+0x16>
 8013b78:	4630      	mov	r0, r6
 8013b7a:	f7ff ffbd 	bl	8013af8 <__sinit>
 8013b7e:	3648      	adds	r6, #72	; 0x48
 8013b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013b84:	3b01      	subs	r3, #1
 8013b86:	d503      	bpl.n	8013b90 <__sfp+0x28>
 8013b88:	6833      	ldr	r3, [r6, #0]
 8013b8a:	b30b      	cbz	r3, 8013bd0 <__sfp+0x68>
 8013b8c:	6836      	ldr	r6, [r6, #0]
 8013b8e:	e7f7      	b.n	8013b80 <__sfp+0x18>
 8013b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013b94:	b9d5      	cbnz	r5, 8013bcc <__sfp+0x64>
 8013b96:	4b16      	ldr	r3, [pc, #88]	; (8013bf0 <__sfp+0x88>)
 8013b98:	60e3      	str	r3, [r4, #12]
 8013b9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b9e:	6665      	str	r5, [r4, #100]	; 0x64
 8013ba0:	f7ef fdd8 	bl	8003754 <__retarget_lock_init_recursive>
 8013ba4:	f7ff ff96 	bl	8013ad4 <__sfp_lock_release>
 8013ba8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013bac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013bb0:	6025      	str	r5, [r4, #0]
 8013bb2:	61a5      	str	r5, [r4, #24]
 8013bb4:	2208      	movs	r2, #8
 8013bb6:	4629      	mov	r1, r5
 8013bb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013bbc:	f000 f874 	bl	8013ca8 <memset>
 8013bc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013bc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013bc8:	4620      	mov	r0, r4
 8013bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bcc:	3468      	adds	r4, #104	; 0x68
 8013bce:	e7d9      	b.n	8013b84 <__sfp+0x1c>
 8013bd0:	2104      	movs	r1, #4
 8013bd2:	4638      	mov	r0, r7
 8013bd4:	f7ff ff62 	bl	8013a9c <__sfmoreglue>
 8013bd8:	4604      	mov	r4, r0
 8013bda:	6030      	str	r0, [r6, #0]
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	d1d5      	bne.n	8013b8c <__sfp+0x24>
 8013be0:	f7ff ff78 	bl	8013ad4 <__sfp_lock_release>
 8013be4:	230c      	movs	r3, #12
 8013be6:	603b      	str	r3, [r7, #0]
 8013be8:	e7ee      	b.n	8013bc8 <__sfp+0x60>
 8013bea:	bf00      	nop
 8013bec:	08016c68 	.word	0x08016c68
 8013bf0:	ffff0001 	.word	0xffff0001

08013bf4 <_fwalk_reent>:
 8013bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	4688      	mov	r8, r1
 8013bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c00:	2700      	movs	r7, #0
 8013c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013c06:	f1b9 0901 	subs.w	r9, r9, #1
 8013c0a:	d505      	bpl.n	8013c18 <_fwalk_reent+0x24>
 8013c0c:	6824      	ldr	r4, [r4, #0]
 8013c0e:	2c00      	cmp	r4, #0
 8013c10:	d1f7      	bne.n	8013c02 <_fwalk_reent+0xe>
 8013c12:	4638      	mov	r0, r7
 8013c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c18:	89ab      	ldrh	r3, [r5, #12]
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d907      	bls.n	8013c2e <_fwalk_reent+0x3a>
 8013c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013c22:	3301      	adds	r3, #1
 8013c24:	d003      	beq.n	8013c2e <_fwalk_reent+0x3a>
 8013c26:	4629      	mov	r1, r5
 8013c28:	4630      	mov	r0, r6
 8013c2a:	47c0      	blx	r8
 8013c2c:	4307      	orrs	r7, r0
 8013c2e:	3568      	adds	r5, #104	; 0x68
 8013c30:	e7e9      	b.n	8013c06 <_fwalk_reent+0x12>
	...

08013c34 <__libc_init_array>:
 8013c34:	b570      	push	{r4, r5, r6, lr}
 8013c36:	4d0d      	ldr	r5, [pc, #52]	; (8013c6c <__libc_init_array+0x38>)
 8013c38:	4c0d      	ldr	r4, [pc, #52]	; (8013c70 <__libc_init_array+0x3c>)
 8013c3a:	1b64      	subs	r4, r4, r5
 8013c3c:	10a4      	asrs	r4, r4, #2
 8013c3e:	2600      	movs	r6, #0
 8013c40:	42a6      	cmp	r6, r4
 8013c42:	d109      	bne.n	8013c58 <__libc_init_array+0x24>
 8013c44:	4d0b      	ldr	r5, [pc, #44]	; (8013c74 <__libc_init_array+0x40>)
 8013c46:	4c0c      	ldr	r4, [pc, #48]	; (8013c78 <__libc_init_array+0x44>)
 8013c48:	f002 fd4e 	bl	80166e8 <_init>
 8013c4c:	1b64      	subs	r4, r4, r5
 8013c4e:	10a4      	asrs	r4, r4, #2
 8013c50:	2600      	movs	r6, #0
 8013c52:	42a6      	cmp	r6, r4
 8013c54:	d105      	bne.n	8013c62 <__libc_init_array+0x2e>
 8013c56:	bd70      	pop	{r4, r5, r6, pc}
 8013c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c5c:	4798      	blx	r3
 8013c5e:	3601      	adds	r6, #1
 8013c60:	e7ee      	b.n	8013c40 <__libc_init_array+0xc>
 8013c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c66:	4798      	blx	r3
 8013c68:	3601      	adds	r6, #1
 8013c6a:	e7f2      	b.n	8013c52 <__libc_init_array+0x1e>
 8013c6c:	08016fec 	.word	0x08016fec
 8013c70:	08016fec 	.word	0x08016fec
 8013c74:	08016fec 	.word	0x08016fec
 8013c78:	08016ff0 	.word	0x08016ff0

08013c7c <malloc>:
 8013c7c:	4b02      	ldr	r3, [pc, #8]	; (8013c88 <malloc+0xc>)
 8013c7e:	4601      	mov	r1, r0
 8013c80:	6818      	ldr	r0, [r3, #0]
 8013c82:	f000 b885 	b.w	8013d90 <_malloc_r>
 8013c86:	bf00      	nop
 8013c88:	20000124 	.word	0x20000124

08013c8c <memcpy>:
 8013c8c:	440a      	add	r2, r1
 8013c8e:	4291      	cmp	r1, r2
 8013c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c94:	d100      	bne.n	8013c98 <memcpy+0xc>
 8013c96:	4770      	bx	lr
 8013c98:	b510      	push	{r4, lr}
 8013c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ca2:	4291      	cmp	r1, r2
 8013ca4:	d1f9      	bne.n	8013c9a <memcpy+0xe>
 8013ca6:	bd10      	pop	{r4, pc}

08013ca8 <memset>:
 8013ca8:	4402      	add	r2, r0
 8013caa:	4603      	mov	r3, r0
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d100      	bne.n	8013cb2 <memset+0xa>
 8013cb0:	4770      	bx	lr
 8013cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8013cb6:	e7f9      	b.n	8013cac <memset+0x4>

08013cb8 <_free_r>:
 8013cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013cba:	2900      	cmp	r1, #0
 8013cbc:	d044      	beq.n	8013d48 <_free_r+0x90>
 8013cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cc2:	9001      	str	r0, [sp, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8013cca:	bfb8      	it	lt
 8013ccc:	18e4      	addlt	r4, r4, r3
 8013cce:	f001 ff4d 	bl	8015b6c <__malloc_lock>
 8013cd2:	4a1e      	ldr	r2, [pc, #120]	; (8013d4c <_free_r+0x94>)
 8013cd4:	9801      	ldr	r0, [sp, #4]
 8013cd6:	6813      	ldr	r3, [r2, #0]
 8013cd8:	b933      	cbnz	r3, 8013ce8 <_free_r+0x30>
 8013cda:	6063      	str	r3, [r4, #4]
 8013cdc:	6014      	str	r4, [r2, #0]
 8013cde:	b003      	add	sp, #12
 8013ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013ce4:	f001 bf48 	b.w	8015b78 <__malloc_unlock>
 8013ce8:	42a3      	cmp	r3, r4
 8013cea:	d908      	bls.n	8013cfe <_free_r+0x46>
 8013cec:	6825      	ldr	r5, [r4, #0]
 8013cee:	1961      	adds	r1, r4, r5
 8013cf0:	428b      	cmp	r3, r1
 8013cf2:	bf01      	itttt	eq
 8013cf4:	6819      	ldreq	r1, [r3, #0]
 8013cf6:	685b      	ldreq	r3, [r3, #4]
 8013cf8:	1949      	addeq	r1, r1, r5
 8013cfa:	6021      	streq	r1, [r4, #0]
 8013cfc:	e7ed      	b.n	8013cda <_free_r+0x22>
 8013cfe:	461a      	mov	r2, r3
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	b10b      	cbz	r3, 8013d08 <_free_r+0x50>
 8013d04:	42a3      	cmp	r3, r4
 8013d06:	d9fa      	bls.n	8013cfe <_free_r+0x46>
 8013d08:	6811      	ldr	r1, [r2, #0]
 8013d0a:	1855      	adds	r5, r2, r1
 8013d0c:	42a5      	cmp	r5, r4
 8013d0e:	d10b      	bne.n	8013d28 <_free_r+0x70>
 8013d10:	6824      	ldr	r4, [r4, #0]
 8013d12:	4421      	add	r1, r4
 8013d14:	1854      	adds	r4, r2, r1
 8013d16:	42a3      	cmp	r3, r4
 8013d18:	6011      	str	r1, [r2, #0]
 8013d1a:	d1e0      	bne.n	8013cde <_free_r+0x26>
 8013d1c:	681c      	ldr	r4, [r3, #0]
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	6053      	str	r3, [r2, #4]
 8013d22:	4421      	add	r1, r4
 8013d24:	6011      	str	r1, [r2, #0]
 8013d26:	e7da      	b.n	8013cde <_free_r+0x26>
 8013d28:	d902      	bls.n	8013d30 <_free_r+0x78>
 8013d2a:	230c      	movs	r3, #12
 8013d2c:	6003      	str	r3, [r0, #0]
 8013d2e:	e7d6      	b.n	8013cde <_free_r+0x26>
 8013d30:	6825      	ldr	r5, [r4, #0]
 8013d32:	1961      	adds	r1, r4, r5
 8013d34:	428b      	cmp	r3, r1
 8013d36:	bf04      	itt	eq
 8013d38:	6819      	ldreq	r1, [r3, #0]
 8013d3a:	685b      	ldreq	r3, [r3, #4]
 8013d3c:	6063      	str	r3, [r4, #4]
 8013d3e:	bf04      	itt	eq
 8013d40:	1949      	addeq	r1, r1, r5
 8013d42:	6021      	streq	r1, [r4, #0]
 8013d44:	6054      	str	r4, [r2, #4]
 8013d46:	e7ca      	b.n	8013cde <_free_r+0x26>
 8013d48:	b003      	add	sp, #12
 8013d4a:	bd30      	pop	{r4, r5, pc}
 8013d4c:	20006f0c 	.word	0x20006f0c

08013d50 <sbrk_aligned>:
 8013d50:	b570      	push	{r4, r5, r6, lr}
 8013d52:	4e0e      	ldr	r6, [pc, #56]	; (8013d8c <sbrk_aligned+0x3c>)
 8013d54:	460c      	mov	r4, r1
 8013d56:	6831      	ldr	r1, [r6, #0]
 8013d58:	4605      	mov	r5, r0
 8013d5a:	b911      	cbnz	r1, 8013d62 <sbrk_aligned+0x12>
 8013d5c:	f000 fdee 	bl	801493c <_sbrk_r>
 8013d60:	6030      	str	r0, [r6, #0]
 8013d62:	4621      	mov	r1, r4
 8013d64:	4628      	mov	r0, r5
 8013d66:	f000 fde9 	bl	801493c <_sbrk_r>
 8013d6a:	1c43      	adds	r3, r0, #1
 8013d6c:	d00a      	beq.n	8013d84 <sbrk_aligned+0x34>
 8013d6e:	1cc4      	adds	r4, r0, #3
 8013d70:	f024 0403 	bic.w	r4, r4, #3
 8013d74:	42a0      	cmp	r0, r4
 8013d76:	d007      	beq.n	8013d88 <sbrk_aligned+0x38>
 8013d78:	1a21      	subs	r1, r4, r0
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	f000 fdde 	bl	801493c <_sbrk_r>
 8013d80:	3001      	adds	r0, #1
 8013d82:	d101      	bne.n	8013d88 <sbrk_aligned+0x38>
 8013d84:	f04f 34ff 	mov.w	r4, #4294967295
 8013d88:	4620      	mov	r0, r4
 8013d8a:	bd70      	pop	{r4, r5, r6, pc}
 8013d8c:	20006f10 	.word	0x20006f10

08013d90 <_malloc_r>:
 8013d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d94:	1ccd      	adds	r5, r1, #3
 8013d96:	f025 0503 	bic.w	r5, r5, #3
 8013d9a:	3508      	adds	r5, #8
 8013d9c:	2d0c      	cmp	r5, #12
 8013d9e:	bf38      	it	cc
 8013da0:	250c      	movcc	r5, #12
 8013da2:	2d00      	cmp	r5, #0
 8013da4:	4607      	mov	r7, r0
 8013da6:	db01      	blt.n	8013dac <_malloc_r+0x1c>
 8013da8:	42a9      	cmp	r1, r5
 8013daa:	d905      	bls.n	8013db8 <_malloc_r+0x28>
 8013dac:	230c      	movs	r3, #12
 8013dae:	603b      	str	r3, [r7, #0]
 8013db0:	2600      	movs	r6, #0
 8013db2:	4630      	mov	r0, r6
 8013db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013db8:	4e2e      	ldr	r6, [pc, #184]	; (8013e74 <_malloc_r+0xe4>)
 8013dba:	f001 fed7 	bl	8015b6c <__malloc_lock>
 8013dbe:	6833      	ldr	r3, [r6, #0]
 8013dc0:	461c      	mov	r4, r3
 8013dc2:	bb34      	cbnz	r4, 8013e12 <_malloc_r+0x82>
 8013dc4:	4629      	mov	r1, r5
 8013dc6:	4638      	mov	r0, r7
 8013dc8:	f7ff ffc2 	bl	8013d50 <sbrk_aligned>
 8013dcc:	1c43      	adds	r3, r0, #1
 8013dce:	4604      	mov	r4, r0
 8013dd0:	d14d      	bne.n	8013e6e <_malloc_r+0xde>
 8013dd2:	6834      	ldr	r4, [r6, #0]
 8013dd4:	4626      	mov	r6, r4
 8013dd6:	2e00      	cmp	r6, #0
 8013dd8:	d140      	bne.n	8013e5c <_malloc_r+0xcc>
 8013dda:	6823      	ldr	r3, [r4, #0]
 8013ddc:	4631      	mov	r1, r6
 8013dde:	4638      	mov	r0, r7
 8013de0:	eb04 0803 	add.w	r8, r4, r3
 8013de4:	f000 fdaa 	bl	801493c <_sbrk_r>
 8013de8:	4580      	cmp	r8, r0
 8013dea:	d13a      	bne.n	8013e62 <_malloc_r+0xd2>
 8013dec:	6821      	ldr	r1, [r4, #0]
 8013dee:	3503      	adds	r5, #3
 8013df0:	1a6d      	subs	r5, r5, r1
 8013df2:	f025 0503 	bic.w	r5, r5, #3
 8013df6:	3508      	adds	r5, #8
 8013df8:	2d0c      	cmp	r5, #12
 8013dfa:	bf38      	it	cc
 8013dfc:	250c      	movcc	r5, #12
 8013dfe:	4629      	mov	r1, r5
 8013e00:	4638      	mov	r0, r7
 8013e02:	f7ff ffa5 	bl	8013d50 <sbrk_aligned>
 8013e06:	3001      	adds	r0, #1
 8013e08:	d02b      	beq.n	8013e62 <_malloc_r+0xd2>
 8013e0a:	6823      	ldr	r3, [r4, #0]
 8013e0c:	442b      	add	r3, r5
 8013e0e:	6023      	str	r3, [r4, #0]
 8013e10:	e00e      	b.n	8013e30 <_malloc_r+0xa0>
 8013e12:	6822      	ldr	r2, [r4, #0]
 8013e14:	1b52      	subs	r2, r2, r5
 8013e16:	d41e      	bmi.n	8013e56 <_malloc_r+0xc6>
 8013e18:	2a0b      	cmp	r2, #11
 8013e1a:	d916      	bls.n	8013e4a <_malloc_r+0xba>
 8013e1c:	1961      	adds	r1, r4, r5
 8013e1e:	42a3      	cmp	r3, r4
 8013e20:	6025      	str	r5, [r4, #0]
 8013e22:	bf18      	it	ne
 8013e24:	6059      	strne	r1, [r3, #4]
 8013e26:	6863      	ldr	r3, [r4, #4]
 8013e28:	bf08      	it	eq
 8013e2a:	6031      	streq	r1, [r6, #0]
 8013e2c:	5162      	str	r2, [r4, r5]
 8013e2e:	604b      	str	r3, [r1, #4]
 8013e30:	4638      	mov	r0, r7
 8013e32:	f104 060b 	add.w	r6, r4, #11
 8013e36:	f001 fe9f 	bl	8015b78 <__malloc_unlock>
 8013e3a:	f026 0607 	bic.w	r6, r6, #7
 8013e3e:	1d23      	adds	r3, r4, #4
 8013e40:	1af2      	subs	r2, r6, r3
 8013e42:	d0b6      	beq.n	8013db2 <_malloc_r+0x22>
 8013e44:	1b9b      	subs	r3, r3, r6
 8013e46:	50a3      	str	r3, [r4, r2]
 8013e48:	e7b3      	b.n	8013db2 <_malloc_r+0x22>
 8013e4a:	6862      	ldr	r2, [r4, #4]
 8013e4c:	42a3      	cmp	r3, r4
 8013e4e:	bf0c      	ite	eq
 8013e50:	6032      	streq	r2, [r6, #0]
 8013e52:	605a      	strne	r2, [r3, #4]
 8013e54:	e7ec      	b.n	8013e30 <_malloc_r+0xa0>
 8013e56:	4623      	mov	r3, r4
 8013e58:	6864      	ldr	r4, [r4, #4]
 8013e5a:	e7b2      	b.n	8013dc2 <_malloc_r+0x32>
 8013e5c:	4634      	mov	r4, r6
 8013e5e:	6876      	ldr	r6, [r6, #4]
 8013e60:	e7b9      	b.n	8013dd6 <_malloc_r+0x46>
 8013e62:	230c      	movs	r3, #12
 8013e64:	603b      	str	r3, [r7, #0]
 8013e66:	4638      	mov	r0, r7
 8013e68:	f001 fe86 	bl	8015b78 <__malloc_unlock>
 8013e6c:	e7a1      	b.n	8013db2 <_malloc_r+0x22>
 8013e6e:	6025      	str	r5, [r4, #0]
 8013e70:	e7de      	b.n	8013e30 <_malloc_r+0xa0>
 8013e72:	bf00      	nop
 8013e74:	20006f0c 	.word	0x20006f0c

08013e78 <__cvt>:
 8013e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e7c:	ec55 4b10 	vmov	r4, r5, d0
 8013e80:	2d00      	cmp	r5, #0
 8013e82:	460e      	mov	r6, r1
 8013e84:	4619      	mov	r1, r3
 8013e86:	462b      	mov	r3, r5
 8013e88:	bfbb      	ittet	lt
 8013e8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013e8e:	461d      	movlt	r5, r3
 8013e90:	2300      	movge	r3, #0
 8013e92:	232d      	movlt	r3, #45	; 0x2d
 8013e94:	700b      	strb	r3, [r1, #0]
 8013e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013e98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013e9c:	4691      	mov	r9, r2
 8013e9e:	f023 0820 	bic.w	r8, r3, #32
 8013ea2:	bfbc      	itt	lt
 8013ea4:	4622      	movlt	r2, r4
 8013ea6:	4614      	movlt	r4, r2
 8013ea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013eac:	d005      	beq.n	8013eba <__cvt+0x42>
 8013eae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013eb2:	d100      	bne.n	8013eb6 <__cvt+0x3e>
 8013eb4:	3601      	adds	r6, #1
 8013eb6:	2102      	movs	r1, #2
 8013eb8:	e000      	b.n	8013ebc <__cvt+0x44>
 8013eba:	2103      	movs	r1, #3
 8013ebc:	ab03      	add	r3, sp, #12
 8013ebe:	9301      	str	r3, [sp, #4]
 8013ec0:	ab02      	add	r3, sp, #8
 8013ec2:	9300      	str	r3, [sp, #0]
 8013ec4:	ec45 4b10 	vmov	d0, r4, r5
 8013ec8:	4653      	mov	r3, sl
 8013eca:	4632      	mov	r2, r6
 8013ecc:	f000 ff10 	bl	8014cf0 <_dtoa_r>
 8013ed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013ed4:	4607      	mov	r7, r0
 8013ed6:	d102      	bne.n	8013ede <__cvt+0x66>
 8013ed8:	f019 0f01 	tst.w	r9, #1
 8013edc:	d022      	beq.n	8013f24 <__cvt+0xac>
 8013ede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013ee2:	eb07 0906 	add.w	r9, r7, r6
 8013ee6:	d110      	bne.n	8013f0a <__cvt+0x92>
 8013ee8:	783b      	ldrb	r3, [r7, #0]
 8013eea:	2b30      	cmp	r3, #48	; 0x30
 8013eec:	d10a      	bne.n	8013f04 <__cvt+0x8c>
 8013eee:	2200      	movs	r2, #0
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	4629      	mov	r1, r5
 8013ef6:	f7ec fe07 	bl	8000b08 <__aeabi_dcmpeq>
 8013efa:	b918      	cbnz	r0, 8013f04 <__cvt+0x8c>
 8013efc:	f1c6 0601 	rsb	r6, r6, #1
 8013f00:	f8ca 6000 	str.w	r6, [sl]
 8013f04:	f8da 3000 	ldr.w	r3, [sl]
 8013f08:	4499      	add	r9, r3
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	4620      	mov	r0, r4
 8013f10:	4629      	mov	r1, r5
 8013f12:	f7ec fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 8013f16:	b108      	cbz	r0, 8013f1c <__cvt+0xa4>
 8013f18:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f1c:	2230      	movs	r2, #48	; 0x30
 8013f1e:	9b03      	ldr	r3, [sp, #12]
 8013f20:	454b      	cmp	r3, r9
 8013f22:	d307      	bcc.n	8013f34 <__cvt+0xbc>
 8013f24:	9b03      	ldr	r3, [sp, #12]
 8013f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f28:	1bdb      	subs	r3, r3, r7
 8013f2a:	4638      	mov	r0, r7
 8013f2c:	6013      	str	r3, [r2, #0]
 8013f2e:	b004      	add	sp, #16
 8013f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f34:	1c59      	adds	r1, r3, #1
 8013f36:	9103      	str	r1, [sp, #12]
 8013f38:	701a      	strb	r2, [r3, #0]
 8013f3a:	e7f0      	b.n	8013f1e <__cvt+0xa6>

08013f3c <__exponent>:
 8013f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f3e:	4603      	mov	r3, r0
 8013f40:	2900      	cmp	r1, #0
 8013f42:	bfb8      	it	lt
 8013f44:	4249      	neglt	r1, r1
 8013f46:	f803 2b02 	strb.w	r2, [r3], #2
 8013f4a:	bfb4      	ite	lt
 8013f4c:	222d      	movlt	r2, #45	; 0x2d
 8013f4e:	222b      	movge	r2, #43	; 0x2b
 8013f50:	2909      	cmp	r1, #9
 8013f52:	7042      	strb	r2, [r0, #1]
 8013f54:	dd2a      	ble.n	8013fac <__exponent+0x70>
 8013f56:	f10d 0407 	add.w	r4, sp, #7
 8013f5a:	46a4      	mov	ip, r4
 8013f5c:	270a      	movs	r7, #10
 8013f5e:	46a6      	mov	lr, r4
 8013f60:	460a      	mov	r2, r1
 8013f62:	fb91 f6f7 	sdiv	r6, r1, r7
 8013f66:	fb07 1516 	mls	r5, r7, r6, r1
 8013f6a:	3530      	adds	r5, #48	; 0x30
 8013f6c:	2a63      	cmp	r2, #99	; 0x63
 8013f6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013f72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013f76:	4631      	mov	r1, r6
 8013f78:	dcf1      	bgt.n	8013f5e <__exponent+0x22>
 8013f7a:	3130      	adds	r1, #48	; 0x30
 8013f7c:	f1ae 0502 	sub.w	r5, lr, #2
 8013f80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013f84:	1c44      	adds	r4, r0, #1
 8013f86:	4629      	mov	r1, r5
 8013f88:	4561      	cmp	r1, ip
 8013f8a:	d30a      	bcc.n	8013fa2 <__exponent+0x66>
 8013f8c:	f10d 0209 	add.w	r2, sp, #9
 8013f90:	eba2 020e 	sub.w	r2, r2, lr
 8013f94:	4565      	cmp	r5, ip
 8013f96:	bf88      	it	hi
 8013f98:	2200      	movhi	r2, #0
 8013f9a:	4413      	add	r3, r2
 8013f9c:	1a18      	subs	r0, r3, r0
 8013f9e:	b003      	add	sp, #12
 8013fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013faa:	e7ed      	b.n	8013f88 <__exponent+0x4c>
 8013fac:	2330      	movs	r3, #48	; 0x30
 8013fae:	3130      	adds	r1, #48	; 0x30
 8013fb0:	7083      	strb	r3, [r0, #2]
 8013fb2:	70c1      	strb	r1, [r0, #3]
 8013fb4:	1d03      	adds	r3, r0, #4
 8013fb6:	e7f1      	b.n	8013f9c <__exponent+0x60>

08013fb8 <_printf_float>:
 8013fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fbc:	ed2d 8b02 	vpush	{d8}
 8013fc0:	b08d      	sub	sp, #52	; 0x34
 8013fc2:	460c      	mov	r4, r1
 8013fc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013fc8:	4616      	mov	r6, r2
 8013fca:	461f      	mov	r7, r3
 8013fcc:	4605      	mov	r5, r0
 8013fce:	f001 fd3f 	bl	8015a50 <_localeconv_r>
 8013fd2:	f8d0 a000 	ldr.w	sl, [r0]
 8013fd6:	4650      	mov	r0, sl
 8013fd8:	f7ec f91a 	bl	8000210 <strlen>
 8013fdc:	2300      	movs	r3, #0
 8013fde:	930a      	str	r3, [sp, #40]	; 0x28
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	9305      	str	r3, [sp, #20]
 8013fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8013fe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013fec:	3307      	adds	r3, #7
 8013fee:	f023 0307 	bic.w	r3, r3, #7
 8013ff2:	f103 0208 	add.w	r2, r3, #8
 8013ff6:	f8c8 2000 	str.w	r2, [r8]
 8013ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ffe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014002:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801400a:	9307      	str	r3, [sp, #28]
 801400c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014010:	ee08 0a10 	vmov	s16, r0
 8014014:	4b9f      	ldr	r3, [pc, #636]	; (8014294 <_printf_float+0x2dc>)
 8014016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801401a:	f04f 32ff 	mov.w	r2, #4294967295
 801401e:	f7ec fda5 	bl	8000b6c <__aeabi_dcmpun>
 8014022:	bb88      	cbnz	r0, 8014088 <_printf_float+0xd0>
 8014024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014028:	4b9a      	ldr	r3, [pc, #616]	; (8014294 <_printf_float+0x2dc>)
 801402a:	f04f 32ff 	mov.w	r2, #4294967295
 801402e:	f7ec fd7f 	bl	8000b30 <__aeabi_dcmple>
 8014032:	bb48      	cbnz	r0, 8014088 <_printf_float+0xd0>
 8014034:	2200      	movs	r2, #0
 8014036:	2300      	movs	r3, #0
 8014038:	4640      	mov	r0, r8
 801403a:	4649      	mov	r1, r9
 801403c:	f7ec fd6e 	bl	8000b1c <__aeabi_dcmplt>
 8014040:	b110      	cbz	r0, 8014048 <_printf_float+0x90>
 8014042:	232d      	movs	r3, #45	; 0x2d
 8014044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014048:	4b93      	ldr	r3, [pc, #588]	; (8014298 <_printf_float+0x2e0>)
 801404a:	4894      	ldr	r0, [pc, #592]	; (801429c <_printf_float+0x2e4>)
 801404c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014050:	bf94      	ite	ls
 8014052:	4698      	movls	r8, r3
 8014054:	4680      	movhi	r8, r0
 8014056:	2303      	movs	r3, #3
 8014058:	6123      	str	r3, [r4, #16]
 801405a:	9b05      	ldr	r3, [sp, #20]
 801405c:	f023 0204 	bic.w	r2, r3, #4
 8014060:	6022      	str	r2, [r4, #0]
 8014062:	f04f 0900 	mov.w	r9, #0
 8014066:	9700      	str	r7, [sp, #0]
 8014068:	4633      	mov	r3, r6
 801406a:	aa0b      	add	r2, sp, #44	; 0x2c
 801406c:	4621      	mov	r1, r4
 801406e:	4628      	mov	r0, r5
 8014070:	f000 f9d8 	bl	8014424 <_printf_common>
 8014074:	3001      	adds	r0, #1
 8014076:	f040 8090 	bne.w	801419a <_printf_float+0x1e2>
 801407a:	f04f 30ff 	mov.w	r0, #4294967295
 801407e:	b00d      	add	sp, #52	; 0x34
 8014080:	ecbd 8b02 	vpop	{d8}
 8014084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014088:	4642      	mov	r2, r8
 801408a:	464b      	mov	r3, r9
 801408c:	4640      	mov	r0, r8
 801408e:	4649      	mov	r1, r9
 8014090:	f7ec fd6c 	bl	8000b6c <__aeabi_dcmpun>
 8014094:	b140      	cbz	r0, 80140a8 <_printf_float+0xf0>
 8014096:	464b      	mov	r3, r9
 8014098:	2b00      	cmp	r3, #0
 801409a:	bfbc      	itt	lt
 801409c:	232d      	movlt	r3, #45	; 0x2d
 801409e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80140a2:	487f      	ldr	r0, [pc, #508]	; (80142a0 <_printf_float+0x2e8>)
 80140a4:	4b7f      	ldr	r3, [pc, #508]	; (80142a4 <_printf_float+0x2ec>)
 80140a6:	e7d1      	b.n	801404c <_printf_float+0x94>
 80140a8:	6863      	ldr	r3, [r4, #4]
 80140aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80140ae:	9206      	str	r2, [sp, #24]
 80140b0:	1c5a      	adds	r2, r3, #1
 80140b2:	d13f      	bne.n	8014134 <_printf_float+0x17c>
 80140b4:	2306      	movs	r3, #6
 80140b6:	6063      	str	r3, [r4, #4]
 80140b8:	9b05      	ldr	r3, [sp, #20]
 80140ba:	6861      	ldr	r1, [r4, #4]
 80140bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80140c0:	2300      	movs	r3, #0
 80140c2:	9303      	str	r3, [sp, #12]
 80140c4:	ab0a      	add	r3, sp, #40	; 0x28
 80140c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80140ca:	ab09      	add	r3, sp, #36	; 0x24
 80140cc:	ec49 8b10 	vmov	d0, r8, r9
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	6022      	str	r2, [r4, #0]
 80140d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80140d8:	4628      	mov	r0, r5
 80140da:	f7ff fecd 	bl	8013e78 <__cvt>
 80140de:	9b06      	ldr	r3, [sp, #24]
 80140e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140e2:	2b47      	cmp	r3, #71	; 0x47
 80140e4:	4680      	mov	r8, r0
 80140e6:	d108      	bne.n	80140fa <_printf_float+0x142>
 80140e8:	1cc8      	adds	r0, r1, #3
 80140ea:	db02      	blt.n	80140f2 <_printf_float+0x13a>
 80140ec:	6863      	ldr	r3, [r4, #4]
 80140ee:	4299      	cmp	r1, r3
 80140f0:	dd41      	ble.n	8014176 <_printf_float+0x1be>
 80140f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80140f6:	fa5f fb8b 	uxtb.w	fp, fp
 80140fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80140fe:	d820      	bhi.n	8014142 <_printf_float+0x18a>
 8014100:	3901      	subs	r1, #1
 8014102:	465a      	mov	r2, fp
 8014104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014108:	9109      	str	r1, [sp, #36]	; 0x24
 801410a:	f7ff ff17 	bl	8013f3c <__exponent>
 801410e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014110:	1813      	adds	r3, r2, r0
 8014112:	2a01      	cmp	r2, #1
 8014114:	4681      	mov	r9, r0
 8014116:	6123      	str	r3, [r4, #16]
 8014118:	dc02      	bgt.n	8014120 <_printf_float+0x168>
 801411a:	6822      	ldr	r2, [r4, #0]
 801411c:	07d2      	lsls	r2, r2, #31
 801411e:	d501      	bpl.n	8014124 <_printf_float+0x16c>
 8014120:	3301      	adds	r3, #1
 8014122:	6123      	str	r3, [r4, #16]
 8014124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014128:	2b00      	cmp	r3, #0
 801412a:	d09c      	beq.n	8014066 <_printf_float+0xae>
 801412c:	232d      	movs	r3, #45	; 0x2d
 801412e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014132:	e798      	b.n	8014066 <_printf_float+0xae>
 8014134:	9a06      	ldr	r2, [sp, #24]
 8014136:	2a47      	cmp	r2, #71	; 0x47
 8014138:	d1be      	bne.n	80140b8 <_printf_float+0x100>
 801413a:	2b00      	cmp	r3, #0
 801413c:	d1bc      	bne.n	80140b8 <_printf_float+0x100>
 801413e:	2301      	movs	r3, #1
 8014140:	e7b9      	b.n	80140b6 <_printf_float+0xfe>
 8014142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014146:	d118      	bne.n	801417a <_printf_float+0x1c2>
 8014148:	2900      	cmp	r1, #0
 801414a:	6863      	ldr	r3, [r4, #4]
 801414c:	dd0b      	ble.n	8014166 <_printf_float+0x1ae>
 801414e:	6121      	str	r1, [r4, #16]
 8014150:	b913      	cbnz	r3, 8014158 <_printf_float+0x1a0>
 8014152:	6822      	ldr	r2, [r4, #0]
 8014154:	07d0      	lsls	r0, r2, #31
 8014156:	d502      	bpl.n	801415e <_printf_float+0x1a6>
 8014158:	3301      	adds	r3, #1
 801415a:	440b      	add	r3, r1
 801415c:	6123      	str	r3, [r4, #16]
 801415e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014160:	f04f 0900 	mov.w	r9, #0
 8014164:	e7de      	b.n	8014124 <_printf_float+0x16c>
 8014166:	b913      	cbnz	r3, 801416e <_printf_float+0x1b6>
 8014168:	6822      	ldr	r2, [r4, #0]
 801416a:	07d2      	lsls	r2, r2, #31
 801416c:	d501      	bpl.n	8014172 <_printf_float+0x1ba>
 801416e:	3302      	adds	r3, #2
 8014170:	e7f4      	b.n	801415c <_printf_float+0x1a4>
 8014172:	2301      	movs	r3, #1
 8014174:	e7f2      	b.n	801415c <_printf_float+0x1a4>
 8014176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801417a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801417c:	4299      	cmp	r1, r3
 801417e:	db05      	blt.n	801418c <_printf_float+0x1d4>
 8014180:	6823      	ldr	r3, [r4, #0]
 8014182:	6121      	str	r1, [r4, #16]
 8014184:	07d8      	lsls	r0, r3, #31
 8014186:	d5ea      	bpl.n	801415e <_printf_float+0x1a6>
 8014188:	1c4b      	adds	r3, r1, #1
 801418a:	e7e7      	b.n	801415c <_printf_float+0x1a4>
 801418c:	2900      	cmp	r1, #0
 801418e:	bfd4      	ite	le
 8014190:	f1c1 0202 	rsble	r2, r1, #2
 8014194:	2201      	movgt	r2, #1
 8014196:	4413      	add	r3, r2
 8014198:	e7e0      	b.n	801415c <_printf_float+0x1a4>
 801419a:	6823      	ldr	r3, [r4, #0]
 801419c:	055a      	lsls	r2, r3, #21
 801419e:	d407      	bmi.n	80141b0 <_printf_float+0x1f8>
 80141a0:	6923      	ldr	r3, [r4, #16]
 80141a2:	4642      	mov	r2, r8
 80141a4:	4631      	mov	r1, r6
 80141a6:	4628      	mov	r0, r5
 80141a8:	47b8      	blx	r7
 80141aa:	3001      	adds	r0, #1
 80141ac:	d12c      	bne.n	8014208 <_printf_float+0x250>
 80141ae:	e764      	b.n	801407a <_printf_float+0xc2>
 80141b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80141b4:	f240 80e0 	bls.w	8014378 <_printf_float+0x3c0>
 80141b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80141bc:	2200      	movs	r2, #0
 80141be:	2300      	movs	r3, #0
 80141c0:	f7ec fca2 	bl	8000b08 <__aeabi_dcmpeq>
 80141c4:	2800      	cmp	r0, #0
 80141c6:	d034      	beq.n	8014232 <_printf_float+0x27a>
 80141c8:	4a37      	ldr	r2, [pc, #220]	; (80142a8 <_printf_float+0x2f0>)
 80141ca:	2301      	movs	r3, #1
 80141cc:	4631      	mov	r1, r6
 80141ce:	4628      	mov	r0, r5
 80141d0:	47b8      	blx	r7
 80141d2:	3001      	adds	r0, #1
 80141d4:	f43f af51 	beq.w	801407a <_printf_float+0xc2>
 80141d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141dc:	429a      	cmp	r2, r3
 80141de:	db02      	blt.n	80141e6 <_printf_float+0x22e>
 80141e0:	6823      	ldr	r3, [r4, #0]
 80141e2:	07d8      	lsls	r0, r3, #31
 80141e4:	d510      	bpl.n	8014208 <_printf_float+0x250>
 80141e6:	ee18 3a10 	vmov	r3, s16
 80141ea:	4652      	mov	r2, sl
 80141ec:	4631      	mov	r1, r6
 80141ee:	4628      	mov	r0, r5
 80141f0:	47b8      	blx	r7
 80141f2:	3001      	adds	r0, #1
 80141f4:	f43f af41 	beq.w	801407a <_printf_float+0xc2>
 80141f8:	f04f 0800 	mov.w	r8, #0
 80141fc:	f104 091a 	add.w	r9, r4, #26
 8014200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014202:	3b01      	subs	r3, #1
 8014204:	4543      	cmp	r3, r8
 8014206:	dc09      	bgt.n	801421c <_printf_float+0x264>
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	079b      	lsls	r3, r3, #30
 801420c:	f100 8105 	bmi.w	801441a <_printf_float+0x462>
 8014210:	68e0      	ldr	r0, [r4, #12]
 8014212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014214:	4298      	cmp	r0, r3
 8014216:	bfb8      	it	lt
 8014218:	4618      	movlt	r0, r3
 801421a:	e730      	b.n	801407e <_printf_float+0xc6>
 801421c:	2301      	movs	r3, #1
 801421e:	464a      	mov	r2, r9
 8014220:	4631      	mov	r1, r6
 8014222:	4628      	mov	r0, r5
 8014224:	47b8      	blx	r7
 8014226:	3001      	adds	r0, #1
 8014228:	f43f af27 	beq.w	801407a <_printf_float+0xc2>
 801422c:	f108 0801 	add.w	r8, r8, #1
 8014230:	e7e6      	b.n	8014200 <_printf_float+0x248>
 8014232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014234:	2b00      	cmp	r3, #0
 8014236:	dc39      	bgt.n	80142ac <_printf_float+0x2f4>
 8014238:	4a1b      	ldr	r2, [pc, #108]	; (80142a8 <_printf_float+0x2f0>)
 801423a:	2301      	movs	r3, #1
 801423c:	4631      	mov	r1, r6
 801423e:	4628      	mov	r0, r5
 8014240:	47b8      	blx	r7
 8014242:	3001      	adds	r0, #1
 8014244:	f43f af19 	beq.w	801407a <_printf_float+0xc2>
 8014248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801424c:	4313      	orrs	r3, r2
 801424e:	d102      	bne.n	8014256 <_printf_float+0x29e>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	07d9      	lsls	r1, r3, #31
 8014254:	d5d8      	bpl.n	8014208 <_printf_float+0x250>
 8014256:	ee18 3a10 	vmov	r3, s16
 801425a:	4652      	mov	r2, sl
 801425c:	4631      	mov	r1, r6
 801425e:	4628      	mov	r0, r5
 8014260:	47b8      	blx	r7
 8014262:	3001      	adds	r0, #1
 8014264:	f43f af09 	beq.w	801407a <_printf_float+0xc2>
 8014268:	f04f 0900 	mov.w	r9, #0
 801426c:	f104 0a1a 	add.w	sl, r4, #26
 8014270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014272:	425b      	negs	r3, r3
 8014274:	454b      	cmp	r3, r9
 8014276:	dc01      	bgt.n	801427c <_printf_float+0x2c4>
 8014278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801427a:	e792      	b.n	80141a2 <_printf_float+0x1ea>
 801427c:	2301      	movs	r3, #1
 801427e:	4652      	mov	r2, sl
 8014280:	4631      	mov	r1, r6
 8014282:	4628      	mov	r0, r5
 8014284:	47b8      	blx	r7
 8014286:	3001      	adds	r0, #1
 8014288:	f43f aef7 	beq.w	801407a <_printf_float+0xc2>
 801428c:	f109 0901 	add.w	r9, r9, #1
 8014290:	e7ee      	b.n	8014270 <_printf_float+0x2b8>
 8014292:	bf00      	nop
 8014294:	7fefffff 	.word	0x7fefffff
 8014298:	08016c6c 	.word	0x08016c6c
 801429c:	08016c70 	.word	0x08016c70
 80142a0:	08016c78 	.word	0x08016c78
 80142a4:	08016c74 	.word	0x08016c74
 80142a8:	08016c7c 	.word	0x08016c7c
 80142ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80142b0:	429a      	cmp	r2, r3
 80142b2:	bfa8      	it	ge
 80142b4:	461a      	movge	r2, r3
 80142b6:	2a00      	cmp	r2, #0
 80142b8:	4691      	mov	r9, r2
 80142ba:	dc37      	bgt.n	801432c <_printf_float+0x374>
 80142bc:	f04f 0b00 	mov.w	fp, #0
 80142c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142c4:	f104 021a 	add.w	r2, r4, #26
 80142c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80142ca:	9305      	str	r3, [sp, #20]
 80142cc:	eba3 0309 	sub.w	r3, r3, r9
 80142d0:	455b      	cmp	r3, fp
 80142d2:	dc33      	bgt.n	801433c <_printf_float+0x384>
 80142d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142d8:	429a      	cmp	r2, r3
 80142da:	db3b      	blt.n	8014354 <_printf_float+0x39c>
 80142dc:	6823      	ldr	r3, [r4, #0]
 80142de:	07da      	lsls	r2, r3, #31
 80142e0:	d438      	bmi.n	8014354 <_printf_float+0x39c>
 80142e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142e4:	9a05      	ldr	r2, [sp, #20]
 80142e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80142e8:	1a9a      	subs	r2, r3, r2
 80142ea:	eba3 0901 	sub.w	r9, r3, r1
 80142ee:	4591      	cmp	r9, r2
 80142f0:	bfa8      	it	ge
 80142f2:	4691      	movge	r9, r2
 80142f4:	f1b9 0f00 	cmp.w	r9, #0
 80142f8:	dc35      	bgt.n	8014366 <_printf_float+0x3ae>
 80142fa:	f04f 0800 	mov.w	r8, #0
 80142fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014302:	f104 0a1a 	add.w	sl, r4, #26
 8014306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801430a:	1a9b      	subs	r3, r3, r2
 801430c:	eba3 0309 	sub.w	r3, r3, r9
 8014310:	4543      	cmp	r3, r8
 8014312:	f77f af79 	ble.w	8014208 <_printf_float+0x250>
 8014316:	2301      	movs	r3, #1
 8014318:	4652      	mov	r2, sl
 801431a:	4631      	mov	r1, r6
 801431c:	4628      	mov	r0, r5
 801431e:	47b8      	blx	r7
 8014320:	3001      	adds	r0, #1
 8014322:	f43f aeaa 	beq.w	801407a <_printf_float+0xc2>
 8014326:	f108 0801 	add.w	r8, r8, #1
 801432a:	e7ec      	b.n	8014306 <_printf_float+0x34e>
 801432c:	4613      	mov	r3, r2
 801432e:	4631      	mov	r1, r6
 8014330:	4642      	mov	r2, r8
 8014332:	4628      	mov	r0, r5
 8014334:	47b8      	blx	r7
 8014336:	3001      	adds	r0, #1
 8014338:	d1c0      	bne.n	80142bc <_printf_float+0x304>
 801433a:	e69e      	b.n	801407a <_printf_float+0xc2>
 801433c:	2301      	movs	r3, #1
 801433e:	4631      	mov	r1, r6
 8014340:	4628      	mov	r0, r5
 8014342:	9205      	str	r2, [sp, #20]
 8014344:	47b8      	blx	r7
 8014346:	3001      	adds	r0, #1
 8014348:	f43f ae97 	beq.w	801407a <_printf_float+0xc2>
 801434c:	9a05      	ldr	r2, [sp, #20]
 801434e:	f10b 0b01 	add.w	fp, fp, #1
 8014352:	e7b9      	b.n	80142c8 <_printf_float+0x310>
 8014354:	ee18 3a10 	vmov	r3, s16
 8014358:	4652      	mov	r2, sl
 801435a:	4631      	mov	r1, r6
 801435c:	4628      	mov	r0, r5
 801435e:	47b8      	blx	r7
 8014360:	3001      	adds	r0, #1
 8014362:	d1be      	bne.n	80142e2 <_printf_float+0x32a>
 8014364:	e689      	b.n	801407a <_printf_float+0xc2>
 8014366:	9a05      	ldr	r2, [sp, #20]
 8014368:	464b      	mov	r3, r9
 801436a:	4442      	add	r2, r8
 801436c:	4631      	mov	r1, r6
 801436e:	4628      	mov	r0, r5
 8014370:	47b8      	blx	r7
 8014372:	3001      	adds	r0, #1
 8014374:	d1c1      	bne.n	80142fa <_printf_float+0x342>
 8014376:	e680      	b.n	801407a <_printf_float+0xc2>
 8014378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801437a:	2a01      	cmp	r2, #1
 801437c:	dc01      	bgt.n	8014382 <_printf_float+0x3ca>
 801437e:	07db      	lsls	r3, r3, #31
 8014380:	d538      	bpl.n	80143f4 <_printf_float+0x43c>
 8014382:	2301      	movs	r3, #1
 8014384:	4642      	mov	r2, r8
 8014386:	4631      	mov	r1, r6
 8014388:	4628      	mov	r0, r5
 801438a:	47b8      	blx	r7
 801438c:	3001      	adds	r0, #1
 801438e:	f43f ae74 	beq.w	801407a <_printf_float+0xc2>
 8014392:	ee18 3a10 	vmov	r3, s16
 8014396:	4652      	mov	r2, sl
 8014398:	4631      	mov	r1, r6
 801439a:	4628      	mov	r0, r5
 801439c:	47b8      	blx	r7
 801439e:	3001      	adds	r0, #1
 80143a0:	f43f ae6b 	beq.w	801407a <_printf_float+0xc2>
 80143a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143a8:	2200      	movs	r2, #0
 80143aa:	2300      	movs	r3, #0
 80143ac:	f7ec fbac 	bl	8000b08 <__aeabi_dcmpeq>
 80143b0:	b9d8      	cbnz	r0, 80143ea <_printf_float+0x432>
 80143b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143b4:	f108 0201 	add.w	r2, r8, #1
 80143b8:	3b01      	subs	r3, #1
 80143ba:	4631      	mov	r1, r6
 80143bc:	4628      	mov	r0, r5
 80143be:	47b8      	blx	r7
 80143c0:	3001      	adds	r0, #1
 80143c2:	d10e      	bne.n	80143e2 <_printf_float+0x42a>
 80143c4:	e659      	b.n	801407a <_printf_float+0xc2>
 80143c6:	2301      	movs	r3, #1
 80143c8:	4652      	mov	r2, sl
 80143ca:	4631      	mov	r1, r6
 80143cc:	4628      	mov	r0, r5
 80143ce:	47b8      	blx	r7
 80143d0:	3001      	adds	r0, #1
 80143d2:	f43f ae52 	beq.w	801407a <_printf_float+0xc2>
 80143d6:	f108 0801 	add.w	r8, r8, #1
 80143da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143dc:	3b01      	subs	r3, #1
 80143de:	4543      	cmp	r3, r8
 80143e0:	dcf1      	bgt.n	80143c6 <_printf_float+0x40e>
 80143e2:	464b      	mov	r3, r9
 80143e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80143e8:	e6dc      	b.n	80141a4 <_printf_float+0x1ec>
 80143ea:	f04f 0800 	mov.w	r8, #0
 80143ee:	f104 0a1a 	add.w	sl, r4, #26
 80143f2:	e7f2      	b.n	80143da <_printf_float+0x422>
 80143f4:	2301      	movs	r3, #1
 80143f6:	4642      	mov	r2, r8
 80143f8:	e7df      	b.n	80143ba <_printf_float+0x402>
 80143fa:	2301      	movs	r3, #1
 80143fc:	464a      	mov	r2, r9
 80143fe:	4631      	mov	r1, r6
 8014400:	4628      	mov	r0, r5
 8014402:	47b8      	blx	r7
 8014404:	3001      	adds	r0, #1
 8014406:	f43f ae38 	beq.w	801407a <_printf_float+0xc2>
 801440a:	f108 0801 	add.w	r8, r8, #1
 801440e:	68e3      	ldr	r3, [r4, #12]
 8014410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014412:	1a5b      	subs	r3, r3, r1
 8014414:	4543      	cmp	r3, r8
 8014416:	dcf0      	bgt.n	80143fa <_printf_float+0x442>
 8014418:	e6fa      	b.n	8014210 <_printf_float+0x258>
 801441a:	f04f 0800 	mov.w	r8, #0
 801441e:	f104 0919 	add.w	r9, r4, #25
 8014422:	e7f4      	b.n	801440e <_printf_float+0x456>

08014424 <_printf_common>:
 8014424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014428:	4616      	mov	r6, r2
 801442a:	4699      	mov	r9, r3
 801442c:	688a      	ldr	r2, [r1, #8]
 801442e:	690b      	ldr	r3, [r1, #16]
 8014430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014434:	4293      	cmp	r3, r2
 8014436:	bfb8      	it	lt
 8014438:	4613      	movlt	r3, r2
 801443a:	6033      	str	r3, [r6, #0]
 801443c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014440:	4607      	mov	r7, r0
 8014442:	460c      	mov	r4, r1
 8014444:	b10a      	cbz	r2, 801444a <_printf_common+0x26>
 8014446:	3301      	adds	r3, #1
 8014448:	6033      	str	r3, [r6, #0]
 801444a:	6823      	ldr	r3, [r4, #0]
 801444c:	0699      	lsls	r1, r3, #26
 801444e:	bf42      	ittt	mi
 8014450:	6833      	ldrmi	r3, [r6, #0]
 8014452:	3302      	addmi	r3, #2
 8014454:	6033      	strmi	r3, [r6, #0]
 8014456:	6825      	ldr	r5, [r4, #0]
 8014458:	f015 0506 	ands.w	r5, r5, #6
 801445c:	d106      	bne.n	801446c <_printf_common+0x48>
 801445e:	f104 0a19 	add.w	sl, r4, #25
 8014462:	68e3      	ldr	r3, [r4, #12]
 8014464:	6832      	ldr	r2, [r6, #0]
 8014466:	1a9b      	subs	r3, r3, r2
 8014468:	42ab      	cmp	r3, r5
 801446a:	dc26      	bgt.n	80144ba <_printf_common+0x96>
 801446c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014470:	1e13      	subs	r3, r2, #0
 8014472:	6822      	ldr	r2, [r4, #0]
 8014474:	bf18      	it	ne
 8014476:	2301      	movne	r3, #1
 8014478:	0692      	lsls	r2, r2, #26
 801447a:	d42b      	bmi.n	80144d4 <_printf_common+0xb0>
 801447c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014480:	4649      	mov	r1, r9
 8014482:	4638      	mov	r0, r7
 8014484:	47c0      	blx	r8
 8014486:	3001      	adds	r0, #1
 8014488:	d01e      	beq.n	80144c8 <_printf_common+0xa4>
 801448a:	6823      	ldr	r3, [r4, #0]
 801448c:	68e5      	ldr	r5, [r4, #12]
 801448e:	6832      	ldr	r2, [r6, #0]
 8014490:	f003 0306 	and.w	r3, r3, #6
 8014494:	2b04      	cmp	r3, #4
 8014496:	bf08      	it	eq
 8014498:	1aad      	subeq	r5, r5, r2
 801449a:	68a3      	ldr	r3, [r4, #8]
 801449c:	6922      	ldr	r2, [r4, #16]
 801449e:	bf0c      	ite	eq
 80144a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144a4:	2500      	movne	r5, #0
 80144a6:	4293      	cmp	r3, r2
 80144a8:	bfc4      	itt	gt
 80144aa:	1a9b      	subgt	r3, r3, r2
 80144ac:	18ed      	addgt	r5, r5, r3
 80144ae:	2600      	movs	r6, #0
 80144b0:	341a      	adds	r4, #26
 80144b2:	42b5      	cmp	r5, r6
 80144b4:	d11a      	bne.n	80144ec <_printf_common+0xc8>
 80144b6:	2000      	movs	r0, #0
 80144b8:	e008      	b.n	80144cc <_printf_common+0xa8>
 80144ba:	2301      	movs	r3, #1
 80144bc:	4652      	mov	r2, sl
 80144be:	4649      	mov	r1, r9
 80144c0:	4638      	mov	r0, r7
 80144c2:	47c0      	blx	r8
 80144c4:	3001      	adds	r0, #1
 80144c6:	d103      	bne.n	80144d0 <_printf_common+0xac>
 80144c8:	f04f 30ff 	mov.w	r0, #4294967295
 80144cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d0:	3501      	adds	r5, #1
 80144d2:	e7c6      	b.n	8014462 <_printf_common+0x3e>
 80144d4:	18e1      	adds	r1, r4, r3
 80144d6:	1c5a      	adds	r2, r3, #1
 80144d8:	2030      	movs	r0, #48	; 0x30
 80144da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80144de:	4422      	add	r2, r4
 80144e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80144e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80144e8:	3302      	adds	r3, #2
 80144ea:	e7c7      	b.n	801447c <_printf_common+0x58>
 80144ec:	2301      	movs	r3, #1
 80144ee:	4622      	mov	r2, r4
 80144f0:	4649      	mov	r1, r9
 80144f2:	4638      	mov	r0, r7
 80144f4:	47c0      	blx	r8
 80144f6:	3001      	adds	r0, #1
 80144f8:	d0e6      	beq.n	80144c8 <_printf_common+0xa4>
 80144fa:	3601      	adds	r6, #1
 80144fc:	e7d9      	b.n	80144b2 <_printf_common+0x8e>
	...

08014500 <_printf_i>:
 8014500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014504:	7e0f      	ldrb	r7, [r1, #24]
 8014506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014508:	2f78      	cmp	r7, #120	; 0x78
 801450a:	4691      	mov	r9, r2
 801450c:	4680      	mov	r8, r0
 801450e:	460c      	mov	r4, r1
 8014510:	469a      	mov	sl, r3
 8014512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014516:	d807      	bhi.n	8014528 <_printf_i+0x28>
 8014518:	2f62      	cmp	r7, #98	; 0x62
 801451a:	d80a      	bhi.n	8014532 <_printf_i+0x32>
 801451c:	2f00      	cmp	r7, #0
 801451e:	f000 80d8 	beq.w	80146d2 <_printf_i+0x1d2>
 8014522:	2f58      	cmp	r7, #88	; 0x58
 8014524:	f000 80a3 	beq.w	801466e <_printf_i+0x16e>
 8014528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801452c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014530:	e03a      	b.n	80145a8 <_printf_i+0xa8>
 8014532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014536:	2b15      	cmp	r3, #21
 8014538:	d8f6      	bhi.n	8014528 <_printf_i+0x28>
 801453a:	a101      	add	r1, pc, #4	; (adr r1, 8014540 <_printf_i+0x40>)
 801453c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014540:	08014599 	.word	0x08014599
 8014544:	080145ad 	.word	0x080145ad
 8014548:	08014529 	.word	0x08014529
 801454c:	08014529 	.word	0x08014529
 8014550:	08014529 	.word	0x08014529
 8014554:	08014529 	.word	0x08014529
 8014558:	080145ad 	.word	0x080145ad
 801455c:	08014529 	.word	0x08014529
 8014560:	08014529 	.word	0x08014529
 8014564:	08014529 	.word	0x08014529
 8014568:	08014529 	.word	0x08014529
 801456c:	080146b9 	.word	0x080146b9
 8014570:	080145dd 	.word	0x080145dd
 8014574:	0801469b 	.word	0x0801469b
 8014578:	08014529 	.word	0x08014529
 801457c:	08014529 	.word	0x08014529
 8014580:	080146db 	.word	0x080146db
 8014584:	08014529 	.word	0x08014529
 8014588:	080145dd 	.word	0x080145dd
 801458c:	08014529 	.word	0x08014529
 8014590:	08014529 	.word	0x08014529
 8014594:	080146a3 	.word	0x080146a3
 8014598:	682b      	ldr	r3, [r5, #0]
 801459a:	1d1a      	adds	r2, r3, #4
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	602a      	str	r2, [r5, #0]
 80145a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145a8:	2301      	movs	r3, #1
 80145aa:	e0a3      	b.n	80146f4 <_printf_i+0x1f4>
 80145ac:	6820      	ldr	r0, [r4, #0]
 80145ae:	6829      	ldr	r1, [r5, #0]
 80145b0:	0606      	lsls	r6, r0, #24
 80145b2:	f101 0304 	add.w	r3, r1, #4
 80145b6:	d50a      	bpl.n	80145ce <_printf_i+0xce>
 80145b8:	680e      	ldr	r6, [r1, #0]
 80145ba:	602b      	str	r3, [r5, #0]
 80145bc:	2e00      	cmp	r6, #0
 80145be:	da03      	bge.n	80145c8 <_printf_i+0xc8>
 80145c0:	232d      	movs	r3, #45	; 0x2d
 80145c2:	4276      	negs	r6, r6
 80145c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145c8:	485e      	ldr	r0, [pc, #376]	; (8014744 <_printf_i+0x244>)
 80145ca:	230a      	movs	r3, #10
 80145cc:	e019      	b.n	8014602 <_printf_i+0x102>
 80145ce:	680e      	ldr	r6, [r1, #0]
 80145d0:	602b      	str	r3, [r5, #0]
 80145d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80145d6:	bf18      	it	ne
 80145d8:	b236      	sxthne	r6, r6
 80145da:	e7ef      	b.n	80145bc <_printf_i+0xbc>
 80145dc:	682b      	ldr	r3, [r5, #0]
 80145de:	6820      	ldr	r0, [r4, #0]
 80145e0:	1d19      	adds	r1, r3, #4
 80145e2:	6029      	str	r1, [r5, #0]
 80145e4:	0601      	lsls	r1, r0, #24
 80145e6:	d501      	bpl.n	80145ec <_printf_i+0xec>
 80145e8:	681e      	ldr	r6, [r3, #0]
 80145ea:	e002      	b.n	80145f2 <_printf_i+0xf2>
 80145ec:	0646      	lsls	r6, r0, #25
 80145ee:	d5fb      	bpl.n	80145e8 <_printf_i+0xe8>
 80145f0:	881e      	ldrh	r6, [r3, #0]
 80145f2:	4854      	ldr	r0, [pc, #336]	; (8014744 <_printf_i+0x244>)
 80145f4:	2f6f      	cmp	r7, #111	; 0x6f
 80145f6:	bf0c      	ite	eq
 80145f8:	2308      	moveq	r3, #8
 80145fa:	230a      	movne	r3, #10
 80145fc:	2100      	movs	r1, #0
 80145fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014602:	6865      	ldr	r5, [r4, #4]
 8014604:	60a5      	str	r5, [r4, #8]
 8014606:	2d00      	cmp	r5, #0
 8014608:	bfa2      	ittt	ge
 801460a:	6821      	ldrge	r1, [r4, #0]
 801460c:	f021 0104 	bicge.w	r1, r1, #4
 8014610:	6021      	strge	r1, [r4, #0]
 8014612:	b90e      	cbnz	r6, 8014618 <_printf_i+0x118>
 8014614:	2d00      	cmp	r5, #0
 8014616:	d04d      	beq.n	80146b4 <_printf_i+0x1b4>
 8014618:	4615      	mov	r5, r2
 801461a:	fbb6 f1f3 	udiv	r1, r6, r3
 801461e:	fb03 6711 	mls	r7, r3, r1, r6
 8014622:	5dc7      	ldrb	r7, [r0, r7]
 8014624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014628:	4637      	mov	r7, r6
 801462a:	42bb      	cmp	r3, r7
 801462c:	460e      	mov	r6, r1
 801462e:	d9f4      	bls.n	801461a <_printf_i+0x11a>
 8014630:	2b08      	cmp	r3, #8
 8014632:	d10b      	bne.n	801464c <_printf_i+0x14c>
 8014634:	6823      	ldr	r3, [r4, #0]
 8014636:	07de      	lsls	r6, r3, #31
 8014638:	d508      	bpl.n	801464c <_printf_i+0x14c>
 801463a:	6923      	ldr	r3, [r4, #16]
 801463c:	6861      	ldr	r1, [r4, #4]
 801463e:	4299      	cmp	r1, r3
 8014640:	bfde      	ittt	le
 8014642:	2330      	movle	r3, #48	; 0x30
 8014644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014648:	f105 35ff 	addle.w	r5, r5, #4294967295
 801464c:	1b52      	subs	r2, r2, r5
 801464e:	6122      	str	r2, [r4, #16]
 8014650:	f8cd a000 	str.w	sl, [sp]
 8014654:	464b      	mov	r3, r9
 8014656:	aa03      	add	r2, sp, #12
 8014658:	4621      	mov	r1, r4
 801465a:	4640      	mov	r0, r8
 801465c:	f7ff fee2 	bl	8014424 <_printf_common>
 8014660:	3001      	adds	r0, #1
 8014662:	d14c      	bne.n	80146fe <_printf_i+0x1fe>
 8014664:	f04f 30ff 	mov.w	r0, #4294967295
 8014668:	b004      	add	sp, #16
 801466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801466e:	4835      	ldr	r0, [pc, #212]	; (8014744 <_printf_i+0x244>)
 8014670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014674:	6829      	ldr	r1, [r5, #0]
 8014676:	6823      	ldr	r3, [r4, #0]
 8014678:	f851 6b04 	ldr.w	r6, [r1], #4
 801467c:	6029      	str	r1, [r5, #0]
 801467e:	061d      	lsls	r5, r3, #24
 8014680:	d514      	bpl.n	80146ac <_printf_i+0x1ac>
 8014682:	07df      	lsls	r7, r3, #31
 8014684:	bf44      	itt	mi
 8014686:	f043 0320 	orrmi.w	r3, r3, #32
 801468a:	6023      	strmi	r3, [r4, #0]
 801468c:	b91e      	cbnz	r6, 8014696 <_printf_i+0x196>
 801468e:	6823      	ldr	r3, [r4, #0]
 8014690:	f023 0320 	bic.w	r3, r3, #32
 8014694:	6023      	str	r3, [r4, #0]
 8014696:	2310      	movs	r3, #16
 8014698:	e7b0      	b.n	80145fc <_printf_i+0xfc>
 801469a:	6823      	ldr	r3, [r4, #0]
 801469c:	f043 0320 	orr.w	r3, r3, #32
 80146a0:	6023      	str	r3, [r4, #0]
 80146a2:	2378      	movs	r3, #120	; 0x78
 80146a4:	4828      	ldr	r0, [pc, #160]	; (8014748 <_printf_i+0x248>)
 80146a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80146aa:	e7e3      	b.n	8014674 <_printf_i+0x174>
 80146ac:	0659      	lsls	r1, r3, #25
 80146ae:	bf48      	it	mi
 80146b0:	b2b6      	uxthmi	r6, r6
 80146b2:	e7e6      	b.n	8014682 <_printf_i+0x182>
 80146b4:	4615      	mov	r5, r2
 80146b6:	e7bb      	b.n	8014630 <_printf_i+0x130>
 80146b8:	682b      	ldr	r3, [r5, #0]
 80146ba:	6826      	ldr	r6, [r4, #0]
 80146bc:	6961      	ldr	r1, [r4, #20]
 80146be:	1d18      	adds	r0, r3, #4
 80146c0:	6028      	str	r0, [r5, #0]
 80146c2:	0635      	lsls	r5, r6, #24
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	d501      	bpl.n	80146cc <_printf_i+0x1cc>
 80146c8:	6019      	str	r1, [r3, #0]
 80146ca:	e002      	b.n	80146d2 <_printf_i+0x1d2>
 80146cc:	0670      	lsls	r0, r6, #25
 80146ce:	d5fb      	bpl.n	80146c8 <_printf_i+0x1c8>
 80146d0:	8019      	strh	r1, [r3, #0]
 80146d2:	2300      	movs	r3, #0
 80146d4:	6123      	str	r3, [r4, #16]
 80146d6:	4615      	mov	r5, r2
 80146d8:	e7ba      	b.n	8014650 <_printf_i+0x150>
 80146da:	682b      	ldr	r3, [r5, #0]
 80146dc:	1d1a      	adds	r2, r3, #4
 80146de:	602a      	str	r2, [r5, #0]
 80146e0:	681d      	ldr	r5, [r3, #0]
 80146e2:	6862      	ldr	r2, [r4, #4]
 80146e4:	2100      	movs	r1, #0
 80146e6:	4628      	mov	r0, r5
 80146e8:	f7eb fd9a 	bl	8000220 <memchr>
 80146ec:	b108      	cbz	r0, 80146f2 <_printf_i+0x1f2>
 80146ee:	1b40      	subs	r0, r0, r5
 80146f0:	6060      	str	r0, [r4, #4]
 80146f2:	6863      	ldr	r3, [r4, #4]
 80146f4:	6123      	str	r3, [r4, #16]
 80146f6:	2300      	movs	r3, #0
 80146f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146fc:	e7a8      	b.n	8014650 <_printf_i+0x150>
 80146fe:	6923      	ldr	r3, [r4, #16]
 8014700:	462a      	mov	r2, r5
 8014702:	4649      	mov	r1, r9
 8014704:	4640      	mov	r0, r8
 8014706:	47d0      	blx	sl
 8014708:	3001      	adds	r0, #1
 801470a:	d0ab      	beq.n	8014664 <_printf_i+0x164>
 801470c:	6823      	ldr	r3, [r4, #0]
 801470e:	079b      	lsls	r3, r3, #30
 8014710:	d413      	bmi.n	801473a <_printf_i+0x23a>
 8014712:	68e0      	ldr	r0, [r4, #12]
 8014714:	9b03      	ldr	r3, [sp, #12]
 8014716:	4298      	cmp	r0, r3
 8014718:	bfb8      	it	lt
 801471a:	4618      	movlt	r0, r3
 801471c:	e7a4      	b.n	8014668 <_printf_i+0x168>
 801471e:	2301      	movs	r3, #1
 8014720:	4632      	mov	r2, r6
 8014722:	4649      	mov	r1, r9
 8014724:	4640      	mov	r0, r8
 8014726:	47d0      	blx	sl
 8014728:	3001      	adds	r0, #1
 801472a:	d09b      	beq.n	8014664 <_printf_i+0x164>
 801472c:	3501      	adds	r5, #1
 801472e:	68e3      	ldr	r3, [r4, #12]
 8014730:	9903      	ldr	r1, [sp, #12]
 8014732:	1a5b      	subs	r3, r3, r1
 8014734:	42ab      	cmp	r3, r5
 8014736:	dcf2      	bgt.n	801471e <_printf_i+0x21e>
 8014738:	e7eb      	b.n	8014712 <_printf_i+0x212>
 801473a:	2500      	movs	r5, #0
 801473c:	f104 0619 	add.w	r6, r4, #25
 8014740:	e7f5      	b.n	801472e <_printf_i+0x22e>
 8014742:	bf00      	nop
 8014744:	08016c7e 	.word	0x08016c7e
 8014748:	08016c8f 	.word	0x08016c8f

0801474c <iprintf>:
 801474c:	b40f      	push	{r0, r1, r2, r3}
 801474e:	4b0a      	ldr	r3, [pc, #40]	; (8014778 <iprintf+0x2c>)
 8014750:	b513      	push	{r0, r1, r4, lr}
 8014752:	681c      	ldr	r4, [r3, #0]
 8014754:	b124      	cbz	r4, 8014760 <iprintf+0x14>
 8014756:	69a3      	ldr	r3, [r4, #24]
 8014758:	b913      	cbnz	r3, 8014760 <iprintf+0x14>
 801475a:	4620      	mov	r0, r4
 801475c:	f7ff f9cc 	bl	8013af8 <__sinit>
 8014760:	ab05      	add	r3, sp, #20
 8014762:	9a04      	ldr	r2, [sp, #16]
 8014764:	68a1      	ldr	r1, [r4, #8]
 8014766:	9301      	str	r3, [sp, #4]
 8014768:	4620      	mov	r0, r4
 801476a:	f001 fdcf 	bl	801630c <_vfiprintf_r>
 801476e:	b002      	add	sp, #8
 8014770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014774:	b004      	add	sp, #16
 8014776:	4770      	bx	lr
 8014778:	20000124 	.word	0x20000124

0801477c <_puts_r>:
 801477c:	b570      	push	{r4, r5, r6, lr}
 801477e:	460e      	mov	r6, r1
 8014780:	4605      	mov	r5, r0
 8014782:	b118      	cbz	r0, 801478c <_puts_r+0x10>
 8014784:	6983      	ldr	r3, [r0, #24]
 8014786:	b90b      	cbnz	r3, 801478c <_puts_r+0x10>
 8014788:	f7ff f9b6 	bl	8013af8 <__sinit>
 801478c:	69ab      	ldr	r3, [r5, #24]
 801478e:	68ac      	ldr	r4, [r5, #8]
 8014790:	b913      	cbnz	r3, 8014798 <_puts_r+0x1c>
 8014792:	4628      	mov	r0, r5
 8014794:	f7ff f9b0 	bl	8013af8 <__sinit>
 8014798:	4b2c      	ldr	r3, [pc, #176]	; (801484c <_puts_r+0xd0>)
 801479a:	429c      	cmp	r4, r3
 801479c:	d120      	bne.n	80147e0 <_puts_r+0x64>
 801479e:	686c      	ldr	r4, [r5, #4]
 80147a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147a2:	07db      	lsls	r3, r3, #31
 80147a4:	d405      	bmi.n	80147b2 <_puts_r+0x36>
 80147a6:	89a3      	ldrh	r3, [r4, #12]
 80147a8:	0598      	lsls	r0, r3, #22
 80147aa:	d402      	bmi.n	80147b2 <_puts_r+0x36>
 80147ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147ae:	f7ee fff7 	bl	80037a0 <__retarget_lock_acquire_recursive>
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	0719      	lsls	r1, r3, #28
 80147b6:	d51d      	bpl.n	80147f4 <_puts_r+0x78>
 80147b8:	6923      	ldr	r3, [r4, #16]
 80147ba:	b1db      	cbz	r3, 80147f4 <_puts_r+0x78>
 80147bc:	3e01      	subs	r6, #1
 80147be:	68a3      	ldr	r3, [r4, #8]
 80147c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80147c4:	3b01      	subs	r3, #1
 80147c6:	60a3      	str	r3, [r4, #8]
 80147c8:	bb39      	cbnz	r1, 801481a <_puts_r+0x9e>
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	da38      	bge.n	8014840 <_puts_r+0xc4>
 80147ce:	4622      	mov	r2, r4
 80147d0:	210a      	movs	r1, #10
 80147d2:	4628      	mov	r0, r5
 80147d4:	f000 f91e 	bl	8014a14 <__swbuf_r>
 80147d8:	3001      	adds	r0, #1
 80147da:	d011      	beq.n	8014800 <_puts_r+0x84>
 80147dc:	250a      	movs	r5, #10
 80147de:	e011      	b.n	8014804 <_puts_r+0x88>
 80147e0:	4b1b      	ldr	r3, [pc, #108]	; (8014850 <_puts_r+0xd4>)
 80147e2:	429c      	cmp	r4, r3
 80147e4:	d101      	bne.n	80147ea <_puts_r+0x6e>
 80147e6:	68ac      	ldr	r4, [r5, #8]
 80147e8:	e7da      	b.n	80147a0 <_puts_r+0x24>
 80147ea:	4b1a      	ldr	r3, [pc, #104]	; (8014854 <_puts_r+0xd8>)
 80147ec:	429c      	cmp	r4, r3
 80147ee:	bf08      	it	eq
 80147f0:	68ec      	ldreq	r4, [r5, #12]
 80147f2:	e7d5      	b.n	80147a0 <_puts_r+0x24>
 80147f4:	4621      	mov	r1, r4
 80147f6:	4628      	mov	r0, r5
 80147f8:	f000 f970 	bl	8014adc <__swsetup_r>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d0dd      	beq.n	80147bc <_puts_r+0x40>
 8014800:	f04f 35ff 	mov.w	r5, #4294967295
 8014804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014806:	07da      	lsls	r2, r3, #31
 8014808:	d405      	bmi.n	8014816 <_puts_r+0x9a>
 801480a:	89a3      	ldrh	r3, [r4, #12]
 801480c:	059b      	lsls	r3, r3, #22
 801480e:	d402      	bmi.n	8014816 <_puts_r+0x9a>
 8014810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014812:	f7ee ffd9 	bl	80037c8 <__retarget_lock_release_recursive>
 8014816:	4628      	mov	r0, r5
 8014818:	bd70      	pop	{r4, r5, r6, pc}
 801481a:	2b00      	cmp	r3, #0
 801481c:	da04      	bge.n	8014828 <_puts_r+0xac>
 801481e:	69a2      	ldr	r2, [r4, #24]
 8014820:	429a      	cmp	r2, r3
 8014822:	dc06      	bgt.n	8014832 <_puts_r+0xb6>
 8014824:	290a      	cmp	r1, #10
 8014826:	d004      	beq.n	8014832 <_puts_r+0xb6>
 8014828:	6823      	ldr	r3, [r4, #0]
 801482a:	1c5a      	adds	r2, r3, #1
 801482c:	6022      	str	r2, [r4, #0]
 801482e:	7019      	strb	r1, [r3, #0]
 8014830:	e7c5      	b.n	80147be <_puts_r+0x42>
 8014832:	4622      	mov	r2, r4
 8014834:	4628      	mov	r0, r5
 8014836:	f000 f8ed 	bl	8014a14 <__swbuf_r>
 801483a:	3001      	adds	r0, #1
 801483c:	d1bf      	bne.n	80147be <_puts_r+0x42>
 801483e:	e7df      	b.n	8014800 <_puts_r+0x84>
 8014840:	6823      	ldr	r3, [r4, #0]
 8014842:	250a      	movs	r5, #10
 8014844:	1c5a      	adds	r2, r3, #1
 8014846:	6022      	str	r2, [r4, #0]
 8014848:	701d      	strb	r5, [r3, #0]
 801484a:	e7db      	b.n	8014804 <_puts_r+0x88>
 801484c:	08016c28 	.word	0x08016c28
 8014850:	08016c48 	.word	0x08016c48
 8014854:	08016c08 	.word	0x08016c08

08014858 <puts>:
 8014858:	4b02      	ldr	r3, [pc, #8]	; (8014864 <puts+0xc>)
 801485a:	4601      	mov	r1, r0
 801485c:	6818      	ldr	r0, [r3, #0]
 801485e:	f7ff bf8d 	b.w	801477c <_puts_r>
 8014862:	bf00      	nop
 8014864:	20000124 	.word	0x20000124

08014868 <cleanup_glue>:
 8014868:	b538      	push	{r3, r4, r5, lr}
 801486a:	460c      	mov	r4, r1
 801486c:	6809      	ldr	r1, [r1, #0]
 801486e:	4605      	mov	r5, r0
 8014870:	b109      	cbz	r1, 8014876 <cleanup_glue+0xe>
 8014872:	f7ff fff9 	bl	8014868 <cleanup_glue>
 8014876:	4621      	mov	r1, r4
 8014878:	4628      	mov	r0, r5
 801487a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801487e:	f7ff ba1b 	b.w	8013cb8 <_free_r>
	...

08014884 <_reclaim_reent>:
 8014884:	4b2c      	ldr	r3, [pc, #176]	; (8014938 <_reclaim_reent+0xb4>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	4283      	cmp	r3, r0
 801488a:	b570      	push	{r4, r5, r6, lr}
 801488c:	4604      	mov	r4, r0
 801488e:	d051      	beq.n	8014934 <_reclaim_reent+0xb0>
 8014890:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014892:	b143      	cbz	r3, 80148a6 <_reclaim_reent+0x22>
 8014894:	68db      	ldr	r3, [r3, #12]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d14a      	bne.n	8014930 <_reclaim_reent+0xac>
 801489a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801489c:	6819      	ldr	r1, [r3, #0]
 801489e:	b111      	cbz	r1, 80148a6 <_reclaim_reent+0x22>
 80148a0:	4620      	mov	r0, r4
 80148a2:	f7ff fa09 	bl	8013cb8 <_free_r>
 80148a6:	6961      	ldr	r1, [r4, #20]
 80148a8:	b111      	cbz	r1, 80148b0 <_reclaim_reent+0x2c>
 80148aa:	4620      	mov	r0, r4
 80148ac:	f7ff fa04 	bl	8013cb8 <_free_r>
 80148b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80148b2:	b111      	cbz	r1, 80148ba <_reclaim_reent+0x36>
 80148b4:	4620      	mov	r0, r4
 80148b6:	f7ff f9ff 	bl	8013cb8 <_free_r>
 80148ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80148bc:	b111      	cbz	r1, 80148c4 <_reclaim_reent+0x40>
 80148be:	4620      	mov	r0, r4
 80148c0:	f7ff f9fa 	bl	8013cb8 <_free_r>
 80148c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80148c6:	b111      	cbz	r1, 80148ce <_reclaim_reent+0x4a>
 80148c8:	4620      	mov	r0, r4
 80148ca:	f7ff f9f5 	bl	8013cb8 <_free_r>
 80148ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80148d0:	b111      	cbz	r1, 80148d8 <_reclaim_reent+0x54>
 80148d2:	4620      	mov	r0, r4
 80148d4:	f7ff f9f0 	bl	8013cb8 <_free_r>
 80148d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80148da:	b111      	cbz	r1, 80148e2 <_reclaim_reent+0x5e>
 80148dc:	4620      	mov	r0, r4
 80148de:	f7ff f9eb 	bl	8013cb8 <_free_r>
 80148e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80148e4:	b111      	cbz	r1, 80148ec <_reclaim_reent+0x68>
 80148e6:	4620      	mov	r0, r4
 80148e8:	f7ff f9e6 	bl	8013cb8 <_free_r>
 80148ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148ee:	b111      	cbz	r1, 80148f6 <_reclaim_reent+0x72>
 80148f0:	4620      	mov	r0, r4
 80148f2:	f7ff f9e1 	bl	8013cb8 <_free_r>
 80148f6:	69a3      	ldr	r3, [r4, #24]
 80148f8:	b1e3      	cbz	r3, 8014934 <_reclaim_reent+0xb0>
 80148fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80148fc:	4620      	mov	r0, r4
 80148fe:	4798      	blx	r3
 8014900:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014902:	b1b9      	cbz	r1, 8014934 <_reclaim_reent+0xb0>
 8014904:	4620      	mov	r0, r4
 8014906:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801490a:	f7ff bfad 	b.w	8014868 <cleanup_glue>
 801490e:	5949      	ldr	r1, [r1, r5]
 8014910:	b941      	cbnz	r1, 8014924 <_reclaim_reent+0xa0>
 8014912:	3504      	adds	r5, #4
 8014914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014916:	2d80      	cmp	r5, #128	; 0x80
 8014918:	68d9      	ldr	r1, [r3, #12]
 801491a:	d1f8      	bne.n	801490e <_reclaim_reent+0x8a>
 801491c:	4620      	mov	r0, r4
 801491e:	f7ff f9cb 	bl	8013cb8 <_free_r>
 8014922:	e7ba      	b.n	801489a <_reclaim_reent+0x16>
 8014924:	680e      	ldr	r6, [r1, #0]
 8014926:	4620      	mov	r0, r4
 8014928:	f7ff f9c6 	bl	8013cb8 <_free_r>
 801492c:	4631      	mov	r1, r6
 801492e:	e7ef      	b.n	8014910 <_reclaim_reent+0x8c>
 8014930:	2500      	movs	r5, #0
 8014932:	e7ef      	b.n	8014914 <_reclaim_reent+0x90>
 8014934:	bd70      	pop	{r4, r5, r6, pc}
 8014936:	bf00      	nop
 8014938:	20000124 	.word	0x20000124

0801493c <_sbrk_r>:
 801493c:	b538      	push	{r3, r4, r5, lr}
 801493e:	4d06      	ldr	r5, [pc, #24]	; (8014958 <_sbrk_r+0x1c>)
 8014940:	2300      	movs	r3, #0
 8014942:	4604      	mov	r4, r0
 8014944:	4608      	mov	r0, r1
 8014946:	602b      	str	r3, [r5, #0]
 8014948:	f7ee fac4 	bl	8002ed4 <_sbrk>
 801494c:	1c43      	adds	r3, r0, #1
 801494e:	d102      	bne.n	8014956 <_sbrk_r+0x1a>
 8014950:	682b      	ldr	r3, [r5, #0]
 8014952:	b103      	cbz	r3, 8014956 <_sbrk_r+0x1a>
 8014954:	6023      	str	r3, [r4, #0]
 8014956:	bd38      	pop	{r3, r4, r5, pc}
 8014958:	20006f14 	.word	0x20006f14

0801495c <__sread>:
 801495c:	b510      	push	{r4, lr}
 801495e:	460c      	mov	r4, r1
 8014960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014964:	f001 fe02 	bl	801656c <_read_r>
 8014968:	2800      	cmp	r0, #0
 801496a:	bfab      	itete	ge
 801496c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801496e:	89a3      	ldrhlt	r3, [r4, #12]
 8014970:	181b      	addge	r3, r3, r0
 8014972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014976:	bfac      	ite	ge
 8014978:	6563      	strge	r3, [r4, #84]	; 0x54
 801497a:	81a3      	strhlt	r3, [r4, #12]
 801497c:	bd10      	pop	{r4, pc}

0801497e <__swrite>:
 801497e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014982:	461f      	mov	r7, r3
 8014984:	898b      	ldrh	r3, [r1, #12]
 8014986:	05db      	lsls	r3, r3, #23
 8014988:	4605      	mov	r5, r0
 801498a:	460c      	mov	r4, r1
 801498c:	4616      	mov	r6, r2
 801498e:	d505      	bpl.n	801499c <__swrite+0x1e>
 8014990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014994:	2302      	movs	r3, #2
 8014996:	2200      	movs	r2, #0
 8014998:	f001 f85e 	bl	8015a58 <_lseek_r>
 801499c:	89a3      	ldrh	r3, [r4, #12]
 801499e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80149a6:	81a3      	strh	r3, [r4, #12]
 80149a8:	4632      	mov	r2, r6
 80149aa:	463b      	mov	r3, r7
 80149ac:	4628      	mov	r0, r5
 80149ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149b2:	f000 b881 	b.w	8014ab8 <_write_r>

080149b6 <__sseek>:
 80149b6:	b510      	push	{r4, lr}
 80149b8:	460c      	mov	r4, r1
 80149ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149be:	f001 f84b 	bl	8015a58 <_lseek_r>
 80149c2:	1c43      	adds	r3, r0, #1
 80149c4:	89a3      	ldrh	r3, [r4, #12]
 80149c6:	bf15      	itete	ne
 80149c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80149ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80149ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80149d2:	81a3      	strheq	r3, [r4, #12]
 80149d4:	bf18      	it	ne
 80149d6:	81a3      	strhne	r3, [r4, #12]
 80149d8:	bd10      	pop	{r4, pc}

080149da <__sclose>:
 80149da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149de:	f000 b8eb 	b.w	8014bb8 <_close_r>
	...

080149e4 <viprintf>:
 80149e4:	b513      	push	{r0, r1, r4, lr}
 80149e6:	460b      	mov	r3, r1
 80149e8:	4909      	ldr	r1, [pc, #36]	; (8014a10 <viprintf+0x2c>)
 80149ea:	680c      	ldr	r4, [r1, #0]
 80149ec:	4602      	mov	r2, r0
 80149ee:	b144      	cbz	r4, 8014a02 <viprintf+0x1e>
 80149f0:	69a1      	ldr	r1, [r4, #24]
 80149f2:	b931      	cbnz	r1, 8014a02 <viprintf+0x1e>
 80149f4:	e9cd 0300 	strd	r0, r3, [sp]
 80149f8:	4620      	mov	r0, r4
 80149fa:	f7ff f87d 	bl	8013af8 <__sinit>
 80149fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a02:	68a1      	ldr	r1, [r4, #8]
 8014a04:	4620      	mov	r0, r4
 8014a06:	b002      	add	sp, #8
 8014a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a0c:	f001 bc7e 	b.w	801630c <_vfiprintf_r>
 8014a10:	20000124 	.word	0x20000124

08014a14 <__swbuf_r>:
 8014a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a16:	460e      	mov	r6, r1
 8014a18:	4614      	mov	r4, r2
 8014a1a:	4605      	mov	r5, r0
 8014a1c:	b118      	cbz	r0, 8014a26 <__swbuf_r+0x12>
 8014a1e:	6983      	ldr	r3, [r0, #24]
 8014a20:	b90b      	cbnz	r3, 8014a26 <__swbuf_r+0x12>
 8014a22:	f7ff f869 	bl	8013af8 <__sinit>
 8014a26:	4b21      	ldr	r3, [pc, #132]	; (8014aac <__swbuf_r+0x98>)
 8014a28:	429c      	cmp	r4, r3
 8014a2a:	d12b      	bne.n	8014a84 <__swbuf_r+0x70>
 8014a2c:	686c      	ldr	r4, [r5, #4]
 8014a2e:	69a3      	ldr	r3, [r4, #24]
 8014a30:	60a3      	str	r3, [r4, #8]
 8014a32:	89a3      	ldrh	r3, [r4, #12]
 8014a34:	071a      	lsls	r2, r3, #28
 8014a36:	d52f      	bpl.n	8014a98 <__swbuf_r+0x84>
 8014a38:	6923      	ldr	r3, [r4, #16]
 8014a3a:	b36b      	cbz	r3, 8014a98 <__swbuf_r+0x84>
 8014a3c:	6923      	ldr	r3, [r4, #16]
 8014a3e:	6820      	ldr	r0, [r4, #0]
 8014a40:	1ac0      	subs	r0, r0, r3
 8014a42:	6963      	ldr	r3, [r4, #20]
 8014a44:	b2f6      	uxtb	r6, r6
 8014a46:	4283      	cmp	r3, r0
 8014a48:	4637      	mov	r7, r6
 8014a4a:	dc04      	bgt.n	8014a56 <__swbuf_r+0x42>
 8014a4c:	4621      	mov	r1, r4
 8014a4e:	4628      	mov	r0, r5
 8014a50:	f000 ffc2 	bl	80159d8 <_fflush_r>
 8014a54:	bb30      	cbnz	r0, 8014aa4 <__swbuf_r+0x90>
 8014a56:	68a3      	ldr	r3, [r4, #8]
 8014a58:	3b01      	subs	r3, #1
 8014a5a:	60a3      	str	r3, [r4, #8]
 8014a5c:	6823      	ldr	r3, [r4, #0]
 8014a5e:	1c5a      	adds	r2, r3, #1
 8014a60:	6022      	str	r2, [r4, #0]
 8014a62:	701e      	strb	r6, [r3, #0]
 8014a64:	6963      	ldr	r3, [r4, #20]
 8014a66:	3001      	adds	r0, #1
 8014a68:	4283      	cmp	r3, r0
 8014a6a:	d004      	beq.n	8014a76 <__swbuf_r+0x62>
 8014a6c:	89a3      	ldrh	r3, [r4, #12]
 8014a6e:	07db      	lsls	r3, r3, #31
 8014a70:	d506      	bpl.n	8014a80 <__swbuf_r+0x6c>
 8014a72:	2e0a      	cmp	r6, #10
 8014a74:	d104      	bne.n	8014a80 <__swbuf_r+0x6c>
 8014a76:	4621      	mov	r1, r4
 8014a78:	4628      	mov	r0, r5
 8014a7a:	f000 ffad 	bl	80159d8 <_fflush_r>
 8014a7e:	b988      	cbnz	r0, 8014aa4 <__swbuf_r+0x90>
 8014a80:	4638      	mov	r0, r7
 8014a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a84:	4b0a      	ldr	r3, [pc, #40]	; (8014ab0 <__swbuf_r+0x9c>)
 8014a86:	429c      	cmp	r4, r3
 8014a88:	d101      	bne.n	8014a8e <__swbuf_r+0x7a>
 8014a8a:	68ac      	ldr	r4, [r5, #8]
 8014a8c:	e7cf      	b.n	8014a2e <__swbuf_r+0x1a>
 8014a8e:	4b09      	ldr	r3, [pc, #36]	; (8014ab4 <__swbuf_r+0xa0>)
 8014a90:	429c      	cmp	r4, r3
 8014a92:	bf08      	it	eq
 8014a94:	68ec      	ldreq	r4, [r5, #12]
 8014a96:	e7ca      	b.n	8014a2e <__swbuf_r+0x1a>
 8014a98:	4621      	mov	r1, r4
 8014a9a:	4628      	mov	r0, r5
 8014a9c:	f000 f81e 	bl	8014adc <__swsetup_r>
 8014aa0:	2800      	cmp	r0, #0
 8014aa2:	d0cb      	beq.n	8014a3c <__swbuf_r+0x28>
 8014aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8014aa8:	e7ea      	b.n	8014a80 <__swbuf_r+0x6c>
 8014aaa:	bf00      	nop
 8014aac:	08016c28 	.word	0x08016c28
 8014ab0:	08016c48 	.word	0x08016c48
 8014ab4:	08016c08 	.word	0x08016c08

08014ab8 <_write_r>:
 8014ab8:	b538      	push	{r3, r4, r5, lr}
 8014aba:	4d07      	ldr	r5, [pc, #28]	; (8014ad8 <_write_r+0x20>)
 8014abc:	4604      	mov	r4, r0
 8014abe:	4608      	mov	r0, r1
 8014ac0:	4611      	mov	r1, r2
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	602a      	str	r2, [r5, #0]
 8014ac6:	461a      	mov	r2, r3
 8014ac8:	f7ed fc43 	bl	8002352 <_write>
 8014acc:	1c43      	adds	r3, r0, #1
 8014ace:	d102      	bne.n	8014ad6 <_write_r+0x1e>
 8014ad0:	682b      	ldr	r3, [r5, #0]
 8014ad2:	b103      	cbz	r3, 8014ad6 <_write_r+0x1e>
 8014ad4:	6023      	str	r3, [r4, #0]
 8014ad6:	bd38      	pop	{r3, r4, r5, pc}
 8014ad8:	20006f14 	.word	0x20006f14

08014adc <__swsetup_r>:
 8014adc:	4b32      	ldr	r3, [pc, #200]	; (8014ba8 <__swsetup_r+0xcc>)
 8014ade:	b570      	push	{r4, r5, r6, lr}
 8014ae0:	681d      	ldr	r5, [r3, #0]
 8014ae2:	4606      	mov	r6, r0
 8014ae4:	460c      	mov	r4, r1
 8014ae6:	b125      	cbz	r5, 8014af2 <__swsetup_r+0x16>
 8014ae8:	69ab      	ldr	r3, [r5, #24]
 8014aea:	b913      	cbnz	r3, 8014af2 <__swsetup_r+0x16>
 8014aec:	4628      	mov	r0, r5
 8014aee:	f7ff f803 	bl	8013af8 <__sinit>
 8014af2:	4b2e      	ldr	r3, [pc, #184]	; (8014bac <__swsetup_r+0xd0>)
 8014af4:	429c      	cmp	r4, r3
 8014af6:	d10f      	bne.n	8014b18 <__swsetup_r+0x3c>
 8014af8:	686c      	ldr	r4, [r5, #4]
 8014afa:	89a3      	ldrh	r3, [r4, #12]
 8014afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b00:	0719      	lsls	r1, r3, #28
 8014b02:	d42c      	bmi.n	8014b5e <__swsetup_r+0x82>
 8014b04:	06dd      	lsls	r5, r3, #27
 8014b06:	d411      	bmi.n	8014b2c <__swsetup_r+0x50>
 8014b08:	2309      	movs	r3, #9
 8014b0a:	6033      	str	r3, [r6, #0]
 8014b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014b10:	81a3      	strh	r3, [r4, #12]
 8014b12:	f04f 30ff 	mov.w	r0, #4294967295
 8014b16:	e03e      	b.n	8014b96 <__swsetup_r+0xba>
 8014b18:	4b25      	ldr	r3, [pc, #148]	; (8014bb0 <__swsetup_r+0xd4>)
 8014b1a:	429c      	cmp	r4, r3
 8014b1c:	d101      	bne.n	8014b22 <__swsetup_r+0x46>
 8014b1e:	68ac      	ldr	r4, [r5, #8]
 8014b20:	e7eb      	b.n	8014afa <__swsetup_r+0x1e>
 8014b22:	4b24      	ldr	r3, [pc, #144]	; (8014bb4 <__swsetup_r+0xd8>)
 8014b24:	429c      	cmp	r4, r3
 8014b26:	bf08      	it	eq
 8014b28:	68ec      	ldreq	r4, [r5, #12]
 8014b2a:	e7e6      	b.n	8014afa <__swsetup_r+0x1e>
 8014b2c:	0758      	lsls	r0, r3, #29
 8014b2e:	d512      	bpl.n	8014b56 <__swsetup_r+0x7a>
 8014b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b32:	b141      	cbz	r1, 8014b46 <__swsetup_r+0x6a>
 8014b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b38:	4299      	cmp	r1, r3
 8014b3a:	d002      	beq.n	8014b42 <__swsetup_r+0x66>
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	f7ff f8bb 	bl	8013cb8 <_free_r>
 8014b42:	2300      	movs	r3, #0
 8014b44:	6363      	str	r3, [r4, #52]	; 0x34
 8014b46:	89a3      	ldrh	r3, [r4, #12]
 8014b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014b4c:	81a3      	strh	r3, [r4, #12]
 8014b4e:	2300      	movs	r3, #0
 8014b50:	6063      	str	r3, [r4, #4]
 8014b52:	6923      	ldr	r3, [r4, #16]
 8014b54:	6023      	str	r3, [r4, #0]
 8014b56:	89a3      	ldrh	r3, [r4, #12]
 8014b58:	f043 0308 	orr.w	r3, r3, #8
 8014b5c:	81a3      	strh	r3, [r4, #12]
 8014b5e:	6923      	ldr	r3, [r4, #16]
 8014b60:	b94b      	cbnz	r3, 8014b76 <__swsetup_r+0x9a>
 8014b62:	89a3      	ldrh	r3, [r4, #12]
 8014b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b6c:	d003      	beq.n	8014b76 <__swsetup_r+0x9a>
 8014b6e:	4621      	mov	r1, r4
 8014b70:	4630      	mov	r0, r6
 8014b72:	f000 ffa9 	bl	8015ac8 <__smakebuf_r>
 8014b76:	89a0      	ldrh	r0, [r4, #12]
 8014b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014b7c:	f010 0301 	ands.w	r3, r0, #1
 8014b80:	d00a      	beq.n	8014b98 <__swsetup_r+0xbc>
 8014b82:	2300      	movs	r3, #0
 8014b84:	60a3      	str	r3, [r4, #8]
 8014b86:	6963      	ldr	r3, [r4, #20]
 8014b88:	425b      	negs	r3, r3
 8014b8a:	61a3      	str	r3, [r4, #24]
 8014b8c:	6923      	ldr	r3, [r4, #16]
 8014b8e:	b943      	cbnz	r3, 8014ba2 <__swsetup_r+0xc6>
 8014b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014b94:	d1ba      	bne.n	8014b0c <__swsetup_r+0x30>
 8014b96:	bd70      	pop	{r4, r5, r6, pc}
 8014b98:	0781      	lsls	r1, r0, #30
 8014b9a:	bf58      	it	pl
 8014b9c:	6963      	ldrpl	r3, [r4, #20]
 8014b9e:	60a3      	str	r3, [r4, #8]
 8014ba0:	e7f4      	b.n	8014b8c <__swsetup_r+0xb0>
 8014ba2:	2000      	movs	r0, #0
 8014ba4:	e7f7      	b.n	8014b96 <__swsetup_r+0xba>
 8014ba6:	bf00      	nop
 8014ba8:	20000124 	.word	0x20000124
 8014bac:	08016c28 	.word	0x08016c28
 8014bb0:	08016c48 	.word	0x08016c48
 8014bb4:	08016c08 	.word	0x08016c08

08014bb8 <_close_r>:
 8014bb8:	b538      	push	{r3, r4, r5, lr}
 8014bba:	4d06      	ldr	r5, [pc, #24]	; (8014bd4 <_close_r+0x1c>)
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	4608      	mov	r0, r1
 8014bc2:	602b      	str	r3, [r5, #0]
 8014bc4:	f7ee f951 	bl	8002e6a <_close>
 8014bc8:	1c43      	adds	r3, r0, #1
 8014bca:	d102      	bne.n	8014bd2 <_close_r+0x1a>
 8014bcc:	682b      	ldr	r3, [r5, #0]
 8014bce:	b103      	cbz	r3, 8014bd2 <_close_r+0x1a>
 8014bd0:	6023      	str	r3, [r4, #0]
 8014bd2:	bd38      	pop	{r3, r4, r5, pc}
 8014bd4:	20006f14 	.word	0x20006f14

08014bd8 <quorem>:
 8014bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bdc:	6903      	ldr	r3, [r0, #16]
 8014bde:	690c      	ldr	r4, [r1, #16]
 8014be0:	42a3      	cmp	r3, r4
 8014be2:	4607      	mov	r7, r0
 8014be4:	f2c0 8081 	blt.w	8014cea <quorem+0x112>
 8014be8:	3c01      	subs	r4, #1
 8014bea:	f101 0814 	add.w	r8, r1, #20
 8014bee:	f100 0514 	add.w	r5, r0, #20
 8014bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014bf6:	9301      	str	r3, [sp, #4]
 8014bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c00:	3301      	adds	r3, #1
 8014c02:	429a      	cmp	r2, r3
 8014c04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014c08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c10:	d331      	bcc.n	8014c76 <quorem+0x9e>
 8014c12:	f04f 0e00 	mov.w	lr, #0
 8014c16:	4640      	mov	r0, r8
 8014c18:	46ac      	mov	ip, r5
 8014c1a:	46f2      	mov	sl, lr
 8014c1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014c20:	b293      	uxth	r3, r2
 8014c22:	fb06 e303 	mla	r3, r6, r3, lr
 8014c26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8014c30:	f8dc a000 	ldr.w	sl, [ip]
 8014c34:	0c12      	lsrs	r2, r2, #16
 8014c36:	fa13 f38a 	uxtah	r3, r3, sl
 8014c3a:	fb06 e202 	mla	r2, r6, r2, lr
 8014c3e:	9300      	str	r3, [sp, #0]
 8014c40:	9b00      	ldr	r3, [sp, #0]
 8014c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014c46:	b292      	uxth	r2, r2
 8014c48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c50:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c54:	4581      	cmp	r9, r0
 8014c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c5a:	f84c 3b04 	str.w	r3, [ip], #4
 8014c5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014c62:	d2db      	bcs.n	8014c1c <quorem+0x44>
 8014c64:	f855 300b 	ldr.w	r3, [r5, fp]
 8014c68:	b92b      	cbnz	r3, 8014c76 <quorem+0x9e>
 8014c6a:	9b01      	ldr	r3, [sp, #4]
 8014c6c:	3b04      	subs	r3, #4
 8014c6e:	429d      	cmp	r5, r3
 8014c70:	461a      	mov	r2, r3
 8014c72:	d32e      	bcc.n	8014cd2 <quorem+0xfa>
 8014c74:	613c      	str	r4, [r7, #16]
 8014c76:	4638      	mov	r0, r7
 8014c78:	f001 fa06 	bl	8016088 <__mcmp>
 8014c7c:	2800      	cmp	r0, #0
 8014c7e:	db24      	blt.n	8014cca <quorem+0xf2>
 8014c80:	3601      	adds	r6, #1
 8014c82:	4628      	mov	r0, r5
 8014c84:	f04f 0c00 	mov.w	ip, #0
 8014c88:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c8c:	f8d0 e000 	ldr.w	lr, [r0]
 8014c90:	b293      	uxth	r3, r2
 8014c92:	ebac 0303 	sub.w	r3, ip, r3
 8014c96:	0c12      	lsrs	r2, r2, #16
 8014c98:	fa13 f38e 	uxtah	r3, r3, lr
 8014c9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014caa:	45c1      	cmp	r9, r8
 8014cac:	f840 3b04 	str.w	r3, [r0], #4
 8014cb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014cb4:	d2e8      	bcs.n	8014c88 <quorem+0xb0>
 8014cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cbe:	b922      	cbnz	r2, 8014cca <quorem+0xf2>
 8014cc0:	3b04      	subs	r3, #4
 8014cc2:	429d      	cmp	r5, r3
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	d30a      	bcc.n	8014cde <quorem+0x106>
 8014cc8:	613c      	str	r4, [r7, #16]
 8014cca:	4630      	mov	r0, r6
 8014ccc:	b003      	add	sp, #12
 8014cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd2:	6812      	ldr	r2, [r2, #0]
 8014cd4:	3b04      	subs	r3, #4
 8014cd6:	2a00      	cmp	r2, #0
 8014cd8:	d1cc      	bne.n	8014c74 <quorem+0x9c>
 8014cda:	3c01      	subs	r4, #1
 8014cdc:	e7c7      	b.n	8014c6e <quorem+0x96>
 8014cde:	6812      	ldr	r2, [r2, #0]
 8014ce0:	3b04      	subs	r3, #4
 8014ce2:	2a00      	cmp	r2, #0
 8014ce4:	d1f0      	bne.n	8014cc8 <quorem+0xf0>
 8014ce6:	3c01      	subs	r4, #1
 8014ce8:	e7eb      	b.n	8014cc2 <quorem+0xea>
 8014cea:	2000      	movs	r0, #0
 8014cec:	e7ee      	b.n	8014ccc <quorem+0xf4>
	...

08014cf0 <_dtoa_r>:
 8014cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf4:	ed2d 8b04 	vpush	{d8-d9}
 8014cf8:	ec57 6b10 	vmov	r6, r7, d0
 8014cfc:	b093      	sub	sp, #76	; 0x4c
 8014cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014d04:	9106      	str	r1, [sp, #24]
 8014d06:	ee10 aa10 	vmov	sl, s0
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8014d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8014d10:	46bb      	mov	fp, r7
 8014d12:	b975      	cbnz	r5, 8014d32 <_dtoa_r+0x42>
 8014d14:	2010      	movs	r0, #16
 8014d16:	f7fe ffb1 	bl	8013c7c <malloc>
 8014d1a:	4602      	mov	r2, r0
 8014d1c:	6260      	str	r0, [r4, #36]	; 0x24
 8014d1e:	b920      	cbnz	r0, 8014d2a <_dtoa_r+0x3a>
 8014d20:	4ba7      	ldr	r3, [pc, #668]	; (8014fc0 <_dtoa_r+0x2d0>)
 8014d22:	21ea      	movs	r1, #234	; 0xea
 8014d24:	48a7      	ldr	r0, [pc, #668]	; (8014fc4 <_dtoa_r+0x2d4>)
 8014d26:	f001 fc41 	bl	80165ac <__assert_func>
 8014d2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d2e:	6005      	str	r5, [r0, #0]
 8014d30:	60c5      	str	r5, [r0, #12]
 8014d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d34:	6819      	ldr	r1, [r3, #0]
 8014d36:	b151      	cbz	r1, 8014d4e <_dtoa_r+0x5e>
 8014d38:	685a      	ldr	r2, [r3, #4]
 8014d3a:	604a      	str	r2, [r1, #4]
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	4093      	lsls	r3, r2
 8014d40:	608b      	str	r3, [r1, #8]
 8014d42:	4620      	mov	r0, r4
 8014d44:	f000 ff5e 	bl	8015c04 <_Bfree>
 8014d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	601a      	str	r2, [r3, #0]
 8014d4e:	1e3b      	subs	r3, r7, #0
 8014d50:	bfaa      	itet	ge
 8014d52:	2300      	movge	r3, #0
 8014d54:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014d58:	f8c8 3000 	strge.w	r3, [r8]
 8014d5c:	4b9a      	ldr	r3, [pc, #616]	; (8014fc8 <_dtoa_r+0x2d8>)
 8014d5e:	bfbc      	itt	lt
 8014d60:	2201      	movlt	r2, #1
 8014d62:	f8c8 2000 	strlt.w	r2, [r8]
 8014d66:	ea33 030b 	bics.w	r3, r3, fp
 8014d6a:	d11b      	bne.n	8014da4 <_dtoa_r+0xb4>
 8014d6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014d72:	6013      	str	r3, [r2, #0]
 8014d74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d78:	4333      	orrs	r3, r6
 8014d7a:	f000 8592 	beq.w	80158a2 <_dtoa_r+0xbb2>
 8014d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d80:	b963      	cbnz	r3, 8014d9c <_dtoa_r+0xac>
 8014d82:	4b92      	ldr	r3, [pc, #584]	; (8014fcc <_dtoa_r+0x2dc>)
 8014d84:	e022      	b.n	8014dcc <_dtoa_r+0xdc>
 8014d86:	4b92      	ldr	r3, [pc, #584]	; (8014fd0 <_dtoa_r+0x2e0>)
 8014d88:	9301      	str	r3, [sp, #4]
 8014d8a:	3308      	adds	r3, #8
 8014d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d8e:	6013      	str	r3, [r2, #0]
 8014d90:	9801      	ldr	r0, [sp, #4]
 8014d92:	b013      	add	sp, #76	; 0x4c
 8014d94:	ecbd 8b04 	vpop	{d8-d9}
 8014d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d9c:	4b8b      	ldr	r3, [pc, #556]	; (8014fcc <_dtoa_r+0x2dc>)
 8014d9e:	9301      	str	r3, [sp, #4]
 8014da0:	3303      	adds	r3, #3
 8014da2:	e7f3      	b.n	8014d8c <_dtoa_r+0x9c>
 8014da4:	2200      	movs	r2, #0
 8014da6:	2300      	movs	r3, #0
 8014da8:	4650      	mov	r0, sl
 8014daa:	4659      	mov	r1, fp
 8014dac:	f7eb feac 	bl	8000b08 <__aeabi_dcmpeq>
 8014db0:	ec4b ab19 	vmov	d9, sl, fp
 8014db4:	4680      	mov	r8, r0
 8014db6:	b158      	cbz	r0, 8014dd0 <_dtoa_r+0xe0>
 8014db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dba:	2301      	movs	r3, #1
 8014dbc:	6013      	str	r3, [r2, #0]
 8014dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 856b 	beq.w	801589c <_dtoa_r+0xbac>
 8014dc6:	4883      	ldr	r0, [pc, #524]	; (8014fd4 <_dtoa_r+0x2e4>)
 8014dc8:	6018      	str	r0, [r3, #0]
 8014dca:	1e43      	subs	r3, r0, #1
 8014dcc:	9301      	str	r3, [sp, #4]
 8014dce:	e7df      	b.n	8014d90 <_dtoa_r+0xa0>
 8014dd0:	ec4b ab10 	vmov	d0, sl, fp
 8014dd4:	aa10      	add	r2, sp, #64	; 0x40
 8014dd6:	a911      	add	r1, sp, #68	; 0x44
 8014dd8:	4620      	mov	r0, r4
 8014dda:	f001 f9fb 	bl	80161d4 <__d2b>
 8014dde:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014de2:	ee08 0a10 	vmov	s16, r0
 8014de6:	2d00      	cmp	r5, #0
 8014de8:	f000 8084 	beq.w	8014ef4 <_dtoa_r+0x204>
 8014dec:	ee19 3a90 	vmov	r3, s19
 8014df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014df4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014df8:	4656      	mov	r6, sl
 8014dfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014e02:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014e06:	4b74      	ldr	r3, [pc, #464]	; (8014fd8 <_dtoa_r+0x2e8>)
 8014e08:	2200      	movs	r2, #0
 8014e0a:	4630      	mov	r0, r6
 8014e0c:	4639      	mov	r1, r7
 8014e0e:	f7eb fa5b 	bl	80002c8 <__aeabi_dsub>
 8014e12:	a365      	add	r3, pc, #404	; (adr r3, 8014fa8 <_dtoa_r+0x2b8>)
 8014e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e18:	f7eb fc0e 	bl	8000638 <__aeabi_dmul>
 8014e1c:	a364      	add	r3, pc, #400	; (adr r3, 8014fb0 <_dtoa_r+0x2c0>)
 8014e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e22:	f7eb fa53 	bl	80002cc <__adddf3>
 8014e26:	4606      	mov	r6, r0
 8014e28:	4628      	mov	r0, r5
 8014e2a:	460f      	mov	r7, r1
 8014e2c:	f7eb fb9a 	bl	8000564 <__aeabi_i2d>
 8014e30:	a361      	add	r3, pc, #388	; (adr r3, 8014fb8 <_dtoa_r+0x2c8>)
 8014e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e36:	f7eb fbff 	bl	8000638 <__aeabi_dmul>
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	4630      	mov	r0, r6
 8014e40:	4639      	mov	r1, r7
 8014e42:	f7eb fa43 	bl	80002cc <__adddf3>
 8014e46:	4606      	mov	r6, r0
 8014e48:	460f      	mov	r7, r1
 8014e4a:	f7eb fea5 	bl	8000b98 <__aeabi_d2iz>
 8014e4e:	2200      	movs	r2, #0
 8014e50:	9000      	str	r0, [sp, #0]
 8014e52:	2300      	movs	r3, #0
 8014e54:	4630      	mov	r0, r6
 8014e56:	4639      	mov	r1, r7
 8014e58:	f7eb fe60 	bl	8000b1c <__aeabi_dcmplt>
 8014e5c:	b150      	cbz	r0, 8014e74 <_dtoa_r+0x184>
 8014e5e:	9800      	ldr	r0, [sp, #0]
 8014e60:	f7eb fb80 	bl	8000564 <__aeabi_i2d>
 8014e64:	4632      	mov	r2, r6
 8014e66:	463b      	mov	r3, r7
 8014e68:	f7eb fe4e 	bl	8000b08 <__aeabi_dcmpeq>
 8014e6c:	b910      	cbnz	r0, 8014e74 <_dtoa_r+0x184>
 8014e6e:	9b00      	ldr	r3, [sp, #0]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	9300      	str	r3, [sp, #0]
 8014e74:	9b00      	ldr	r3, [sp, #0]
 8014e76:	2b16      	cmp	r3, #22
 8014e78:	d85a      	bhi.n	8014f30 <_dtoa_r+0x240>
 8014e7a:	9a00      	ldr	r2, [sp, #0]
 8014e7c:	4b57      	ldr	r3, [pc, #348]	; (8014fdc <_dtoa_r+0x2ec>)
 8014e7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e86:	ec51 0b19 	vmov	r0, r1, d9
 8014e8a:	f7eb fe47 	bl	8000b1c <__aeabi_dcmplt>
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d050      	beq.n	8014f34 <_dtoa_r+0x244>
 8014e92:	9b00      	ldr	r3, [sp, #0]
 8014e94:	3b01      	subs	r3, #1
 8014e96:	9300      	str	r3, [sp, #0]
 8014e98:	2300      	movs	r3, #0
 8014e9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e9e:	1b5d      	subs	r5, r3, r5
 8014ea0:	1e6b      	subs	r3, r5, #1
 8014ea2:	9305      	str	r3, [sp, #20]
 8014ea4:	bf45      	ittet	mi
 8014ea6:	f1c5 0301 	rsbmi	r3, r5, #1
 8014eaa:	9304      	strmi	r3, [sp, #16]
 8014eac:	2300      	movpl	r3, #0
 8014eae:	2300      	movmi	r3, #0
 8014eb0:	bf4c      	ite	mi
 8014eb2:	9305      	strmi	r3, [sp, #20]
 8014eb4:	9304      	strpl	r3, [sp, #16]
 8014eb6:	9b00      	ldr	r3, [sp, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	db3d      	blt.n	8014f38 <_dtoa_r+0x248>
 8014ebc:	9b05      	ldr	r3, [sp, #20]
 8014ebe:	9a00      	ldr	r2, [sp, #0]
 8014ec0:	920a      	str	r2, [sp, #40]	; 0x28
 8014ec2:	4413      	add	r3, r2
 8014ec4:	9305      	str	r3, [sp, #20]
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	9307      	str	r3, [sp, #28]
 8014eca:	9b06      	ldr	r3, [sp, #24]
 8014ecc:	2b09      	cmp	r3, #9
 8014ece:	f200 8089 	bhi.w	8014fe4 <_dtoa_r+0x2f4>
 8014ed2:	2b05      	cmp	r3, #5
 8014ed4:	bfc4      	itt	gt
 8014ed6:	3b04      	subgt	r3, #4
 8014ed8:	9306      	strgt	r3, [sp, #24]
 8014eda:	9b06      	ldr	r3, [sp, #24]
 8014edc:	f1a3 0302 	sub.w	r3, r3, #2
 8014ee0:	bfcc      	ite	gt
 8014ee2:	2500      	movgt	r5, #0
 8014ee4:	2501      	movle	r5, #1
 8014ee6:	2b03      	cmp	r3, #3
 8014ee8:	f200 8087 	bhi.w	8014ffa <_dtoa_r+0x30a>
 8014eec:	e8df f003 	tbb	[pc, r3]
 8014ef0:	59383a2d 	.word	0x59383a2d
 8014ef4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014ef8:	441d      	add	r5, r3
 8014efa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014efe:	2b20      	cmp	r3, #32
 8014f00:	bfc1      	itttt	gt
 8014f02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014f06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014f0a:	fa0b f303 	lslgt.w	r3, fp, r3
 8014f0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014f12:	bfda      	itte	le
 8014f14:	f1c3 0320 	rsble	r3, r3, #32
 8014f18:	fa06 f003 	lslle.w	r0, r6, r3
 8014f1c:	4318      	orrgt	r0, r3
 8014f1e:	f7eb fb11 	bl	8000544 <__aeabi_ui2d>
 8014f22:	2301      	movs	r3, #1
 8014f24:	4606      	mov	r6, r0
 8014f26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014f2a:	3d01      	subs	r5, #1
 8014f2c:	930e      	str	r3, [sp, #56]	; 0x38
 8014f2e:	e76a      	b.n	8014e06 <_dtoa_r+0x116>
 8014f30:	2301      	movs	r3, #1
 8014f32:	e7b2      	b.n	8014e9a <_dtoa_r+0x1aa>
 8014f34:	900b      	str	r0, [sp, #44]	; 0x2c
 8014f36:	e7b1      	b.n	8014e9c <_dtoa_r+0x1ac>
 8014f38:	9b04      	ldr	r3, [sp, #16]
 8014f3a:	9a00      	ldr	r2, [sp, #0]
 8014f3c:	1a9b      	subs	r3, r3, r2
 8014f3e:	9304      	str	r3, [sp, #16]
 8014f40:	4253      	negs	r3, r2
 8014f42:	9307      	str	r3, [sp, #28]
 8014f44:	2300      	movs	r3, #0
 8014f46:	930a      	str	r3, [sp, #40]	; 0x28
 8014f48:	e7bf      	b.n	8014eca <_dtoa_r+0x1da>
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	9308      	str	r3, [sp, #32]
 8014f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	dc55      	bgt.n	8015000 <_dtoa_r+0x310>
 8014f54:	2301      	movs	r3, #1
 8014f56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	9209      	str	r2, [sp, #36]	; 0x24
 8014f5e:	e00c      	b.n	8014f7a <_dtoa_r+0x28a>
 8014f60:	2301      	movs	r3, #1
 8014f62:	e7f3      	b.n	8014f4c <_dtoa_r+0x25c>
 8014f64:	2300      	movs	r3, #0
 8014f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f68:	9308      	str	r3, [sp, #32]
 8014f6a:	9b00      	ldr	r3, [sp, #0]
 8014f6c:	4413      	add	r3, r2
 8014f6e:	9302      	str	r3, [sp, #8]
 8014f70:	3301      	adds	r3, #1
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	9303      	str	r3, [sp, #12]
 8014f76:	bfb8      	it	lt
 8014f78:	2301      	movlt	r3, #1
 8014f7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	6042      	str	r2, [r0, #4]
 8014f80:	2204      	movs	r2, #4
 8014f82:	f102 0614 	add.w	r6, r2, #20
 8014f86:	429e      	cmp	r6, r3
 8014f88:	6841      	ldr	r1, [r0, #4]
 8014f8a:	d93d      	bls.n	8015008 <_dtoa_r+0x318>
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	f000 fdf9 	bl	8015b84 <_Balloc>
 8014f92:	9001      	str	r0, [sp, #4]
 8014f94:	2800      	cmp	r0, #0
 8014f96:	d13b      	bne.n	8015010 <_dtoa_r+0x320>
 8014f98:	4b11      	ldr	r3, [pc, #68]	; (8014fe0 <_dtoa_r+0x2f0>)
 8014f9a:	4602      	mov	r2, r0
 8014f9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014fa0:	e6c0      	b.n	8014d24 <_dtoa_r+0x34>
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	e7df      	b.n	8014f66 <_dtoa_r+0x276>
 8014fa6:	bf00      	nop
 8014fa8:	636f4361 	.word	0x636f4361
 8014fac:	3fd287a7 	.word	0x3fd287a7
 8014fb0:	8b60c8b3 	.word	0x8b60c8b3
 8014fb4:	3fc68a28 	.word	0x3fc68a28
 8014fb8:	509f79fb 	.word	0x509f79fb
 8014fbc:	3fd34413 	.word	0x3fd34413
 8014fc0:	08016dae 	.word	0x08016dae
 8014fc4:	08016dc5 	.word	0x08016dc5
 8014fc8:	7ff00000 	.word	0x7ff00000
 8014fcc:	08016daa 	.word	0x08016daa
 8014fd0:	08016da1 	.word	0x08016da1
 8014fd4:	08016c7d 	.word	0x08016c7d
 8014fd8:	3ff80000 	.word	0x3ff80000
 8014fdc:	08016ec0 	.word	0x08016ec0
 8014fe0:	08016e20 	.word	0x08016e20
 8014fe4:	2501      	movs	r5, #1
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	9306      	str	r3, [sp, #24]
 8014fea:	9508      	str	r5, [sp, #32]
 8014fec:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	2312      	movs	r3, #18
 8014ff8:	e7b0      	b.n	8014f5c <_dtoa_r+0x26c>
 8014ffa:	2301      	movs	r3, #1
 8014ffc:	9308      	str	r3, [sp, #32]
 8014ffe:	e7f5      	b.n	8014fec <_dtoa_r+0x2fc>
 8015000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015002:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015006:	e7b8      	b.n	8014f7a <_dtoa_r+0x28a>
 8015008:	3101      	adds	r1, #1
 801500a:	6041      	str	r1, [r0, #4]
 801500c:	0052      	lsls	r2, r2, #1
 801500e:	e7b8      	b.n	8014f82 <_dtoa_r+0x292>
 8015010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015012:	9a01      	ldr	r2, [sp, #4]
 8015014:	601a      	str	r2, [r3, #0]
 8015016:	9b03      	ldr	r3, [sp, #12]
 8015018:	2b0e      	cmp	r3, #14
 801501a:	f200 809d 	bhi.w	8015158 <_dtoa_r+0x468>
 801501e:	2d00      	cmp	r5, #0
 8015020:	f000 809a 	beq.w	8015158 <_dtoa_r+0x468>
 8015024:	9b00      	ldr	r3, [sp, #0]
 8015026:	2b00      	cmp	r3, #0
 8015028:	dd32      	ble.n	8015090 <_dtoa_r+0x3a0>
 801502a:	4ab7      	ldr	r2, [pc, #732]	; (8015308 <_dtoa_r+0x618>)
 801502c:	f003 030f 	and.w	r3, r3, #15
 8015030:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015038:	9b00      	ldr	r3, [sp, #0]
 801503a:	05d8      	lsls	r0, r3, #23
 801503c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015040:	d516      	bpl.n	8015070 <_dtoa_r+0x380>
 8015042:	4bb2      	ldr	r3, [pc, #712]	; (801530c <_dtoa_r+0x61c>)
 8015044:	ec51 0b19 	vmov	r0, r1, d9
 8015048:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801504c:	f7eb fc1e 	bl	800088c <__aeabi_ddiv>
 8015050:	f007 070f 	and.w	r7, r7, #15
 8015054:	4682      	mov	sl, r0
 8015056:	468b      	mov	fp, r1
 8015058:	2503      	movs	r5, #3
 801505a:	4eac      	ldr	r6, [pc, #688]	; (801530c <_dtoa_r+0x61c>)
 801505c:	b957      	cbnz	r7, 8015074 <_dtoa_r+0x384>
 801505e:	4642      	mov	r2, r8
 8015060:	464b      	mov	r3, r9
 8015062:	4650      	mov	r0, sl
 8015064:	4659      	mov	r1, fp
 8015066:	f7eb fc11 	bl	800088c <__aeabi_ddiv>
 801506a:	4682      	mov	sl, r0
 801506c:	468b      	mov	fp, r1
 801506e:	e028      	b.n	80150c2 <_dtoa_r+0x3d2>
 8015070:	2502      	movs	r5, #2
 8015072:	e7f2      	b.n	801505a <_dtoa_r+0x36a>
 8015074:	07f9      	lsls	r1, r7, #31
 8015076:	d508      	bpl.n	801508a <_dtoa_r+0x39a>
 8015078:	4640      	mov	r0, r8
 801507a:	4649      	mov	r1, r9
 801507c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015080:	f7eb fada 	bl	8000638 <__aeabi_dmul>
 8015084:	3501      	adds	r5, #1
 8015086:	4680      	mov	r8, r0
 8015088:	4689      	mov	r9, r1
 801508a:	107f      	asrs	r7, r7, #1
 801508c:	3608      	adds	r6, #8
 801508e:	e7e5      	b.n	801505c <_dtoa_r+0x36c>
 8015090:	f000 809b 	beq.w	80151ca <_dtoa_r+0x4da>
 8015094:	9b00      	ldr	r3, [sp, #0]
 8015096:	4f9d      	ldr	r7, [pc, #628]	; (801530c <_dtoa_r+0x61c>)
 8015098:	425e      	negs	r6, r3
 801509a:	4b9b      	ldr	r3, [pc, #620]	; (8015308 <_dtoa_r+0x618>)
 801509c:	f006 020f 	and.w	r2, r6, #15
 80150a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	ec51 0b19 	vmov	r0, r1, d9
 80150ac:	f7eb fac4 	bl	8000638 <__aeabi_dmul>
 80150b0:	1136      	asrs	r6, r6, #4
 80150b2:	4682      	mov	sl, r0
 80150b4:	468b      	mov	fp, r1
 80150b6:	2300      	movs	r3, #0
 80150b8:	2502      	movs	r5, #2
 80150ba:	2e00      	cmp	r6, #0
 80150bc:	d17a      	bne.n	80151b4 <_dtoa_r+0x4c4>
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d1d3      	bne.n	801506a <_dtoa_r+0x37a>
 80150c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f000 8082 	beq.w	80151ce <_dtoa_r+0x4de>
 80150ca:	4b91      	ldr	r3, [pc, #580]	; (8015310 <_dtoa_r+0x620>)
 80150cc:	2200      	movs	r2, #0
 80150ce:	4650      	mov	r0, sl
 80150d0:	4659      	mov	r1, fp
 80150d2:	f7eb fd23 	bl	8000b1c <__aeabi_dcmplt>
 80150d6:	2800      	cmp	r0, #0
 80150d8:	d079      	beq.n	80151ce <_dtoa_r+0x4de>
 80150da:	9b03      	ldr	r3, [sp, #12]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d076      	beq.n	80151ce <_dtoa_r+0x4de>
 80150e0:	9b02      	ldr	r3, [sp, #8]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	dd36      	ble.n	8015154 <_dtoa_r+0x464>
 80150e6:	9b00      	ldr	r3, [sp, #0]
 80150e8:	4650      	mov	r0, sl
 80150ea:	4659      	mov	r1, fp
 80150ec:	1e5f      	subs	r7, r3, #1
 80150ee:	2200      	movs	r2, #0
 80150f0:	4b88      	ldr	r3, [pc, #544]	; (8015314 <_dtoa_r+0x624>)
 80150f2:	f7eb faa1 	bl	8000638 <__aeabi_dmul>
 80150f6:	9e02      	ldr	r6, [sp, #8]
 80150f8:	4682      	mov	sl, r0
 80150fa:	468b      	mov	fp, r1
 80150fc:	3501      	adds	r5, #1
 80150fe:	4628      	mov	r0, r5
 8015100:	f7eb fa30 	bl	8000564 <__aeabi_i2d>
 8015104:	4652      	mov	r2, sl
 8015106:	465b      	mov	r3, fp
 8015108:	f7eb fa96 	bl	8000638 <__aeabi_dmul>
 801510c:	4b82      	ldr	r3, [pc, #520]	; (8015318 <_dtoa_r+0x628>)
 801510e:	2200      	movs	r2, #0
 8015110:	f7eb f8dc 	bl	80002cc <__adddf3>
 8015114:	46d0      	mov	r8, sl
 8015116:	46d9      	mov	r9, fp
 8015118:	4682      	mov	sl, r0
 801511a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801511e:	2e00      	cmp	r6, #0
 8015120:	d158      	bne.n	80151d4 <_dtoa_r+0x4e4>
 8015122:	4b7e      	ldr	r3, [pc, #504]	; (801531c <_dtoa_r+0x62c>)
 8015124:	2200      	movs	r2, #0
 8015126:	4640      	mov	r0, r8
 8015128:	4649      	mov	r1, r9
 801512a:	f7eb f8cd 	bl	80002c8 <__aeabi_dsub>
 801512e:	4652      	mov	r2, sl
 8015130:	465b      	mov	r3, fp
 8015132:	4680      	mov	r8, r0
 8015134:	4689      	mov	r9, r1
 8015136:	f7eb fd0f 	bl	8000b58 <__aeabi_dcmpgt>
 801513a:	2800      	cmp	r0, #0
 801513c:	f040 8295 	bne.w	801566a <_dtoa_r+0x97a>
 8015140:	4652      	mov	r2, sl
 8015142:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015146:	4640      	mov	r0, r8
 8015148:	4649      	mov	r1, r9
 801514a:	f7eb fce7 	bl	8000b1c <__aeabi_dcmplt>
 801514e:	2800      	cmp	r0, #0
 8015150:	f040 8289 	bne.w	8015666 <_dtoa_r+0x976>
 8015154:	ec5b ab19 	vmov	sl, fp, d9
 8015158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801515a:	2b00      	cmp	r3, #0
 801515c:	f2c0 8148 	blt.w	80153f0 <_dtoa_r+0x700>
 8015160:	9a00      	ldr	r2, [sp, #0]
 8015162:	2a0e      	cmp	r2, #14
 8015164:	f300 8144 	bgt.w	80153f0 <_dtoa_r+0x700>
 8015168:	4b67      	ldr	r3, [pc, #412]	; (8015308 <_dtoa_r+0x618>)
 801516a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801516e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015174:	2b00      	cmp	r3, #0
 8015176:	f280 80d5 	bge.w	8015324 <_dtoa_r+0x634>
 801517a:	9b03      	ldr	r3, [sp, #12]
 801517c:	2b00      	cmp	r3, #0
 801517e:	f300 80d1 	bgt.w	8015324 <_dtoa_r+0x634>
 8015182:	f040 826f 	bne.w	8015664 <_dtoa_r+0x974>
 8015186:	4b65      	ldr	r3, [pc, #404]	; (801531c <_dtoa_r+0x62c>)
 8015188:	2200      	movs	r2, #0
 801518a:	4640      	mov	r0, r8
 801518c:	4649      	mov	r1, r9
 801518e:	f7eb fa53 	bl	8000638 <__aeabi_dmul>
 8015192:	4652      	mov	r2, sl
 8015194:	465b      	mov	r3, fp
 8015196:	f7eb fcd5 	bl	8000b44 <__aeabi_dcmpge>
 801519a:	9e03      	ldr	r6, [sp, #12]
 801519c:	4637      	mov	r7, r6
 801519e:	2800      	cmp	r0, #0
 80151a0:	f040 8245 	bne.w	801562e <_dtoa_r+0x93e>
 80151a4:	9d01      	ldr	r5, [sp, #4]
 80151a6:	2331      	movs	r3, #49	; 0x31
 80151a8:	f805 3b01 	strb.w	r3, [r5], #1
 80151ac:	9b00      	ldr	r3, [sp, #0]
 80151ae:	3301      	adds	r3, #1
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	e240      	b.n	8015636 <_dtoa_r+0x946>
 80151b4:	07f2      	lsls	r2, r6, #31
 80151b6:	d505      	bpl.n	80151c4 <_dtoa_r+0x4d4>
 80151b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80151bc:	f7eb fa3c 	bl	8000638 <__aeabi_dmul>
 80151c0:	3501      	adds	r5, #1
 80151c2:	2301      	movs	r3, #1
 80151c4:	1076      	asrs	r6, r6, #1
 80151c6:	3708      	adds	r7, #8
 80151c8:	e777      	b.n	80150ba <_dtoa_r+0x3ca>
 80151ca:	2502      	movs	r5, #2
 80151cc:	e779      	b.n	80150c2 <_dtoa_r+0x3d2>
 80151ce:	9f00      	ldr	r7, [sp, #0]
 80151d0:	9e03      	ldr	r6, [sp, #12]
 80151d2:	e794      	b.n	80150fe <_dtoa_r+0x40e>
 80151d4:	9901      	ldr	r1, [sp, #4]
 80151d6:	4b4c      	ldr	r3, [pc, #304]	; (8015308 <_dtoa_r+0x618>)
 80151d8:	4431      	add	r1, r6
 80151da:	910d      	str	r1, [sp, #52]	; 0x34
 80151dc:	9908      	ldr	r1, [sp, #32]
 80151de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80151e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80151e6:	2900      	cmp	r1, #0
 80151e8:	d043      	beq.n	8015272 <_dtoa_r+0x582>
 80151ea:	494d      	ldr	r1, [pc, #308]	; (8015320 <_dtoa_r+0x630>)
 80151ec:	2000      	movs	r0, #0
 80151ee:	f7eb fb4d 	bl	800088c <__aeabi_ddiv>
 80151f2:	4652      	mov	r2, sl
 80151f4:	465b      	mov	r3, fp
 80151f6:	f7eb f867 	bl	80002c8 <__aeabi_dsub>
 80151fa:	9d01      	ldr	r5, [sp, #4]
 80151fc:	4682      	mov	sl, r0
 80151fe:	468b      	mov	fp, r1
 8015200:	4649      	mov	r1, r9
 8015202:	4640      	mov	r0, r8
 8015204:	f7eb fcc8 	bl	8000b98 <__aeabi_d2iz>
 8015208:	4606      	mov	r6, r0
 801520a:	f7eb f9ab 	bl	8000564 <__aeabi_i2d>
 801520e:	4602      	mov	r2, r0
 8015210:	460b      	mov	r3, r1
 8015212:	4640      	mov	r0, r8
 8015214:	4649      	mov	r1, r9
 8015216:	f7eb f857 	bl	80002c8 <__aeabi_dsub>
 801521a:	3630      	adds	r6, #48	; 0x30
 801521c:	f805 6b01 	strb.w	r6, [r5], #1
 8015220:	4652      	mov	r2, sl
 8015222:	465b      	mov	r3, fp
 8015224:	4680      	mov	r8, r0
 8015226:	4689      	mov	r9, r1
 8015228:	f7eb fc78 	bl	8000b1c <__aeabi_dcmplt>
 801522c:	2800      	cmp	r0, #0
 801522e:	d163      	bne.n	80152f8 <_dtoa_r+0x608>
 8015230:	4642      	mov	r2, r8
 8015232:	464b      	mov	r3, r9
 8015234:	4936      	ldr	r1, [pc, #216]	; (8015310 <_dtoa_r+0x620>)
 8015236:	2000      	movs	r0, #0
 8015238:	f7eb f846 	bl	80002c8 <__aeabi_dsub>
 801523c:	4652      	mov	r2, sl
 801523e:	465b      	mov	r3, fp
 8015240:	f7eb fc6c 	bl	8000b1c <__aeabi_dcmplt>
 8015244:	2800      	cmp	r0, #0
 8015246:	f040 80b5 	bne.w	80153b4 <_dtoa_r+0x6c4>
 801524a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801524c:	429d      	cmp	r5, r3
 801524e:	d081      	beq.n	8015154 <_dtoa_r+0x464>
 8015250:	4b30      	ldr	r3, [pc, #192]	; (8015314 <_dtoa_r+0x624>)
 8015252:	2200      	movs	r2, #0
 8015254:	4650      	mov	r0, sl
 8015256:	4659      	mov	r1, fp
 8015258:	f7eb f9ee 	bl	8000638 <__aeabi_dmul>
 801525c:	4b2d      	ldr	r3, [pc, #180]	; (8015314 <_dtoa_r+0x624>)
 801525e:	4682      	mov	sl, r0
 8015260:	468b      	mov	fp, r1
 8015262:	4640      	mov	r0, r8
 8015264:	4649      	mov	r1, r9
 8015266:	2200      	movs	r2, #0
 8015268:	f7eb f9e6 	bl	8000638 <__aeabi_dmul>
 801526c:	4680      	mov	r8, r0
 801526e:	4689      	mov	r9, r1
 8015270:	e7c6      	b.n	8015200 <_dtoa_r+0x510>
 8015272:	4650      	mov	r0, sl
 8015274:	4659      	mov	r1, fp
 8015276:	f7eb f9df 	bl	8000638 <__aeabi_dmul>
 801527a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801527c:	9d01      	ldr	r5, [sp, #4]
 801527e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015280:	4682      	mov	sl, r0
 8015282:	468b      	mov	fp, r1
 8015284:	4649      	mov	r1, r9
 8015286:	4640      	mov	r0, r8
 8015288:	f7eb fc86 	bl	8000b98 <__aeabi_d2iz>
 801528c:	4606      	mov	r6, r0
 801528e:	f7eb f969 	bl	8000564 <__aeabi_i2d>
 8015292:	3630      	adds	r6, #48	; 0x30
 8015294:	4602      	mov	r2, r0
 8015296:	460b      	mov	r3, r1
 8015298:	4640      	mov	r0, r8
 801529a:	4649      	mov	r1, r9
 801529c:	f7eb f814 	bl	80002c8 <__aeabi_dsub>
 80152a0:	f805 6b01 	strb.w	r6, [r5], #1
 80152a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152a6:	429d      	cmp	r5, r3
 80152a8:	4680      	mov	r8, r0
 80152aa:	4689      	mov	r9, r1
 80152ac:	f04f 0200 	mov.w	r2, #0
 80152b0:	d124      	bne.n	80152fc <_dtoa_r+0x60c>
 80152b2:	4b1b      	ldr	r3, [pc, #108]	; (8015320 <_dtoa_r+0x630>)
 80152b4:	4650      	mov	r0, sl
 80152b6:	4659      	mov	r1, fp
 80152b8:	f7eb f808 	bl	80002cc <__adddf3>
 80152bc:	4602      	mov	r2, r0
 80152be:	460b      	mov	r3, r1
 80152c0:	4640      	mov	r0, r8
 80152c2:	4649      	mov	r1, r9
 80152c4:	f7eb fc48 	bl	8000b58 <__aeabi_dcmpgt>
 80152c8:	2800      	cmp	r0, #0
 80152ca:	d173      	bne.n	80153b4 <_dtoa_r+0x6c4>
 80152cc:	4652      	mov	r2, sl
 80152ce:	465b      	mov	r3, fp
 80152d0:	4913      	ldr	r1, [pc, #76]	; (8015320 <_dtoa_r+0x630>)
 80152d2:	2000      	movs	r0, #0
 80152d4:	f7ea fff8 	bl	80002c8 <__aeabi_dsub>
 80152d8:	4602      	mov	r2, r0
 80152da:	460b      	mov	r3, r1
 80152dc:	4640      	mov	r0, r8
 80152de:	4649      	mov	r1, r9
 80152e0:	f7eb fc1c 	bl	8000b1c <__aeabi_dcmplt>
 80152e4:	2800      	cmp	r0, #0
 80152e6:	f43f af35 	beq.w	8015154 <_dtoa_r+0x464>
 80152ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80152ec:	1e6b      	subs	r3, r5, #1
 80152ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80152f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80152f4:	2b30      	cmp	r3, #48	; 0x30
 80152f6:	d0f8      	beq.n	80152ea <_dtoa_r+0x5fa>
 80152f8:	9700      	str	r7, [sp, #0]
 80152fa:	e049      	b.n	8015390 <_dtoa_r+0x6a0>
 80152fc:	4b05      	ldr	r3, [pc, #20]	; (8015314 <_dtoa_r+0x624>)
 80152fe:	f7eb f99b 	bl	8000638 <__aeabi_dmul>
 8015302:	4680      	mov	r8, r0
 8015304:	4689      	mov	r9, r1
 8015306:	e7bd      	b.n	8015284 <_dtoa_r+0x594>
 8015308:	08016ec0 	.word	0x08016ec0
 801530c:	08016e98 	.word	0x08016e98
 8015310:	3ff00000 	.word	0x3ff00000
 8015314:	40240000 	.word	0x40240000
 8015318:	401c0000 	.word	0x401c0000
 801531c:	40140000 	.word	0x40140000
 8015320:	3fe00000 	.word	0x3fe00000
 8015324:	9d01      	ldr	r5, [sp, #4]
 8015326:	4656      	mov	r6, sl
 8015328:	465f      	mov	r7, fp
 801532a:	4642      	mov	r2, r8
 801532c:	464b      	mov	r3, r9
 801532e:	4630      	mov	r0, r6
 8015330:	4639      	mov	r1, r7
 8015332:	f7eb faab 	bl	800088c <__aeabi_ddiv>
 8015336:	f7eb fc2f 	bl	8000b98 <__aeabi_d2iz>
 801533a:	4682      	mov	sl, r0
 801533c:	f7eb f912 	bl	8000564 <__aeabi_i2d>
 8015340:	4642      	mov	r2, r8
 8015342:	464b      	mov	r3, r9
 8015344:	f7eb f978 	bl	8000638 <__aeabi_dmul>
 8015348:	4602      	mov	r2, r0
 801534a:	460b      	mov	r3, r1
 801534c:	4630      	mov	r0, r6
 801534e:	4639      	mov	r1, r7
 8015350:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015354:	f7ea ffb8 	bl	80002c8 <__aeabi_dsub>
 8015358:	f805 6b01 	strb.w	r6, [r5], #1
 801535c:	9e01      	ldr	r6, [sp, #4]
 801535e:	9f03      	ldr	r7, [sp, #12]
 8015360:	1bae      	subs	r6, r5, r6
 8015362:	42b7      	cmp	r7, r6
 8015364:	4602      	mov	r2, r0
 8015366:	460b      	mov	r3, r1
 8015368:	d135      	bne.n	80153d6 <_dtoa_r+0x6e6>
 801536a:	f7ea ffaf 	bl	80002cc <__adddf3>
 801536e:	4642      	mov	r2, r8
 8015370:	464b      	mov	r3, r9
 8015372:	4606      	mov	r6, r0
 8015374:	460f      	mov	r7, r1
 8015376:	f7eb fbef 	bl	8000b58 <__aeabi_dcmpgt>
 801537a:	b9d0      	cbnz	r0, 80153b2 <_dtoa_r+0x6c2>
 801537c:	4642      	mov	r2, r8
 801537e:	464b      	mov	r3, r9
 8015380:	4630      	mov	r0, r6
 8015382:	4639      	mov	r1, r7
 8015384:	f7eb fbc0 	bl	8000b08 <__aeabi_dcmpeq>
 8015388:	b110      	cbz	r0, 8015390 <_dtoa_r+0x6a0>
 801538a:	f01a 0f01 	tst.w	sl, #1
 801538e:	d110      	bne.n	80153b2 <_dtoa_r+0x6c2>
 8015390:	4620      	mov	r0, r4
 8015392:	ee18 1a10 	vmov	r1, s16
 8015396:	f000 fc35 	bl	8015c04 <_Bfree>
 801539a:	2300      	movs	r3, #0
 801539c:	9800      	ldr	r0, [sp, #0]
 801539e:	702b      	strb	r3, [r5, #0]
 80153a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80153a2:	3001      	adds	r0, #1
 80153a4:	6018      	str	r0, [r3, #0]
 80153a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	f43f acf1 	beq.w	8014d90 <_dtoa_r+0xa0>
 80153ae:	601d      	str	r5, [r3, #0]
 80153b0:	e4ee      	b.n	8014d90 <_dtoa_r+0xa0>
 80153b2:	9f00      	ldr	r7, [sp, #0]
 80153b4:	462b      	mov	r3, r5
 80153b6:	461d      	mov	r5, r3
 80153b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80153bc:	2a39      	cmp	r2, #57	; 0x39
 80153be:	d106      	bne.n	80153ce <_dtoa_r+0x6de>
 80153c0:	9a01      	ldr	r2, [sp, #4]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d1f7      	bne.n	80153b6 <_dtoa_r+0x6c6>
 80153c6:	9901      	ldr	r1, [sp, #4]
 80153c8:	2230      	movs	r2, #48	; 0x30
 80153ca:	3701      	adds	r7, #1
 80153cc:	700a      	strb	r2, [r1, #0]
 80153ce:	781a      	ldrb	r2, [r3, #0]
 80153d0:	3201      	adds	r2, #1
 80153d2:	701a      	strb	r2, [r3, #0]
 80153d4:	e790      	b.n	80152f8 <_dtoa_r+0x608>
 80153d6:	4ba6      	ldr	r3, [pc, #664]	; (8015670 <_dtoa_r+0x980>)
 80153d8:	2200      	movs	r2, #0
 80153da:	f7eb f92d 	bl	8000638 <__aeabi_dmul>
 80153de:	2200      	movs	r2, #0
 80153e0:	2300      	movs	r3, #0
 80153e2:	4606      	mov	r6, r0
 80153e4:	460f      	mov	r7, r1
 80153e6:	f7eb fb8f 	bl	8000b08 <__aeabi_dcmpeq>
 80153ea:	2800      	cmp	r0, #0
 80153ec:	d09d      	beq.n	801532a <_dtoa_r+0x63a>
 80153ee:	e7cf      	b.n	8015390 <_dtoa_r+0x6a0>
 80153f0:	9a08      	ldr	r2, [sp, #32]
 80153f2:	2a00      	cmp	r2, #0
 80153f4:	f000 80d7 	beq.w	80155a6 <_dtoa_r+0x8b6>
 80153f8:	9a06      	ldr	r2, [sp, #24]
 80153fa:	2a01      	cmp	r2, #1
 80153fc:	f300 80ba 	bgt.w	8015574 <_dtoa_r+0x884>
 8015400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015402:	2a00      	cmp	r2, #0
 8015404:	f000 80b2 	beq.w	801556c <_dtoa_r+0x87c>
 8015408:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801540c:	9e07      	ldr	r6, [sp, #28]
 801540e:	9d04      	ldr	r5, [sp, #16]
 8015410:	9a04      	ldr	r2, [sp, #16]
 8015412:	441a      	add	r2, r3
 8015414:	9204      	str	r2, [sp, #16]
 8015416:	9a05      	ldr	r2, [sp, #20]
 8015418:	2101      	movs	r1, #1
 801541a:	441a      	add	r2, r3
 801541c:	4620      	mov	r0, r4
 801541e:	9205      	str	r2, [sp, #20]
 8015420:	f000 fca8 	bl	8015d74 <__i2b>
 8015424:	4607      	mov	r7, r0
 8015426:	2d00      	cmp	r5, #0
 8015428:	dd0c      	ble.n	8015444 <_dtoa_r+0x754>
 801542a:	9b05      	ldr	r3, [sp, #20]
 801542c:	2b00      	cmp	r3, #0
 801542e:	dd09      	ble.n	8015444 <_dtoa_r+0x754>
 8015430:	42ab      	cmp	r3, r5
 8015432:	9a04      	ldr	r2, [sp, #16]
 8015434:	bfa8      	it	ge
 8015436:	462b      	movge	r3, r5
 8015438:	1ad2      	subs	r2, r2, r3
 801543a:	9204      	str	r2, [sp, #16]
 801543c:	9a05      	ldr	r2, [sp, #20]
 801543e:	1aed      	subs	r5, r5, r3
 8015440:	1ad3      	subs	r3, r2, r3
 8015442:	9305      	str	r3, [sp, #20]
 8015444:	9b07      	ldr	r3, [sp, #28]
 8015446:	b31b      	cbz	r3, 8015490 <_dtoa_r+0x7a0>
 8015448:	9b08      	ldr	r3, [sp, #32]
 801544a:	2b00      	cmp	r3, #0
 801544c:	f000 80af 	beq.w	80155ae <_dtoa_r+0x8be>
 8015450:	2e00      	cmp	r6, #0
 8015452:	dd13      	ble.n	801547c <_dtoa_r+0x78c>
 8015454:	4639      	mov	r1, r7
 8015456:	4632      	mov	r2, r6
 8015458:	4620      	mov	r0, r4
 801545a:	f000 fd4b 	bl	8015ef4 <__pow5mult>
 801545e:	ee18 2a10 	vmov	r2, s16
 8015462:	4601      	mov	r1, r0
 8015464:	4607      	mov	r7, r0
 8015466:	4620      	mov	r0, r4
 8015468:	f000 fc9a 	bl	8015da0 <__multiply>
 801546c:	ee18 1a10 	vmov	r1, s16
 8015470:	4680      	mov	r8, r0
 8015472:	4620      	mov	r0, r4
 8015474:	f000 fbc6 	bl	8015c04 <_Bfree>
 8015478:	ee08 8a10 	vmov	s16, r8
 801547c:	9b07      	ldr	r3, [sp, #28]
 801547e:	1b9a      	subs	r2, r3, r6
 8015480:	d006      	beq.n	8015490 <_dtoa_r+0x7a0>
 8015482:	ee18 1a10 	vmov	r1, s16
 8015486:	4620      	mov	r0, r4
 8015488:	f000 fd34 	bl	8015ef4 <__pow5mult>
 801548c:	ee08 0a10 	vmov	s16, r0
 8015490:	2101      	movs	r1, #1
 8015492:	4620      	mov	r0, r4
 8015494:	f000 fc6e 	bl	8015d74 <__i2b>
 8015498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801549a:	2b00      	cmp	r3, #0
 801549c:	4606      	mov	r6, r0
 801549e:	f340 8088 	ble.w	80155b2 <_dtoa_r+0x8c2>
 80154a2:	461a      	mov	r2, r3
 80154a4:	4601      	mov	r1, r0
 80154a6:	4620      	mov	r0, r4
 80154a8:	f000 fd24 	bl	8015ef4 <__pow5mult>
 80154ac:	9b06      	ldr	r3, [sp, #24]
 80154ae:	2b01      	cmp	r3, #1
 80154b0:	4606      	mov	r6, r0
 80154b2:	f340 8081 	ble.w	80155b8 <_dtoa_r+0x8c8>
 80154b6:	f04f 0800 	mov.w	r8, #0
 80154ba:	6933      	ldr	r3, [r6, #16]
 80154bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80154c0:	6918      	ldr	r0, [r3, #16]
 80154c2:	f000 fc07 	bl	8015cd4 <__hi0bits>
 80154c6:	f1c0 0020 	rsb	r0, r0, #32
 80154ca:	9b05      	ldr	r3, [sp, #20]
 80154cc:	4418      	add	r0, r3
 80154ce:	f010 001f 	ands.w	r0, r0, #31
 80154d2:	f000 8092 	beq.w	80155fa <_dtoa_r+0x90a>
 80154d6:	f1c0 0320 	rsb	r3, r0, #32
 80154da:	2b04      	cmp	r3, #4
 80154dc:	f340 808a 	ble.w	80155f4 <_dtoa_r+0x904>
 80154e0:	f1c0 001c 	rsb	r0, r0, #28
 80154e4:	9b04      	ldr	r3, [sp, #16]
 80154e6:	4403      	add	r3, r0
 80154e8:	9304      	str	r3, [sp, #16]
 80154ea:	9b05      	ldr	r3, [sp, #20]
 80154ec:	4403      	add	r3, r0
 80154ee:	4405      	add	r5, r0
 80154f0:	9305      	str	r3, [sp, #20]
 80154f2:	9b04      	ldr	r3, [sp, #16]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	dd07      	ble.n	8015508 <_dtoa_r+0x818>
 80154f8:	ee18 1a10 	vmov	r1, s16
 80154fc:	461a      	mov	r2, r3
 80154fe:	4620      	mov	r0, r4
 8015500:	f000 fd52 	bl	8015fa8 <__lshift>
 8015504:	ee08 0a10 	vmov	s16, r0
 8015508:	9b05      	ldr	r3, [sp, #20]
 801550a:	2b00      	cmp	r3, #0
 801550c:	dd05      	ble.n	801551a <_dtoa_r+0x82a>
 801550e:	4631      	mov	r1, r6
 8015510:	461a      	mov	r2, r3
 8015512:	4620      	mov	r0, r4
 8015514:	f000 fd48 	bl	8015fa8 <__lshift>
 8015518:	4606      	mov	r6, r0
 801551a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801551c:	2b00      	cmp	r3, #0
 801551e:	d06e      	beq.n	80155fe <_dtoa_r+0x90e>
 8015520:	ee18 0a10 	vmov	r0, s16
 8015524:	4631      	mov	r1, r6
 8015526:	f000 fdaf 	bl	8016088 <__mcmp>
 801552a:	2800      	cmp	r0, #0
 801552c:	da67      	bge.n	80155fe <_dtoa_r+0x90e>
 801552e:	9b00      	ldr	r3, [sp, #0]
 8015530:	3b01      	subs	r3, #1
 8015532:	ee18 1a10 	vmov	r1, s16
 8015536:	9300      	str	r3, [sp, #0]
 8015538:	220a      	movs	r2, #10
 801553a:	2300      	movs	r3, #0
 801553c:	4620      	mov	r0, r4
 801553e:	f000 fb83 	bl	8015c48 <__multadd>
 8015542:	9b08      	ldr	r3, [sp, #32]
 8015544:	ee08 0a10 	vmov	s16, r0
 8015548:	2b00      	cmp	r3, #0
 801554a:	f000 81b1 	beq.w	80158b0 <_dtoa_r+0xbc0>
 801554e:	2300      	movs	r3, #0
 8015550:	4639      	mov	r1, r7
 8015552:	220a      	movs	r2, #10
 8015554:	4620      	mov	r0, r4
 8015556:	f000 fb77 	bl	8015c48 <__multadd>
 801555a:	9b02      	ldr	r3, [sp, #8]
 801555c:	2b00      	cmp	r3, #0
 801555e:	4607      	mov	r7, r0
 8015560:	f300 808e 	bgt.w	8015680 <_dtoa_r+0x990>
 8015564:	9b06      	ldr	r3, [sp, #24]
 8015566:	2b02      	cmp	r3, #2
 8015568:	dc51      	bgt.n	801560e <_dtoa_r+0x91e>
 801556a:	e089      	b.n	8015680 <_dtoa_r+0x990>
 801556c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801556e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015572:	e74b      	b.n	801540c <_dtoa_r+0x71c>
 8015574:	9b03      	ldr	r3, [sp, #12]
 8015576:	1e5e      	subs	r6, r3, #1
 8015578:	9b07      	ldr	r3, [sp, #28]
 801557a:	42b3      	cmp	r3, r6
 801557c:	bfbf      	itttt	lt
 801557e:	9b07      	ldrlt	r3, [sp, #28]
 8015580:	9607      	strlt	r6, [sp, #28]
 8015582:	1af2      	sublt	r2, r6, r3
 8015584:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015586:	bfb6      	itet	lt
 8015588:	189b      	addlt	r3, r3, r2
 801558a:	1b9e      	subge	r6, r3, r6
 801558c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801558e:	9b03      	ldr	r3, [sp, #12]
 8015590:	bfb8      	it	lt
 8015592:	2600      	movlt	r6, #0
 8015594:	2b00      	cmp	r3, #0
 8015596:	bfb7      	itett	lt
 8015598:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801559c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80155a0:	1a9d      	sublt	r5, r3, r2
 80155a2:	2300      	movlt	r3, #0
 80155a4:	e734      	b.n	8015410 <_dtoa_r+0x720>
 80155a6:	9e07      	ldr	r6, [sp, #28]
 80155a8:	9d04      	ldr	r5, [sp, #16]
 80155aa:	9f08      	ldr	r7, [sp, #32]
 80155ac:	e73b      	b.n	8015426 <_dtoa_r+0x736>
 80155ae:	9a07      	ldr	r2, [sp, #28]
 80155b0:	e767      	b.n	8015482 <_dtoa_r+0x792>
 80155b2:	9b06      	ldr	r3, [sp, #24]
 80155b4:	2b01      	cmp	r3, #1
 80155b6:	dc18      	bgt.n	80155ea <_dtoa_r+0x8fa>
 80155b8:	f1ba 0f00 	cmp.w	sl, #0
 80155bc:	d115      	bne.n	80155ea <_dtoa_r+0x8fa>
 80155be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155c2:	b993      	cbnz	r3, 80155ea <_dtoa_r+0x8fa>
 80155c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80155c8:	0d1b      	lsrs	r3, r3, #20
 80155ca:	051b      	lsls	r3, r3, #20
 80155cc:	b183      	cbz	r3, 80155f0 <_dtoa_r+0x900>
 80155ce:	9b04      	ldr	r3, [sp, #16]
 80155d0:	3301      	adds	r3, #1
 80155d2:	9304      	str	r3, [sp, #16]
 80155d4:	9b05      	ldr	r3, [sp, #20]
 80155d6:	3301      	adds	r3, #1
 80155d8:	9305      	str	r3, [sp, #20]
 80155da:	f04f 0801 	mov.w	r8, #1
 80155de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	f47f af6a 	bne.w	80154ba <_dtoa_r+0x7ca>
 80155e6:	2001      	movs	r0, #1
 80155e8:	e76f      	b.n	80154ca <_dtoa_r+0x7da>
 80155ea:	f04f 0800 	mov.w	r8, #0
 80155ee:	e7f6      	b.n	80155de <_dtoa_r+0x8ee>
 80155f0:	4698      	mov	r8, r3
 80155f2:	e7f4      	b.n	80155de <_dtoa_r+0x8ee>
 80155f4:	f43f af7d 	beq.w	80154f2 <_dtoa_r+0x802>
 80155f8:	4618      	mov	r0, r3
 80155fa:	301c      	adds	r0, #28
 80155fc:	e772      	b.n	80154e4 <_dtoa_r+0x7f4>
 80155fe:	9b03      	ldr	r3, [sp, #12]
 8015600:	2b00      	cmp	r3, #0
 8015602:	dc37      	bgt.n	8015674 <_dtoa_r+0x984>
 8015604:	9b06      	ldr	r3, [sp, #24]
 8015606:	2b02      	cmp	r3, #2
 8015608:	dd34      	ble.n	8015674 <_dtoa_r+0x984>
 801560a:	9b03      	ldr	r3, [sp, #12]
 801560c:	9302      	str	r3, [sp, #8]
 801560e:	9b02      	ldr	r3, [sp, #8]
 8015610:	b96b      	cbnz	r3, 801562e <_dtoa_r+0x93e>
 8015612:	4631      	mov	r1, r6
 8015614:	2205      	movs	r2, #5
 8015616:	4620      	mov	r0, r4
 8015618:	f000 fb16 	bl	8015c48 <__multadd>
 801561c:	4601      	mov	r1, r0
 801561e:	4606      	mov	r6, r0
 8015620:	ee18 0a10 	vmov	r0, s16
 8015624:	f000 fd30 	bl	8016088 <__mcmp>
 8015628:	2800      	cmp	r0, #0
 801562a:	f73f adbb 	bgt.w	80151a4 <_dtoa_r+0x4b4>
 801562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015630:	9d01      	ldr	r5, [sp, #4]
 8015632:	43db      	mvns	r3, r3
 8015634:	9300      	str	r3, [sp, #0]
 8015636:	f04f 0800 	mov.w	r8, #0
 801563a:	4631      	mov	r1, r6
 801563c:	4620      	mov	r0, r4
 801563e:	f000 fae1 	bl	8015c04 <_Bfree>
 8015642:	2f00      	cmp	r7, #0
 8015644:	f43f aea4 	beq.w	8015390 <_dtoa_r+0x6a0>
 8015648:	f1b8 0f00 	cmp.w	r8, #0
 801564c:	d005      	beq.n	801565a <_dtoa_r+0x96a>
 801564e:	45b8      	cmp	r8, r7
 8015650:	d003      	beq.n	801565a <_dtoa_r+0x96a>
 8015652:	4641      	mov	r1, r8
 8015654:	4620      	mov	r0, r4
 8015656:	f000 fad5 	bl	8015c04 <_Bfree>
 801565a:	4639      	mov	r1, r7
 801565c:	4620      	mov	r0, r4
 801565e:	f000 fad1 	bl	8015c04 <_Bfree>
 8015662:	e695      	b.n	8015390 <_dtoa_r+0x6a0>
 8015664:	2600      	movs	r6, #0
 8015666:	4637      	mov	r7, r6
 8015668:	e7e1      	b.n	801562e <_dtoa_r+0x93e>
 801566a:	9700      	str	r7, [sp, #0]
 801566c:	4637      	mov	r7, r6
 801566e:	e599      	b.n	80151a4 <_dtoa_r+0x4b4>
 8015670:	40240000 	.word	0x40240000
 8015674:	9b08      	ldr	r3, [sp, #32]
 8015676:	2b00      	cmp	r3, #0
 8015678:	f000 80ca 	beq.w	8015810 <_dtoa_r+0xb20>
 801567c:	9b03      	ldr	r3, [sp, #12]
 801567e:	9302      	str	r3, [sp, #8]
 8015680:	2d00      	cmp	r5, #0
 8015682:	dd05      	ble.n	8015690 <_dtoa_r+0x9a0>
 8015684:	4639      	mov	r1, r7
 8015686:	462a      	mov	r2, r5
 8015688:	4620      	mov	r0, r4
 801568a:	f000 fc8d 	bl	8015fa8 <__lshift>
 801568e:	4607      	mov	r7, r0
 8015690:	f1b8 0f00 	cmp.w	r8, #0
 8015694:	d05b      	beq.n	801574e <_dtoa_r+0xa5e>
 8015696:	6879      	ldr	r1, [r7, #4]
 8015698:	4620      	mov	r0, r4
 801569a:	f000 fa73 	bl	8015b84 <_Balloc>
 801569e:	4605      	mov	r5, r0
 80156a0:	b928      	cbnz	r0, 80156ae <_dtoa_r+0x9be>
 80156a2:	4b87      	ldr	r3, [pc, #540]	; (80158c0 <_dtoa_r+0xbd0>)
 80156a4:	4602      	mov	r2, r0
 80156a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80156aa:	f7ff bb3b 	b.w	8014d24 <_dtoa_r+0x34>
 80156ae:	693a      	ldr	r2, [r7, #16]
 80156b0:	3202      	adds	r2, #2
 80156b2:	0092      	lsls	r2, r2, #2
 80156b4:	f107 010c 	add.w	r1, r7, #12
 80156b8:	300c      	adds	r0, #12
 80156ba:	f7fe fae7 	bl	8013c8c <memcpy>
 80156be:	2201      	movs	r2, #1
 80156c0:	4629      	mov	r1, r5
 80156c2:	4620      	mov	r0, r4
 80156c4:	f000 fc70 	bl	8015fa8 <__lshift>
 80156c8:	9b01      	ldr	r3, [sp, #4]
 80156ca:	f103 0901 	add.w	r9, r3, #1
 80156ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80156d2:	4413      	add	r3, r2
 80156d4:	9305      	str	r3, [sp, #20]
 80156d6:	f00a 0301 	and.w	r3, sl, #1
 80156da:	46b8      	mov	r8, r7
 80156dc:	9304      	str	r3, [sp, #16]
 80156de:	4607      	mov	r7, r0
 80156e0:	4631      	mov	r1, r6
 80156e2:	ee18 0a10 	vmov	r0, s16
 80156e6:	f7ff fa77 	bl	8014bd8 <quorem>
 80156ea:	4641      	mov	r1, r8
 80156ec:	9002      	str	r0, [sp, #8]
 80156ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80156f2:	ee18 0a10 	vmov	r0, s16
 80156f6:	f000 fcc7 	bl	8016088 <__mcmp>
 80156fa:	463a      	mov	r2, r7
 80156fc:	9003      	str	r0, [sp, #12]
 80156fe:	4631      	mov	r1, r6
 8015700:	4620      	mov	r0, r4
 8015702:	f000 fcdd 	bl	80160c0 <__mdiff>
 8015706:	68c2      	ldr	r2, [r0, #12]
 8015708:	f109 3bff 	add.w	fp, r9, #4294967295
 801570c:	4605      	mov	r5, r0
 801570e:	bb02      	cbnz	r2, 8015752 <_dtoa_r+0xa62>
 8015710:	4601      	mov	r1, r0
 8015712:	ee18 0a10 	vmov	r0, s16
 8015716:	f000 fcb7 	bl	8016088 <__mcmp>
 801571a:	4602      	mov	r2, r0
 801571c:	4629      	mov	r1, r5
 801571e:	4620      	mov	r0, r4
 8015720:	9207      	str	r2, [sp, #28]
 8015722:	f000 fa6f 	bl	8015c04 <_Bfree>
 8015726:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801572a:	ea43 0102 	orr.w	r1, r3, r2
 801572e:	9b04      	ldr	r3, [sp, #16]
 8015730:	430b      	orrs	r3, r1
 8015732:	464d      	mov	r5, r9
 8015734:	d10f      	bne.n	8015756 <_dtoa_r+0xa66>
 8015736:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801573a:	d02a      	beq.n	8015792 <_dtoa_r+0xaa2>
 801573c:	9b03      	ldr	r3, [sp, #12]
 801573e:	2b00      	cmp	r3, #0
 8015740:	dd02      	ble.n	8015748 <_dtoa_r+0xa58>
 8015742:	9b02      	ldr	r3, [sp, #8]
 8015744:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015748:	f88b a000 	strb.w	sl, [fp]
 801574c:	e775      	b.n	801563a <_dtoa_r+0x94a>
 801574e:	4638      	mov	r0, r7
 8015750:	e7ba      	b.n	80156c8 <_dtoa_r+0x9d8>
 8015752:	2201      	movs	r2, #1
 8015754:	e7e2      	b.n	801571c <_dtoa_r+0xa2c>
 8015756:	9b03      	ldr	r3, [sp, #12]
 8015758:	2b00      	cmp	r3, #0
 801575a:	db04      	blt.n	8015766 <_dtoa_r+0xa76>
 801575c:	9906      	ldr	r1, [sp, #24]
 801575e:	430b      	orrs	r3, r1
 8015760:	9904      	ldr	r1, [sp, #16]
 8015762:	430b      	orrs	r3, r1
 8015764:	d122      	bne.n	80157ac <_dtoa_r+0xabc>
 8015766:	2a00      	cmp	r2, #0
 8015768:	ddee      	ble.n	8015748 <_dtoa_r+0xa58>
 801576a:	ee18 1a10 	vmov	r1, s16
 801576e:	2201      	movs	r2, #1
 8015770:	4620      	mov	r0, r4
 8015772:	f000 fc19 	bl	8015fa8 <__lshift>
 8015776:	4631      	mov	r1, r6
 8015778:	ee08 0a10 	vmov	s16, r0
 801577c:	f000 fc84 	bl	8016088 <__mcmp>
 8015780:	2800      	cmp	r0, #0
 8015782:	dc03      	bgt.n	801578c <_dtoa_r+0xa9c>
 8015784:	d1e0      	bne.n	8015748 <_dtoa_r+0xa58>
 8015786:	f01a 0f01 	tst.w	sl, #1
 801578a:	d0dd      	beq.n	8015748 <_dtoa_r+0xa58>
 801578c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015790:	d1d7      	bne.n	8015742 <_dtoa_r+0xa52>
 8015792:	2339      	movs	r3, #57	; 0x39
 8015794:	f88b 3000 	strb.w	r3, [fp]
 8015798:	462b      	mov	r3, r5
 801579a:	461d      	mov	r5, r3
 801579c:	3b01      	subs	r3, #1
 801579e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80157a2:	2a39      	cmp	r2, #57	; 0x39
 80157a4:	d071      	beq.n	801588a <_dtoa_r+0xb9a>
 80157a6:	3201      	adds	r2, #1
 80157a8:	701a      	strb	r2, [r3, #0]
 80157aa:	e746      	b.n	801563a <_dtoa_r+0x94a>
 80157ac:	2a00      	cmp	r2, #0
 80157ae:	dd07      	ble.n	80157c0 <_dtoa_r+0xad0>
 80157b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80157b4:	d0ed      	beq.n	8015792 <_dtoa_r+0xaa2>
 80157b6:	f10a 0301 	add.w	r3, sl, #1
 80157ba:	f88b 3000 	strb.w	r3, [fp]
 80157be:	e73c      	b.n	801563a <_dtoa_r+0x94a>
 80157c0:	9b05      	ldr	r3, [sp, #20]
 80157c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80157c6:	4599      	cmp	r9, r3
 80157c8:	d047      	beq.n	801585a <_dtoa_r+0xb6a>
 80157ca:	ee18 1a10 	vmov	r1, s16
 80157ce:	2300      	movs	r3, #0
 80157d0:	220a      	movs	r2, #10
 80157d2:	4620      	mov	r0, r4
 80157d4:	f000 fa38 	bl	8015c48 <__multadd>
 80157d8:	45b8      	cmp	r8, r7
 80157da:	ee08 0a10 	vmov	s16, r0
 80157de:	f04f 0300 	mov.w	r3, #0
 80157e2:	f04f 020a 	mov.w	r2, #10
 80157e6:	4641      	mov	r1, r8
 80157e8:	4620      	mov	r0, r4
 80157ea:	d106      	bne.n	80157fa <_dtoa_r+0xb0a>
 80157ec:	f000 fa2c 	bl	8015c48 <__multadd>
 80157f0:	4680      	mov	r8, r0
 80157f2:	4607      	mov	r7, r0
 80157f4:	f109 0901 	add.w	r9, r9, #1
 80157f8:	e772      	b.n	80156e0 <_dtoa_r+0x9f0>
 80157fa:	f000 fa25 	bl	8015c48 <__multadd>
 80157fe:	4639      	mov	r1, r7
 8015800:	4680      	mov	r8, r0
 8015802:	2300      	movs	r3, #0
 8015804:	220a      	movs	r2, #10
 8015806:	4620      	mov	r0, r4
 8015808:	f000 fa1e 	bl	8015c48 <__multadd>
 801580c:	4607      	mov	r7, r0
 801580e:	e7f1      	b.n	80157f4 <_dtoa_r+0xb04>
 8015810:	9b03      	ldr	r3, [sp, #12]
 8015812:	9302      	str	r3, [sp, #8]
 8015814:	9d01      	ldr	r5, [sp, #4]
 8015816:	ee18 0a10 	vmov	r0, s16
 801581a:	4631      	mov	r1, r6
 801581c:	f7ff f9dc 	bl	8014bd8 <quorem>
 8015820:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015824:	9b01      	ldr	r3, [sp, #4]
 8015826:	f805 ab01 	strb.w	sl, [r5], #1
 801582a:	1aea      	subs	r2, r5, r3
 801582c:	9b02      	ldr	r3, [sp, #8]
 801582e:	4293      	cmp	r3, r2
 8015830:	dd09      	ble.n	8015846 <_dtoa_r+0xb56>
 8015832:	ee18 1a10 	vmov	r1, s16
 8015836:	2300      	movs	r3, #0
 8015838:	220a      	movs	r2, #10
 801583a:	4620      	mov	r0, r4
 801583c:	f000 fa04 	bl	8015c48 <__multadd>
 8015840:	ee08 0a10 	vmov	s16, r0
 8015844:	e7e7      	b.n	8015816 <_dtoa_r+0xb26>
 8015846:	9b02      	ldr	r3, [sp, #8]
 8015848:	2b00      	cmp	r3, #0
 801584a:	bfc8      	it	gt
 801584c:	461d      	movgt	r5, r3
 801584e:	9b01      	ldr	r3, [sp, #4]
 8015850:	bfd8      	it	le
 8015852:	2501      	movle	r5, #1
 8015854:	441d      	add	r5, r3
 8015856:	f04f 0800 	mov.w	r8, #0
 801585a:	ee18 1a10 	vmov	r1, s16
 801585e:	2201      	movs	r2, #1
 8015860:	4620      	mov	r0, r4
 8015862:	f000 fba1 	bl	8015fa8 <__lshift>
 8015866:	4631      	mov	r1, r6
 8015868:	ee08 0a10 	vmov	s16, r0
 801586c:	f000 fc0c 	bl	8016088 <__mcmp>
 8015870:	2800      	cmp	r0, #0
 8015872:	dc91      	bgt.n	8015798 <_dtoa_r+0xaa8>
 8015874:	d102      	bne.n	801587c <_dtoa_r+0xb8c>
 8015876:	f01a 0f01 	tst.w	sl, #1
 801587a:	d18d      	bne.n	8015798 <_dtoa_r+0xaa8>
 801587c:	462b      	mov	r3, r5
 801587e:	461d      	mov	r5, r3
 8015880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015884:	2a30      	cmp	r2, #48	; 0x30
 8015886:	d0fa      	beq.n	801587e <_dtoa_r+0xb8e>
 8015888:	e6d7      	b.n	801563a <_dtoa_r+0x94a>
 801588a:	9a01      	ldr	r2, [sp, #4]
 801588c:	429a      	cmp	r2, r3
 801588e:	d184      	bne.n	801579a <_dtoa_r+0xaaa>
 8015890:	9b00      	ldr	r3, [sp, #0]
 8015892:	3301      	adds	r3, #1
 8015894:	9300      	str	r3, [sp, #0]
 8015896:	2331      	movs	r3, #49	; 0x31
 8015898:	7013      	strb	r3, [r2, #0]
 801589a:	e6ce      	b.n	801563a <_dtoa_r+0x94a>
 801589c:	4b09      	ldr	r3, [pc, #36]	; (80158c4 <_dtoa_r+0xbd4>)
 801589e:	f7ff ba95 	b.w	8014dcc <_dtoa_r+0xdc>
 80158a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	f47f aa6e 	bne.w	8014d86 <_dtoa_r+0x96>
 80158aa:	4b07      	ldr	r3, [pc, #28]	; (80158c8 <_dtoa_r+0xbd8>)
 80158ac:	f7ff ba8e 	b.w	8014dcc <_dtoa_r+0xdc>
 80158b0:	9b02      	ldr	r3, [sp, #8]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	dcae      	bgt.n	8015814 <_dtoa_r+0xb24>
 80158b6:	9b06      	ldr	r3, [sp, #24]
 80158b8:	2b02      	cmp	r3, #2
 80158ba:	f73f aea8 	bgt.w	801560e <_dtoa_r+0x91e>
 80158be:	e7a9      	b.n	8015814 <_dtoa_r+0xb24>
 80158c0:	08016e20 	.word	0x08016e20
 80158c4:	08016c7c 	.word	0x08016c7c
 80158c8:	08016da1 	.word	0x08016da1

080158cc <__sflush_r>:
 80158cc:	898a      	ldrh	r2, [r1, #12]
 80158ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d2:	4605      	mov	r5, r0
 80158d4:	0710      	lsls	r0, r2, #28
 80158d6:	460c      	mov	r4, r1
 80158d8:	d458      	bmi.n	801598c <__sflush_r+0xc0>
 80158da:	684b      	ldr	r3, [r1, #4]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	dc05      	bgt.n	80158ec <__sflush_r+0x20>
 80158e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	dc02      	bgt.n	80158ec <__sflush_r+0x20>
 80158e6:	2000      	movs	r0, #0
 80158e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158ee:	2e00      	cmp	r6, #0
 80158f0:	d0f9      	beq.n	80158e6 <__sflush_r+0x1a>
 80158f2:	2300      	movs	r3, #0
 80158f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80158f8:	682f      	ldr	r7, [r5, #0]
 80158fa:	602b      	str	r3, [r5, #0]
 80158fc:	d032      	beq.n	8015964 <__sflush_r+0x98>
 80158fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015900:	89a3      	ldrh	r3, [r4, #12]
 8015902:	075a      	lsls	r2, r3, #29
 8015904:	d505      	bpl.n	8015912 <__sflush_r+0x46>
 8015906:	6863      	ldr	r3, [r4, #4]
 8015908:	1ac0      	subs	r0, r0, r3
 801590a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801590c:	b10b      	cbz	r3, 8015912 <__sflush_r+0x46>
 801590e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015910:	1ac0      	subs	r0, r0, r3
 8015912:	2300      	movs	r3, #0
 8015914:	4602      	mov	r2, r0
 8015916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015918:	6a21      	ldr	r1, [r4, #32]
 801591a:	4628      	mov	r0, r5
 801591c:	47b0      	blx	r6
 801591e:	1c43      	adds	r3, r0, #1
 8015920:	89a3      	ldrh	r3, [r4, #12]
 8015922:	d106      	bne.n	8015932 <__sflush_r+0x66>
 8015924:	6829      	ldr	r1, [r5, #0]
 8015926:	291d      	cmp	r1, #29
 8015928:	d82c      	bhi.n	8015984 <__sflush_r+0xb8>
 801592a:	4a2a      	ldr	r2, [pc, #168]	; (80159d4 <__sflush_r+0x108>)
 801592c:	40ca      	lsrs	r2, r1
 801592e:	07d6      	lsls	r6, r2, #31
 8015930:	d528      	bpl.n	8015984 <__sflush_r+0xb8>
 8015932:	2200      	movs	r2, #0
 8015934:	6062      	str	r2, [r4, #4]
 8015936:	04d9      	lsls	r1, r3, #19
 8015938:	6922      	ldr	r2, [r4, #16]
 801593a:	6022      	str	r2, [r4, #0]
 801593c:	d504      	bpl.n	8015948 <__sflush_r+0x7c>
 801593e:	1c42      	adds	r2, r0, #1
 8015940:	d101      	bne.n	8015946 <__sflush_r+0x7a>
 8015942:	682b      	ldr	r3, [r5, #0]
 8015944:	b903      	cbnz	r3, 8015948 <__sflush_r+0x7c>
 8015946:	6560      	str	r0, [r4, #84]	; 0x54
 8015948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801594a:	602f      	str	r7, [r5, #0]
 801594c:	2900      	cmp	r1, #0
 801594e:	d0ca      	beq.n	80158e6 <__sflush_r+0x1a>
 8015950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015954:	4299      	cmp	r1, r3
 8015956:	d002      	beq.n	801595e <__sflush_r+0x92>
 8015958:	4628      	mov	r0, r5
 801595a:	f7fe f9ad 	bl	8013cb8 <_free_r>
 801595e:	2000      	movs	r0, #0
 8015960:	6360      	str	r0, [r4, #52]	; 0x34
 8015962:	e7c1      	b.n	80158e8 <__sflush_r+0x1c>
 8015964:	6a21      	ldr	r1, [r4, #32]
 8015966:	2301      	movs	r3, #1
 8015968:	4628      	mov	r0, r5
 801596a:	47b0      	blx	r6
 801596c:	1c41      	adds	r1, r0, #1
 801596e:	d1c7      	bne.n	8015900 <__sflush_r+0x34>
 8015970:	682b      	ldr	r3, [r5, #0]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d0c4      	beq.n	8015900 <__sflush_r+0x34>
 8015976:	2b1d      	cmp	r3, #29
 8015978:	d001      	beq.n	801597e <__sflush_r+0xb2>
 801597a:	2b16      	cmp	r3, #22
 801597c:	d101      	bne.n	8015982 <__sflush_r+0xb6>
 801597e:	602f      	str	r7, [r5, #0]
 8015980:	e7b1      	b.n	80158e6 <__sflush_r+0x1a>
 8015982:	89a3      	ldrh	r3, [r4, #12]
 8015984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015988:	81a3      	strh	r3, [r4, #12]
 801598a:	e7ad      	b.n	80158e8 <__sflush_r+0x1c>
 801598c:	690f      	ldr	r7, [r1, #16]
 801598e:	2f00      	cmp	r7, #0
 8015990:	d0a9      	beq.n	80158e6 <__sflush_r+0x1a>
 8015992:	0793      	lsls	r3, r2, #30
 8015994:	680e      	ldr	r6, [r1, #0]
 8015996:	bf08      	it	eq
 8015998:	694b      	ldreq	r3, [r1, #20]
 801599a:	600f      	str	r7, [r1, #0]
 801599c:	bf18      	it	ne
 801599e:	2300      	movne	r3, #0
 80159a0:	eba6 0807 	sub.w	r8, r6, r7
 80159a4:	608b      	str	r3, [r1, #8]
 80159a6:	f1b8 0f00 	cmp.w	r8, #0
 80159aa:	dd9c      	ble.n	80158e6 <__sflush_r+0x1a>
 80159ac:	6a21      	ldr	r1, [r4, #32]
 80159ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159b0:	4643      	mov	r3, r8
 80159b2:	463a      	mov	r2, r7
 80159b4:	4628      	mov	r0, r5
 80159b6:	47b0      	blx	r6
 80159b8:	2800      	cmp	r0, #0
 80159ba:	dc06      	bgt.n	80159ca <__sflush_r+0xfe>
 80159bc:	89a3      	ldrh	r3, [r4, #12]
 80159be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159c2:	81a3      	strh	r3, [r4, #12]
 80159c4:	f04f 30ff 	mov.w	r0, #4294967295
 80159c8:	e78e      	b.n	80158e8 <__sflush_r+0x1c>
 80159ca:	4407      	add	r7, r0
 80159cc:	eba8 0800 	sub.w	r8, r8, r0
 80159d0:	e7e9      	b.n	80159a6 <__sflush_r+0xda>
 80159d2:	bf00      	nop
 80159d4:	20400001 	.word	0x20400001

080159d8 <_fflush_r>:
 80159d8:	b538      	push	{r3, r4, r5, lr}
 80159da:	690b      	ldr	r3, [r1, #16]
 80159dc:	4605      	mov	r5, r0
 80159de:	460c      	mov	r4, r1
 80159e0:	b913      	cbnz	r3, 80159e8 <_fflush_r+0x10>
 80159e2:	2500      	movs	r5, #0
 80159e4:	4628      	mov	r0, r5
 80159e6:	bd38      	pop	{r3, r4, r5, pc}
 80159e8:	b118      	cbz	r0, 80159f2 <_fflush_r+0x1a>
 80159ea:	6983      	ldr	r3, [r0, #24]
 80159ec:	b90b      	cbnz	r3, 80159f2 <_fflush_r+0x1a>
 80159ee:	f7fe f883 	bl	8013af8 <__sinit>
 80159f2:	4b14      	ldr	r3, [pc, #80]	; (8015a44 <_fflush_r+0x6c>)
 80159f4:	429c      	cmp	r4, r3
 80159f6:	d11b      	bne.n	8015a30 <_fflush_r+0x58>
 80159f8:	686c      	ldr	r4, [r5, #4]
 80159fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d0ef      	beq.n	80159e2 <_fflush_r+0xa>
 8015a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015a04:	07d0      	lsls	r0, r2, #31
 8015a06:	d404      	bmi.n	8015a12 <_fflush_r+0x3a>
 8015a08:	0599      	lsls	r1, r3, #22
 8015a0a:	d402      	bmi.n	8015a12 <_fflush_r+0x3a>
 8015a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a0e:	f7ed fec7 	bl	80037a0 <__retarget_lock_acquire_recursive>
 8015a12:	4628      	mov	r0, r5
 8015a14:	4621      	mov	r1, r4
 8015a16:	f7ff ff59 	bl	80158cc <__sflush_r>
 8015a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015a1c:	07da      	lsls	r2, r3, #31
 8015a1e:	4605      	mov	r5, r0
 8015a20:	d4e0      	bmi.n	80159e4 <_fflush_r+0xc>
 8015a22:	89a3      	ldrh	r3, [r4, #12]
 8015a24:	059b      	lsls	r3, r3, #22
 8015a26:	d4dd      	bmi.n	80159e4 <_fflush_r+0xc>
 8015a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015a2a:	f7ed fecd 	bl	80037c8 <__retarget_lock_release_recursive>
 8015a2e:	e7d9      	b.n	80159e4 <_fflush_r+0xc>
 8015a30:	4b05      	ldr	r3, [pc, #20]	; (8015a48 <_fflush_r+0x70>)
 8015a32:	429c      	cmp	r4, r3
 8015a34:	d101      	bne.n	8015a3a <_fflush_r+0x62>
 8015a36:	68ac      	ldr	r4, [r5, #8]
 8015a38:	e7df      	b.n	80159fa <_fflush_r+0x22>
 8015a3a:	4b04      	ldr	r3, [pc, #16]	; (8015a4c <_fflush_r+0x74>)
 8015a3c:	429c      	cmp	r4, r3
 8015a3e:	bf08      	it	eq
 8015a40:	68ec      	ldreq	r4, [r5, #12]
 8015a42:	e7da      	b.n	80159fa <_fflush_r+0x22>
 8015a44:	08016c28 	.word	0x08016c28
 8015a48:	08016c48 	.word	0x08016c48
 8015a4c:	08016c08 	.word	0x08016c08

08015a50 <_localeconv_r>:
 8015a50:	4800      	ldr	r0, [pc, #0]	; (8015a54 <_localeconv_r+0x4>)
 8015a52:	4770      	bx	lr
 8015a54:	20000278 	.word	0x20000278

08015a58 <_lseek_r>:
 8015a58:	b538      	push	{r3, r4, r5, lr}
 8015a5a:	4d07      	ldr	r5, [pc, #28]	; (8015a78 <_lseek_r+0x20>)
 8015a5c:	4604      	mov	r4, r0
 8015a5e:	4608      	mov	r0, r1
 8015a60:	4611      	mov	r1, r2
 8015a62:	2200      	movs	r2, #0
 8015a64:	602a      	str	r2, [r5, #0]
 8015a66:	461a      	mov	r2, r3
 8015a68:	f7ed fa26 	bl	8002eb8 <_lseek>
 8015a6c:	1c43      	adds	r3, r0, #1
 8015a6e:	d102      	bne.n	8015a76 <_lseek_r+0x1e>
 8015a70:	682b      	ldr	r3, [r5, #0]
 8015a72:	b103      	cbz	r3, 8015a76 <_lseek_r+0x1e>
 8015a74:	6023      	str	r3, [r4, #0]
 8015a76:	bd38      	pop	{r3, r4, r5, pc}
 8015a78:	20006f14 	.word	0x20006f14

08015a7c <__swhatbuf_r>:
 8015a7c:	b570      	push	{r4, r5, r6, lr}
 8015a7e:	460e      	mov	r6, r1
 8015a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a84:	2900      	cmp	r1, #0
 8015a86:	b096      	sub	sp, #88	; 0x58
 8015a88:	4614      	mov	r4, r2
 8015a8a:	461d      	mov	r5, r3
 8015a8c:	da08      	bge.n	8015aa0 <__swhatbuf_r+0x24>
 8015a8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015a92:	2200      	movs	r2, #0
 8015a94:	602a      	str	r2, [r5, #0]
 8015a96:	061a      	lsls	r2, r3, #24
 8015a98:	d410      	bmi.n	8015abc <__swhatbuf_r+0x40>
 8015a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a9e:	e00e      	b.n	8015abe <__swhatbuf_r+0x42>
 8015aa0:	466a      	mov	r2, sp
 8015aa2:	f000 fdb3 	bl	801660c <_fstat_r>
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	dbf1      	blt.n	8015a8e <__swhatbuf_r+0x12>
 8015aaa:	9a01      	ldr	r2, [sp, #4]
 8015aac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015ab0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ab4:	425a      	negs	r2, r3
 8015ab6:	415a      	adcs	r2, r3
 8015ab8:	602a      	str	r2, [r5, #0]
 8015aba:	e7ee      	b.n	8015a9a <__swhatbuf_r+0x1e>
 8015abc:	2340      	movs	r3, #64	; 0x40
 8015abe:	2000      	movs	r0, #0
 8015ac0:	6023      	str	r3, [r4, #0]
 8015ac2:	b016      	add	sp, #88	; 0x58
 8015ac4:	bd70      	pop	{r4, r5, r6, pc}
	...

08015ac8 <__smakebuf_r>:
 8015ac8:	898b      	ldrh	r3, [r1, #12]
 8015aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015acc:	079d      	lsls	r5, r3, #30
 8015ace:	4606      	mov	r6, r0
 8015ad0:	460c      	mov	r4, r1
 8015ad2:	d507      	bpl.n	8015ae4 <__smakebuf_r+0x1c>
 8015ad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ad8:	6023      	str	r3, [r4, #0]
 8015ada:	6123      	str	r3, [r4, #16]
 8015adc:	2301      	movs	r3, #1
 8015ade:	6163      	str	r3, [r4, #20]
 8015ae0:	b002      	add	sp, #8
 8015ae2:	bd70      	pop	{r4, r5, r6, pc}
 8015ae4:	ab01      	add	r3, sp, #4
 8015ae6:	466a      	mov	r2, sp
 8015ae8:	f7ff ffc8 	bl	8015a7c <__swhatbuf_r>
 8015aec:	9900      	ldr	r1, [sp, #0]
 8015aee:	4605      	mov	r5, r0
 8015af0:	4630      	mov	r0, r6
 8015af2:	f7fe f94d 	bl	8013d90 <_malloc_r>
 8015af6:	b948      	cbnz	r0, 8015b0c <__smakebuf_r+0x44>
 8015af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015afc:	059a      	lsls	r2, r3, #22
 8015afe:	d4ef      	bmi.n	8015ae0 <__smakebuf_r+0x18>
 8015b00:	f023 0303 	bic.w	r3, r3, #3
 8015b04:	f043 0302 	orr.w	r3, r3, #2
 8015b08:	81a3      	strh	r3, [r4, #12]
 8015b0a:	e7e3      	b.n	8015ad4 <__smakebuf_r+0xc>
 8015b0c:	4b0d      	ldr	r3, [pc, #52]	; (8015b44 <__smakebuf_r+0x7c>)
 8015b0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b10:	89a3      	ldrh	r3, [r4, #12]
 8015b12:	6020      	str	r0, [r4, #0]
 8015b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b18:	81a3      	strh	r3, [r4, #12]
 8015b1a:	9b00      	ldr	r3, [sp, #0]
 8015b1c:	6163      	str	r3, [r4, #20]
 8015b1e:	9b01      	ldr	r3, [sp, #4]
 8015b20:	6120      	str	r0, [r4, #16]
 8015b22:	b15b      	cbz	r3, 8015b3c <__smakebuf_r+0x74>
 8015b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b28:	4630      	mov	r0, r6
 8015b2a:	f000 fd81 	bl	8016630 <_isatty_r>
 8015b2e:	b128      	cbz	r0, 8015b3c <__smakebuf_r+0x74>
 8015b30:	89a3      	ldrh	r3, [r4, #12]
 8015b32:	f023 0303 	bic.w	r3, r3, #3
 8015b36:	f043 0301 	orr.w	r3, r3, #1
 8015b3a:	81a3      	strh	r3, [r4, #12]
 8015b3c:	89a0      	ldrh	r0, [r4, #12]
 8015b3e:	4305      	orrs	r5, r0
 8015b40:	81a5      	strh	r5, [r4, #12]
 8015b42:	e7cd      	b.n	8015ae0 <__smakebuf_r+0x18>
 8015b44:	08013a91 	.word	0x08013a91

08015b48 <__ascii_mbtowc>:
 8015b48:	b082      	sub	sp, #8
 8015b4a:	b901      	cbnz	r1, 8015b4e <__ascii_mbtowc+0x6>
 8015b4c:	a901      	add	r1, sp, #4
 8015b4e:	b142      	cbz	r2, 8015b62 <__ascii_mbtowc+0x1a>
 8015b50:	b14b      	cbz	r3, 8015b66 <__ascii_mbtowc+0x1e>
 8015b52:	7813      	ldrb	r3, [r2, #0]
 8015b54:	600b      	str	r3, [r1, #0]
 8015b56:	7812      	ldrb	r2, [r2, #0]
 8015b58:	1e10      	subs	r0, r2, #0
 8015b5a:	bf18      	it	ne
 8015b5c:	2001      	movne	r0, #1
 8015b5e:	b002      	add	sp, #8
 8015b60:	4770      	bx	lr
 8015b62:	4610      	mov	r0, r2
 8015b64:	e7fb      	b.n	8015b5e <__ascii_mbtowc+0x16>
 8015b66:	f06f 0001 	mvn.w	r0, #1
 8015b6a:	e7f8      	b.n	8015b5e <__ascii_mbtowc+0x16>

08015b6c <__malloc_lock>:
 8015b6c:	4801      	ldr	r0, [pc, #4]	; (8015b74 <__malloc_lock+0x8>)
 8015b6e:	f7ed be17 	b.w	80037a0 <__retarget_lock_acquire_recursive>
 8015b72:	bf00      	nop
 8015b74:	20000664 	.word	0x20000664

08015b78 <__malloc_unlock>:
 8015b78:	4801      	ldr	r0, [pc, #4]	; (8015b80 <__malloc_unlock+0x8>)
 8015b7a:	f7ed be25 	b.w	80037c8 <__retarget_lock_release_recursive>
 8015b7e:	bf00      	nop
 8015b80:	20000664 	.word	0x20000664

08015b84 <_Balloc>:
 8015b84:	b570      	push	{r4, r5, r6, lr}
 8015b86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b88:	4604      	mov	r4, r0
 8015b8a:	460d      	mov	r5, r1
 8015b8c:	b976      	cbnz	r6, 8015bac <_Balloc+0x28>
 8015b8e:	2010      	movs	r0, #16
 8015b90:	f7fe f874 	bl	8013c7c <malloc>
 8015b94:	4602      	mov	r2, r0
 8015b96:	6260      	str	r0, [r4, #36]	; 0x24
 8015b98:	b920      	cbnz	r0, 8015ba4 <_Balloc+0x20>
 8015b9a:	4b18      	ldr	r3, [pc, #96]	; (8015bfc <_Balloc+0x78>)
 8015b9c:	4818      	ldr	r0, [pc, #96]	; (8015c00 <_Balloc+0x7c>)
 8015b9e:	2166      	movs	r1, #102	; 0x66
 8015ba0:	f000 fd04 	bl	80165ac <__assert_func>
 8015ba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ba8:	6006      	str	r6, [r0, #0]
 8015baa:	60c6      	str	r6, [r0, #12]
 8015bac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015bae:	68f3      	ldr	r3, [r6, #12]
 8015bb0:	b183      	cbz	r3, 8015bd4 <_Balloc+0x50>
 8015bb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bb4:	68db      	ldr	r3, [r3, #12]
 8015bb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015bba:	b9b8      	cbnz	r0, 8015bec <_Balloc+0x68>
 8015bbc:	2101      	movs	r1, #1
 8015bbe:	fa01 f605 	lsl.w	r6, r1, r5
 8015bc2:	1d72      	adds	r2, r6, #5
 8015bc4:	0092      	lsls	r2, r2, #2
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	f000 fb60 	bl	801628c <_calloc_r>
 8015bcc:	b160      	cbz	r0, 8015be8 <_Balloc+0x64>
 8015bce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015bd2:	e00e      	b.n	8015bf2 <_Balloc+0x6e>
 8015bd4:	2221      	movs	r2, #33	; 0x21
 8015bd6:	2104      	movs	r1, #4
 8015bd8:	4620      	mov	r0, r4
 8015bda:	f000 fb57 	bl	801628c <_calloc_r>
 8015bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015be0:	60f0      	str	r0, [r6, #12]
 8015be2:	68db      	ldr	r3, [r3, #12]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d1e4      	bne.n	8015bb2 <_Balloc+0x2e>
 8015be8:	2000      	movs	r0, #0
 8015bea:	bd70      	pop	{r4, r5, r6, pc}
 8015bec:	6802      	ldr	r2, [r0, #0]
 8015bee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015bf8:	e7f7      	b.n	8015bea <_Balloc+0x66>
 8015bfa:	bf00      	nop
 8015bfc:	08016dae 	.word	0x08016dae
 8015c00:	08016e3b 	.word	0x08016e3b

08015c04 <_Bfree>:
 8015c04:	b570      	push	{r4, r5, r6, lr}
 8015c06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015c08:	4605      	mov	r5, r0
 8015c0a:	460c      	mov	r4, r1
 8015c0c:	b976      	cbnz	r6, 8015c2c <_Bfree+0x28>
 8015c0e:	2010      	movs	r0, #16
 8015c10:	f7fe f834 	bl	8013c7c <malloc>
 8015c14:	4602      	mov	r2, r0
 8015c16:	6268      	str	r0, [r5, #36]	; 0x24
 8015c18:	b920      	cbnz	r0, 8015c24 <_Bfree+0x20>
 8015c1a:	4b09      	ldr	r3, [pc, #36]	; (8015c40 <_Bfree+0x3c>)
 8015c1c:	4809      	ldr	r0, [pc, #36]	; (8015c44 <_Bfree+0x40>)
 8015c1e:	218a      	movs	r1, #138	; 0x8a
 8015c20:	f000 fcc4 	bl	80165ac <__assert_func>
 8015c24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c28:	6006      	str	r6, [r0, #0]
 8015c2a:	60c6      	str	r6, [r0, #12]
 8015c2c:	b13c      	cbz	r4, 8015c3e <_Bfree+0x3a>
 8015c2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015c30:	6862      	ldr	r2, [r4, #4]
 8015c32:	68db      	ldr	r3, [r3, #12]
 8015c34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c38:	6021      	str	r1, [r4, #0]
 8015c3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015c3e:	bd70      	pop	{r4, r5, r6, pc}
 8015c40:	08016dae 	.word	0x08016dae
 8015c44:	08016e3b 	.word	0x08016e3b

08015c48 <__multadd>:
 8015c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c4c:	690d      	ldr	r5, [r1, #16]
 8015c4e:	4607      	mov	r7, r0
 8015c50:	460c      	mov	r4, r1
 8015c52:	461e      	mov	r6, r3
 8015c54:	f101 0c14 	add.w	ip, r1, #20
 8015c58:	2000      	movs	r0, #0
 8015c5a:	f8dc 3000 	ldr.w	r3, [ip]
 8015c5e:	b299      	uxth	r1, r3
 8015c60:	fb02 6101 	mla	r1, r2, r1, r6
 8015c64:	0c1e      	lsrs	r6, r3, #16
 8015c66:	0c0b      	lsrs	r3, r1, #16
 8015c68:	fb02 3306 	mla	r3, r2, r6, r3
 8015c6c:	b289      	uxth	r1, r1
 8015c6e:	3001      	adds	r0, #1
 8015c70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015c74:	4285      	cmp	r5, r0
 8015c76:	f84c 1b04 	str.w	r1, [ip], #4
 8015c7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015c7e:	dcec      	bgt.n	8015c5a <__multadd+0x12>
 8015c80:	b30e      	cbz	r6, 8015cc6 <__multadd+0x7e>
 8015c82:	68a3      	ldr	r3, [r4, #8]
 8015c84:	42ab      	cmp	r3, r5
 8015c86:	dc19      	bgt.n	8015cbc <__multadd+0x74>
 8015c88:	6861      	ldr	r1, [r4, #4]
 8015c8a:	4638      	mov	r0, r7
 8015c8c:	3101      	adds	r1, #1
 8015c8e:	f7ff ff79 	bl	8015b84 <_Balloc>
 8015c92:	4680      	mov	r8, r0
 8015c94:	b928      	cbnz	r0, 8015ca2 <__multadd+0x5a>
 8015c96:	4602      	mov	r2, r0
 8015c98:	4b0c      	ldr	r3, [pc, #48]	; (8015ccc <__multadd+0x84>)
 8015c9a:	480d      	ldr	r0, [pc, #52]	; (8015cd0 <__multadd+0x88>)
 8015c9c:	21b5      	movs	r1, #181	; 0xb5
 8015c9e:	f000 fc85 	bl	80165ac <__assert_func>
 8015ca2:	6922      	ldr	r2, [r4, #16]
 8015ca4:	3202      	adds	r2, #2
 8015ca6:	f104 010c 	add.w	r1, r4, #12
 8015caa:	0092      	lsls	r2, r2, #2
 8015cac:	300c      	adds	r0, #12
 8015cae:	f7fd ffed 	bl	8013c8c <memcpy>
 8015cb2:	4621      	mov	r1, r4
 8015cb4:	4638      	mov	r0, r7
 8015cb6:	f7ff ffa5 	bl	8015c04 <_Bfree>
 8015cba:	4644      	mov	r4, r8
 8015cbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015cc0:	3501      	adds	r5, #1
 8015cc2:	615e      	str	r6, [r3, #20]
 8015cc4:	6125      	str	r5, [r4, #16]
 8015cc6:	4620      	mov	r0, r4
 8015cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ccc:	08016e20 	.word	0x08016e20
 8015cd0:	08016e3b 	.word	0x08016e3b

08015cd4 <__hi0bits>:
 8015cd4:	0c03      	lsrs	r3, r0, #16
 8015cd6:	041b      	lsls	r3, r3, #16
 8015cd8:	b9d3      	cbnz	r3, 8015d10 <__hi0bits+0x3c>
 8015cda:	0400      	lsls	r0, r0, #16
 8015cdc:	2310      	movs	r3, #16
 8015cde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015ce2:	bf04      	itt	eq
 8015ce4:	0200      	lsleq	r0, r0, #8
 8015ce6:	3308      	addeq	r3, #8
 8015ce8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015cec:	bf04      	itt	eq
 8015cee:	0100      	lsleq	r0, r0, #4
 8015cf0:	3304      	addeq	r3, #4
 8015cf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015cf6:	bf04      	itt	eq
 8015cf8:	0080      	lsleq	r0, r0, #2
 8015cfa:	3302      	addeq	r3, #2
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	db05      	blt.n	8015d0c <__hi0bits+0x38>
 8015d00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015d04:	f103 0301 	add.w	r3, r3, #1
 8015d08:	bf08      	it	eq
 8015d0a:	2320      	moveq	r3, #32
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	4770      	bx	lr
 8015d10:	2300      	movs	r3, #0
 8015d12:	e7e4      	b.n	8015cde <__hi0bits+0xa>

08015d14 <__lo0bits>:
 8015d14:	6803      	ldr	r3, [r0, #0]
 8015d16:	f013 0207 	ands.w	r2, r3, #7
 8015d1a:	4601      	mov	r1, r0
 8015d1c:	d00b      	beq.n	8015d36 <__lo0bits+0x22>
 8015d1e:	07da      	lsls	r2, r3, #31
 8015d20:	d423      	bmi.n	8015d6a <__lo0bits+0x56>
 8015d22:	0798      	lsls	r0, r3, #30
 8015d24:	bf49      	itett	mi
 8015d26:	085b      	lsrmi	r3, r3, #1
 8015d28:	089b      	lsrpl	r3, r3, #2
 8015d2a:	2001      	movmi	r0, #1
 8015d2c:	600b      	strmi	r3, [r1, #0]
 8015d2e:	bf5c      	itt	pl
 8015d30:	600b      	strpl	r3, [r1, #0]
 8015d32:	2002      	movpl	r0, #2
 8015d34:	4770      	bx	lr
 8015d36:	b298      	uxth	r0, r3
 8015d38:	b9a8      	cbnz	r0, 8015d66 <__lo0bits+0x52>
 8015d3a:	0c1b      	lsrs	r3, r3, #16
 8015d3c:	2010      	movs	r0, #16
 8015d3e:	b2da      	uxtb	r2, r3
 8015d40:	b90a      	cbnz	r2, 8015d46 <__lo0bits+0x32>
 8015d42:	3008      	adds	r0, #8
 8015d44:	0a1b      	lsrs	r3, r3, #8
 8015d46:	071a      	lsls	r2, r3, #28
 8015d48:	bf04      	itt	eq
 8015d4a:	091b      	lsreq	r3, r3, #4
 8015d4c:	3004      	addeq	r0, #4
 8015d4e:	079a      	lsls	r2, r3, #30
 8015d50:	bf04      	itt	eq
 8015d52:	089b      	lsreq	r3, r3, #2
 8015d54:	3002      	addeq	r0, #2
 8015d56:	07da      	lsls	r2, r3, #31
 8015d58:	d403      	bmi.n	8015d62 <__lo0bits+0x4e>
 8015d5a:	085b      	lsrs	r3, r3, #1
 8015d5c:	f100 0001 	add.w	r0, r0, #1
 8015d60:	d005      	beq.n	8015d6e <__lo0bits+0x5a>
 8015d62:	600b      	str	r3, [r1, #0]
 8015d64:	4770      	bx	lr
 8015d66:	4610      	mov	r0, r2
 8015d68:	e7e9      	b.n	8015d3e <__lo0bits+0x2a>
 8015d6a:	2000      	movs	r0, #0
 8015d6c:	4770      	bx	lr
 8015d6e:	2020      	movs	r0, #32
 8015d70:	4770      	bx	lr
	...

08015d74 <__i2b>:
 8015d74:	b510      	push	{r4, lr}
 8015d76:	460c      	mov	r4, r1
 8015d78:	2101      	movs	r1, #1
 8015d7a:	f7ff ff03 	bl	8015b84 <_Balloc>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	b928      	cbnz	r0, 8015d8e <__i2b+0x1a>
 8015d82:	4b05      	ldr	r3, [pc, #20]	; (8015d98 <__i2b+0x24>)
 8015d84:	4805      	ldr	r0, [pc, #20]	; (8015d9c <__i2b+0x28>)
 8015d86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015d8a:	f000 fc0f 	bl	80165ac <__assert_func>
 8015d8e:	2301      	movs	r3, #1
 8015d90:	6144      	str	r4, [r0, #20]
 8015d92:	6103      	str	r3, [r0, #16]
 8015d94:	bd10      	pop	{r4, pc}
 8015d96:	bf00      	nop
 8015d98:	08016e20 	.word	0x08016e20
 8015d9c:	08016e3b 	.word	0x08016e3b

08015da0 <__multiply>:
 8015da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da4:	4691      	mov	r9, r2
 8015da6:	690a      	ldr	r2, [r1, #16]
 8015da8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015dac:	429a      	cmp	r2, r3
 8015dae:	bfb8      	it	lt
 8015db0:	460b      	movlt	r3, r1
 8015db2:	460c      	mov	r4, r1
 8015db4:	bfbc      	itt	lt
 8015db6:	464c      	movlt	r4, r9
 8015db8:	4699      	movlt	r9, r3
 8015dba:	6927      	ldr	r7, [r4, #16]
 8015dbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015dc0:	68a3      	ldr	r3, [r4, #8]
 8015dc2:	6861      	ldr	r1, [r4, #4]
 8015dc4:	eb07 060a 	add.w	r6, r7, sl
 8015dc8:	42b3      	cmp	r3, r6
 8015dca:	b085      	sub	sp, #20
 8015dcc:	bfb8      	it	lt
 8015dce:	3101      	addlt	r1, #1
 8015dd0:	f7ff fed8 	bl	8015b84 <_Balloc>
 8015dd4:	b930      	cbnz	r0, 8015de4 <__multiply+0x44>
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	4b44      	ldr	r3, [pc, #272]	; (8015eec <__multiply+0x14c>)
 8015dda:	4845      	ldr	r0, [pc, #276]	; (8015ef0 <__multiply+0x150>)
 8015ddc:	f240 115d 	movw	r1, #349	; 0x15d
 8015de0:	f000 fbe4 	bl	80165ac <__assert_func>
 8015de4:	f100 0514 	add.w	r5, r0, #20
 8015de8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015dec:	462b      	mov	r3, r5
 8015dee:	2200      	movs	r2, #0
 8015df0:	4543      	cmp	r3, r8
 8015df2:	d321      	bcc.n	8015e38 <__multiply+0x98>
 8015df4:	f104 0314 	add.w	r3, r4, #20
 8015df8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015dfc:	f109 0314 	add.w	r3, r9, #20
 8015e00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015e04:	9202      	str	r2, [sp, #8]
 8015e06:	1b3a      	subs	r2, r7, r4
 8015e08:	3a15      	subs	r2, #21
 8015e0a:	f022 0203 	bic.w	r2, r2, #3
 8015e0e:	3204      	adds	r2, #4
 8015e10:	f104 0115 	add.w	r1, r4, #21
 8015e14:	428f      	cmp	r7, r1
 8015e16:	bf38      	it	cc
 8015e18:	2204      	movcc	r2, #4
 8015e1a:	9201      	str	r2, [sp, #4]
 8015e1c:	9a02      	ldr	r2, [sp, #8]
 8015e1e:	9303      	str	r3, [sp, #12]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d80c      	bhi.n	8015e3e <__multiply+0x9e>
 8015e24:	2e00      	cmp	r6, #0
 8015e26:	dd03      	ble.n	8015e30 <__multiply+0x90>
 8015e28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d05a      	beq.n	8015ee6 <__multiply+0x146>
 8015e30:	6106      	str	r6, [r0, #16]
 8015e32:	b005      	add	sp, #20
 8015e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e38:	f843 2b04 	str.w	r2, [r3], #4
 8015e3c:	e7d8      	b.n	8015df0 <__multiply+0x50>
 8015e3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015e42:	f1ba 0f00 	cmp.w	sl, #0
 8015e46:	d024      	beq.n	8015e92 <__multiply+0xf2>
 8015e48:	f104 0e14 	add.w	lr, r4, #20
 8015e4c:	46a9      	mov	r9, r5
 8015e4e:	f04f 0c00 	mov.w	ip, #0
 8015e52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015e56:	f8d9 1000 	ldr.w	r1, [r9]
 8015e5a:	fa1f fb82 	uxth.w	fp, r2
 8015e5e:	b289      	uxth	r1, r1
 8015e60:	fb0a 110b 	mla	r1, sl, fp, r1
 8015e64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015e68:	f8d9 2000 	ldr.w	r2, [r9]
 8015e6c:	4461      	add	r1, ip
 8015e6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015e72:	fb0a c20b 	mla	r2, sl, fp, ip
 8015e76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015e7a:	b289      	uxth	r1, r1
 8015e7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015e80:	4577      	cmp	r7, lr
 8015e82:	f849 1b04 	str.w	r1, [r9], #4
 8015e86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015e8a:	d8e2      	bhi.n	8015e52 <__multiply+0xb2>
 8015e8c:	9a01      	ldr	r2, [sp, #4]
 8015e8e:	f845 c002 	str.w	ip, [r5, r2]
 8015e92:	9a03      	ldr	r2, [sp, #12]
 8015e94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015e98:	3304      	adds	r3, #4
 8015e9a:	f1b9 0f00 	cmp.w	r9, #0
 8015e9e:	d020      	beq.n	8015ee2 <__multiply+0x142>
 8015ea0:	6829      	ldr	r1, [r5, #0]
 8015ea2:	f104 0c14 	add.w	ip, r4, #20
 8015ea6:	46ae      	mov	lr, r5
 8015ea8:	f04f 0a00 	mov.w	sl, #0
 8015eac:	f8bc b000 	ldrh.w	fp, [ip]
 8015eb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015eb4:	fb09 220b 	mla	r2, r9, fp, r2
 8015eb8:	4492      	add	sl, r2
 8015eba:	b289      	uxth	r1, r1
 8015ebc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015ec0:	f84e 1b04 	str.w	r1, [lr], #4
 8015ec4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015ec8:	f8be 1000 	ldrh.w	r1, [lr]
 8015ecc:	0c12      	lsrs	r2, r2, #16
 8015ece:	fb09 1102 	mla	r1, r9, r2, r1
 8015ed2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015ed6:	4567      	cmp	r7, ip
 8015ed8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015edc:	d8e6      	bhi.n	8015eac <__multiply+0x10c>
 8015ede:	9a01      	ldr	r2, [sp, #4]
 8015ee0:	50a9      	str	r1, [r5, r2]
 8015ee2:	3504      	adds	r5, #4
 8015ee4:	e79a      	b.n	8015e1c <__multiply+0x7c>
 8015ee6:	3e01      	subs	r6, #1
 8015ee8:	e79c      	b.n	8015e24 <__multiply+0x84>
 8015eea:	bf00      	nop
 8015eec:	08016e20 	.word	0x08016e20
 8015ef0:	08016e3b 	.word	0x08016e3b

08015ef4 <__pow5mult>:
 8015ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ef8:	4615      	mov	r5, r2
 8015efa:	f012 0203 	ands.w	r2, r2, #3
 8015efe:	4606      	mov	r6, r0
 8015f00:	460f      	mov	r7, r1
 8015f02:	d007      	beq.n	8015f14 <__pow5mult+0x20>
 8015f04:	4c25      	ldr	r4, [pc, #148]	; (8015f9c <__pow5mult+0xa8>)
 8015f06:	3a01      	subs	r2, #1
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015f0e:	f7ff fe9b 	bl	8015c48 <__multadd>
 8015f12:	4607      	mov	r7, r0
 8015f14:	10ad      	asrs	r5, r5, #2
 8015f16:	d03d      	beq.n	8015f94 <__pow5mult+0xa0>
 8015f18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015f1a:	b97c      	cbnz	r4, 8015f3c <__pow5mult+0x48>
 8015f1c:	2010      	movs	r0, #16
 8015f1e:	f7fd fead 	bl	8013c7c <malloc>
 8015f22:	4602      	mov	r2, r0
 8015f24:	6270      	str	r0, [r6, #36]	; 0x24
 8015f26:	b928      	cbnz	r0, 8015f34 <__pow5mult+0x40>
 8015f28:	4b1d      	ldr	r3, [pc, #116]	; (8015fa0 <__pow5mult+0xac>)
 8015f2a:	481e      	ldr	r0, [pc, #120]	; (8015fa4 <__pow5mult+0xb0>)
 8015f2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015f30:	f000 fb3c 	bl	80165ac <__assert_func>
 8015f34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015f38:	6004      	str	r4, [r0, #0]
 8015f3a:	60c4      	str	r4, [r0, #12]
 8015f3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015f40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015f44:	b94c      	cbnz	r4, 8015f5a <__pow5mult+0x66>
 8015f46:	f240 2171 	movw	r1, #625	; 0x271
 8015f4a:	4630      	mov	r0, r6
 8015f4c:	f7ff ff12 	bl	8015d74 <__i2b>
 8015f50:	2300      	movs	r3, #0
 8015f52:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f56:	4604      	mov	r4, r0
 8015f58:	6003      	str	r3, [r0, #0]
 8015f5a:	f04f 0900 	mov.w	r9, #0
 8015f5e:	07eb      	lsls	r3, r5, #31
 8015f60:	d50a      	bpl.n	8015f78 <__pow5mult+0x84>
 8015f62:	4639      	mov	r1, r7
 8015f64:	4622      	mov	r2, r4
 8015f66:	4630      	mov	r0, r6
 8015f68:	f7ff ff1a 	bl	8015da0 <__multiply>
 8015f6c:	4639      	mov	r1, r7
 8015f6e:	4680      	mov	r8, r0
 8015f70:	4630      	mov	r0, r6
 8015f72:	f7ff fe47 	bl	8015c04 <_Bfree>
 8015f76:	4647      	mov	r7, r8
 8015f78:	106d      	asrs	r5, r5, #1
 8015f7a:	d00b      	beq.n	8015f94 <__pow5mult+0xa0>
 8015f7c:	6820      	ldr	r0, [r4, #0]
 8015f7e:	b938      	cbnz	r0, 8015f90 <__pow5mult+0x9c>
 8015f80:	4622      	mov	r2, r4
 8015f82:	4621      	mov	r1, r4
 8015f84:	4630      	mov	r0, r6
 8015f86:	f7ff ff0b 	bl	8015da0 <__multiply>
 8015f8a:	6020      	str	r0, [r4, #0]
 8015f8c:	f8c0 9000 	str.w	r9, [r0]
 8015f90:	4604      	mov	r4, r0
 8015f92:	e7e4      	b.n	8015f5e <__pow5mult+0x6a>
 8015f94:	4638      	mov	r0, r7
 8015f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f9a:	bf00      	nop
 8015f9c:	08016f88 	.word	0x08016f88
 8015fa0:	08016dae 	.word	0x08016dae
 8015fa4:	08016e3b 	.word	0x08016e3b

08015fa8 <__lshift>:
 8015fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fac:	460c      	mov	r4, r1
 8015fae:	6849      	ldr	r1, [r1, #4]
 8015fb0:	6923      	ldr	r3, [r4, #16]
 8015fb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015fb6:	68a3      	ldr	r3, [r4, #8]
 8015fb8:	4607      	mov	r7, r0
 8015fba:	4691      	mov	r9, r2
 8015fbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015fc0:	f108 0601 	add.w	r6, r8, #1
 8015fc4:	42b3      	cmp	r3, r6
 8015fc6:	db0b      	blt.n	8015fe0 <__lshift+0x38>
 8015fc8:	4638      	mov	r0, r7
 8015fca:	f7ff fddb 	bl	8015b84 <_Balloc>
 8015fce:	4605      	mov	r5, r0
 8015fd0:	b948      	cbnz	r0, 8015fe6 <__lshift+0x3e>
 8015fd2:	4602      	mov	r2, r0
 8015fd4:	4b2a      	ldr	r3, [pc, #168]	; (8016080 <__lshift+0xd8>)
 8015fd6:	482b      	ldr	r0, [pc, #172]	; (8016084 <__lshift+0xdc>)
 8015fd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015fdc:	f000 fae6 	bl	80165ac <__assert_func>
 8015fe0:	3101      	adds	r1, #1
 8015fe2:	005b      	lsls	r3, r3, #1
 8015fe4:	e7ee      	b.n	8015fc4 <__lshift+0x1c>
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	f100 0114 	add.w	r1, r0, #20
 8015fec:	f100 0210 	add.w	r2, r0, #16
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	4553      	cmp	r3, sl
 8015ff4:	db37      	blt.n	8016066 <__lshift+0xbe>
 8015ff6:	6920      	ldr	r0, [r4, #16]
 8015ff8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015ffc:	f104 0314 	add.w	r3, r4, #20
 8016000:	f019 091f 	ands.w	r9, r9, #31
 8016004:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016008:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801600c:	d02f      	beq.n	801606e <__lshift+0xc6>
 801600e:	f1c9 0e20 	rsb	lr, r9, #32
 8016012:	468a      	mov	sl, r1
 8016014:	f04f 0c00 	mov.w	ip, #0
 8016018:	681a      	ldr	r2, [r3, #0]
 801601a:	fa02 f209 	lsl.w	r2, r2, r9
 801601e:	ea42 020c 	orr.w	r2, r2, ip
 8016022:	f84a 2b04 	str.w	r2, [sl], #4
 8016026:	f853 2b04 	ldr.w	r2, [r3], #4
 801602a:	4298      	cmp	r0, r3
 801602c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8016030:	d8f2      	bhi.n	8016018 <__lshift+0x70>
 8016032:	1b03      	subs	r3, r0, r4
 8016034:	3b15      	subs	r3, #21
 8016036:	f023 0303 	bic.w	r3, r3, #3
 801603a:	3304      	adds	r3, #4
 801603c:	f104 0215 	add.w	r2, r4, #21
 8016040:	4290      	cmp	r0, r2
 8016042:	bf38      	it	cc
 8016044:	2304      	movcc	r3, #4
 8016046:	f841 c003 	str.w	ip, [r1, r3]
 801604a:	f1bc 0f00 	cmp.w	ip, #0
 801604e:	d001      	beq.n	8016054 <__lshift+0xac>
 8016050:	f108 0602 	add.w	r6, r8, #2
 8016054:	3e01      	subs	r6, #1
 8016056:	4638      	mov	r0, r7
 8016058:	612e      	str	r6, [r5, #16]
 801605a:	4621      	mov	r1, r4
 801605c:	f7ff fdd2 	bl	8015c04 <_Bfree>
 8016060:	4628      	mov	r0, r5
 8016062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016066:	f842 0f04 	str.w	r0, [r2, #4]!
 801606a:	3301      	adds	r3, #1
 801606c:	e7c1      	b.n	8015ff2 <__lshift+0x4a>
 801606e:	3904      	subs	r1, #4
 8016070:	f853 2b04 	ldr.w	r2, [r3], #4
 8016074:	f841 2f04 	str.w	r2, [r1, #4]!
 8016078:	4298      	cmp	r0, r3
 801607a:	d8f9      	bhi.n	8016070 <__lshift+0xc8>
 801607c:	e7ea      	b.n	8016054 <__lshift+0xac>
 801607e:	bf00      	nop
 8016080:	08016e20 	.word	0x08016e20
 8016084:	08016e3b 	.word	0x08016e3b

08016088 <__mcmp>:
 8016088:	b530      	push	{r4, r5, lr}
 801608a:	6902      	ldr	r2, [r0, #16]
 801608c:	690c      	ldr	r4, [r1, #16]
 801608e:	1b12      	subs	r2, r2, r4
 8016090:	d10e      	bne.n	80160b0 <__mcmp+0x28>
 8016092:	f100 0314 	add.w	r3, r0, #20
 8016096:	3114      	adds	r1, #20
 8016098:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801609c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80160a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80160a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80160a8:	42a5      	cmp	r5, r4
 80160aa:	d003      	beq.n	80160b4 <__mcmp+0x2c>
 80160ac:	d305      	bcc.n	80160ba <__mcmp+0x32>
 80160ae:	2201      	movs	r2, #1
 80160b0:	4610      	mov	r0, r2
 80160b2:	bd30      	pop	{r4, r5, pc}
 80160b4:	4283      	cmp	r3, r0
 80160b6:	d3f3      	bcc.n	80160a0 <__mcmp+0x18>
 80160b8:	e7fa      	b.n	80160b0 <__mcmp+0x28>
 80160ba:	f04f 32ff 	mov.w	r2, #4294967295
 80160be:	e7f7      	b.n	80160b0 <__mcmp+0x28>

080160c0 <__mdiff>:
 80160c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160c4:	460c      	mov	r4, r1
 80160c6:	4606      	mov	r6, r0
 80160c8:	4611      	mov	r1, r2
 80160ca:	4620      	mov	r0, r4
 80160cc:	4690      	mov	r8, r2
 80160ce:	f7ff ffdb 	bl	8016088 <__mcmp>
 80160d2:	1e05      	subs	r5, r0, #0
 80160d4:	d110      	bne.n	80160f8 <__mdiff+0x38>
 80160d6:	4629      	mov	r1, r5
 80160d8:	4630      	mov	r0, r6
 80160da:	f7ff fd53 	bl	8015b84 <_Balloc>
 80160de:	b930      	cbnz	r0, 80160ee <__mdiff+0x2e>
 80160e0:	4b3a      	ldr	r3, [pc, #232]	; (80161cc <__mdiff+0x10c>)
 80160e2:	4602      	mov	r2, r0
 80160e4:	f240 2132 	movw	r1, #562	; 0x232
 80160e8:	4839      	ldr	r0, [pc, #228]	; (80161d0 <__mdiff+0x110>)
 80160ea:	f000 fa5f 	bl	80165ac <__assert_func>
 80160ee:	2301      	movs	r3, #1
 80160f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80160f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f8:	bfa4      	itt	ge
 80160fa:	4643      	movge	r3, r8
 80160fc:	46a0      	movge	r8, r4
 80160fe:	4630      	mov	r0, r6
 8016100:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016104:	bfa6      	itte	ge
 8016106:	461c      	movge	r4, r3
 8016108:	2500      	movge	r5, #0
 801610a:	2501      	movlt	r5, #1
 801610c:	f7ff fd3a 	bl	8015b84 <_Balloc>
 8016110:	b920      	cbnz	r0, 801611c <__mdiff+0x5c>
 8016112:	4b2e      	ldr	r3, [pc, #184]	; (80161cc <__mdiff+0x10c>)
 8016114:	4602      	mov	r2, r0
 8016116:	f44f 7110 	mov.w	r1, #576	; 0x240
 801611a:	e7e5      	b.n	80160e8 <__mdiff+0x28>
 801611c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016120:	6926      	ldr	r6, [r4, #16]
 8016122:	60c5      	str	r5, [r0, #12]
 8016124:	f104 0914 	add.w	r9, r4, #20
 8016128:	f108 0514 	add.w	r5, r8, #20
 801612c:	f100 0e14 	add.w	lr, r0, #20
 8016130:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016134:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016138:	f108 0210 	add.w	r2, r8, #16
 801613c:	46f2      	mov	sl, lr
 801613e:	2100      	movs	r1, #0
 8016140:	f859 3b04 	ldr.w	r3, [r9], #4
 8016144:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016148:	fa1f f883 	uxth.w	r8, r3
 801614c:	fa11 f18b 	uxtah	r1, r1, fp
 8016150:	0c1b      	lsrs	r3, r3, #16
 8016152:	eba1 0808 	sub.w	r8, r1, r8
 8016156:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801615a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801615e:	fa1f f888 	uxth.w	r8, r8
 8016162:	1419      	asrs	r1, r3, #16
 8016164:	454e      	cmp	r6, r9
 8016166:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801616a:	f84a 3b04 	str.w	r3, [sl], #4
 801616e:	d8e7      	bhi.n	8016140 <__mdiff+0x80>
 8016170:	1b33      	subs	r3, r6, r4
 8016172:	3b15      	subs	r3, #21
 8016174:	f023 0303 	bic.w	r3, r3, #3
 8016178:	3304      	adds	r3, #4
 801617a:	3415      	adds	r4, #21
 801617c:	42a6      	cmp	r6, r4
 801617e:	bf38      	it	cc
 8016180:	2304      	movcc	r3, #4
 8016182:	441d      	add	r5, r3
 8016184:	4473      	add	r3, lr
 8016186:	469e      	mov	lr, r3
 8016188:	462e      	mov	r6, r5
 801618a:	4566      	cmp	r6, ip
 801618c:	d30e      	bcc.n	80161ac <__mdiff+0xec>
 801618e:	f10c 0203 	add.w	r2, ip, #3
 8016192:	1b52      	subs	r2, r2, r5
 8016194:	f022 0203 	bic.w	r2, r2, #3
 8016198:	3d03      	subs	r5, #3
 801619a:	45ac      	cmp	ip, r5
 801619c:	bf38      	it	cc
 801619e:	2200      	movcc	r2, #0
 80161a0:	441a      	add	r2, r3
 80161a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80161a6:	b17b      	cbz	r3, 80161c8 <__mdiff+0x108>
 80161a8:	6107      	str	r7, [r0, #16]
 80161aa:	e7a3      	b.n	80160f4 <__mdiff+0x34>
 80161ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80161b0:	fa11 f288 	uxtah	r2, r1, r8
 80161b4:	1414      	asrs	r4, r2, #16
 80161b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80161ba:	b292      	uxth	r2, r2
 80161bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80161c0:	f84e 2b04 	str.w	r2, [lr], #4
 80161c4:	1421      	asrs	r1, r4, #16
 80161c6:	e7e0      	b.n	801618a <__mdiff+0xca>
 80161c8:	3f01      	subs	r7, #1
 80161ca:	e7ea      	b.n	80161a2 <__mdiff+0xe2>
 80161cc:	08016e20 	.word	0x08016e20
 80161d0:	08016e3b 	.word	0x08016e3b

080161d4 <__d2b>:
 80161d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161d8:	4689      	mov	r9, r1
 80161da:	2101      	movs	r1, #1
 80161dc:	ec57 6b10 	vmov	r6, r7, d0
 80161e0:	4690      	mov	r8, r2
 80161e2:	f7ff fccf 	bl	8015b84 <_Balloc>
 80161e6:	4604      	mov	r4, r0
 80161e8:	b930      	cbnz	r0, 80161f8 <__d2b+0x24>
 80161ea:	4602      	mov	r2, r0
 80161ec:	4b25      	ldr	r3, [pc, #148]	; (8016284 <__d2b+0xb0>)
 80161ee:	4826      	ldr	r0, [pc, #152]	; (8016288 <__d2b+0xb4>)
 80161f0:	f240 310a 	movw	r1, #778	; 0x30a
 80161f4:	f000 f9da 	bl	80165ac <__assert_func>
 80161f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80161fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016200:	bb35      	cbnz	r5, 8016250 <__d2b+0x7c>
 8016202:	2e00      	cmp	r6, #0
 8016204:	9301      	str	r3, [sp, #4]
 8016206:	d028      	beq.n	801625a <__d2b+0x86>
 8016208:	4668      	mov	r0, sp
 801620a:	9600      	str	r6, [sp, #0]
 801620c:	f7ff fd82 	bl	8015d14 <__lo0bits>
 8016210:	9900      	ldr	r1, [sp, #0]
 8016212:	b300      	cbz	r0, 8016256 <__d2b+0x82>
 8016214:	9a01      	ldr	r2, [sp, #4]
 8016216:	f1c0 0320 	rsb	r3, r0, #32
 801621a:	fa02 f303 	lsl.w	r3, r2, r3
 801621e:	430b      	orrs	r3, r1
 8016220:	40c2      	lsrs	r2, r0
 8016222:	6163      	str	r3, [r4, #20]
 8016224:	9201      	str	r2, [sp, #4]
 8016226:	9b01      	ldr	r3, [sp, #4]
 8016228:	61a3      	str	r3, [r4, #24]
 801622a:	2b00      	cmp	r3, #0
 801622c:	bf14      	ite	ne
 801622e:	2202      	movne	r2, #2
 8016230:	2201      	moveq	r2, #1
 8016232:	6122      	str	r2, [r4, #16]
 8016234:	b1d5      	cbz	r5, 801626c <__d2b+0x98>
 8016236:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801623a:	4405      	add	r5, r0
 801623c:	f8c9 5000 	str.w	r5, [r9]
 8016240:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016244:	f8c8 0000 	str.w	r0, [r8]
 8016248:	4620      	mov	r0, r4
 801624a:	b003      	add	sp, #12
 801624c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016254:	e7d5      	b.n	8016202 <__d2b+0x2e>
 8016256:	6161      	str	r1, [r4, #20]
 8016258:	e7e5      	b.n	8016226 <__d2b+0x52>
 801625a:	a801      	add	r0, sp, #4
 801625c:	f7ff fd5a 	bl	8015d14 <__lo0bits>
 8016260:	9b01      	ldr	r3, [sp, #4]
 8016262:	6163      	str	r3, [r4, #20]
 8016264:	2201      	movs	r2, #1
 8016266:	6122      	str	r2, [r4, #16]
 8016268:	3020      	adds	r0, #32
 801626a:	e7e3      	b.n	8016234 <__d2b+0x60>
 801626c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016274:	f8c9 0000 	str.w	r0, [r9]
 8016278:	6918      	ldr	r0, [r3, #16]
 801627a:	f7ff fd2b 	bl	8015cd4 <__hi0bits>
 801627e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016282:	e7df      	b.n	8016244 <__d2b+0x70>
 8016284:	08016e20 	.word	0x08016e20
 8016288:	08016e3b 	.word	0x08016e3b

0801628c <_calloc_r>:
 801628c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801628e:	fba1 2402 	umull	r2, r4, r1, r2
 8016292:	b94c      	cbnz	r4, 80162a8 <_calloc_r+0x1c>
 8016294:	4611      	mov	r1, r2
 8016296:	9201      	str	r2, [sp, #4]
 8016298:	f7fd fd7a 	bl	8013d90 <_malloc_r>
 801629c:	9a01      	ldr	r2, [sp, #4]
 801629e:	4605      	mov	r5, r0
 80162a0:	b930      	cbnz	r0, 80162b0 <_calloc_r+0x24>
 80162a2:	4628      	mov	r0, r5
 80162a4:	b003      	add	sp, #12
 80162a6:	bd30      	pop	{r4, r5, pc}
 80162a8:	220c      	movs	r2, #12
 80162aa:	6002      	str	r2, [r0, #0]
 80162ac:	2500      	movs	r5, #0
 80162ae:	e7f8      	b.n	80162a2 <_calloc_r+0x16>
 80162b0:	4621      	mov	r1, r4
 80162b2:	f7fd fcf9 	bl	8013ca8 <memset>
 80162b6:	e7f4      	b.n	80162a2 <_calloc_r+0x16>

080162b8 <__sfputc_r>:
 80162b8:	6893      	ldr	r3, [r2, #8]
 80162ba:	3b01      	subs	r3, #1
 80162bc:	2b00      	cmp	r3, #0
 80162be:	b410      	push	{r4}
 80162c0:	6093      	str	r3, [r2, #8]
 80162c2:	da08      	bge.n	80162d6 <__sfputc_r+0x1e>
 80162c4:	6994      	ldr	r4, [r2, #24]
 80162c6:	42a3      	cmp	r3, r4
 80162c8:	db01      	blt.n	80162ce <__sfputc_r+0x16>
 80162ca:	290a      	cmp	r1, #10
 80162cc:	d103      	bne.n	80162d6 <__sfputc_r+0x1e>
 80162ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162d2:	f7fe bb9f 	b.w	8014a14 <__swbuf_r>
 80162d6:	6813      	ldr	r3, [r2, #0]
 80162d8:	1c58      	adds	r0, r3, #1
 80162da:	6010      	str	r0, [r2, #0]
 80162dc:	7019      	strb	r1, [r3, #0]
 80162de:	4608      	mov	r0, r1
 80162e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162e4:	4770      	bx	lr

080162e6 <__sfputs_r>:
 80162e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162e8:	4606      	mov	r6, r0
 80162ea:	460f      	mov	r7, r1
 80162ec:	4614      	mov	r4, r2
 80162ee:	18d5      	adds	r5, r2, r3
 80162f0:	42ac      	cmp	r4, r5
 80162f2:	d101      	bne.n	80162f8 <__sfputs_r+0x12>
 80162f4:	2000      	movs	r0, #0
 80162f6:	e007      	b.n	8016308 <__sfputs_r+0x22>
 80162f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162fc:	463a      	mov	r2, r7
 80162fe:	4630      	mov	r0, r6
 8016300:	f7ff ffda 	bl	80162b8 <__sfputc_r>
 8016304:	1c43      	adds	r3, r0, #1
 8016306:	d1f3      	bne.n	80162f0 <__sfputs_r+0xa>
 8016308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801630c <_vfiprintf_r>:
 801630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016310:	460d      	mov	r5, r1
 8016312:	b09d      	sub	sp, #116	; 0x74
 8016314:	4614      	mov	r4, r2
 8016316:	4698      	mov	r8, r3
 8016318:	4606      	mov	r6, r0
 801631a:	b118      	cbz	r0, 8016324 <_vfiprintf_r+0x18>
 801631c:	6983      	ldr	r3, [r0, #24]
 801631e:	b90b      	cbnz	r3, 8016324 <_vfiprintf_r+0x18>
 8016320:	f7fd fbea 	bl	8013af8 <__sinit>
 8016324:	4b89      	ldr	r3, [pc, #548]	; (801654c <_vfiprintf_r+0x240>)
 8016326:	429d      	cmp	r5, r3
 8016328:	d11b      	bne.n	8016362 <_vfiprintf_r+0x56>
 801632a:	6875      	ldr	r5, [r6, #4]
 801632c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801632e:	07d9      	lsls	r1, r3, #31
 8016330:	d405      	bmi.n	801633e <_vfiprintf_r+0x32>
 8016332:	89ab      	ldrh	r3, [r5, #12]
 8016334:	059a      	lsls	r2, r3, #22
 8016336:	d402      	bmi.n	801633e <_vfiprintf_r+0x32>
 8016338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801633a:	f7ed fa31 	bl	80037a0 <__retarget_lock_acquire_recursive>
 801633e:	89ab      	ldrh	r3, [r5, #12]
 8016340:	071b      	lsls	r3, r3, #28
 8016342:	d501      	bpl.n	8016348 <_vfiprintf_r+0x3c>
 8016344:	692b      	ldr	r3, [r5, #16]
 8016346:	b9eb      	cbnz	r3, 8016384 <_vfiprintf_r+0x78>
 8016348:	4629      	mov	r1, r5
 801634a:	4630      	mov	r0, r6
 801634c:	f7fe fbc6 	bl	8014adc <__swsetup_r>
 8016350:	b1c0      	cbz	r0, 8016384 <_vfiprintf_r+0x78>
 8016352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016354:	07dc      	lsls	r4, r3, #31
 8016356:	d50e      	bpl.n	8016376 <_vfiprintf_r+0x6a>
 8016358:	f04f 30ff 	mov.w	r0, #4294967295
 801635c:	b01d      	add	sp, #116	; 0x74
 801635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016362:	4b7b      	ldr	r3, [pc, #492]	; (8016550 <_vfiprintf_r+0x244>)
 8016364:	429d      	cmp	r5, r3
 8016366:	d101      	bne.n	801636c <_vfiprintf_r+0x60>
 8016368:	68b5      	ldr	r5, [r6, #8]
 801636a:	e7df      	b.n	801632c <_vfiprintf_r+0x20>
 801636c:	4b79      	ldr	r3, [pc, #484]	; (8016554 <_vfiprintf_r+0x248>)
 801636e:	429d      	cmp	r5, r3
 8016370:	bf08      	it	eq
 8016372:	68f5      	ldreq	r5, [r6, #12]
 8016374:	e7da      	b.n	801632c <_vfiprintf_r+0x20>
 8016376:	89ab      	ldrh	r3, [r5, #12]
 8016378:	0598      	lsls	r0, r3, #22
 801637a:	d4ed      	bmi.n	8016358 <_vfiprintf_r+0x4c>
 801637c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801637e:	f7ed fa23 	bl	80037c8 <__retarget_lock_release_recursive>
 8016382:	e7e9      	b.n	8016358 <_vfiprintf_r+0x4c>
 8016384:	2300      	movs	r3, #0
 8016386:	9309      	str	r3, [sp, #36]	; 0x24
 8016388:	2320      	movs	r3, #32
 801638a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801638e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016392:	2330      	movs	r3, #48	; 0x30
 8016394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016558 <_vfiprintf_r+0x24c>
 8016398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801639c:	f04f 0901 	mov.w	r9, #1
 80163a0:	4623      	mov	r3, r4
 80163a2:	469a      	mov	sl, r3
 80163a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163a8:	b10a      	cbz	r2, 80163ae <_vfiprintf_r+0xa2>
 80163aa:	2a25      	cmp	r2, #37	; 0x25
 80163ac:	d1f9      	bne.n	80163a2 <_vfiprintf_r+0x96>
 80163ae:	ebba 0b04 	subs.w	fp, sl, r4
 80163b2:	d00b      	beq.n	80163cc <_vfiprintf_r+0xc0>
 80163b4:	465b      	mov	r3, fp
 80163b6:	4622      	mov	r2, r4
 80163b8:	4629      	mov	r1, r5
 80163ba:	4630      	mov	r0, r6
 80163bc:	f7ff ff93 	bl	80162e6 <__sfputs_r>
 80163c0:	3001      	adds	r0, #1
 80163c2:	f000 80aa 	beq.w	801651a <_vfiprintf_r+0x20e>
 80163c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163c8:	445a      	add	r2, fp
 80163ca:	9209      	str	r2, [sp, #36]	; 0x24
 80163cc:	f89a 3000 	ldrb.w	r3, [sl]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f000 80a2 	beq.w	801651a <_vfiprintf_r+0x20e>
 80163d6:	2300      	movs	r3, #0
 80163d8:	f04f 32ff 	mov.w	r2, #4294967295
 80163dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163e0:	f10a 0a01 	add.w	sl, sl, #1
 80163e4:	9304      	str	r3, [sp, #16]
 80163e6:	9307      	str	r3, [sp, #28]
 80163e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80163ec:	931a      	str	r3, [sp, #104]	; 0x68
 80163ee:	4654      	mov	r4, sl
 80163f0:	2205      	movs	r2, #5
 80163f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163f6:	4858      	ldr	r0, [pc, #352]	; (8016558 <_vfiprintf_r+0x24c>)
 80163f8:	f7e9 ff12 	bl	8000220 <memchr>
 80163fc:	9a04      	ldr	r2, [sp, #16]
 80163fe:	b9d8      	cbnz	r0, 8016438 <_vfiprintf_r+0x12c>
 8016400:	06d1      	lsls	r1, r2, #27
 8016402:	bf44      	itt	mi
 8016404:	2320      	movmi	r3, #32
 8016406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801640a:	0713      	lsls	r3, r2, #28
 801640c:	bf44      	itt	mi
 801640e:	232b      	movmi	r3, #43	; 0x2b
 8016410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016414:	f89a 3000 	ldrb.w	r3, [sl]
 8016418:	2b2a      	cmp	r3, #42	; 0x2a
 801641a:	d015      	beq.n	8016448 <_vfiprintf_r+0x13c>
 801641c:	9a07      	ldr	r2, [sp, #28]
 801641e:	4654      	mov	r4, sl
 8016420:	2000      	movs	r0, #0
 8016422:	f04f 0c0a 	mov.w	ip, #10
 8016426:	4621      	mov	r1, r4
 8016428:	f811 3b01 	ldrb.w	r3, [r1], #1
 801642c:	3b30      	subs	r3, #48	; 0x30
 801642e:	2b09      	cmp	r3, #9
 8016430:	d94e      	bls.n	80164d0 <_vfiprintf_r+0x1c4>
 8016432:	b1b0      	cbz	r0, 8016462 <_vfiprintf_r+0x156>
 8016434:	9207      	str	r2, [sp, #28]
 8016436:	e014      	b.n	8016462 <_vfiprintf_r+0x156>
 8016438:	eba0 0308 	sub.w	r3, r0, r8
 801643c:	fa09 f303 	lsl.w	r3, r9, r3
 8016440:	4313      	orrs	r3, r2
 8016442:	9304      	str	r3, [sp, #16]
 8016444:	46a2      	mov	sl, r4
 8016446:	e7d2      	b.n	80163ee <_vfiprintf_r+0xe2>
 8016448:	9b03      	ldr	r3, [sp, #12]
 801644a:	1d19      	adds	r1, r3, #4
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	9103      	str	r1, [sp, #12]
 8016450:	2b00      	cmp	r3, #0
 8016452:	bfbb      	ittet	lt
 8016454:	425b      	neglt	r3, r3
 8016456:	f042 0202 	orrlt.w	r2, r2, #2
 801645a:	9307      	strge	r3, [sp, #28]
 801645c:	9307      	strlt	r3, [sp, #28]
 801645e:	bfb8      	it	lt
 8016460:	9204      	strlt	r2, [sp, #16]
 8016462:	7823      	ldrb	r3, [r4, #0]
 8016464:	2b2e      	cmp	r3, #46	; 0x2e
 8016466:	d10c      	bne.n	8016482 <_vfiprintf_r+0x176>
 8016468:	7863      	ldrb	r3, [r4, #1]
 801646a:	2b2a      	cmp	r3, #42	; 0x2a
 801646c:	d135      	bne.n	80164da <_vfiprintf_r+0x1ce>
 801646e:	9b03      	ldr	r3, [sp, #12]
 8016470:	1d1a      	adds	r2, r3, #4
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	9203      	str	r2, [sp, #12]
 8016476:	2b00      	cmp	r3, #0
 8016478:	bfb8      	it	lt
 801647a:	f04f 33ff 	movlt.w	r3, #4294967295
 801647e:	3402      	adds	r4, #2
 8016480:	9305      	str	r3, [sp, #20]
 8016482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016568 <_vfiprintf_r+0x25c>
 8016486:	7821      	ldrb	r1, [r4, #0]
 8016488:	2203      	movs	r2, #3
 801648a:	4650      	mov	r0, sl
 801648c:	f7e9 fec8 	bl	8000220 <memchr>
 8016490:	b140      	cbz	r0, 80164a4 <_vfiprintf_r+0x198>
 8016492:	2340      	movs	r3, #64	; 0x40
 8016494:	eba0 000a 	sub.w	r0, r0, sl
 8016498:	fa03 f000 	lsl.w	r0, r3, r0
 801649c:	9b04      	ldr	r3, [sp, #16]
 801649e:	4303      	orrs	r3, r0
 80164a0:	3401      	adds	r4, #1
 80164a2:	9304      	str	r3, [sp, #16]
 80164a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164a8:	482c      	ldr	r0, [pc, #176]	; (801655c <_vfiprintf_r+0x250>)
 80164aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164ae:	2206      	movs	r2, #6
 80164b0:	f7e9 feb6 	bl	8000220 <memchr>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	d03f      	beq.n	8016538 <_vfiprintf_r+0x22c>
 80164b8:	4b29      	ldr	r3, [pc, #164]	; (8016560 <_vfiprintf_r+0x254>)
 80164ba:	bb1b      	cbnz	r3, 8016504 <_vfiprintf_r+0x1f8>
 80164bc:	9b03      	ldr	r3, [sp, #12]
 80164be:	3307      	adds	r3, #7
 80164c0:	f023 0307 	bic.w	r3, r3, #7
 80164c4:	3308      	adds	r3, #8
 80164c6:	9303      	str	r3, [sp, #12]
 80164c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164ca:	443b      	add	r3, r7
 80164cc:	9309      	str	r3, [sp, #36]	; 0x24
 80164ce:	e767      	b.n	80163a0 <_vfiprintf_r+0x94>
 80164d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80164d4:	460c      	mov	r4, r1
 80164d6:	2001      	movs	r0, #1
 80164d8:	e7a5      	b.n	8016426 <_vfiprintf_r+0x11a>
 80164da:	2300      	movs	r3, #0
 80164dc:	3401      	adds	r4, #1
 80164de:	9305      	str	r3, [sp, #20]
 80164e0:	4619      	mov	r1, r3
 80164e2:	f04f 0c0a 	mov.w	ip, #10
 80164e6:	4620      	mov	r0, r4
 80164e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164ec:	3a30      	subs	r2, #48	; 0x30
 80164ee:	2a09      	cmp	r2, #9
 80164f0:	d903      	bls.n	80164fa <_vfiprintf_r+0x1ee>
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d0c5      	beq.n	8016482 <_vfiprintf_r+0x176>
 80164f6:	9105      	str	r1, [sp, #20]
 80164f8:	e7c3      	b.n	8016482 <_vfiprintf_r+0x176>
 80164fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80164fe:	4604      	mov	r4, r0
 8016500:	2301      	movs	r3, #1
 8016502:	e7f0      	b.n	80164e6 <_vfiprintf_r+0x1da>
 8016504:	ab03      	add	r3, sp, #12
 8016506:	9300      	str	r3, [sp, #0]
 8016508:	462a      	mov	r2, r5
 801650a:	4b16      	ldr	r3, [pc, #88]	; (8016564 <_vfiprintf_r+0x258>)
 801650c:	a904      	add	r1, sp, #16
 801650e:	4630      	mov	r0, r6
 8016510:	f7fd fd52 	bl	8013fb8 <_printf_float>
 8016514:	4607      	mov	r7, r0
 8016516:	1c78      	adds	r0, r7, #1
 8016518:	d1d6      	bne.n	80164c8 <_vfiprintf_r+0x1bc>
 801651a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801651c:	07d9      	lsls	r1, r3, #31
 801651e:	d405      	bmi.n	801652c <_vfiprintf_r+0x220>
 8016520:	89ab      	ldrh	r3, [r5, #12]
 8016522:	059a      	lsls	r2, r3, #22
 8016524:	d402      	bmi.n	801652c <_vfiprintf_r+0x220>
 8016526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016528:	f7ed f94e 	bl	80037c8 <__retarget_lock_release_recursive>
 801652c:	89ab      	ldrh	r3, [r5, #12]
 801652e:	065b      	lsls	r3, r3, #25
 8016530:	f53f af12 	bmi.w	8016358 <_vfiprintf_r+0x4c>
 8016534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016536:	e711      	b.n	801635c <_vfiprintf_r+0x50>
 8016538:	ab03      	add	r3, sp, #12
 801653a:	9300      	str	r3, [sp, #0]
 801653c:	462a      	mov	r2, r5
 801653e:	4b09      	ldr	r3, [pc, #36]	; (8016564 <_vfiprintf_r+0x258>)
 8016540:	a904      	add	r1, sp, #16
 8016542:	4630      	mov	r0, r6
 8016544:	f7fd ffdc 	bl	8014500 <_printf_i>
 8016548:	e7e4      	b.n	8016514 <_vfiprintf_r+0x208>
 801654a:	bf00      	nop
 801654c:	08016c28 	.word	0x08016c28
 8016550:	08016c48 	.word	0x08016c48
 8016554:	08016c08 	.word	0x08016c08
 8016558:	08016f94 	.word	0x08016f94
 801655c:	08016f9e 	.word	0x08016f9e
 8016560:	08013fb9 	.word	0x08013fb9
 8016564:	080162e7 	.word	0x080162e7
 8016568:	08016f9a 	.word	0x08016f9a

0801656c <_read_r>:
 801656c:	b538      	push	{r3, r4, r5, lr}
 801656e:	4d07      	ldr	r5, [pc, #28]	; (801658c <_read_r+0x20>)
 8016570:	4604      	mov	r4, r0
 8016572:	4608      	mov	r0, r1
 8016574:	4611      	mov	r1, r2
 8016576:	2200      	movs	r2, #0
 8016578:	602a      	str	r2, [r5, #0]
 801657a:	461a      	mov	r2, r3
 801657c:	f7ec fc58 	bl	8002e30 <_read>
 8016580:	1c43      	adds	r3, r0, #1
 8016582:	d102      	bne.n	801658a <_read_r+0x1e>
 8016584:	682b      	ldr	r3, [r5, #0]
 8016586:	b103      	cbz	r3, 801658a <_read_r+0x1e>
 8016588:	6023      	str	r3, [r4, #0]
 801658a:	bd38      	pop	{r3, r4, r5, pc}
 801658c:	20006f14 	.word	0x20006f14

08016590 <__ascii_wctomb>:
 8016590:	b149      	cbz	r1, 80165a6 <__ascii_wctomb+0x16>
 8016592:	2aff      	cmp	r2, #255	; 0xff
 8016594:	bf85      	ittet	hi
 8016596:	238a      	movhi	r3, #138	; 0x8a
 8016598:	6003      	strhi	r3, [r0, #0]
 801659a:	700a      	strbls	r2, [r1, #0]
 801659c:	f04f 30ff 	movhi.w	r0, #4294967295
 80165a0:	bf98      	it	ls
 80165a2:	2001      	movls	r0, #1
 80165a4:	4770      	bx	lr
 80165a6:	4608      	mov	r0, r1
 80165a8:	4770      	bx	lr
	...

080165ac <__assert_func>:
 80165ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165ae:	4614      	mov	r4, r2
 80165b0:	461a      	mov	r2, r3
 80165b2:	4b09      	ldr	r3, [pc, #36]	; (80165d8 <__assert_func+0x2c>)
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	4605      	mov	r5, r0
 80165b8:	68d8      	ldr	r0, [r3, #12]
 80165ba:	b14c      	cbz	r4, 80165d0 <__assert_func+0x24>
 80165bc:	4b07      	ldr	r3, [pc, #28]	; (80165dc <__assert_func+0x30>)
 80165be:	9100      	str	r1, [sp, #0]
 80165c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80165c4:	4906      	ldr	r1, [pc, #24]	; (80165e0 <__assert_func+0x34>)
 80165c6:	462b      	mov	r3, r5
 80165c8:	f000 f80e 	bl	80165e8 <fiprintf>
 80165cc:	f000 f840 	bl	8016650 <abort>
 80165d0:	4b04      	ldr	r3, [pc, #16]	; (80165e4 <__assert_func+0x38>)
 80165d2:	461c      	mov	r4, r3
 80165d4:	e7f3      	b.n	80165be <__assert_func+0x12>
 80165d6:	bf00      	nop
 80165d8:	20000124 	.word	0x20000124
 80165dc:	08016fa5 	.word	0x08016fa5
 80165e0:	08016fb2 	.word	0x08016fb2
 80165e4:	08016fe0 	.word	0x08016fe0

080165e8 <fiprintf>:
 80165e8:	b40e      	push	{r1, r2, r3}
 80165ea:	b503      	push	{r0, r1, lr}
 80165ec:	4601      	mov	r1, r0
 80165ee:	ab03      	add	r3, sp, #12
 80165f0:	4805      	ldr	r0, [pc, #20]	; (8016608 <fiprintf+0x20>)
 80165f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80165f6:	6800      	ldr	r0, [r0, #0]
 80165f8:	9301      	str	r3, [sp, #4]
 80165fa:	f7ff fe87 	bl	801630c <_vfiprintf_r>
 80165fe:	b002      	add	sp, #8
 8016600:	f85d eb04 	ldr.w	lr, [sp], #4
 8016604:	b003      	add	sp, #12
 8016606:	4770      	bx	lr
 8016608:	20000124 	.word	0x20000124

0801660c <_fstat_r>:
 801660c:	b538      	push	{r3, r4, r5, lr}
 801660e:	4d07      	ldr	r5, [pc, #28]	; (801662c <_fstat_r+0x20>)
 8016610:	2300      	movs	r3, #0
 8016612:	4604      	mov	r4, r0
 8016614:	4608      	mov	r0, r1
 8016616:	4611      	mov	r1, r2
 8016618:	602b      	str	r3, [r5, #0]
 801661a:	f7ec fc32 	bl	8002e82 <_fstat>
 801661e:	1c43      	adds	r3, r0, #1
 8016620:	d102      	bne.n	8016628 <_fstat_r+0x1c>
 8016622:	682b      	ldr	r3, [r5, #0]
 8016624:	b103      	cbz	r3, 8016628 <_fstat_r+0x1c>
 8016626:	6023      	str	r3, [r4, #0]
 8016628:	bd38      	pop	{r3, r4, r5, pc}
 801662a:	bf00      	nop
 801662c:	20006f14 	.word	0x20006f14

08016630 <_isatty_r>:
 8016630:	b538      	push	{r3, r4, r5, lr}
 8016632:	4d06      	ldr	r5, [pc, #24]	; (801664c <_isatty_r+0x1c>)
 8016634:	2300      	movs	r3, #0
 8016636:	4604      	mov	r4, r0
 8016638:	4608      	mov	r0, r1
 801663a:	602b      	str	r3, [r5, #0]
 801663c:	f7ec fc31 	bl	8002ea2 <_isatty>
 8016640:	1c43      	adds	r3, r0, #1
 8016642:	d102      	bne.n	801664a <_isatty_r+0x1a>
 8016644:	682b      	ldr	r3, [r5, #0]
 8016646:	b103      	cbz	r3, 801664a <_isatty_r+0x1a>
 8016648:	6023      	str	r3, [r4, #0]
 801664a:	bd38      	pop	{r3, r4, r5, pc}
 801664c:	20006f14 	.word	0x20006f14

08016650 <abort>:
 8016650:	b508      	push	{r3, lr}
 8016652:	2006      	movs	r0, #6
 8016654:	f000 f82c 	bl	80166b0 <raise>
 8016658:	2001      	movs	r0, #1
 801665a:	f7ec fbdf 	bl	8002e1c <_exit>

0801665e <_raise_r>:
 801665e:	291f      	cmp	r1, #31
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	4604      	mov	r4, r0
 8016664:	460d      	mov	r5, r1
 8016666:	d904      	bls.n	8016672 <_raise_r+0x14>
 8016668:	2316      	movs	r3, #22
 801666a:	6003      	str	r3, [r0, #0]
 801666c:	f04f 30ff 	mov.w	r0, #4294967295
 8016670:	bd38      	pop	{r3, r4, r5, pc}
 8016672:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016674:	b112      	cbz	r2, 801667c <_raise_r+0x1e>
 8016676:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801667a:	b94b      	cbnz	r3, 8016690 <_raise_r+0x32>
 801667c:	4620      	mov	r0, r4
 801667e:	f000 f831 	bl	80166e4 <_getpid_r>
 8016682:	462a      	mov	r2, r5
 8016684:	4601      	mov	r1, r0
 8016686:	4620      	mov	r0, r4
 8016688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801668c:	f000 b818 	b.w	80166c0 <_kill_r>
 8016690:	2b01      	cmp	r3, #1
 8016692:	d00a      	beq.n	80166aa <_raise_r+0x4c>
 8016694:	1c59      	adds	r1, r3, #1
 8016696:	d103      	bne.n	80166a0 <_raise_r+0x42>
 8016698:	2316      	movs	r3, #22
 801669a:	6003      	str	r3, [r0, #0]
 801669c:	2001      	movs	r0, #1
 801669e:	e7e7      	b.n	8016670 <_raise_r+0x12>
 80166a0:	2400      	movs	r4, #0
 80166a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80166a6:	4628      	mov	r0, r5
 80166a8:	4798      	blx	r3
 80166aa:	2000      	movs	r0, #0
 80166ac:	e7e0      	b.n	8016670 <_raise_r+0x12>
	...

080166b0 <raise>:
 80166b0:	4b02      	ldr	r3, [pc, #8]	; (80166bc <raise+0xc>)
 80166b2:	4601      	mov	r1, r0
 80166b4:	6818      	ldr	r0, [r3, #0]
 80166b6:	f7ff bfd2 	b.w	801665e <_raise_r>
 80166ba:	bf00      	nop
 80166bc:	20000124 	.word	0x20000124

080166c0 <_kill_r>:
 80166c0:	b538      	push	{r3, r4, r5, lr}
 80166c2:	4d07      	ldr	r5, [pc, #28]	; (80166e0 <_kill_r+0x20>)
 80166c4:	2300      	movs	r3, #0
 80166c6:	4604      	mov	r4, r0
 80166c8:	4608      	mov	r0, r1
 80166ca:	4611      	mov	r1, r2
 80166cc:	602b      	str	r3, [r5, #0]
 80166ce:	f7ec fb95 	bl	8002dfc <_kill>
 80166d2:	1c43      	adds	r3, r0, #1
 80166d4:	d102      	bne.n	80166dc <_kill_r+0x1c>
 80166d6:	682b      	ldr	r3, [r5, #0]
 80166d8:	b103      	cbz	r3, 80166dc <_kill_r+0x1c>
 80166da:	6023      	str	r3, [r4, #0]
 80166dc:	bd38      	pop	{r3, r4, r5, pc}
 80166de:	bf00      	nop
 80166e0:	20006f14 	.word	0x20006f14

080166e4 <_getpid_r>:
 80166e4:	f7ec bb82 	b.w	8002dec <_getpid>

080166e8 <_init>:
 80166e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ea:	bf00      	nop
 80166ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166ee:	bc08      	pop	{r3}
 80166f0:	469e      	mov	lr, r3
 80166f2:	4770      	bx	lr

080166f4 <_fini>:
 80166f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166f6:	bf00      	nop
 80166f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166fa:	bc08      	pop	{r3}
 80166fc:	469e      	mov	lr, r3
 80166fe:	4770      	bx	lr
