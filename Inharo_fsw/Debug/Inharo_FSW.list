
Inharo_FSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019140  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  08019310  08019310  00029310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019c0c  08019c0c  00030310  2**0
                  CONTENTS
  4 .ARM          00000008  08019c0c  08019c0c  00029c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019c14  08019c14  00030310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019c14  08019c14  00029c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019c18  08019c18  00029c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  08019c1c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d50  20000310  08019f2c  00030310  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20007060  08019f2c  00037060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b4af  00000000  00000000  00030340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000085ce  00000000  00000000  0006b7ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e28  00000000  00000000  00073dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002aa8  00000000  00000000  00076be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000348ea  00000000  00000000  00079690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044670  00000000  00000000  000adf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010037d  00000000  00000000  000f25ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f2967  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d394  00000000  00000000  001f29b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000310 	.word	0x20000310
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080192f8 	.word	0x080192f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000314 	.word	0x20000314
 800020c:	080192f8 	.word	0x080192f8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	; 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9bf 	b.w	8001284 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f84d 	bl	8000fb4 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f840 	bl	8000fb4 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f82f 	bl	8000fb4 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f821 	bl	8000fb4 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b974 	b.w	8001284 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f806 	bl	8000fb4 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__udivmoddi4>:
 8000fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb8:	9d08      	ldr	r5, [sp, #32]
 8000fba:	4604      	mov	r4, r0
 8000fbc:	468e      	mov	lr, r1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d14d      	bne.n	800105e <__udivmoddi4+0xaa>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	4694      	mov	ip, r2
 8000fc6:	d969      	bls.n	800109c <__udivmoddi4+0xe8>
 8000fc8:	fab2 f282 	clz	r2, r2
 8000fcc:	b152      	cbz	r2, 8000fe4 <__udivmoddi4+0x30>
 8000fce:	fa01 f302 	lsl.w	r3, r1, r2
 8000fd2:	f1c2 0120 	rsb	r1, r2, #32
 8000fd6:	fa20 f101 	lsr.w	r1, r0, r1
 8000fda:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fde:	ea41 0e03 	orr.w	lr, r1, r3
 8000fe2:	4094      	lsls	r4, r2
 8000fe4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe8:	0c21      	lsrs	r1, r4, #16
 8000fea:	fbbe f6f8 	udiv	r6, lr, r8
 8000fee:	fa1f f78c 	uxth.w	r7, ip
 8000ff2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ff6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ffa:	fb06 f107 	mul.w	r1, r6, r7
 8000ffe:	4299      	cmp	r1, r3
 8001000:	d90a      	bls.n	8001018 <__udivmoddi4+0x64>
 8001002:	eb1c 0303 	adds.w	r3, ip, r3
 8001006:	f106 30ff 	add.w	r0, r6, #4294967295
 800100a:	f080 811f 	bcs.w	800124c <__udivmoddi4+0x298>
 800100e:	4299      	cmp	r1, r3
 8001010:	f240 811c 	bls.w	800124c <__udivmoddi4+0x298>
 8001014:	3e02      	subs	r6, #2
 8001016:	4463      	add	r3, ip
 8001018:	1a5b      	subs	r3, r3, r1
 800101a:	b2a4      	uxth	r4, r4
 800101c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001020:	fb08 3310 	mls	r3, r8, r0, r3
 8001024:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001028:	fb00 f707 	mul.w	r7, r0, r7
 800102c:	42a7      	cmp	r7, r4
 800102e:	d90a      	bls.n	8001046 <__udivmoddi4+0x92>
 8001030:	eb1c 0404 	adds.w	r4, ip, r4
 8001034:	f100 33ff 	add.w	r3, r0, #4294967295
 8001038:	f080 810a 	bcs.w	8001250 <__udivmoddi4+0x29c>
 800103c:	42a7      	cmp	r7, r4
 800103e:	f240 8107 	bls.w	8001250 <__udivmoddi4+0x29c>
 8001042:	4464      	add	r4, ip
 8001044:	3802      	subs	r0, #2
 8001046:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800104a:	1be4      	subs	r4, r4, r7
 800104c:	2600      	movs	r6, #0
 800104e:	b11d      	cbz	r5, 8001058 <__udivmoddi4+0xa4>
 8001050:	40d4      	lsrs	r4, r2
 8001052:	2300      	movs	r3, #0
 8001054:	e9c5 4300 	strd	r4, r3, [r5]
 8001058:	4631      	mov	r1, r6
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	428b      	cmp	r3, r1
 8001060:	d909      	bls.n	8001076 <__udivmoddi4+0xc2>
 8001062:	2d00      	cmp	r5, #0
 8001064:	f000 80ef 	beq.w	8001246 <__udivmoddi4+0x292>
 8001068:	2600      	movs	r6, #0
 800106a:	e9c5 0100 	strd	r0, r1, [r5]
 800106e:	4630      	mov	r0, r6
 8001070:	4631      	mov	r1, r6
 8001072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001076:	fab3 f683 	clz	r6, r3
 800107a:	2e00      	cmp	r6, #0
 800107c:	d14a      	bne.n	8001114 <__udivmoddi4+0x160>
 800107e:	428b      	cmp	r3, r1
 8001080:	d302      	bcc.n	8001088 <__udivmoddi4+0xd4>
 8001082:	4282      	cmp	r2, r0
 8001084:	f200 80f9 	bhi.w	800127a <__udivmoddi4+0x2c6>
 8001088:	1a84      	subs	r4, r0, r2
 800108a:	eb61 0303 	sbc.w	r3, r1, r3
 800108e:	2001      	movs	r0, #1
 8001090:	469e      	mov	lr, r3
 8001092:	2d00      	cmp	r5, #0
 8001094:	d0e0      	beq.n	8001058 <__udivmoddi4+0xa4>
 8001096:	e9c5 4e00 	strd	r4, lr, [r5]
 800109a:	e7dd      	b.n	8001058 <__udivmoddi4+0xa4>
 800109c:	b902      	cbnz	r2, 80010a0 <__udivmoddi4+0xec>
 800109e:	deff      	udf	#255	; 0xff
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	f040 8092 	bne.w	80011ce <__udivmoddi4+0x21a>
 80010aa:	eba1 010c 	sub.w	r1, r1, ip
 80010ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010b2:	fa1f fe8c 	uxth.w	lr, ip
 80010b6:	2601      	movs	r6, #1
 80010b8:	0c20      	lsrs	r0, r4, #16
 80010ba:	fbb1 f3f7 	udiv	r3, r1, r7
 80010be:	fb07 1113 	mls	r1, r7, r3, r1
 80010c2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010c6:	fb0e f003 	mul.w	r0, lr, r3
 80010ca:	4288      	cmp	r0, r1
 80010cc:	d908      	bls.n	80010e0 <__udivmoddi4+0x12c>
 80010ce:	eb1c 0101 	adds.w	r1, ip, r1
 80010d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x12a>
 80010d8:	4288      	cmp	r0, r1
 80010da:	f200 80cb 	bhi.w	8001274 <__udivmoddi4+0x2c0>
 80010de:	4643      	mov	r3, r8
 80010e0:	1a09      	subs	r1, r1, r0
 80010e2:	b2a4      	uxth	r4, r4
 80010e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80010e8:	fb07 1110 	mls	r1, r7, r0, r1
 80010ec:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010f0:	fb0e fe00 	mul.w	lr, lr, r0
 80010f4:	45a6      	cmp	lr, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x156>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8001100:	d202      	bcs.n	8001108 <__udivmoddi4+0x154>
 8001102:	45a6      	cmp	lr, r4
 8001104:	f200 80bb 	bhi.w	800127e <__udivmoddi4+0x2ca>
 8001108:	4608      	mov	r0, r1
 800110a:	eba4 040e 	sub.w	r4, r4, lr
 800110e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001112:	e79c      	b.n	800104e <__udivmoddi4+0x9a>
 8001114:	f1c6 0720 	rsb	r7, r6, #32
 8001118:	40b3      	lsls	r3, r6
 800111a:	fa22 fc07 	lsr.w	ip, r2, r7
 800111e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001122:	fa20 f407 	lsr.w	r4, r0, r7
 8001126:	fa01 f306 	lsl.w	r3, r1, r6
 800112a:	431c      	orrs	r4, r3
 800112c:	40f9      	lsrs	r1, r7
 800112e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001132:	fa00 f306 	lsl.w	r3, r0, r6
 8001136:	fbb1 f8f9 	udiv	r8, r1, r9
 800113a:	0c20      	lsrs	r0, r4, #16
 800113c:	fa1f fe8c 	uxth.w	lr, ip
 8001140:	fb09 1118 	mls	r1, r9, r8, r1
 8001144:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001148:	fb08 f00e 	mul.w	r0, r8, lr
 800114c:	4288      	cmp	r0, r1
 800114e:	fa02 f206 	lsl.w	r2, r2, r6
 8001152:	d90b      	bls.n	800116c <__udivmoddi4+0x1b8>
 8001154:	eb1c 0101 	adds.w	r1, ip, r1
 8001158:	f108 3aff 	add.w	sl, r8, #4294967295
 800115c:	f080 8088 	bcs.w	8001270 <__udivmoddi4+0x2bc>
 8001160:	4288      	cmp	r0, r1
 8001162:	f240 8085 	bls.w	8001270 <__udivmoddi4+0x2bc>
 8001166:	f1a8 0802 	sub.w	r8, r8, #2
 800116a:	4461      	add	r1, ip
 800116c:	1a09      	subs	r1, r1, r0
 800116e:	b2a4      	uxth	r4, r4
 8001170:	fbb1 f0f9 	udiv	r0, r1, r9
 8001174:	fb09 1110 	mls	r1, r9, r0, r1
 8001178:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800117c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001180:	458e      	cmp	lr, r1
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x1e2>
 8001184:	eb1c 0101 	adds.w	r1, ip, r1
 8001188:	f100 34ff 	add.w	r4, r0, #4294967295
 800118c:	d26c      	bcs.n	8001268 <__udivmoddi4+0x2b4>
 800118e:	458e      	cmp	lr, r1
 8001190:	d96a      	bls.n	8001268 <__udivmoddi4+0x2b4>
 8001192:	3802      	subs	r0, #2
 8001194:	4461      	add	r1, ip
 8001196:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800119a:	fba0 9402 	umull	r9, r4, r0, r2
 800119e:	eba1 010e 	sub.w	r1, r1, lr
 80011a2:	42a1      	cmp	r1, r4
 80011a4:	46c8      	mov	r8, r9
 80011a6:	46a6      	mov	lr, r4
 80011a8:	d356      	bcc.n	8001258 <__udivmoddi4+0x2a4>
 80011aa:	d053      	beq.n	8001254 <__udivmoddi4+0x2a0>
 80011ac:	b15d      	cbz	r5, 80011c6 <__udivmoddi4+0x212>
 80011ae:	ebb3 0208 	subs.w	r2, r3, r8
 80011b2:	eb61 010e 	sbc.w	r1, r1, lr
 80011b6:	fa01 f707 	lsl.w	r7, r1, r7
 80011ba:	fa22 f306 	lsr.w	r3, r2, r6
 80011be:	40f1      	lsrs	r1, r6
 80011c0:	431f      	orrs	r7, r3
 80011c2:	e9c5 7100 	strd	r7, r1, [r5]
 80011c6:	2600      	movs	r6, #0
 80011c8:	4631      	mov	r1, r6
 80011ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ce:	f1c2 0320 	rsb	r3, r2, #32
 80011d2:	40d8      	lsrs	r0, r3
 80011d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d8:	fa21 f303 	lsr.w	r3, r1, r3
 80011dc:	4091      	lsls	r1, r2
 80011de:	4301      	orrs	r1, r0
 80011e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011e4:	fa1f fe8c 	uxth.w	lr, ip
 80011e8:	fbb3 f0f7 	udiv	r0, r3, r7
 80011ec:	fb07 3610 	mls	r6, r7, r0, r3
 80011f0:	0c0b      	lsrs	r3, r1, #16
 80011f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011f6:	fb00 f60e 	mul.w	r6, r0, lr
 80011fa:	429e      	cmp	r6, r3
 80011fc:	fa04 f402 	lsl.w	r4, r4, r2
 8001200:	d908      	bls.n	8001214 <__udivmoddi4+0x260>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 38ff 	add.w	r8, r0, #4294967295
 800120a:	d22f      	bcs.n	800126c <__udivmoddi4+0x2b8>
 800120c:	429e      	cmp	r6, r3
 800120e:	d92d      	bls.n	800126c <__udivmoddi4+0x2b8>
 8001210:	3802      	subs	r0, #2
 8001212:	4463      	add	r3, ip
 8001214:	1b9b      	subs	r3, r3, r6
 8001216:	b289      	uxth	r1, r1
 8001218:	fbb3 f6f7 	udiv	r6, r3, r7
 800121c:	fb07 3316 	mls	r3, r7, r6, r3
 8001220:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001224:	fb06 f30e 	mul.w	r3, r6, lr
 8001228:	428b      	cmp	r3, r1
 800122a:	d908      	bls.n	800123e <__udivmoddi4+0x28a>
 800122c:	eb1c 0101 	adds.w	r1, ip, r1
 8001230:	f106 38ff 	add.w	r8, r6, #4294967295
 8001234:	d216      	bcs.n	8001264 <__udivmoddi4+0x2b0>
 8001236:	428b      	cmp	r3, r1
 8001238:	d914      	bls.n	8001264 <__udivmoddi4+0x2b0>
 800123a:	3e02      	subs	r6, #2
 800123c:	4461      	add	r1, ip
 800123e:	1ac9      	subs	r1, r1, r3
 8001240:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001244:	e738      	b.n	80010b8 <__udivmoddi4+0x104>
 8001246:	462e      	mov	r6, r5
 8001248:	4628      	mov	r0, r5
 800124a:	e705      	b.n	8001058 <__udivmoddi4+0xa4>
 800124c:	4606      	mov	r6, r0
 800124e:	e6e3      	b.n	8001018 <__udivmoddi4+0x64>
 8001250:	4618      	mov	r0, r3
 8001252:	e6f8      	b.n	8001046 <__udivmoddi4+0x92>
 8001254:	454b      	cmp	r3, r9
 8001256:	d2a9      	bcs.n	80011ac <__udivmoddi4+0x1f8>
 8001258:	ebb9 0802 	subs.w	r8, r9, r2
 800125c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001260:	3801      	subs	r0, #1
 8001262:	e7a3      	b.n	80011ac <__udivmoddi4+0x1f8>
 8001264:	4646      	mov	r6, r8
 8001266:	e7ea      	b.n	800123e <__udivmoddi4+0x28a>
 8001268:	4620      	mov	r0, r4
 800126a:	e794      	b.n	8001196 <__udivmoddi4+0x1e2>
 800126c:	4640      	mov	r0, r8
 800126e:	e7d1      	b.n	8001214 <__udivmoddi4+0x260>
 8001270:	46d0      	mov	r8, sl
 8001272:	e77b      	b.n	800116c <__udivmoddi4+0x1b8>
 8001274:	3b02      	subs	r3, #2
 8001276:	4461      	add	r1, ip
 8001278:	e732      	b.n	80010e0 <__udivmoddi4+0x12c>
 800127a:	4630      	mov	r0, r6
 800127c:	e709      	b.n	8001092 <__udivmoddi4+0xde>
 800127e:	4464      	add	r4, ip
 8001280:	3802      	subs	r0, #2
 8001282:	e742      	b.n	800110a <__udivmoddi4+0x156>

08001284 <__aeabi_idiv0>:
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f001 fdc8 	bl	8002e2a <null_ptr_check>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d131      	bne.n	800130a <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7a1b      	ldrb	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d003      	beq.n	80012b6 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	729a      	strb	r2, [r3, #10]
 80012b4:	e002      	b.n	80012bc <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 80012bc:	f107 010e 	add.w	r1, r7, #14
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	2000      	movs	r0, #0
 80012c6:	f000 f826 	bl	8001316 <bmp3_get_regs>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d119      	bne.n	800130a <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	2b50      	cmp	r3, #80	; 0x50
 80012da:	d002      	beq.n	80012e2 <bmp3_init+0x5a>
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	2b60      	cmp	r3, #96	; 0x60
 80012e0:	d111      	bne.n	8001306 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 80012e2:	7bba      	ldrb	r2, [r7, #14]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f9ae 	bl	800164a <bmp3_soft_reset>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d107      	bne.n	800130a <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fb4e 	bl	800199c <get_calib_data>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8001304:	e001      	b.n	800130a <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8001306:	23f9      	movs	r3, #249	; 0xf9
 8001308:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8001316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	4603      	mov	r3, r0
 8001326:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f001 fd7e 	bl	8002e2a <null_ptr_check>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8001334:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001338:	2b00      	cmp	r3, #0
 800133a:	d172      	bne.n	8001422 <bmp3_get_regs+0x10c>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d06f      	beq.n	8001422 <bmp3_get_regs+0x10c>
    {
 8001342:	466b      	mov	r3, sp
 8001344:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	7a9b      	ldrb	r3, [r3, #10]
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4413      	add	r3, r2
 8001350:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	7a9b      	ldrb	r3, [r3, #10]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	18d1      	adds	r1, r2, r3
 800135c:	460b      	mov	r3, r1
 800135e:	3b01      	subs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	2300      	movs	r3, #0
 8001364:	4688      	mov	r8, r1
 8001366:	4699      	mov	r9, r3
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001374:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001378:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800137c:	2300      	movs	r3, #0
 800137e:	460c      	mov	r4, r1
 8001380:	461d      	mov	r5, r3
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	00eb      	lsls	r3, r5, #3
 800138c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001390:	00e2      	lsls	r2, r4, #3
 8001392:	1dcb      	adds	r3, r1, #7
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	ebad 0d03 	sub.w	sp, sp, r3
 800139c:	466b      	mov	r3, sp
 800139e:	3300      	adds	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	7a1b      	ldrb	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d025      	beq.n	80013f6 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013b0:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68dc      	ldr	r4, [r3, #12]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	7bf8      	ldrb	r0, [r7, #15]
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	6979      	ldr	r1, [r7, #20]
 80013c0:	47a0      	blx	r4
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	e00d      	b.n	80013ec <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	7a9b      	ldrb	r3, [r3, #10]
 80013d4:	461a      	mov	r2, r3
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	441a      	add	r2, r3
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	440b      	add	r3, r1
 80013e0:	6979      	ldr	r1, [r7, #20]
 80013e2:	5c8a      	ldrb	r2, [r1, r2]
 80013e4:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	3301      	adds	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3ed      	bcc.n	80013d0 <bmp3_get_regs+0xba>
 80013f4:	e00b      	b.n	800140e <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68dc      	ldr	r4, [r3, #12]
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	7bf8      	ldrb	r0, [r7, #15]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	68b9      	ldr	r1, [r7, #8]
 8001404:	47a0      	blx	r4
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d002      	beq.n	800141e <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8001418:	23fe      	movs	r3, #254	; 0xfe
 800141a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800141e:	46b5      	mov	sp, r6
    {
 8001420:	e002      	b.n	8001428 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001422:	23ff      	movs	r3, #255	; 0xff
 8001424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 8001428:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 800142c:	4618      	mov	r0, r3
 800142e:	372c      	adds	r7, #44	; 0x2c
 8001430:	46bd      	mov	sp, r7
 8001432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001436 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8001436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
 8001444:	603b      	str	r3, [r7, #0]
 8001446:	466b      	mov	r3, sp
 8001448:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	0059      	lsls	r1, r3, #1
 800144e:	460b      	mov	r3, r1
 8001450:	3b01      	subs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	2300      	movs	r3, #0
 8001456:	4688      	mov	r8, r1
 8001458:	4699      	mov	r9, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001466:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800146a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800146e:	2300      	movs	r3, #0
 8001470:	460c      	mov	r4, r1
 8001472:	461d      	mov	r5, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	00eb      	lsls	r3, r5, #3
 800147e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001482:	00e2      	lsls	r2, r4, #3
 8001484:	1dcb      	adds	r3, r1, #7
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	ebad 0d03 	sub.w	sp, sp, r3
 800148e:	466b      	mov	r3, sp
 8001490:	3300      	adds	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f001 fcc8 	bl	8002e2a <null_ptr_check>
 800149a:	4603      	mov	r3, r0
 800149c:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800149e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d14c      	bne.n	8001540 <bmp3_set_regs+0x10a>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d049      	beq.n	8001540 <bmp3_set_regs+0x10a>
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d046      	beq.n	8001540 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d040      	beq.n	800153a <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	7a1b      	ldrb	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d114      	bne.n	80014f2 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00d      	b.n	80014ea <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80014ce:	7ebb      	ldrb	r3, [r7, #26]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	4413      	add	r3, r2
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	7ebb      	ldrb	r3, [r7, #26]
 80014d8:	68f9      	ldr	r1, [r7, #12]
 80014da:	440b      	add	r3, r1
 80014dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80014e4:	7ebb      	ldrb	r3, [r7, #26]
 80014e6:	3301      	adds	r3, #1
 80014e8:	76bb      	strb	r3, [r7, #26]
 80014ea:	7ebb      	ldrb	r3, [r7, #26]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d8ed      	bhi.n	80014ce <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d909      	bls.n	800150c <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	6939      	ldr	r1, [r7, #16]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fa71 	bl	80019e6 <interleave_reg_addr>
                temp_len = len * 2;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	61fb      	str	r3, [r7, #28]
 800150a:	e001      	b.n	8001510 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	691c      	ldr	r4, [r3, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	7818      	ldrb	r0, [r3, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	47a0      	blx	r4
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 8001534:	23fe      	movs	r3, #254	; 0xfe
 8001536:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8001538:	e005      	b.n	8001546 <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800153a:	23fa      	movs	r3, #250	; 0xfa
 800153c:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 800153e:	e002      	b.n	8001546 <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001540:	23ff      	movs	r3, #255	; 0xff
 8001542:	76fb      	strb	r3, [r7, #27]
 8001544:	e000      	b.n	8001548 <bmp3_set_regs+0x112>
        if (len != 0)
 8001546:	bf00      	nop
    }

    return rslt;
 8001548:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800154c:	46b5      	mov	sp, r6
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001558 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d03a      	beq.n	80015e4 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	2006      	movs	r0, #6
 8001572:	f001 fc42 	bl	8002dfa <are_settings_changed>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 fa96 	bl	8001ab2 <set_pwr_ctrl_settings>
 8001586:	4603      	mov	r3, r0
 8001588:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800158a:	68f9      	ldr	r1, [r7, #12]
 800158c:	20f0      	movs	r0, #240	; 0xf0
 800158e:	f001 fc34 	bl	8002dfa <are_settings_changed>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 fad7 	bl	8001b50 <set_odr_filter_settings>
 80015a2:	4603      	mov	r3, r0
 80015a4:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 80015a6:	68f9      	ldr	r1, [r7, #12]
 80015a8:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 80015ac:	f001 fc25 	bl	8002dfa <are_settings_changed>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f000 fb36 	bl	8001c2c <set_int_ctrl_settings>
 80015c0:	4603      	mov	r3, r0
 80015c2:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80015c4:	68f9      	ldr	r1, [r7, #12]
 80015c6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80015ca:	f001 fc16 	bl	8002dfa <are_settings_changed>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d009      	beq.n	80015e8 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	68b9      	ldr	r1, [r7, #8]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fba1 	bl	8001d20 <set_advance_settings>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
 80015e2:	e001      	b.n	80015e8 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80015e4:	23ff      	movs	r3, #255	; 0xff
 80015e6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d01a      	beq.n	800163a <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f001 fc33 	bl	8002e72 <get_sensor_status>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8001610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d112      	bne.n	800163e <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 fc6c 	bl	8002ef8 <get_int_status>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8001624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d108      	bne.n	800163e <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 800162c:	6839      	ldr	r1, [r7, #0]
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f001 fc90 	bl	8002f54 <get_err_status>
 8001634:	4603      	mov	r3, r0
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	e001      	b.n	800163e <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800163a:	23ff      	movs	r3, #255	; 0xff
 800163c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800163e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8001652:	237e      	movs	r3, #126	; 0x7e
 8001654:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8001656:	23b6      	movs	r3, #182	; 0xb6
 8001658:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800165a:	f107 010c 	add.w	r1, r7, #12
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	2003      	movs	r0, #3
 8001664:	f7ff fe57 	bl	8001316 <bmp3_get_regs>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800166c:	7b3b      	ldrb	r3, [r7, #12]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b00      	cmp	r3, #0
 8001674:	d02d      	beq.n	80016d2 <bmp3_soft_reset+0x88>
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d129      	bne.n	80016d2 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800167e:	f107 010d 	add.w	r1, r7, #13
 8001682:	f107 000e 	add.w	r0, r7, #14
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f7ff fed4 	bl	8001436 <bmp3_set_regs>
 800168e:	4603      	mov	r3, r0
 8001690:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d11b      	bne.n	80016d2 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6852      	ldr	r2, [r2, #4]
 80016a2:	4611      	mov	r1, r2
 80016a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016a8:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 80016aa:	f107 010b 	add.w	r1, r7, #11
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	2002      	movs	r0, #2
 80016b4:	f7ff fe2f 	bl	8001316 <bmp3_get_regs>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80016bc:	7afb      	ldrb	r3, [r7, #11]
 80016be:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <bmp3_soft_reset+0x84>
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80016ce:	23fc      	movs	r3, #252	; 0xfc
 80016d0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f001 fb9e 	bl	8002e2a <null_ptr_check>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d139      	bne.n	800176e <bmp3_set_op_mode+0x90>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d036      	beq.n	800176e <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 8001706:	f107 030d 	add.w	r3, r7, #13
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f838 	bl	8001782 <bmp3_get_op_mode>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d010      	beq.n	800173e <bmp3_set_op_mode+0x60>
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f000 f8f7 	bl	8001918 <put_device_to_sleep>
 800172a:	4603      	mov	r3, r0
 800172c:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6852      	ldr	r2, [r2, #4]
 8001736:	4611      	mov	r1, r2
 8001738:	f241 3088 	movw	r0, #5000	; 0x1388
 800173c:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8001746:	7bbb      	ldrb	r3, [r7, #14]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d106      	bne.n	800175a <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f879 	bl	8001846 <set_normal_mode>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
    {
 8001758:	e00c      	b.n	8001774 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d109      	bne.n	8001774 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f8a2 	bl	80018ac <write_power_mode>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
    {
 800176c:	e002      	b.n	8001774 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800176e:	23ff      	movs	r3, #255	; 0xff
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	e000      	b.n	8001776 <bmp3_set_op_mode+0x98>
    {
 8001774:	bf00      	nop
    }

    return rslt;
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d011      	beq.n	80017b6 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	201b      	movs	r0, #27
 800179a:	f7ff fdbc 	bl	8001316 <bmp3_get_regs>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	111b      	asrs	r3, r3, #4
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e001      	b.n	80017ba <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80017b6:	23ff      	movs	r3, #255	; 0xff
 80017b8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b08a      	sub	sp, #40	; 0x28
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	4603      	mov	r3, r0
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
 80017d8:	2300      	movs	r3, #0
 80017da:	84bb      	strh	r3, [r7, #36]	; 0x24
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d021      	beq.n	8001834 <bmp3_get_sensor_data+0x6e>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80017f0:	f107 0120 	add.w	r1, r7, #32
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2206      	movs	r2, #6
 80017f8:	2004      	movs	r0, #4
 80017fa:	f7ff fd8c 	bl	8001316 <bmp3_get_regs>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BMP3_OK)
 8001804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001808:	2b00      	cmp	r3, #0
 800180a:	d116      	bne.n	800183a <bmp3_get_sensor_data+0x74>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	f107 0320 	add.w	r3, r7, #32
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fc50 	bl	80020bc <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3318      	adds	r3, #24
 8001820:	f107 0110 	add.w	r1, r7, #16
 8001824:	7bf8      	ldrb	r0, [r7, #15]
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f000 fc83 	bl	8002132 <compensate_data>
 800182c:	4603      	mov	r3, r0
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001832:	e002      	b.n	800183a <bmp3_get_sensor_data+0x74>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8001834:	23ff      	movs	r3, #255	; 0xff
 8001836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800183a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800183e:	4618      	mov	r0, r3
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f888 	bl	8001968 <validate_normal_mode_settings>
 8001858:	4603      	mov	r3, r0
 800185a:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 800185c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d11d      	bne.n	80018a0 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f820 	bl	80018ac <write_power_mode>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8001870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d113      	bne.n	80018a0 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 8001878:	f107 010e 	add.w	r1, r7, #14
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	2002      	movs	r0, #2
 8001882:	f7ff fd48 	bl	8001316 <bmp3_get_regs>
 8001886:	4603      	mov	r3, r0
 8001888:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d106      	bne.n	80018a0 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800189c:	23fb      	movs	r3, #251	; 0xfb
 800189e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80018b6:	231b      	movs	r3, #27
 80018b8:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80018c0:	7b78      	ldrb	r0, [r7, #13]
 80018c2:	f107 010c 	add.w	r1, r7, #12
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f7ff fd24 	bl	8001316 <bmp3_get_regs>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d118      	bne.n	800190c <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80018da:	7b3b      	ldrb	r3, [r7, #12]
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018e2:	b25a      	sxtb	r2, r3
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80018f8:	f107 010c 	add.w	r1, r7, #12
 80018fc:	f107 000d 	add.w	r0, r7, #13
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2201      	movs	r2, #1
 8001904:	f7ff fd97 	bl	8001436 <bmp3_set_regs>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001920:	231b      	movs	r3, #27
 8001922:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 8001924:	f107 010d 	add.w	r1, r7, #13
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	201b      	movs	r0, #27
 800192e:	f7ff fcf2 	bl	8001316 <bmp3_get_regs>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10e      	bne.n	800195c <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 800193e:	7b7b      	ldrb	r3, [r7, #13]
 8001940:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001944:	b2db      	uxtb	r3, r3
 8001946:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8001948:	f107 010d 	add.w	r1, r7, #13
 800194c:	f107 000e 	add.w	r0, r7, #14
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f7ff fd6f 	bl	8001436 <bmp3_set_regs>
 8001958:	4603      	mov	r3, r0
 800195a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8001972:	6839      	ldr	r1, [r7, #0]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fa26 	bl	8001dc6 <get_odr_filter_settings>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d104      	bne.n	8001990 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fa3a 	bl	8001e00 <validate_osr_and_odr_settings>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 80019a4:	2331      	movs	r3, #49	; 0x31
 80019a6:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80019bc:	f107 0108 	add.w	r1, r7, #8
 80019c0:	7ff8      	ldrb	r0, [r7, #31]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2215      	movs	r2, #21
 80019c6:	f7ff fca6 	bl	8001316 <bmp3_get_regs>
 80019ca:	4603      	mov	r3, r0
 80019cc:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fc1e 	bl	8002216 <parse_calib_data>

    return rslt;
 80019da:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b087      	sub	sp, #28
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80019f4:	2301      	movs	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	e015      	b.n	8001a26 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	441a      	add	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	3b01      	subs	r3, #1
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	440b      	add	r3, r1
 8001a0a:	7812      	ldrb	r2, [r2, #0]
 8001a0c:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	441a      	add	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	68b9      	ldr	r1, [r7, #8]
 8001a1a:	440b      	add	r3, r1
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3e5      	bcc.n	80019fa <interleave_reg_addr+0x14>
    }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	10db      	asrs	r3, r3, #3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	3301      	adds	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	105b      	asrs	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	709a      	strb	r2, [r3, #2]
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8001abe:	231b      	movs	r3, #27
 8001ac0:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001ac2:	7db8      	ldrb	r0, [r7, #22]
 8001ac4:	f107 0115 	add.w	r1, r7, #21
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f7ff fc23 	bl	8001316 <bmp3_get_regs>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001ad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d132      	bne.n	8001b42 <set_pwr_ctrl_settings+0x90>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00e      	beq.n	8001b04 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8001ae6:	7d7b      	ldrb	r3, [r7, #21]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	b25a      	sxtb	r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	785b      	ldrb	r3, [r3, #1]
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b25b      	sxtb	r3, r3
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00f      	beq.n	8001b2e <set_pwr_ctrl_settings+0x7c>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8001b0e:	7d7b      	ldrb	r3, [r7, #21]
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	f023 0302 	bic.w	r3, r3, #2
 8001b16:	b25a      	sxtb	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	789b      	ldrb	r3, [r3, #2]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	b25b      	sxtb	r3, r3
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	b25b      	sxtb	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001b2e:	f107 0115 	add.w	r1, r7, #21
 8001b32:	f107 0016 	add.w	r0, r7, #22
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f7ff fc7c 	bl	8001436 <bmp3_set_regs>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8001b5c:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <set_odr_filter_settings+0xd8>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	83bb      	strh	r3, [r7, #28]
 8001b62:	2300      	movs	r3, #0
 8001b64:	77bb      	strb	r3, [r7, #30]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001b6a:	f107 0118 	add.w	r1, r7, #24
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2204      	movs	r2, #4
 8001b72:	201c      	movs	r0, #28
 8001b74:	f7ff fbcf 	bl	8001316 <bmp3_get_regs>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8001b7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d14a      	bne.n	8001c1a <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	2030      	movs	r0, #48	; 0x30
 8001b88:	f001 f937 	bl	8002dfa <are_settings_changed>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <set_odr_filter_settings+0x5a>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8001b92:	f107 0017 	add.w	r0, r7, #23
 8001b96:	f107 0218 	add.w	r2, r7, #24
 8001b9a:	f107 011c 	add.w	r1, r7, #28
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f9c1 	bl	8001f2c <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	2080      	movs	r0, #128	; 0x80
 8001bae:	f001 f924 	bl	8002dfa <are_settings_changed>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d008      	beq.n	8001bca <set_odr_filter_settings+0x7a>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8001bb8:	f107 0217 	add.w	r2, r7, #23
 8001bbc:	f107 0118 	add.w	r1, r7, #24
 8001bc0:	f107 001c 	add.w	r0, r7, #28
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	f000 fa09 	bl	8001fdc <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	2040      	movs	r0, #64	; 0x40
 8001bce:	f001 f914 	bl	8002dfa <are_settings_changed>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <set_odr_filter_settings+0x9a>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8001bd8:	f107 0217 	add.w	r2, r7, #23
 8001bdc:	f107 0118 	add.w	r1, r7, #24
 8001be0:	f107 001c 	add.w	r0, r7, #28
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f000 fa33 	bl	8002050 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d104      	bne.n	8001bfc <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8001bf2:	68b8      	ldr	r0, [r7, #8]
 8001bf4:	f000 f904 	bl	8001e00 <validate_osr_and_odr_settings>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8001bfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f107 0118 	add.w	r1, r7, #24
 8001c0c:	f107 001c 	add.w	r0, r7, #28
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f7ff fc10 	bl	8001436 <bmp3_set_regs>
 8001c16:	4603      	mov	r3, r0
 8001c18:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8001c1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	08019310 	.word	0x08019310

08001c2c <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8001c38:	2319      	movs	r3, #25
 8001c3a:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001c3c:	7d78      	ldrb	r0, [r7, #21]
 8001c3e:	f107 0116 	add.w	r1, r7, #22
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f7ff fb66 	bl	8001316 <bmp3_get_regs>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d15e      	bne.n	8001d14 <set_int_ctrl_settings+0xe8>
    {
        int_settings = settings->int_settings;
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	3207      	adds	r2, #7
 8001c5e:	6810      	ldr	r0, [r2, #0]
 8001c60:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8001c6c:	7dbb      	ldrb	r3, [r7, #22]
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	7c3b      	ldrb	r3, [r7, #16]
 8001c78:	b25b      	sxtb	r3, r3
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00e      	beq.n	8001cb0 <set_int_ctrl_settings+0x84>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8001c92:	7dbb      	ldrb	r3, [r7, #22]
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	f023 0302 	bic.w	r3, r3, #2
 8001c9a:	b25a      	sxtb	r2, r3
 8001c9c:	7c7b      	ldrb	r3, [r7, #17]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00e      	beq.n	8001cd8 <set_int_ctrl_settings+0xac>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8001cba:	7dbb      	ldrb	r3, [r7, #22]
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	b25a      	sxtb	r2, r3
 8001cc4:	7cbb      	ldrb	r3, [r7, #18]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	b25b      	sxtb	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b25b      	sxtb	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <set_int_ctrl_settings+0xd4>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8001ce2:	7dbb      	ldrb	r3, [r7, #22]
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001cea:	b25a      	sxtb	r2, r3
 8001cec:	7cfb      	ldrb	r3, [r7, #19]
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001d00:	f107 0116 	add.w	r1, r7, #22
 8001d04:	f107 0015 	add.w	r0, r7, #21
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f7ff fb93 	bl	8001436 <bmp3_set_regs>
 8001d10:	4603      	mov	r3, r0
 8001d12:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	320b      	adds	r2, #11
 8001d34:	8812      	ldrh	r2, [r2, #0]
 8001d36:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8001d38:	231a      	movs	r3, #26
 8001d3a:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8001d3c:	7db8      	ldrb	r0, [r7, #22]
 8001d3e:	f107 0115 	add.w	r1, r7, #21
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f7ff fae6 	bl	8001316 <bmp3_get_regs>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8001d4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d131      	bne.n	8001dba <set_advance_settings+0x9a>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00e      	beq.n	8001d7e <set_advance_settings+0x5e>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8001d60:	7d7b      	ldrb	r3, [r7, #21]
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	f023 0302 	bic.w	r3, r3, #2
 8001d68:	b25a      	sxtb	r2, r3
 8001d6a:	7c3b      	ldrb	r3, [r7, #16]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b25b      	sxtb	r3, r3
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	b25b      	sxtb	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <set_advance_settings+0x86>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8001d88:	7d7b      	ldrb	r3, [r7, #21]
 8001d8a:	b25b      	sxtb	r3, r3
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	b25a      	sxtb	r2, r3
 8001d92:	7c7b      	ldrb	r3, [r7, #17]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8001da6:	f107 0115 	add.w	r1, r7, #21
 8001daa:	f107 0016 	add.w	r0, r7, #22
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f7ff fb40 	bl	8001436 <bmp3_set_regs>
 8001db6:	4603      	mov	r3, r0
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b084      	sub	sp, #16
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8001dd0:	f107 0108 	add.w	r1, r7, #8
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	201c      	movs	r0, #28
 8001dda:	f7ff fa9c 	bl	8001316 <bmp3_get_regs>
 8001dde:	4603      	mov	r3, r0
 8001de0:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1cda      	adds	r2, r3, #3
 8001de6:	f107 0308 	add.w	r3, r7, #8
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe25 	bl	8001a3c <parse_odr_filter_settings>

    return rslt;
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b098      	sub	sp, #96	; 0x60
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8001e08:	23ea      	movs	r3, #234	; 0xea
 8001e0a:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8001e10:	4a1a      	ldr	r2, [pc, #104]	; (8001e7c <validate_osr_and_odr_settings+0x7c>)
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4611      	mov	r1, r2
 8001e18:	2248      	movs	r2, #72	; 0x48
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f014 f886 	bl	8015f2c <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	785b      	ldrb	r3, [r3, #1]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f83f 	bl	8001eac <calculate_press_meas_time>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e32:	4413      	add	r3, r2
 8001e34:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (settings->temp_en)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	789b      	ldrb	r3, [r3, #2]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f854 	bl	8001eec <calculate_temp_meas_time>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e48:	4413      	add	r3, r2
 8001e4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8001e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e50:	4413      	add	r3, r2
 8001e52:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	799b      	ldrb	r3, [r3, #6]
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	3360      	adds	r3, #96	; 0x60
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001e62:	4619      	mov	r1, r3
 8001e64:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001e66:	f000 f80b 	bl	8001e80 <verify_meas_time_and_odr_duration>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8001e70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3760      	adds	r7, #96	; 0x60
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	08019314 	.word	0x08019314

08001e80 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d202      	bcs.n	8001e98 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	e001      	b.n	8001e9c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8001e98:	23fd      	movs	r3, #253	; 0xfd
 8001e9a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	3203      	adds	r2, #3
 8001ebc:	6810      	ldr	r0, [r2, #0]
 8001ebe:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8001ec4:	7a3a      	ldrb	r2, [r7, #8]
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 ff78 	bl	8002dc0 <pow_bmp3>
 8001ed0:	6138      	str	r0, [r7, #16]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001ee0:	60fb      	str	r3, [r7, #12]

    /* Output in microseconds */
    return press_meas_t;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	3203      	adds	r2, #3
 8001efc:	6810      	ldr	r0, [r2, #0]
 8001efe:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
    float partial_out;
#else
    uint8_t base = 2;
 8001f00:	2302      	movs	r3, #2
 8001f02:	75fb      	strb	r3, [r7, #23]
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8001f04:	7a7a      	ldrb	r2, [r7, #9]
 8001f06:	7dfb      	ldrb	r3, [r7, #23]
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 ff58 	bl	8002dc0 <pow_bmp3>
 8001f10:	6138      	str	r0, [r7, #16]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f18:	fb02 f303 	mul.w	r3, r2, r3
 8001f1c:	f203 1339 	addw	r3, r3, #313	; 0x139
 8001f20:	60fb      	str	r3, [r7, #12]

    /* Output in uint32_t */
    return temp_meas_t;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	3203      	adds	r2, #3
 8001f42:	6810      	ldr	r0, [r2, #0]
 8001f44:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d03f      	beq.n	8001fd0 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0310 	and.w	r3, r3, #16
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d013      	beq.n	8001f82 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	f023 0307 	bic.w	r3, r3, #7
 8001f64:	b25a      	sxtb	r2, r3
 8001f66:	7d3b      	ldrb	r3, [r7, #20]
 8001f68:	b25b      	sxtb	r3, r3
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b25a      	sxtb	r2, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	440b      	add	r3, r1
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d014      	beq.n	8001fb6 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001f96:	b25a      	sxtb	r2, r3
 8001f98:	7d7b      	ldrb	r3, [r7, #21]
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fa2:	b25b      	sxtb	r3, r3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	440b      	add	r3, r1
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	221c      	movs	r2, #28
 8001fc2:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	701a      	strb	r2, [r3, #0]
    }
}
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3303      	adds	r3, #3
 8001fee:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	78db      	ldrb	r3, [r3, #3]
 8001ff4:	2b11      	cmp	r3, #17
 8001ff6:	d902      	bls.n	8001ffe <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2211      	movs	r2, #17
 8001ffc:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	f023 031f 	bic.w	r3, r3, #31
 800200a:	b25a      	sxtb	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	78db      	ldrb	r3, [r3, #3]
 8002010:	b25b      	sxtb	r3, r3
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b25a      	sxtb	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	440b      	add	r3, r1
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	221d      	movs	r2, #29
 8002036:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	701a      	strb	r2, [r3, #0]
}
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	3203      	adds	r2, #3
 8002066:	6810      	ldr	r0, [r2, #0]
 8002068:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	3303      	adds	r3, #3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f023 030e 	bic.w	r3, r3, #14
 8002076:	b25a      	sxtb	r2, r3
 8002078:	7dbb      	ldrb	r3, [r7, #22]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	b25b      	sxtb	r3, r3
 800207e:	f003 030e 	and.w	r3, r3, #14
 8002082:	b25b      	sxtb	r3, r3
 8002084:	4313      	orrs	r3, r2
 8002086:	b25a      	sxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	4619      	mov	r1, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	440b      	add	r3, r1
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	221f      	movs	r2, #31
 80020a2:	701a      	strb	r2, [r3, #0]
    (*len)++;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	701a      	strb	r2, [r3, #0]
}
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 80020bc:	b4b0      	push	{r4, r5, r7}
 80020be:	b087      	sub	sp, #28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	7809      	ldrb	r1, [r1, #0]
 80020ca:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	3101      	adds	r1, #1
 80020d0:	7809      	ldrb	r1, [r1, #0]
 80020d2:	0209      	lsls	r1, r1, #8
 80020d4:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	3102      	adds	r1, #2
 80020da:	7809      	ldrb	r1, [r1, #0]
 80020dc:	0409      	lsls	r1, r1, #16
 80020de:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	6939      	ldr	r1, [r7, #16]
 80020e4:	4308      	orrs	r0, r1
 80020e6:	6979      	ldr	r1, [r7, #20]
 80020e8:	4301      	orrs	r1, r0
 80020ea:	2000      	movs	r0, #0
 80020ec:	460c      	mov	r4, r1
 80020ee:	4605      	mov	r5, r0
 80020f0:	6839      	ldr	r1, [r7, #0]
 80020f2:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	3103      	adds	r1, #3
 80020fa:	7809      	ldrb	r1, [r1, #0]
 80020fc:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	3104      	adds	r1, #4
 8002102:	7809      	ldrb	r1, [r1, #0]
 8002104:	0209      	lsls	r1, r1, #8
 8002106:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	3105      	adds	r1, #5
 800210c:	7809      	ldrb	r1, [r1, #0]
 800210e:	0409      	lsls	r1, r1, #16
 8002110:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	6939      	ldr	r1, [r7, #16]
 8002116:	4308      	orrs	r0, r1
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	4301      	orrs	r1, r0
 800211c:	2000      	movs	r0, #0
 800211e:	460a      	mov	r2, r1
 8002120:	4603      	mov	r3, r0
 8002122:	6839      	ldr	r1, [r7, #0]
 8002124:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	bcb0      	pop	{r4, r5, r7}
 8002130:	4770      	bx	lr

08002132 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4603      	mov	r3, r0
 8002140:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d05a      	beq.n	8002202 <compensate_data+0xd0>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d057      	beq.n	8002202 <compensate_data+0xd0>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d054      	beq.n	8002202 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d115      	bne.n	800218a <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f8ed 	bl	8002344 <compensate_temperature>
 800216a:	4603      	mov	r3, r0
 800216c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 800216e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d148      	bne.n	8002208 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3308      	adds	r3, #8
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f9f6 	bl	8002570 <compensate_pressure>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002188:	e03e      	b.n	8002208 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d116      	bne.n	80021be <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f8d4 	bl	8002344 <compensate_temperature>
            comp_data->temperature = 0;
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3308      	adds	r3, #8
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f9dc 	bl	8002570 <compensate_pressure>
 80021b8:	4603      	mov	r3, r0
 80021ba:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80021bc:	e024      	b.n	8002208 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d10f      	bne.n	80021e4 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 f8ba 	bl	8002344 <compensate_temperature>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80021e2:	e011      	b.n	8002208 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002200:	e002      	b.n	8002208 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8002202:	23ff      	movs	r3, #255	; 0xff
 8002204:	75fb      	strb	r3, [r7, #23]
 8002206:	e000      	b.n	800220a <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8002208:	bf00      	nop
    }

    return rslt;
 800220a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3318      	adds	r3, #24
 8002224:	60fb      	str	r3, [r7, #12]

    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	801a      	strh	r2, [r3, #0]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3303      	adds	r3, #3
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b21a      	sxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3302      	adds	r3, #2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21b      	sxth	r3, r3
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	805a      	strh	r2, [r3, #2]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b25a      	sxtb	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	711a      	strb	r2, [r3, #4]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3306      	adds	r3, #6
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	b21a      	sxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3305      	adds	r3, #5
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21a      	sxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	80da      	strh	r2, [r3, #6]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3308      	adds	r3, #8
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3307      	adds	r3, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	811a      	strh	r2, [r3, #8]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3309      	adds	r3, #9
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	729a      	strb	r2, [r3, #10]
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	330a      	adds	r3, #10
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b25a      	sxtb	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	72da      	strb	r2, [r3, #11]
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	330c      	adds	r3, #12
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	021b      	lsls	r3, r3, #8
 80022bc:	b21a      	sxth	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	330b      	adds	r3, #11
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	819a      	strh	r2, [r3, #12]
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	330e      	adds	r3, #14
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	b21a      	sxth	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	330d      	adds	r3, #13
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	81da      	strh	r2, [r3, #14]
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	330f      	adds	r3, #15
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25a      	sxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	741a      	strb	r2, [r3, #16]
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3310      	adds	r3, #16
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	b25a      	sxtb	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	745a      	strb	r2, [r3, #17]
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3312      	adds	r3, #18
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b21a      	sxth	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3311      	adds	r3, #17
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b21b      	sxth	r3, r3
 8002316:	4313      	orrs	r3, r2
 8002318:	b21a      	sxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	825a      	strh	r2, [r3, #18]
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3313      	adds	r3, #19
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25a      	sxtb	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	751a      	strb	r2, [r3, #20]
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3314      	adds	r3, #20
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25a      	sxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	755a      	strb	r2, [r3, #21]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <compensate_temperature>:
 * For eg : If returned temperature is 2426 then it is 2426/100 = 24 deg Celsius
 */
static int8_t compensate_temperature(int64_t *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 8002344:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002348:	b0a9      	sub	sp, #164	; 0xa4
 800234a:	af00      	add	r7, sp, #0
 800234c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800234e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002350:	657a      	str	r2, [r7, #84]	; 0x54
    int8_t rslt = BMP3_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    int64_t partial_data4;
    int64_t partial_data5;
    int64_t partial_data6;
    int64_t comp_temp;

    partial_data1 = (int64_t)(uncomp_data->temperature - ((int64_t)256 * calib_data->reg_calib_data.par_t1));
 8002358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800235a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800235e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	2200      	movs	r2, #0
 8002366:	461c      	mov	r4, r3
 8002368:	4615      	mov	r5, r2
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	022b      	lsls	r3, r5, #8
 8002374:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002378:	0222      	lsls	r2, r4, #8
 800237a:	1a84      	subs	r4, r0, r2
 800237c:	623c      	str	r4, [r7, #32]
 800237e:	eb61 0303 	sbc.w	r3, r1, r3
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002388:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    partial_data2 = (int64_t)(calib_data->reg_calib_data.par_t2 * partial_data1);
 800238c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800238e:	885b      	ldrh	r3, [r3, #2]
 8002390:	b29b      	uxth	r3, r3
 8002392:	2200      	movs	r2, #0
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
 8002396:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80023a0:	4622      	mov	r2, r4
 80023a2:	fb02 f203 	mul.w	r2, r2, r3
 80023a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023aa:	4629      	mov	r1, r5
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	441a      	add	r2, r3
 80023b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023b6:	4621      	mov	r1, r4
 80023b8:	fba3 ab01 	umull	sl, fp, r3, r1
 80023bc:	eb02 030b 	add.w	r3, r2, fp
 80023c0:	469b      	mov	fp, r3
 80023c2:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
 80023c6:	e9c7 ab20 	strd	sl, fp, [r7, #128]	; 0x80
    partial_data3 = (int64_t)(partial_data1 * partial_data1);
 80023ca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d2:	fb03 f102 	mul.w	r1, r3, r2
 80023d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80023da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	18ca      	adds	r2, r1, r3
 80023e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023e8:	fba3 1303 	umull	r1, r3, r3, r3
 80023ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023ee:	460b      	mov	r3, r1
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023f8:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80023fc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
 8002400:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    partial_data4 = (int64_t)partial_data3 * calib_data->reg_calib_data.par_t3;
 8002404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002406:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800240a:	b25b      	sxtb	r3, r3
 800240c:	17da      	asrs	r2, r3, #31
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
 8002410:	637a      	str	r2, [r7, #52]	; 0x34
 8002412:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002414:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002418:	4622      	mov	r2, r4
 800241a:	fb02 f203 	mul.w	r2, r2, r3
 800241e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002420:	4629      	mov	r1, r5
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	441a      	add	r2, r3
 8002428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800242a:	4621      	mov	r1, r4
 800242c:	fba3 1301 	umull	r1, r3, r3, r1
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
 8002432:	460b      	mov	r3, r1
 8002434:	643b      	str	r3, [r7, #64]	; 0x40
 8002436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	647b      	str	r3, [r7, #68]	; 0x44
 800243c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002440:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
 8002444:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    partial_data5 = (int64_t)((int64_t)(partial_data2 * 262144) + partial_data4);
 8002448:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800244c:	f04f 0000 	mov.w	r0, #0
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	0499      	lsls	r1, r3, #18
 8002456:	ea41 3192 	orr.w	r1, r1, r2, lsr #14
 800245a:	0490      	lsls	r0, r2, #18
 800245c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002460:	1814      	adds	r4, r2, r0
 8002462:	61bc      	str	r4, [r7, #24]
 8002464:	414b      	adcs	r3, r1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800246c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    partial_data6 = (int64_t)(partial_data5 / 4294967296);
 8002470:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002474:	2b00      	cmp	r3, #0
 8002476:	da06      	bge.n	8002486 <compensate_temperature+0x142>
 8002478:	1e51      	subs	r1, r2, #1
 800247a:	6139      	str	r1, [r7, #16]
 800247c:	f143 0300 	adc.w	r3, r3, #0
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002486:	f04f 0000 	mov.w	r0, #0
 800248a:	f04f 0100 	mov.w	r1, #0
 800248e:	0018      	movs	r0, r3
 8002490:	17d9      	asrs	r1, r3, #31
 8002492:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60

    /* Store t_lin in dev. structure for pressure calculation */
    calib_data->reg_calib_data.t_lin = (int64_t)partial_data6;
 8002496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002498:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800249c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    comp_temp = (int64_t)((partial_data6 * 25) / 16384);
 80024a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	1894      	adds	r4, r2, r2
 80024aa:	60bc      	str	r4, [r7, #8]
 80024ac:	415b      	adcs	r3, r3
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b4:	eb12 0800 	adds.w	r8, r2, r0
 80024b8:	eb43 0901 	adc.w	r9, r3, r1
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d0:	4690      	mov	r8, r2
 80024d2:	4699      	mov	r9, r3
 80024d4:	eb18 0300 	adds.w	r3, r8, r0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	eb49 0301 	adc.w	r3, r9, r1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	da08      	bge.n	80024fa <compensate_temperature+0x1b6>
 80024e8:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80024ec:	1851      	adds	r1, r2, r1
 80024ee:	6039      	str	r1, [r7, #0]
 80024f0:	f143 0300 	adc.w	r3, r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	0b90      	lsrs	r0, r2, #14
 8002504:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
 8002508:	1399      	asrs	r1, r3, #14
 800250a:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90

    if (comp_temp < BMP3_MIN_TEMP_INT)
 800250e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002512:	f512 6f7a 	cmn.w	r2, #4000	; 0xfa0
 8002516:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 800251a:	da07      	bge.n	800252c <compensate_temperature+0x1e8>
    {
        comp_temp = BMP3_MIN_TEMP_INT;
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <compensate_temperature+0x224>)
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
 8002522:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        rslt = BMP3_W_MIN_TEMP;
 8002526:	2303      	movs	r3, #3
 8002528:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    }

    if (comp_temp > BMP3_MAX_TEMP_INT)
 800252c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002530:	f242 1135 	movw	r1, #8501	; 0x2135
 8002534:	428a      	cmp	r2, r1
 8002536:	f173 0300 	sbcs.w	r3, r3, #0
 800253a:	db08      	blt.n	800254e <compensate_temperature+0x20a>
    {
        comp_temp = BMP3_MAX_TEMP_INT;
 800253c:	f242 1234 	movw	r2, #8500	; 0x2134
 8002540:	f04f 0300 	mov.w	r3, #0
 8002544:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
        rslt = BMP3_W_MAX_TEMP;
 8002548:	2304      	movs	r3, #4
 800254a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
    }

    (*temperature) = comp_temp;
 800254e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002550:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002554:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002558:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800255c:	4618      	mov	r0, r3
 800255e:	37a4      	adds	r7, #164	; 0xa4
 8002560:	46bd      	mov	sp, r7
 8002562:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002566:	4770      	bx	lr
 8002568:	fffff060 	.word	0xfffff060
 800256c:	00000000 	.word	0x00000000

08002570 <compensate_pressure>:
 * for eg return if pressure is 9528709 which is 9528709/100 = 95287.09 Pascal
 */
static int8_t compensate_pressure(uint64_t *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 8002570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002574:	b0f8      	sub	sp, #480	; 0x1e0
 8002576:	af00      	add	r7, sp, #0
 8002578:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800257c:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8002580:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
    int8_t rslt = BMP3_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    const struct bmp3_reg_calib_data *reg_calib_data = &calib_data->reg_calib_data;
 800258a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800258e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    int64_t partial_data6;
    int64_t offset;
    int64_t sensitivity;
    uint64_t comp_press;

    partial_data1 = (int64_t)(reg_calib_data->t_lin * reg_calib_data->t_lin);
 8002592:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002596:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800259a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800259e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025a2:	fb02 f501 	mul.w	r5, r2, r1
 80025a6:	fb00 f403 	mul.w	r4, r0, r3
 80025aa:	442c      	add	r4, r5
 80025ac:	fba0 8902 	umull	r8, r9, r0, r2
 80025b0:	eb04 0309 	add.w	r3, r4, r9
 80025b4:	4699      	mov	r9, r3
 80025b6:	e9c7 8970 	strd	r8, r9, [r7, #448]	; 0x1c0
 80025ba:	e9c7 8970 	strd	r8, r9, [r7, #448]	; 0x1c0
    partial_data2 = (int64_t)(partial_data1 / 64);
 80025be:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	da07      	bge.n	80025d6 <compensate_pressure+0x66>
 80025c6:	f112 013f 	adds.w	r1, r2, #63	; 0x3f
 80025ca:	67b9      	str	r1, [r7, #120]	; 0x78
 80025cc:	f143 0300 	adc.w	r3, r3, #0
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80025d6:	f04f 0000 	mov.w	r0, #0
 80025da:	f04f 0100 	mov.w	r1, #0
 80025de:	0990      	lsrs	r0, r2, #6
 80025e0:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 80025e4:	1199      	asrs	r1, r3, #6
 80025e6:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
    partial_data3 = (int64_t)((partial_data2 * reg_calib_data->t_lin) / 256);
 80025ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80025ee:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025f2:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 80025f6:	fb03 f001 	mul.w	r0, r3, r1
 80025fa:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 80025fe:	fb02 f101 	mul.w	r1, r2, r1
 8002602:	4408      	add	r0, r1
 8002604:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8002608:	fba1 ab02 	umull	sl, fp, r1, r2
 800260c:	eb00 030b 	add.w	r3, r0, fp
 8002610:	469b      	mov	fp, r3
 8002612:	4652      	mov	r2, sl
 8002614:	465b      	mov	r3, fp
 8002616:	2b00      	cmp	r3, #0
 8002618:	da07      	bge.n	800262a <compensate_pressure+0xba>
 800261a:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 800261e:	6739      	str	r1, [r7, #112]	; 0x70
 8002620:	f143 0300 	adc.w	r3, r3, #0
 8002624:	677b      	str	r3, [r7, #116]	; 0x74
 8002626:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	0a10      	lsrs	r0, r2, #8
 8002634:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002638:	1219      	asrs	r1, r3, #8
 800263a:	e9c7 016c 	strd	r0, r1, [r7, #432]	; 0x1b0
    partial_data4 = (int64_t)((reg_calib_data->par_p8 * partial_data3) / 32);
 800263e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002642:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8002646:	b25b      	sxtb	r3, r3
 8002648:	17da      	asrs	r2, r3, #31
 800264a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800264e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002652:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002656:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800265a:	462a      	mov	r2, r5
 800265c:	fb02 f203 	mul.w	r2, r2, r3
 8002660:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002664:	4621      	mov	r1, r4
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	441a      	add	r2, r3
 800266c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002670:	4621      	mov	r1, r4
 8002672:	fba3 1301 	umull	r1, r3, r3, r1
 8002676:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800267a:	460b      	mov	r3, r1
 800267c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002680:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002684:	18d3      	adds	r3, r2, r3
 8002686:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800268a:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800268e:	2b00      	cmp	r3, #0
 8002690:	da07      	bge.n	80026a2 <compensate_pressure+0x132>
 8002692:	f112 011f 	adds.w	r1, r2, #31
 8002696:	66b9      	str	r1, [r7, #104]	; 0x68
 8002698:	f143 0300 	adc.w	r3, r3, #0
 800269c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800269e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80026a2:	f04f 0000 	mov.w	r0, #0
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	0950      	lsrs	r0, r2, #5
 80026ac:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 80026b0:	1159      	asrs	r1, r3, #5
 80026b2:	e9c7 016a 	strd	r0, r1, [r7, #424]	; 0x1a8
    partial_data5 = (int64_t)((reg_calib_data->par_p7 * partial_data1) * 16);
 80026b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80026ba:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	17da      	asrs	r2, r3, #31
 80026c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80026c6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80026ca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80026ce:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80026d2:	462a      	mov	r2, r5
 80026d4:	fb02 f203 	mul.w	r2, r2, r3
 80026d8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80026dc:	4621      	mov	r1, r4
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	441a      	add	r2, r3
 80026e4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80026e8:	4621      	mov	r1, r4
 80026ea:	fba3 1301 	umull	r1, r3, r3, r1
 80026ee:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80026f2:	460b      	mov	r3, r1
 80026f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80026f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 800270e:	4629      	mov	r1, r5
 8002710:	010b      	lsls	r3, r1, #4
 8002712:	4621      	mov	r1, r4
 8002714:	ea43 7311 	orr.w	r3, r3, r1, lsr #28
 8002718:	4621      	mov	r1, r4
 800271a:	010a      	lsls	r2, r1, #4
 800271c:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    partial_data6 = (int64_t)((reg_calib_data->par_p6 * reg_calib_data->t_lin) * 4194304);
 8002720:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002724:	89db      	ldrh	r3, [r3, #14]
 8002726:	b29b      	uxth	r3, r3
 8002728:	2200      	movs	r2, #0
 800272a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800272e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002732:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002736:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800273a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800273e:	4629      	mov	r1, r5
 8002740:	fb02 f001 	mul.w	r0, r2, r1
 8002744:	4621      	mov	r1, r4
 8002746:	fb01 f103 	mul.w	r1, r1, r3
 800274a:	4401      	add	r1, r0
 800274c:	4620      	mov	r0, r4
 800274e:	fba0 2302 	umull	r2, r3, r0, r2
 8002752:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002756:	4613      	mov	r3, r2
 8002758:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800275c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002760:	18cb      	adds	r3, r1, r3
 8002762:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002772:	4629      	mov	r1, r5
 8002774:	058b      	lsls	r3, r1, #22
 8002776:	4621      	mov	r1, r4
 8002778:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 800277c:	4621      	mov	r1, r4
 800277e:	058a      	lsls	r2, r1, #22
 8002780:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
    offset = (int64_t)((reg_calib_data->par_p5 * 140737488355328) + partial_data4 + partial_data5 + partial_data6);
 8002784:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002788:	899b      	ldrh	r3, [r3, #12]
 800278a:	b29b      	uxth	r3, r3
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002792:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002796:	f04f 0000 	mov.w	r0, #0
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80027a2:	03d9      	lsls	r1, r3, #15
 80027a4:	2000      	movs	r0, #0
 80027a6:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 80027aa:	1884      	adds	r4, r0, r2
 80027ac:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 80027b0:	eb41 0303 	adc.w	r3, r1, r3
 80027b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80027b8:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80027bc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027c0:	4621      	mov	r1, r4
 80027c2:	1889      	adds	r1, r1, r2
 80027c4:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80027c8:	4629      	mov	r1, r5
 80027ca:	eb43 0101 	adc.w	r1, r3, r1
 80027ce:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80027d2:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80027d6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80027da:	4621      	mov	r1, r4
 80027dc:	1851      	adds	r1, r2, r1
 80027de:	6639      	str	r1, [r7, #96]	; 0x60
 80027e0:	4629      	mov	r1, r5
 80027e2:	eb43 0101 	adc.w	r1, r3, r1
 80027e6:	6679      	str	r1, [r7, #100]	; 0x64
 80027e8:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80027ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    partial_data2 = (int64_t)((reg_calib_data->par_p4 * partial_data3) / 32);
 80027f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80027f4:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	17da      	asrs	r2, r3, #31
 80027fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002800:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002804:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002808:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800280c:	462a      	mov	r2, r5
 800280e:	fb02 f203 	mul.w	r2, r2, r3
 8002812:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002816:	4621      	mov	r1, r4
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	441a      	add	r2, r3
 800281e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002822:	4621      	mov	r1, r4
 8002824:	fba3 1301 	umull	r1, r3, r3, r1
 8002828:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800282c:	460b      	mov	r3, r1
 800282e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002832:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002836:	18d3      	adds	r3, r2, r3
 8002838:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800283c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002840:	2b00      	cmp	r3, #0
 8002842:	da07      	bge.n	8002854 <compensate_pressure+0x2e4>
 8002844:	f112 011f 	adds.w	r1, r2, #31
 8002848:	65b9      	str	r1, [r7, #88]	; 0x58
 800284a:	f143 0300 	adc.w	r3, r3, #0
 800284e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002850:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	0950      	lsrs	r0, r2, #5
 800285e:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 8002862:	1159      	asrs	r1, r3, #5
 8002864:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
    partial_data4 = (int64_t)((reg_calib_data->par_p3 * partial_data1) * 4);
 8002868:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800286c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	17da      	asrs	r2, r3, #31
 8002874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800287c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002880:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002884:	462a      	mov	r2, r5
 8002886:	fb02 f203 	mul.w	r2, r2, r3
 800288a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800288e:	4621      	mov	r1, r4
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	441a      	add	r2, r3
 8002896:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800289a:	4621      	mov	r1, r4
 800289c:	fba3 1301 	umull	r1, r3, r3, r1
 80028a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028a4:	460b      	mov	r3, r1
 80028a6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80028ae:	18d3      	adds	r3, r2, r3
 80028b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80028c0:	4629      	mov	r1, r5
 80028c2:	008b      	lsls	r3, r1, #2
 80028c4:	4621      	mov	r1, r4
 80028c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ca:	4621      	mov	r1, r4
 80028cc:	008a      	lsls	r2, r1, #2
 80028ce:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8
    partial_data5 = (int64_t)((reg_calib_data->par_p2 - (int32_t)16384) * reg_calib_data->t_lin * 2097152);
 80028d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80028d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80028de:	17da      	asrs	r2, r3, #31
 80028e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028e4:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80028e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80028ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028f0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80028f4:	4629      	mov	r1, r5
 80028f6:	fb02 f001 	mul.w	r0, r2, r1
 80028fa:	4621      	mov	r1, r4
 80028fc:	fb01 f103 	mul.w	r1, r1, r3
 8002900:	4401      	add	r1, r0
 8002902:	4620      	mov	r0, r4
 8002904:	fba0 2302 	umull	r2, r3, r0, r2
 8002908:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800290c:	4613      	mov	r3, r2
 800290e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002916:	18cb      	adds	r3, r1, r3
 8002918:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8002928:	4629      	mov	r1, r5
 800292a:	054b      	lsls	r3, r1, #21
 800292c:	4621      	mov	r1, r4
 800292e:	ea43 23d1 	orr.w	r3, r3, r1, lsr #11
 8002932:	4621      	mov	r1, r4
 8002934:	054a      	lsls	r2, r1, #21
 8002936:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    sensitivity =
        (int64_t)(((reg_calib_data->par_p1 - (int32_t)16384) * 70368744177664) + partial_data2 + partial_data4 +
 800293a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800293e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002942:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8002946:	17da      	asrs	r2, r3, #31
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800294c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800295c:	0399      	lsls	r1, r3, #14
 800295e:	2000      	movs	r0, #0
 8002960:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002964:	1884      	adds	r4, r0, r2
 8002966:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800296a:	eb41 0303 	adc.w	r3, r1, r3
 800296e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002972:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8002976:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800297a:	4621      	mov	r1, r4
 800297c:	1889      	adds	r1, r1, r2
 800297e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002982:	4629      	mov	r1, r5
 8002984:	eb43 0101 	adc.w	r1, r3, r1
 8002988:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    sensitivity =
 800298c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002990:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8002994:	4621      	mov	r1, r4
 8002996:	1851      	adds	r1, r2, r1
 8002998:	6539      	str	r1, [r7, #80]	; 0x50
 800299a:	4629      	mov	r1, r5
 800299c:	eb43 0101 	adc.w	r1, r3, r1
 80029a0:	6579      	str	r1, [r7, #84]	; 0x54
 80029a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80029a6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
                  partial_data5);
    partial_data1 = (int64_t)((sensitivity / 16777216) * uncomp_data->pressure);
 80029aa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da08      	bge.n	80029c4 <compensate_pressure+0x454>
 80029b2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80029b6:	1851      	adds	r1, r2, r1
 80029b8:	64b9      	str	r1, [r7, #72]	; 0x48
 80029ba:	f143 0300 	adc.w	r3, r3, #0
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029c4:	f04f 0000 	mov.w	r0, #0
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	0e10      	lsrs	r0, r2, #24
 80029ce:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80029d2:	1619      	asrs	r1, r3, #24
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	fb02 f501 	mul.w	r5, r2, r1
 80029e8:	fb00 f403 	mul.w	r4, r0, r3
 80029ec:	442c      	add	r4, r5
 80029ee:	fba0 2302 	umull	r2, r3, r0, r2
 80029f2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80029f6:	4613      	mov	r3, r2
 80029f8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80029fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002a00:	18e3      	adds	r3, r4, r3
 8002a02:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002a06:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002a0a:	e9c7 3470 	strd	r3, r4, [r7, #448]	; 0x1c0
    partial_data2 = (int64_t)(reg_calib_data->par_p10 * reg_calib_data->t_lin);
 8002a0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a12:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	17da      	asrs	r2, r3, #31
 8002a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a1e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a26:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a2a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8002a2e:	4629      	mov	r1, r5
 8002a30:	fb02 f001 	mul.w	r0, r2, r1
 8002a34:	4621      	mov	r1, r4
 8002a36:	fb01 f103 	mul.w	r1, r1, r3
 8002a3a:	4401      	add	r1, r0
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	fba0 2302 	umull	r2, r3, r0, r2
 8002a42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a46:	4613      	mov	r3, r2
 8002a48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a50:	18cb      	adds	r3, r1, r3
 8002a52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a56:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a5a:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
 8002a5e:	e9c7 346e 	strd	r3, r4, [r7, #440]	; 0x1b8
    partial_data3 = (int64_t)(partial_data2 + ((int32_t)65536 * reg_calib_data->par_p9));
 8002a62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002a66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002a6a:	041b      	lsls	r3, r3, #16
 8002a6c:	17da      	asrs	r2, r3, #31
 8002a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a76:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002a7a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8002a7e:	4621      	mov	r1, r4
 8002a80:	1851      	adds	r1, r2, r1
 8002a82:	6439      	str	r1, [r7, #64]	; 0x40
 8002a84:	4629      	mov	r1, r5
 8002a86:	eb43 0101 	adc.w	r1, r3, r1
 8002a8a:	6479      	str	r1, [r7, #68]	; 0x44
 8002a8c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002a90:	e9c7 346c 	strd	r3, r4, [r7, #432]	; 0x1b0
    partial_data4 = (int64_t)((partial_data3 * uncomp_data->pressure) / (int32_t)8192);
 8002a94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a9c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002aa0:	fb02 f501 	mul.w	r5, r2, r1
 8002aa4:	fb00 f403 	mul.w	r4, r0, r3
 8002aa8:	442c      	add	r4, r5
 8002aaa:	fba0 2302 	umull	r2, r3, r0, r2
 8002aae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002ab8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002abc:	18e3      	adds	r3, r4, r3
 8002abe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8002ace:	4621      	mov	r1, r4
 8002ad0:	0b4a      	lsrs	r2, r1, #13
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8002ad8:	4629      	mov	r1, r5
 8002ada:	0b4b      	lsrs	r3, r1, #13
 8002adc:	e9c7 236a 	strd	r2, r3, [r7, #424]	; 0x1a8

    /* dividing by 10 followed by multiplying by 10
     * To avoid overflow caused by (uncomp_data->pressure * partial_data4)
     */
    partial_data5 = (int64_t)((uncomp_data->pressure * (partial_data4 / 10)) / (int32_t)512);
 8002ae0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ae4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002ae8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8002aec:	f04f 020a 	mov.w	r2, #10
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f7fe f9f6 	bl	8000ee4 <__aeabi_ldivmod>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	fb02 f005 	mul.w	r0, r2, r5
 8002b00:	fb04 f103 	mul.w	r1, r4, r3
 8002b04:	4401      	add	r1, r0
 8002b06:	fba4 2302 	umull	r2, r3, r4, r2
 8002b0a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b0e:	4613      	mov	r3, r2
 8002b10:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002b14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b18:	18cb      	adds	r3, r1, r3
 8002b1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	0a4a      	lsrs	r2, r1, #9
 8002b2e:	4629      	mov	r1, r5
 8002b30:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8002b34:	4629      	mov	r1, r5
 8002b36:	0a4b      	lsrs	r3, r1, #9
 8002b38:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
    partial_data5 = (int64_t)(partial_data5 * 10);
 8002b3c:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8002b40:	4622      	mov	r2, r4
 8002b42:	462b      	mov	r3, r5
 8002b44:	f04f 0000 	mov.w	r0, #0
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	0099      	lsls	r1, r3, #2
 8002b4e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002b52:	0090      	lsls	r0, r2, #2
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	1911      	adds	r1, r2, r4
 8002b5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b5c:	416b      	adcs	r3, r5
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b60:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002b64:	460b      	mov	r3, r1
 8002b66:	18db      	adds	r3, r3, r3
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	eb42 0303 	adc.w	r3, r2, r3
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
 8002b72:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002b76:	e9c7 3468 	strd	r3, r4, [r7, #416]	; 0x1a0
    partial_data6 = (int64_t)(uncomp_data->pressure * uncomp_data->pressure);
 8002b7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	fb02 f501 	mul.w	r5, r2, r1
 8002b8e:	fb00 f403 	mul.w	r4, r0, r3
 8002b92:	442c      	add	r4, r5
 8002b94:	fba0 2302 	umull	r2, r3, r0, r2
 8002b98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002ba6:	18e3      	adds	r3, r4, r3
 8002ba8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002bac:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8002bb0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
    partial_data2 = (int64_t)((reg_calib_data->par_p11 * partial_data6) / (int32_t)65536);
 8002bb4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002bb8:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002bbc:	b25b      	sxtb	r3, r3
 8002bbe:	17da      	asrs	r2, r3, #31
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002bc4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002bc8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002bcc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002bd0:	462a      	mov	r2, r5
 8002bd2:	fb02 f203 	mul.w	r2, r2, r3
 8002bd6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002bda:	4621      	mov	r1, r4
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	441a      	add	r2, r3
 8002be2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002be6:	4621      	mov	r1, r4
 8002be8:	fba3 1301 	umull	r1, r3, r3, r1
 8002bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002bf6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002bfa:	18d3      	adds	r3, r2, r3
 8002bfc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002c00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	da08      	bge.n	8002c1a <compensate_pressure+0x6aa>
 8002c08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c0c:	1851      	adds	r1, r2, r1
 8002c0e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002c10:	f143 0300 	adc.w	r3, r3, #0
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0c10      	lsrs	r0, r2, #16
 8002c24:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002c28:	1419      	asrs	r1, r3, #16
 8002c2a:	e9c7 016e 	strd	r0, r1, [r7, #440]	; 0x1b8
    partial_data3 = (int64_t)((int64_t)(partial_data2 * uncomp_data->pressure) / 128);
 8002c2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c36:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002c3a:	fb02 f501 	mul.w	r5, r2, r1
 8002c3e:	fb00 f403 	mul.w	r4, r0, r3
 8002c42:	442c      	add	r4, r5
 8002c44:	fba0 2302 	umull	r2, r3, r0, r2
 8002c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c56:	18e3      	adds	r3, r4, r3
 8002c58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002c5c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da07      	bge.n	8002c74 <compensate_pressure+0x704>
 8002c64:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8002c68:	6239      	str	r1, [r7, #32]
 8002c6a:	f143 0300 	adc.w	r3, r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c74:	f04f 0000 	mov.w	r0, #0
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	09d0      	lsrs	r0, r2, #7
 8002c7e:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8002c82:	11d9      	asrs	r1, r3, #7
 8002c84:	e9c7 016c 	strd	r0, r1, [r7, #432]	; 0x1b0
    partial_data4 = (int64_t)((offset / 4) + partial_data1 + partial_data5 + partial_data3);
 8002c88:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da06      	bge.n	8002c9e <compensate_pressure+0x72e>
 8002c90:	1cd1      	adds	r1, r2, #3
 8002c92:	61b9      	str	r1, [r7, #24]
 8002c94:	f143 0300 	adc.w	r3, r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9e:	f04f 0000 	mov.w	r0, #0
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	0890      	lsrs	r0, r2, #2
 8002ca8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 8002cac:	1099      	asrs	r1, r3, #2
 8002cae:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8002cb2:	1884      	adds	r4, r0, r2
 8002cb4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8002cb8:	eb41 0303 	adc.w	r3, r1, r3
 8002cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cc0:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002cc4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002cc8:	4621      	mov	r1, r4
 8002cca:	1889      	adds	r1, r1, r2
 8002ccc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	eb43 0101 	adc.w	r1, r3, r1
 8002cd6:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8002cda:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002cde:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	1851      	adds	r1, r2, r1
 8002ce6:	6139      	str	r1, [r7, #16]
 8002ce8:	4629      	mov	r1, r5
 8002cea:	eb43 0101 	adc.w	r1, r3, r1
 8002cee:	6179      	str	r1, [r7, #20]
 8002cf0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002cf4:	e9c7 346a 	strd	r3, r4, [r7, #424]	; 0x1a8
    comp_press = (((uint64_t)partial_data4 * 25) / (uint64_t)1099511627776);
 8002cf8:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	1894      	adds	r4, r2, r2
 8002d02:	60bc      	str	r4, [r7, #8]
 8002d04:	415b      	adcs	r3, r3
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d0c:	1814      	adds	r4, r2, r0
 8002d0e:	603c      	str	r4, [r7, #0]
 8002d10:	414b      	adcs	r3, r1
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002d20:	464c      	mov	r4, r9
 8002d22:	00e3      	lsls	r3, r4, #3
 8002d24:	4644      	mov	r4, r8
 8002d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2a:	4644      	mov	r4, r8
 8002d2c:	00e2      	lsls	r2, r4, #3
 8002d2e:	4614      	mov	r4, r2
 8002d30:	461d      	mov	r5, r3
 8002d32:	4623      	mov	r3, r4
 8002d34:	181b      	adds	r3, r3, r0
 8002d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	eb41 0303 	adc.w	r3, r1, r3
 8002d40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002d50:	0a0a      	lsrs	r2, r1, #8
 8002d52:	2300      	movs	r3, #0
 8002d54:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0

    if (comp_press < BMP3_MIN_PRES_INT)
 8002d58:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002d5c:	4916      	ldr	r1, [pc, #88]	; (8002db8 <compensate_pressure+0x848>)
 8002d5e:	428a      	cmp	r2, r1
 8002d60:	f173 0300 	sbcs.w	r3, r3, #0
 8002d64:	d207      	bcs.n	8002d76 <compensate_pressure+0x806>
    {
        comp_press = BMP3_MIN_PRES_INT;
 8002d66:	4a14      	ldr	r2, [pc, #80]	; (8002db8 <compensate_pressure+0x848>)
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        rslt = BMP3_W_MIN_PRES;
 8002d70:	2305      	movs	r3, #5
 8002d72:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    }

    if (comp_press > BMP3_MAX_PRES_INT)
 8002d76:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002d7a:	4910      	ldr	r1, [pc, #64]	; (8002dbc <compensate_pressure+0x84c>)
 8002d7c:	428a      	cmp	r2, r1
 8002d7e:	f173 0300 	sbcs.w	r3, r3, #0
 8002d82:	d307      	bcc.n	8002d94 <compensate_pressure+0x824>
    {
        comp_press = BMP3_MAX_PRES_INT;
 8002d84:	a30a      	add	r3, pc, #40	; (adr r3, 8002db0 <compensate_pressure+0x840>)
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
        rslt = BMP3_W_MAX_PRES;
 8002d8e:	2306      	movs	r3, #6
 8002d90:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    }

    (*pressure) = comp_press;
 8002d94:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002d98:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8002d9c:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 8002da0:	f997 31df 	ldrsb.w	r3, [r7, #479]	; 0x1df
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 8002daa:	46bd      	mov	sp, r7
 8002dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db0:	00bebc20 	.word	0x00bebc20
 8002db4:	00000000 	.word	0x00000000
 8002db8:	002dc6c0 	.word	0x002dc6c0
 8002dbc:	00bebc21 	.word	0x00bebc21

08002dc0 <pow_bmp3>:

/*!
 * @brief This internal API is used to calculate the power functionality.
 */
static uint32_t pow_bmp3(uint8_t base, uint8_t power)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460a      	mov	r2, r1
 8002dca:	71fb      	strb	r3, [r7, #7]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	71bb      	strb	r3, [r7, #6]
    uint32_t pow_output = 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]

    while (power != 0)
 8002dd4:	e007      	b.n	8002de6 <pow_bmp3+0x26>
    {
        pow_output = base * pow_output;
 8002dd6:	79fa      	ldrb	r2, [r7, #7]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	60fb      	str	r3, [r7, #12]
        power--;
 8002de0:	79bb      	ldrb	r3, [r7, #6]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	71bb      	strb	r3, [r7, #6]
    while (power != 0)
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f4      	bne.n	8002dd6 <pow_bmp3+0x16>
    }

    return pow_output;
 8002dec:	68fb      	ldr	r3, [r7, #12]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr

08002dfa <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b085      	sub	sp, #20
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e001      	b.n	8002e1c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00f      	beq.n	8002e58 <null_ptr_check+0x2e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <null_ptr_check+0x2e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <null_ptr_check+0x2e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8002e58:	23ff      	movs	r3, #255	; 0xff
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e001      	b.n	8002e62 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002e80:	f107 010d 	add.w	r1, r7, #13
 8002e84:	7bb8      	ldrb	r0, [r7, #14]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f7fe fa44 	bl	8001316 <bmp3_get_regs>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d128      	bne.n	8002eec <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	111b      	asrs	r3, r3, #4
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 8002eaa:	7b7b      	ldrb	r3, [r7, #13]
 8002eac:	115b      	asrs	r3, r3, #5
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 8002eba:	7b7b      	ldrb	r3, [r7, #13]
 8002ebc:	119b      	asrs	r3, r3, #6
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8002ece:	f107 010d 	add.w	r1, r7, #13
 8002ed2:	7bb8      	ldrb	r0, [r7, #14]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f7fe fa1d 	bl	8001316 <bmp3_get_regs>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 8002ee0:	7b7b      	ldrb	r3, [r7, #13]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 8002eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 8002f02:	f107 010e 	add.w	r1, r7, #14
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	2011      	movs	r0, #17
 8002f0c:	f7fe fa03 	bl	8001316 <bmp3_get_regs>
 8002f10:	4603      	mov	r3, r0
 8002f12:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d115      	bne.n	8002f48 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 8002f1c:	7bbb      	ldrb	r3, [r7, #14]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 8002f28:	7bbb      	ldrb	r3, [r7, #14]
 8002f2a:	105b      	asrs	r3, r3, #1
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 8002f38:	7bbb      	ldrb	r3, [r7, #14]
 8002f3a:	10db      	asrs	r3, r3, #3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 8002f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 8002f5e:	f107 010e 	add.w	r1, r7, #14
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	2002      	movs	r0, #2
 8002f68:	f7fe f9d5 	bl	8001316 <bmp3_get_regs>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8002f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d115      	bne.n	8002fa4 <get_err_status+0x50>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 8002f78:	7bbb      	ldrb	r3, [r7, #14]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 8002f84:	7bbb      	ldrb	r3, [r7, #14]
 8002f86:	105b      	asrs	r3, r3, #1
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	109b      	asrs	r3, r3, #2
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <BMP390_Read>:
static struct bmp3_data data = { 0 };
static struct bmp3_settings settings = { 0 };
static struct bmp3_status status = { { 0 } };
static I2C_HandleTypeDef *bmp390_phi2c;

BMP3_INTF_RET_TYPE BMP390_Read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af04      	add	r7, sp, #16
 8002fb6:	60b9      	str	r1, [r7, #8]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Read(
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2164      	movs	r1, #100	; 0x64
 8002fca:	9102      	str	r1, [sp, #8]
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	21ee      	movs	r1, #238	; 0xee
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f003 ff54 	bl	8006e84 <HAL_I2C_Mem_Read>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	b25b      	sxtb	r3, r3
			reg_addr,
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT);
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <BMP390_Write>:
BMP3_INTF_RET_TYPE BMP390_Write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len, void *intf_ptr){
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af04      	add	r7, sp, #16
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2164      	movs	r1, #100	; 0x64
 8003002:	9102      	str	r1, [sp, #8]
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2301      	movs	r3, #1
 800300c:	21ee      	movs	r1, #238	; 0xee
 800300e:	6838      	ldr	r0, [r7, #0]
 8003010:	f003 fe3e 	bl	8006c90 <HAL_I2C_Mem_Write>
 8003014:	4603      	mov	r3, r0
 8003016:	b25b      	sxtb	r3, r3
			I2C_MEMADD_SIZE_8BIT,
			read_data,
			len,
			BMP390_I2C_TIMEOUT
	);
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <BMP390_DelayUs>:
void BMP390_DelayUs(uint32_t period, void *intf_ptr){
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
	/* bmp3.c only requires ms delay, so i'll just use millisecond delay function */
	uint32_t delay = period / 1000;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a05      	ldr	r2, [pc, #20]	; (8003044 <BMP390_DelayUs+0x24>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	60fb      	str	r3, [r7, #12]
	HAL_Delay(delay);
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f002 fa86 	bl	8005548 <HAL_Delay>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	10624dd3 	.word	0x10624dd3

08003048 <BMP390_Init>:
void BMP390_Init(void){
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af04      	add	r7, sp, #16
	HAL_Delay(100);
 800304e:	2064      	movs	r0, #100	; 0x64
 8003050:	f002 fa7a 	bl	8005548 <HAL_Delay>
	bmp390dev.chip_id = BMP390_CHIP_ID;
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <BMP390_Init+0xa0>)
 8003056:	2260      	movs	r2, #96	; 0x60
 8003058:	701a      	strb	r2, [r3, #0]
	bmp390dev.intf_ptr = bmp390_phi2c;
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <BMP390_Init+0xa4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <BMP390_Init+0xa0>)
 8003060:	6053      	str	r3, [r2, #4]
	bmp390dev.intf = BMP3_I2C_INTF;
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <BMP390_Init+0xa0>)
 8003064:	2201      	movs	r2, #1
 8003066:	721a      	strb	r2, [r3, #8]
	bmp390dev.read = BMP390_Read;
 8003068:	4b1f      	ldr	r3, [pc, #124]	; (80030e8 <BMP390_Init+0xa0>)
 800306a:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <BMP390_Init+0xa8>)
 800306c:	60da      	str	r2, [r3, #12]
	bmp390dev.write = BMP390_Write;
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <BMP390_Init+0xa0>)
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <BMP390_Init+0xac>)
 8003072:	611a      	str	r2, [r3, #16]
	bmp390dev.delay_us = BMP390_DelayUs;
 8003074:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <BMP390_Init+0xa0>)
 8003076:	4a20      	ldr	r2, [pc, #128]	; (80030f8 <BMP390_Init+0xb0>)
 8003078:	615a      	str	r2, [r3, #20]

	// Force soft reset
	uint8_t buf = 0xB6;
 800307a:	23b6      	movs	r3, #182	; 0xb6
 800307c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(bmp390dev.intf_ptr, BMP3_ADDR_I2C_SEC << 1, 0x7E, I2C_MEMADD_SIZE_8BIT, &buf, 1, 100);
 800307e:	4b1a      	ldr	r3, [pc, #104]	; (80030e8 <BMP390_Init+0xa0>)
 8003080:	6858      	ldr	r0, [r3, #4]
 8003082:	2364      	movs	r3, #100	; 0x64
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	2301      	movs	r3, #1
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	2301      	movs	r3, #1
 8003090:	227e      	movs	r2, #126	; 0x7e
 8003092:	21ee      	movs	r1, #238	; 0xee
 8003094:	f003 fdfc 	bl	8006c90 <HAL_I2C_Mem_Write>
	bmp3_init(&bmp390dev);
 8003098:	4813      	ldr	r0, [pc, #76]	; (80030e8 <BMP390_Init+0xa0>)
 800309a:	f7fe f8f5 	bl	8001288 <bmp3_init>

	settings.press_en = BMP3_ENABLE;
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <BMP390_Init+0xb4>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	705a      	strb	r2, [r3, #1]
	settings.temp_en = BMP3_ENABLE;
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <BMP390_Init+0xb4>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	709a      	strb	r2, [r3, #2]

	settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <BMP390_Init+0xb4>)
 80030ac:	2203      	movs	r2, #3
 80030ae:	70da      	strb	r2, [r3, #3]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <BMP390_Init+0xb4>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	711a      	strb	r2, [r3, #4]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <BMP390_Init+0xb4>)
 80030b8:	2202      	movs	r2, #2
 80030ba:	719a      	strb	r2, [r3, #6]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <BMP390_Init+0xb8>)
 80030be:	22b6      	movs	r2, #182	; 0xb6
 80030c0:	801a      	strh	r2, [r3, #0]
	bmp3_set_sensor_settings(settings_sel, &settings, &bmp390dev);
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <BMP390_Init+0xb8>)
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <BMP390_Init+0xa0>)
 80030c8:	490c      	ldr	r1, [pc, #48]	; (80030fc <BMP390_Init+0xb4>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fa44 	bl	8001558 <bmp3_set_sensor_settings>

	settings.op_mode = BMP3_MODE_NORMAL;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <BMP390_Init+0xb4>)
 80030d2:	2203      	movs	r2, #3
 80030d4:	701a      	strb	r2, [r3, #0]
	bmp3_set_op_mode(&settings, &bmp390dev);
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <BMP390_Init+0xa0>)
 80030d8:	4808      	ldr	r0, [pc, #32]	; (80030fc <BMP390_Init+0xb4>)
 80030da:	f7fe fb00 	bl	80016de <bmp3_set_op_mode>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000330 	.word	0x20000330
 80030ec:	20000394 	.word	0x20000394
 80030f0:	08002fb1 	.word	0x08002fb1
 80030f4:	08002fe9 	.word	0x08002fe9
 80030f8:	08003021 	.word	0x08003021
 80030fc:	20000378 	.word	0x20000378
 8003100:	2000032c 	.word	0x2000032c

08003104 <BMP390_GetValue>:
HAL_StatusTypeDef BMP390_GetValue( int64_t *pTemperature, uint64_t *pPressure, uint32_t Timeout ){
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]

	uint32_t 	tickstart = HAL_GetTick();
 8003110:	f002 fa0e 	bl	8005530 <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

	while( bmp3_get_status(&status, &bmp390dev) != BMP3_OK ){
 8003116:	e009      	b.n	800312c <BMP390_GetValue+0x28>
		if ( ( HAL_GetTick() - tickstart ) > Timeout )
 8003118:	f002 fa0a 	bl	8005530 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	d201      	bcs.n	800312c <BMP390_GetValue+0x28>
			return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e01d      	b.n	8003168 <BMP390_GetValue+0x64>
	while( bmp3_get_status(&status, &bmp390dev) != BMP3_OK ){
 800312c:	4910      	ldr	r1, [pc, #64]	; (8003170 <BMP390_GetValue+0x6c>)
 800312e:	4811      	ldr	r0, [pc, #68]	; (8003174 <BMP390_GetValue+0x70>)
 8003130:	f7fe fa60 	bl	80015f4 <bmp3_get_status>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ee      	bne.n	8003118 <BMP390_GetValue+0x14>
	}

	/* BMP3_OK; sensor ready */
	if ( bmp3_get_sensor_data(BMP3_PRESS_TEMP, &data, &bmp390dev) ){
 800313a:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <BMP390_GetValue+0x6c>)
 800313c:	490e      	ldr	r1, [pc, #56]	; (8003178 <BMP390_GetValue+0x74>)
 800313e:	2003      	movs	r0, #3
 8003140:	f7fe fb41 	bl	80017c6 <bmp3_get_sensor_data>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <BMP390_GetValue+0x4a>
		return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e00c      	b.n	8003168 <BMP390_GetValue+0x64>
	}
	*pTemperature 	= data.temperature;
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <BMP390_GetValue+0x74>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	68f9      	ldr	r1, [r7, #12]
 8003156:	e9c1 2300 	strd	r2, r3, [r1]
	*pPressure		= data.pressure;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <BMP390_GetValue+0x74>)
 800315c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	e9c1 2300 	strd	r2, r3, [r1]

	return HAL_OK;
 8003166:	2300      	movs	r3, #0

}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000330 	.word	0x20000330
 8003174:	20000388 	.word	0x20000388
 8003178:	20000368 	.word	0x20000368

0800317c <BMP390_AssignI2C>:
void BMP390_AssignI2C(I2C_HandleTypeDef *phi2c){
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	bmp390_phi2c = phi2c;
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <BMP390_AssignI2C+0x1c>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6013      	str	r3, [r2, #0]
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000394 	.word	0x20000394

0800319c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
 80031a6:	79fb      	ldrb	r3, [r7, #7]
 80031a8:	4619      	mov	r1, r3
 80031aa:	2007      	movs	r0, #7
 80031ac:	f000 fa88 	bl	80036c0 <bno055_writeData>
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	4619      	mov	r1, r3
 80031c6:	203d      	movs	r0, #61	; 0x3d
 80031c8:	f000 fa7a 	bl	80036c0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80031d2:	2013      	movs	r0, #19
 80031d4:	f000 fa68 	bl	80036a8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80031d8:	e002      	b.n	80031e0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80031da:	2007      	movs	r0, #7
 80031dc:	f000 fa64 	bl	80036a8 <bno055_delay>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7ff ffe3 	bl	80031b8 <bno055_setOperationMode>
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80031fa:	200c      	movs	r0, #12
 80031fc:	f7ff ffdc 	bl	80031b8 <bno055_setOperationMode>
}
 8003200:	bf00      	nop
 8003202:	bd80      	pop	{r7, pc}

08003204 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(1); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(0); }

void bno055_reset() {
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8003208:	2120      	movs	r1, #32
 800320a:	203f      	movs	r0, #63	; 0x3f
 800320c:	f000 fa58 	bl	80036c0 <bno055_writeData>
  bno055_delay(700);
 8003210:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8003214:	f000 fa48 	bl	80036a8 <bno055_delay>
}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}

0800321c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
  bno055_reset();
 8003222:	f7ff ffef 	bl	8003204 <bno055_reset>

  uint8_t id = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800322a:	1dfb      	adds	r3, r7, #7
 800322c:	2201      	movs	r2, #1
 800322e:	4619      	mov	r1, r3
 8003230:	2000      	movs	r0, #0
 8003232:	f000 fb31 	bl	8003898 <bno055_readData>
  if (id != BNO055_ID) {
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2ba0      	cmp	r3, #160	; 0xa0
 800323a:	d004      	beq.n	8003246 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	4619      	mov	r1, r3
 8003240:	4809      	ldr	r0, [pc, #36]	; (8003268 <bno055_setup+0x4c>)
 8003242:	f013 fbd3 	bl	80169ec <iprintf>
  }
  bno055_setPage(0);
 8003246:	2000      	movs	r0, #0
 8003248:	f7ff ffa8 	bl	800319c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800324c:	2100      	movs	r1, #0
 800324e:	203f      	movs	r0, #63	; 0x3f
 8003250:	f000 fa36 	bl	80036c0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8003254:	f7ff ffc8 	bl	80031e8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8003258:	200a      	movs	r0, #10
 800325a:	f000 fa25 	bl	80036a8 <bno055_delay>
}
 800325e:	bf00      	nop
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	0801935c 	.word	0x0801935c

0800326c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800326c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003270:	b09e      	sub	sp, #120	; 0x78
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800327a:	2000      	movs	r0, #0
 800327c:	f7ff ff8e 	bl	800319c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8003280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003284:	2b20      	cmp	r3, #32
 8003286:	d108      	bne.n	800329a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8003288:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800328c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003290:	2208      	movs	r2, #8
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fb00 	bl	8003898 <bno055_readData>
 8003298:	e007      	b.n	80032aa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800329a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800329e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a2:	2206      	movs	r2, #6
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 faf7 	bl	8003898 <bno055_readData>

  double scale = 1;
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	4b8b      	ldr	r3, [pc, #556]	; (80034dc <bno055_getVector+0x270>)
 80032b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80032b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b8:	2b0e      	cmp	r3, #14
 80032ba:	d109      	bne.n	80032d0 <bno055_getVector+0x64>
    scale = magScale;
 80032bc:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <bno055_getVector+0x274>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f93f 	bl	8000544 <__aeabi_ui2d>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80032ce:	e03e      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80032d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d007      	beq.n	80032e8 <bno055_getVector+0x7c>
 80032d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032dc:	2b28      	cmp	r3, #40	; 0x28
 80032de:	d003      	beq.n	80032e8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80032e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032e4:	2b2e      	cmp	r3, #46	; 0x2e
 80032e6:	d109      	bne.n	80032fc <bno055_getVector+0x90>
    scale = accelScale;
 80032e8:	4b7e      	ldr	r3, [pc, #504]	; (80034e4 <bno055_getVector+0x278>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f929 	bl	8000544 <__aeabi_ui2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80032fa:	e028      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80032fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003300:	2b14      	cmp	r3, #20
 8003302:	d109      	bne.n	8003318 <bno055_getVector+0xac>
    scale = angularRateScale;
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <bno055_getVector+0x27c>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f91b 	bl	8000544 <__aeabi_ui2d>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8003316:	e01a      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8003318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800331c:	2b1a      	cmp	r3, #26
 800331e:	d109      	bne.n	8003334 <bno055_getVector+0xc8>
    scale = eulerScale;
 8003320:	4b72      	ldr	r3, [pc, #456]	; (80034ec <bno055_getVector+0x280>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd f90d 	bl	8000544 <__aeabi_ui2d>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8003332:	e00c      	b.n	800334e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8003334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003338:	2b20      	cmp	r3, #32
 800333a:	d108      	bne.n	800334e <bno055_getVector+0xe2>
    scale = quaScale;
 800333c:	4b6c      	ldr	r3, [pc, #432]	; (80034f0 <bno055_getVector+0x284>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f8ff 	bl	8000544 <__aeabi_ui2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800334e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003352:	2220      	movs	r2, #32
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f012 fdf6 	bl	8015f48 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800335c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003360:	2b20      	cmp	r3, #32
 8003362:	d150      	bne.n	8003406 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8003364:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	b21a      	sxth	r2, r3
 800336c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003370:	b21b      	sxth	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b21b      	sxth	r3, r3
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f8f4 	bl	8000564 <__aeabi_i2d>
 800337c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003380:	f7fd fa84 	bl	800088c <__aeabi_ddiv>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800338c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	b21a      	sxth	r2, r3
 8003394:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003398:	b21b      	sxth	r3, r3
 800339a:	4313      	orrs	r3, r2
 800339c:	b21b      	sxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f8e0 	bl	8000564 <__aeabi_i2d>
 80033a4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033a8:	f7fd fa70 	bl	800088c <__aeabi_ddiv>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80033b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80033c0:	b21b      	sxth	r3, r3
 80033c2:	4313      	orrs	r3, r2
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fd f8cc 	bl	8000564 <__aeabi_i2d>
 80033cc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033d0:	f7fd fa5c 	bl	800088c <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80033dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	b21a      	sxth	r2, r3
 80033e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8b8 	bl	8000564 <__aeabi_i2d>
 80033f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033f8:	f7fd fa48 	bl	800088c <__aeabi_ddiv>
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003404:	e03b      	b.n	800347e <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8003406:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	b21a      	sxth	r2, r3
 800340e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003412:	b21b      	sxth	r3, r3
 8003414:	4313      	orrs	r3, r2
 8003416:	b21b      	sxth	r3, r3
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f8a3 	bl	8000564 <__aeabi_i2d>
 800341e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003422:	f7fd fa33 	bl	800088c <__aeabi_ddiv>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800342e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	b21a      	sxth	r2, r3
 8003436:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800343a:	b21b      	sxth	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b21b      	sxth	r3, r3
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f88f 	bl	8000564 <__aeabi_i2d>
 8003446:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800344a:	f7fd fa1f 	bl	800088c <__aeabi_ddiv>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8003456:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	b21a      	sxth	r2, r3
 800345e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003462:	b21b      	sxth	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b21b      	sxth	r3, r3
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f87b 	bl	8000564 <__aeabi_i2d>
 800346e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003472:	f7fd fa0b 	bl	800088c <__aeabi_ddiv>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800347e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003482:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8003486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800348a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800348e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003492:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003496:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800349a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800349e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80034a2:	ec49 8b14 	vmov	d4, r8, r9
 80034a6:	ec45 4b15 	vmov	d5, r4, r5
 80034aa:	ec41 0b16 	vmov	d6, r0, r1
 80034ae:	ec43 2b17 	vmov	d7, r2, r3
}
 80034b2:	eeb0 0a44 	vmov.f32	s0, s8
 80034b6:	eef0 0a64 	vmov.f32	s1, s9
 80034ba:	eeb0 1a45 	vmov.f32	s2, s10
 80034be:	eef0 1a65 	vmov.f32	s3, s11
 80034c2:	eeb0 2a46 	vmov.f32	s4, s12
 80034c6:	eef0 2a66 	vmov.f32	s5, s13
 80034ca:	eeb0 3a47 	vmov.f32	s6, s14
 80034ce:	eef0 3a67 	vmov.f32	s7, s15
 80034d2:	3778      	adds	r7, #120	; 0x78
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034da:	bf00      	nop
 80034dc:	3ff00000 	.word	0x3ff00000
 80034e0:	20000006 	.word	0x20000006
 80034e4:	20000000 	.word	0x20000000
 80034e8:	20000002 	.word	0x20000002
 80034ec:	20000004 	.word	0x20000004
 80034f0:	20000008 	.word	0x20000008

080034f4 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 80034f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034f8:	b090      	sub	sp, #64	; 0x40
 80034fa:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 80034fc:	2008      	movs	r0, #8
 80034fe:	f7ff feb5 	bl	800326c <bno055_getVector>
 8003502:	eeb0 4a40 	vmov.f32	s8, s0
 8003506:	eef0 4a60 	vmov.f32	s9, s1
 800350a:	eeb0 5a41 	vmov.f32	s10, s2
 800350e:	eef0 5a61 	vmov.f32	s11, s3
 8003512:	eeb0 6a42 	vmov.f32	s12, s4
 8003516:	eef0 6a62 	vmov.f32	s13, s5
 800351a:	eeb0 7a43 	vmov.f32	s14, s6
 800351e:	eef0 7a63 	vmov.f32	s15, s7
 8003522:	ed87 4b08 	vstr	d4, [r7, #32]
 8003526:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800352a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800352e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8003532:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003536:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800353a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800353e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003542:	ec49 8b14 	vmov	d4, r8, r9
 8003546:	ec45 4b15 	vmov	d5, r4, r5
 800354a:	ec41 0b16 	vmov	d6, r0, r1
 800354e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003552:	eeb0 0a44 	vmov.f32	s0, s8
 8003556:	eef0 0a64 	vmov.f32	s1, s9
 800355a:	eeb0 1a45 	vmov.f32	s2, s10
 800355e:	eef0 1a65 	vmov.f32	s3, s11
 8003562:	eeb0 2a46 	vmov.f32	s4, s12
 8003566:	eef0 2a66 	vmov.f32	s5, s13
 800356a:	eeb0 3a47 	vmov.f32	s6, s14
 800356e:	eef0 3a67 	vmov.f32	s7, s15
 8003572:	3740      	adds	r7, #64	; 0x40
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800357a <bno055_getVectorMagnetometer>:
bno055_vector_t bno055_getVectorMagnetometer() {
 800357a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800357e:	b090      	sub	sp, #64	; 0x40
 8003580:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
 8003582:	200e      	movs	r0, #14
 8003584:	f7ff fe72 	bl	800326c <bno055_getVector>
 8003588:	eeb0 4a40 	vmov.f32	s8, s0
 800358c:	eef0 4a60 	vmov.f32	s9, s1
 8003590:	eeb0 5a41 	vmov.f32	s10, s2
 8003594:	eef0 5a61 	vmov.f32	s11, s3
 8003598:	eeb0 6a42 	vmov.f32	s12, s4
 800359c:	eef0 6a62 	vmov.f32	s13, s5
 80035a0:	eeb0 7a43 	vmov.f32	s14, s6
 80035a4:	eef0 7a63 	vmov.f32	s15, s7
 80035a8:	ed87 4b08 	vstr	d4, [r7, #32]
 80035ac:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80035b0:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80035b4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80035b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035bc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80035c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80035c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035c8:	ec49 8b14 	vmov	d4, r8, r9
 80035cc:	ec45 4b15 	vmov	d5, r4, r5
 80035d0:	ec41 0b16 	vmov	d6, r0, r1
 80035d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80035d8:	eeb0 0a44 	vmov.f32	s0, s8
 80035dc:	eef0 0a64 	vmov.f32	s1, s9
 80035e0:	eeb0 1a45 	vmov.f32	s2, s10
 80035e4:	eef0 1a65 	vmov.f32	s3, s11
 80035e8:	eeb0 2a46 	vmov.f32	s4, s12
 80035ec:	eef0 2a66 	vmov.f32	s5, s13
 80035f0:	eeb0 3a47 	vmov.f32	s6, s14
 80035f4:	eef0 3a67 	vmov.f32	s7, s15
 80035f8:	3740      	adds	r7, #64	; 0x40
 80035fa:	46bd      	mov	sp, r7
 80035fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003600 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorGyroscope() {
 8003600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003604:	b090      	sub	sp, #64	; 0x40
 8003606:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8003608:	2014      	movs	r0, #20
 800360a:	f7ff fe2f 	bl	800326c <bno055_getVector>
 800360e:	eeb0 4a40 	vmov.f32	s8, s0
 8003612:	eef0 4a60 	vmov.f32	s9, s1
 8003616:	eeb0 5a41 	vmov.f32	s10, s2
 800361a:	eef0 5a61 	vmov.f32	s11, s3
 800361e:	eeb0 6a42 	vmov.f32	s12, s4
 8003622:	eef0 6a62 	vmov.f32	s13, s5
 8003626:	eeb0 7a43 	vmov.f32	s14, s6
 800362a:	eef0 7a63 	vmov.f32	s15, s7
 800362e:	ed87 4b08 	vstr	d4, [r7, #32]
 8003632:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8003636:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800363a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800363e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003642:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003646:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800364a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800364e:	ec49 8b14 	vmov	d4, r8, r9
 8003652:	ec45 4b15 	vmov	d5, r4, r5
 8003656:	ec41 0b16 	vmov	d6, r0, r1
 800365a:	ec43 2b17 	vmov	d7, r2, r3
}
 800365e:	eeb0 0a44 	vmov.f32	s0, s8
 8003662:	eef0 0a64 	vmov.f32	s1, s9
 8003666:	eeb0 1a45 	vmov.f32	s2, s10
 800366a:	eef0 1a65 	vmov.f32	s3, s11
 800366e:	eeb0 2a46 	vmov.f32	s4, s12
 8003672:	eef0 2a66 	vmov.f32	s5, s13
 8003676:	eeb0 3a47 	vmov.f32	s6, s14
 800367a:	eef0 3a67 	vmov.f32	s7, s15
 800367e:	3740      	adds	r7, #64	; 0x40
 8003680:	46bd      	mov	sp, r7
 8003682:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08003688 <bno055_assignI2C>:

#include "module/bno055/bno055_stm32.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <bno055_assignI2C+0x1c>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000398 	.word	0x20000398

080036a8 <bno055_delay>:

void bno055_delay(int time) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 ff48 	bl	8005548 <HAL_Delay>
#endif
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	4603      	mov	r3, r0
 80036c8:	460a      	mov	r2, r1
 80036ca:	71fb      	strb	r3, [r7, #7]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	733b      	strb	r3, [r7, #12]
 80036d4:	79bb      	ldrb	r3, [r7, #6]
 80036d6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 80036d8:	4b5a      	ldr	r3, [pc, #360]	; (8003844 <bno055_writeData+0x184>)
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	f107 020c 	add.w	r2, r7, #12
 80036e0:	230a      	movs	r3, #10
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2302      	movs	r3, #2
 80036e6:	2150      	movs	r1, #80	; 0x50
 80036e8:	f002 ffae 	bl	8006648 <HAL_I2C_Master_Transmit>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 80a0 	beq.w	8003838 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d103      	bne.n	8003706 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 80036fe:	4852      	ldr	r0, [pc, #328]	; (8003848 <bno055_writeData+0x188>)
 8003700:	f013 f9fa 	bl	8016af8 <puts>
 8003704:	e012      	b.n	800372c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d103      	bne.n	8003714 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800370c:	484f      	ldr	r0, [pc, #316]	; (800384c <bno055_writeData+0x18c>)
 800370e:	f013 f9f3 	bl	8016af8 <puts>
 8003712:	e00b      	b.n	800372c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d103      	bne.n	8003722 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800371a:	484d      	ldr	r0, [pc, #308]	; (8003850 <bno055_writeData+0x190>)
 800371c:	f013 f9ec 	bl	8016af8 <puts>
 8003720:	e004      	b.n	800372c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	4619      	mov	r1, r3
 8003726:	484b      	ldr	r0, [pc, #300]	; (8003854 <bno055_writeData+0x194>)
 8003728:	f013 f960 	bl	80169ec <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800372c:	4b45      	ldr	r3, [pc, #276]	; (8003844 <bno055_writeData+0x184>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f003 fddb 	bl	80072ec <HAL_I2C_GetError>
 8003736:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d07e      	beq.n	800383c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d103      	bne.n	800374c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8003744:	4844      	ldr	r0, [pc, #272]	; (8003858 <bno055_writeData+0x198>)
 8003746:	f013 f9d7 	bl	8016af8 <puts>
 800374a:	e021      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d103      	bne.n	800375a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8003752:	4842      	ldr	r0, [pc, #264]	; (800385c <bno055_writeData+0x19c>)
 8003754:	f013 f9d0 	bl	8016af8 <puts>
 8003758:	e01a      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b04      	cmp	r3, #4
 800375e:	d103      	bne.n	8003768 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8003760:	483f      	ldr	r0, [pc, #252]	; (8003860 <bno055_writeData+0x1a0>)
 8003762:	f013 f9c9 	bl	8016af8 <puts>
 8003766:	e013      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d103      	bne.n	8003776 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800376e:	483d      	ldr	r0, [pc, #244]	; (8003864 <bno055_writeData+0x1a4>)
 8003770:	f013 f9c2 	bl	8016af8 <puts>
 8003774:	e00c      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b10      	cmp	r3, #16
 800377a:	d103      	bne.n	8003784 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800377c:	483a      	ldr	r0, [pc, #232]	; (8003868 <bno055_writeData+0x1a8>)
 800377e:	f013 f9bb 	bl	8016af8 <puts>
 8003782:	e005      	b.n	8003790 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b20      	cmp	r3, #32
 8003788:	d102      	bne.n	8003790 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800378a:	4838      	ldr	r0, [pc, #224]	; (800386c <bno055_writeData+0x1ac>)
 800378c:	f013 f9b4 	bl	8016af8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <bno055_writeData+0x184>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f003 fd9b 	bl	80072d0 <HAL_I2C_GetState>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 80037a4:	4832      	ldr	r0, [pc, #200]	; (8003870 <bno055_writeData+0x1b0>)
 80037a6:	f013 f9a7 	bl	8016af8 <puts>
 80037aa:	e048      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d103      	bne.n	80037ba <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 80037b2:	482f      	ldr	r0, [pc, #188]	; (8003870 <bno055_writeData+0x1b0>)
 80037b4:	f013 f9a0 	bl	8016af8 <puts>
 80037b8:	e041      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b24      	cmp	r3, #36	; 0x24
 80037be:	d103      	bne.n	80037c8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80037c0:	482c      	ldr	r0, [pc, #176]	; (8003874 <bno055_writeData+0x1b4>)
 80037c2:	f013 f999 	bl	8016af8 <puts>
 80037c6:	e03a      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b21      	cmp	r3, #33	; 0x21
 80037cc:	d103      	bne.n	80037d6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80037ce:	482a      	ldr	r0, [pc, #168]	; (8003878 <bno055_writeData+0x1b8>)
 80037d0:	f013 f992 	bl	8016af8 <puts>
 80037d4:	e033      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b22      	cmp	r3, #34	; 0x22
 80037da:	d103      	bne.n	80037e4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80037dc:	4827      	ldr	r0, [pc, #156]	; (800387c <bno055_writeData+0x1bc>)
 80037de:	f013 f98b 	bl	8016af8 <puts>
 80037e2:	e02c      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b28      	cmp	r3, #40	; 0x28
 80037e8:	d103      	bne.n	80037f2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80037ea:	4825      	ldr	r0, [pc, #148]	; (8003880 <bno055_writeData+0x1c0>)
 80037ec:	f013 f984 	bl	8016af8 <puts>
 80037f0:	e025      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	2b29      	cmp	r3, #41	; 0x29
 80037f6:	d103      	bne.n	8003800 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80037f8:	4822      	ldr	r0, [pc, #136]	; (8003884 <bno055_writeData+0x1c4>)
 80037fa:	f013 f97d 	bl	8016af8 <puts>
 80037fe:	e01e      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b2a      	cmp	r3, #42	; 0x2a
 8003804:	d103      	bne.n	800380e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8003806:	4820      	ldr	r0, [pc, #128]	; (8003888 <bno055_writeData+0x1c8>)
 8003808:	f013 f976 	bl	8016af8 <puts>
 800380c:	e017      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b60      	cmp	r3, #96	; 0x60
 8003812:	d103      	bne.n	800381c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8003814:	481d      	ldr	r0, [pc, #116]	; (800388c <bno055_writeData+0x1cc>)
 8003816:	f013 f96f 	bl	8016af8 <puts>
 800381a:	e010      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2ba0      	cmp	r3, #160	; 0xa0
 8003820:	d103      	bne.n	800382a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8003822:	481b      	ldr	r0, [pc, #108]	; (8003890 <bno055_writeData+0x1d0>)
 8003824:	f013 f968 	bl	8016af8 <puts>
 8003828:	e009      	b.n	800383e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	2be0      	cmp	r3, #224	; 0xe0
 800382e:	d106      	bne.n	800383e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8003830:	4818      	ldr	r0, [pc, #96]	; (8003894 <bno055_writeData+0x1d4>)
 8003832:	f013 f961 	bl	8016af8 <puts>
 8003836:	e002      	b.n	800383e <bno055_writeData+0x17e>
    return;
 8003838:	bf00      	nop
 800383a:	e000      	b.n	800383e <bno055_writeData+0x17e>
    return;
 800383c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800383e:	3718      	adds	r7, #24
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000398 	.word	0x20000398
 8003848:	08019398 	.word	0x08019398
 800384c:	080193bc 	.word	0x080193bc
 8003850:	080193e4 	.word	0x080193e4
 8003854:	08019408 	.word	0x08019408
 8003858:	08019420 	.word	0x08019420
 800385c:	08019434 	.word	0x08019434
 8003860:	08019448 	.word	0x08019448
 8003864:	0801945c 	.word	0x0801945c
 8003868:	08019470 	.word	0x08019470
 800386c:	08019484 	.word	0x08019484
 8003870:	0801949c 	.word	0x0801949c
 8003874:	080194b4 	.word	0x080194b4
 8003878:	080194c8 	.word	0x080194c8
 800387c:	080194e0 	.word	0x080194e0
 8003880:	080194f8 	.word	0x080194f8
 8003884:	08019510 	.word	0x08019510
 8003888:	08019530 	.word	0x08019530
 800388c:	08019550 	.word	0x08019550
 8003890:	08019568 	.word	0x08019568
 8003894:	08019580 	.word	0x08019580

08003898 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af02      	add	r7, sp, #8
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <bno055_readData+0x40>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	1dfa      	adds	r2, r7, #7
 80038ae:	2364      	movs	r3, #100	; 0x64
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2301      	movs	r3, #1
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	f002 fec7 	bl	8006648 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <bno055_readData+0x40>)
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	79bb      	ldrb	r3, [r7, #6]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2264      	movs	r2, #100	; 0x64
 80038c4:	9200      	str	r2, [sp, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	2150      	movs	r1, #80	; 0x50
 80038ca:	f002 ffbb 	bl	8006844 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000398 	.word	0x20000398

080038dc <SD_Assign>:
static volatile DSTATUS Stat = STA_NOINIT;              /* 디스크 상태 Flag*/
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* assign */
void SD_Assign(SPI_HandleTypeDef *phspi){
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	_sd_phspi = phspi;
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <SD_Assign+0x1c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
	return;
 80038ea:	bf00      	nop
}
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	2000039c 	.word	0x2000039c
 80038fc:	00000000 	.word	0x00000000

08003900 <DP_calculateAirSpeedComp>:

#include "module/mpxv7002dp/mpxv7002dp.h"

static double DP_tare_voltage = 2.5;

uint16_t DP_calculateAirSpeedComp(uint16_t adc_value, double static_pressure, double static_temperature){
 8003900:	b5b0      	push	{r4, r5, r7, lr}
 8003902:	b090      	sub	sp, #64	; 0x40
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	ed87 0b02 	vstr	d0, [r7, #8]
 800390c:	ed87 1b00 	vstr	d1, [r7]
 8003910:	82fb      	strh	r3, [r7, #22]
	double stagnaion_pressure;
	double pressure_ratio;
	double velocity;
#ifdef DP_ADC_SCALE
//	adc_voltage = adc_value / 4015 * 3.3 * DP_ADC_SCALE;
	adc_voltage = adc_value * DP_ADC_PRODUCT_COEFFICIENT;
 8003912:	8afb      	ldrh	r3, [r7, #22]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe25 	bl	8000564 <__aeabi_i2d>
 800391a:	a352      	add	r3, pc, #328	; (adr r3, 8003a64 <DP_calculateAirSpeedComp+0x164>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fc fe8a 	bl	8000638 <__aeabi_dmul>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
#else
//	adc_voltage = adc_value / 4015 * 3.3;
	adc_voltage = adc_value * 8.219178082191780e-4;
#endif
	// calculate pressure
	differential_pressure = (adc_voltage - DP_tare_voltage > 0) ?\
 800392c:	4b48      	ldr	r3, [pc, #288]	; (8003a50 <DP_calculateAirSpeedComp+0x150>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003936:	f7fc fcc7 	bl	80002c8 <__aeabi_dsub>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
			(adc_voltage - DP_tare_voltage) * 1000 : 0;
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f7fd f905 	bl	8000b58 <__aeabi_dcmpgt>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <DP_calculateAirSpeedComp+0x7a>
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <DP_calculateAirSpeedComp+0x150>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800395e:	f7fc fcb3 	bl	80002c8 <__aeabi_dsub>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4610      	mov	r0, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	4b39      	ldr	r3, [pc, #228]	; (8003a54 <DP_calculateAirSpeedComp+0x154>)
 8003970:	f7fc fe62 	bl	8000638 <__aeabi_dmul>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	e003      	b.n	8003982 <DP_calculateAirSpeedComp+0x82>
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
	differential_pressure = (adc_voltage - DP_tare_voltage > 0) ?\
 8003982:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	stagnaion_pressure = static_pressure + differential_pressure;
 8003986:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800398a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800398e:	f7fc fc9d 	bl	80002cc <__adddf3>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	pressure_ratio = stagnaion_pressure / static_pressure;
 800399a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800399e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039a2:	f7fc ff73 	bl	800088c <__aeabi_ddiv>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	e9c7 2308 	strd	r2, r3, [r7, #32]

	// calculate velocity
	velocity = sqrt( ( powf(pressure_ratio, DP_POWER_COEFFICIENT) - 1 ) * DP_PRODUCT_COEFFICIENT / ( DP_HEAT_CAPACITY_RATIO * DP_GAS_COEFFICIENT_AIR * static_temperature ) );
 80039ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039b2:	f7fd f939 	bl	8000c28 <__aeabi_d2f>
 80039b6:	4603      	mov	r3, r0
 80039b8:	eddf 0a27 	vldr	s1, [pc, #156]	; 8003a58 <DP_calculateAirSpeedComp+0x158>
 80039bc:	ee00 3a10 	vmov	s0, r3
 80039c0:	f015 f816 	bl	80189f0 <powf>
 80039c4:	eef0 7a40 	vmov.f32	s15, s0
 80039c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039d0:	ee17 0a90 	vmov	r0, s15
 80039d4:	f7fc fdd8 	bl	8000588 <__aeabi_f2d>
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <DP_calculateAirSpeedComp+0x15c>)
 80039de:	f7fc fe2b 	bl	8000638 <__aeabi_dmul>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	461d      	mov	r5, r3
 80039ea:	a317      	add	r3, pc, #92	; (adr r3, 8003a48 <DP_calculateAirSpeedComp+0x148>)
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80039f4:	f7fc fe20 	bl	8000638 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc ff44 	bl	800088c <__aeabi_ddiv>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	ec43 2b17 	vmov	d7, r2, r3
 8003a0c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a10:	eef0 0a67 	vmov.f32	s1, s15
 8003a14:	f014 ffc0 	bl	8018998 <sqrt>
 8003a18:	ed87 0b06 	vstr	d0, [r7, #24]

	return velocity * 100;
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <DP_calculateAirSpeedComp+0x160>)
 8003a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a26:	f7fc fe07 	bl	8000638 <__aeabi_dmul>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7fd f8d9 	bl	8000be8 <__aeabi_d2uiz>
 8003a36:	4603      	mov	r3, r0
 8003a38:	b29b      	uxth	r3, r3
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3740      	adds	r7, #64	; 0x40
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bdb0      	pop	{r4, r5, r7, pc}
 8003a42:	bf00      	nop
 8003a44:	f3af 8000 	nop.w
 8003a48:	002b9ee9 	.word	0x002b9ee9
 8003a4c:	40791dfc 	.word	0x40791dfc
 8003a50:	20000010 	.word	0x20000010
 8003a54:	408f4000 	.word	0x408f4000
 8003a58:	3e924925 	.word	0x3e924925
 8003a5c:	40140000 	.word	0x40140000
 8003a60:	40590000 	.word	0x40590000
 8003a64:	4a347a96 	.word	0x4a347a96
 8003a68:	3f54330f 	.word	0x3f54330f

08003a6c <Servo_Attach>:
 *      Author: SURFACE
 */

#include "module/servo/servo.h"

void Servo_Attach(Servo_HandleTypeDef *servo, TIM_HandleTypeDef *htim, uint32_t channel){
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
	servo->htim 	= htim;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	601a      	str	r2, [r3, #0]
	servo->channel 	= channel;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	605a      	str	r2, [r3, #4]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003a98:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003a9c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003aa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003ab0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003ab8:	e000      	b.n	8003abc <ITM_SendChar+0x2c>
    {
      __NOP();
 8003aba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003abc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f9      	beq.n	8003aba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003ac6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003ad0:	687b      	ldr	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <_write>:
#include "stdarg.h"

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b086      	sub	sp, #24
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	60b9      	str	r1, [r7, #8]
 8003ae8:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f011 fc21 	bl	8015338 <CDC_Transmit_FS>
	for(int i = 0; i < len; i++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	e009      	b.n	8003b10 <_write+0x32>
	{
		ITM_SendChar(*ptr++);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	60ba      	str	r2, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ffc3 	bl	8003a90 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dbf1      	blt.n	8003afc <_write+0x1e>

	}
	return len;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <log_format>:

static RTC_TimeTypeDef sTime;
static RTC_DateTypeDef sDate;
static uint32_t g_SubSeconds;

void log_format(const char* tag, const char* message, va_list args) {
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
	g_SubSeconds = ((255-(uint32_t)(hrtc.Instance->SSR))*1000L)/(255+1); // ms
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <log_format+0x74>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <log_format+0x78>)
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	f503 3379 	add.w	r3, r3, #254976	; 0x3e400
 8003b40:	3318      	adds	r3, #24
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	4a16      	ldr	r2, [pc, #88]	; (8003ba0 <log_format+0x7c>)
 8003b46:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <log_format+0x80>)
 8003b4c:	4812      	ldr	r0, [pc, #72]	; (8003b98 <log_format+0x74>)
 8003b4e:	f006 fd1b 	bl	800a588 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003b52:	2200      	movs	r2, #0
 8003b54:	4914      	ldr	r1, [pc, #80]	; (8003ba8 <log_format+0x84>)
 8003b56:	4810      	ldr	r0, [pc, #64]	; (8003b98 <log_format+0x74>)
 8003b58:	f006 fdf8 	bl	800a74c <HAL_RTC_GetDate>

	printf("%02d:%02d:%02d,%03lu[%s] ", sTime.Hours, sTime.Minutes, sTime.Seconds, g_SubSeconds, tag);
 8003b5c:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <log_format+0x80>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4619      	mov	r1, r3
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <log_format+0x80>)
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	4618      	mov	r0, r3
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <log_format+0x80>)
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <log_format+0x7c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	9201      	str	r2, [sp, #4]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	4623      	mov	r3, r4
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	480b      	ldr	r0, [pc, #44]	; (8003bac <log_format+0x88>)
 8003b7e:	f012 ff35 	bl	80169ec <iprintf>
	vprintf(message, args);
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68b8      	ldr	r0, [r7, #8]
 8003b86:	f013 f885 	bl	8016c94 <viprintf>
	printf("\r\n");
 8003b8a:	4809      	ldr	r0, [pc, #36]	; (8003bb0 <log_format+0x8c>)
 8003b8c:	f012 ffb4 	bl	8016af8 <puts>
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}
 8003b98:	20000608 	.word	0x20000608
 8003b9c:	fffffc18 	.word	0xfffffc18
 8003ba0:	200003b8 	.word	0x200003b8
 8003ba4:	200003a0 	.word	0x200003a0
 8003ba8:	200003b4 	.word	0x200003b4
 8003bac:	08019598 	.word	0x08019598
 8003bb0:	080195b4 	.word	0x080195b4

08003bb4 <logi>:

void logi(const char* message, ...) {
 8003bb4:	b40f      	push	{r0, r1, r2, r3}
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	607b      	str	r3, [r7, #4]
	log_format("INFO", message, args);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6939      	ldr	r1, [r7, #16]
 8003bc6:	4805      	ldr	r0, [pc, #20]	; (8003bdc <logi+0x28>)
 8003bc8:	f7ff ffac 	bl	8003b24 <log_format>
	va_end(args);
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003bd6:	b004      	add	sp, #16
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	080195b8 	.word	0x080195b8

08003be0 <loge>:
	va_start(args, message);
	log_format("DEBUG", message, args);
	va_end(args);
}

void loge(const char* message, ...) {
 8003be0:	b40f      	push	{r0, r1, r2, r3}
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	607b      	str	r3, [r7, #4]
	log_format("ERROR", message, args);
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6939      	ldr	r1, [r7, #16]
 8003bf2:	4805      	ldr	r0, [pc, #20]	; (8003c08 <loge+0x28>)
 8003bf4:	f7ff ff96 	bl	8003b24 <log_format>
	va_end(args);
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c02:	b004      	add	sp, #16
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	080195c8 	.word	0x080195c8

08003c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c10:	f001 fc58 	bl	80054c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c14:	f001 f872 	bl	8004cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c18:	f001 f8de 	bl	8004dd8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003c1c:	f001 f80c 	bl	8004c38 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003c20:	f001 f982 	bl	8004f28 <MX_I2C1_Init>
  MX_RTC_Init();
 8003c24:	f001 f9ae 	bl	8004f84 <MX_RTC_Init>
  MX_SPI2_Init();
 8003c28:	f001 fa06 	bl	8005038 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003c2c:	f001 fa3a 	bl	80050a4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8003c30:	f001 fac4 	bl	80051bc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003c34:	f001 faec 	bl	8005210 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003c38:	f001 fb14 	bl	8005264 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8003c3c:	f00a fc74 	bl	800e528 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  _BMP390_Init();
 8003c40:	f000 f8b2 	bl	8003da8 <_BMP390_Init>
  _BNO055_Init();
 8003c44:	f000 f8bc 	bl	8003dc0 <_BNO055_Init>
  _SD_Init();
 8003c48:	f000 f8c8 	bl	8003ddc <_SD_Init>
  _Servo_Init();
 8003c4c:	f000 f8e4 	bl	8003e18 <_Servo_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003c50:	f00d fa80 	bl	8011154 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TransmitSemaphore */
  TransmitSemaphoreHandle = osSemaphoreNew(1, 1, &TransmitSemaphore_attributes);
 8003c54:	4a32      	ldr	r2, [pc, #200]	; (8003d20 <main+0x114>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	2001      	movs	r0, #1
 8003c5a:	f00d fd1b 	bl	8011694 <osSemaphoreNew>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4a30      	ldr	r2, [pc, #192]	; (8003d24 <main+0x118>)
 8003c62:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SensorReading */
  SensorReadingHandle = osTimerNew(vSensorReadingCallback, osTimerPeriodic, NULL, &SensorReading_attributes);
 8003c64:	4b30      	ldr	r3, [pc, #192]	; (8003d28 <main+0x11c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4830      	ldr	r0, [pc, #192]	; (8003d2c <main+0x120>)
 8003c6c:	f00d fb7e 	bl	801136c <osTimerNew>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <main+0x124>)
 8003c74:	6013      	str	r3, [r2, #0]

  /* creation of Transmit */
  TransmitHandle = osTimerNew(vTransmitCallback, osTimerPeriodic, NULL, &Transmit_attributes);
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <main+0x128>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	482e      	ldr	r0, [pc, #184]	; (8003d38 <main+0x12c>)
 8003c7e:	f00d fb75 	bl	801136c <osTimerNew>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4a2d      	ldr	r2, [pc, #180]	; (8003d3c <main+0x130>)
 8003c86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(SensorReadingHandle, 3000);
 8003c88:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <main+0x124>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003c90:	4618      	mov	r0, r3
 8003c92:	f00d fbe7 	bl	8011464 <osTimerStart>
  osTimerStart(TransmitHandle, 3000);
 8003c96:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <main+0x130>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f00d fbe0 	bl	8011464 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Main */
  MainHandle = osThreadNew(vMainTask, NULL, &Main_attributes);
 8003ca4:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <main+0x134>)
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4826      	ldr	r0, [pc, #152]	; (8003d44 <main+0x138>)
 8003caa:	f00d fa9d 	bl	80111e8 <osThreadNew>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <main+0x13c>)
 8003cb2:	6013      	str	r3, [r2, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(vGPSTask, NULL, &GPS_attributes);
 8003cb4:	4a25      	ldr	r2, [pc, #148]	; (8003d4c <main+0x140>)
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4825      	ldr	r0, [pc, #148]	; (8003d50 <main+0x144>)
 8003cba:	f00d fa95 	bl	80111e8 <osThreadNew>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <main+0x148>)
 8003cc2:	6013      	str	r3, [r2, #0]

  /* creation of StateManaging */
  StateManagingHandle = osThreadNew(vStateManagingTask, NULL, &StateManaging_attributes);
 8003cc4:	4a24      	ldr	r2, [pc, #144]	; (8003d58 <main+0x14c>)
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4824      	ldr	r0, [pc, #144]	; (8003d5c <main+0x150>)
 8003cca:	f00d fa8d 	bl	80111e8 <osThreadNew>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <main+0x154>)
 8003cd2:	6013      	str	r3, [r2, #0]

  /* creation of Receive */
  ReceiveHandle = osThreadNew(vReceiveTask, NULL, &Receive_attributes);
 8003cd4:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <main+0x158>)
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4823      	ldr	r0, [pc, #140]	; (8003d68 <main+0x15c>)
 8003cda:	f00d fa85 	bl	80111e8 <osThreadNew>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <main+0x160>)
 8003ce2:	6013      	str	r3, [r2, #0]

  /* creation of Debug */
  DebugHandle = osThreadNew(vDebugTask, NULL, &Debug_attributes);
 8003ce4:	4a22      	ldr	r2, [pc, #136]	; (8003d70 <main+0x164>)
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4822      	ldr	r0, [pc, #136]	; (8003d74 <main+0x168>)
 8003cea:	f00d fa7d 	bl	80111e8 <osThreadNew>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <main+0x16c>)
 8003cf2:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of USBEvent */
  USBEventHandle = osEventFlagsNew(&USBEvent_attributes);
 8003cf4:	4821      	ldr	r0, [pc, #132]	; (8003d7c <main+0x170>)
 8003cf6:	f00d fbe3 	bl	80114c0 <osEventFlagsNew>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <main+0x174>)
 8003cfe:	6013      	str	r3, [r2, #0]

  /* creation of GPSEvent */
  GPSEventHandle = osEventFlagsNew(&GPSEvent_attributes);
 8003d00:	4820      	ldr	r0, [pc, #128]	; (8003d84 <main+0x178>)
 8003d02:	f00d fbdd 	bl	80114c0 <osEventFlagsNew>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4a1f      	ldr	r2, [pc, #124]	; (8003d88 <main+0x17c>)
 8003d0a:	6013      	str	r3, [r2, #0]

  /* creation of CommandEvent */
  CommandEventHandle = osEventFlagsNew(&CommandEvent_attributes);
 8003d0c:	481f      	ldr	r0, [pc, #124]	; (8003d8c <main+0x180>)
 8003d0e:	f00d fbd7 	bl	80114c0 <osEventFlagsNew>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <main+0x184>)
 8003d16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003d18:	f00d fa40 	bl	801119c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <main+0x110>
 8003d1e:	bf00      	nop
 8003d20:	080197c0 	.word	0x080197c0
 8003d24:	200003d8 	.word	0x200003d8
 8003d28:	080197a0 	.word	0x080197a0
 8003d2c:	08004191 	.word	0x08004191
 8003d30:	200003d0 	.word	0x200003d0
 8003d34:	080197b0 	.word	0x080197b0
 8003d38:	0800447d 	.word	0x0800447d
 8003d3c:	200003d4 	.word	0x200003d4
 8003d40:	080196ec 	.word	0x080196ec
 8003d44:	08003e69 	.word	0x08003e69
 8003d48:	200003bc 	.word	0x200003bc
 8003d4c:	08019710 	.word	0x08019710
 8003d50:	08003ebd 	.word	0x08003ebd
 8003d54:	200003c0 	.word	0x200003c0
 8003d58:	08019734 	.word	0x08019734
 8003d5c:	08003fd1 	.word	0x08003fd1
 8003d60:	200003c4 	.word	0x200003c4
 8003d64:	08019758 	.word	0x08019758
 8003d68:	0800414d 	.word	0x0800414d
 8003d6c:	200003c8 	.word	0x200003c8
 8003d70:	0801977c 	.word	0x0801977c
 8003d74:	0800415d 	.word	0x0800415d
 8003d78:	200003cc 	.word	0x200003cc
 8003d7c:	080197d0 	.word	0x080197d0
 8003d80:	200003dc 	.word	0x200003dc
 8003d84:	080197e0 	.word	0x080197e0
 8003d88:	200003e0 	.word	0x200003e0
 8003d8c:	080197f0 	.word	0x080197f0
 8003d90:	200003e4 	.word	0x200003e4

08003d94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//uint8_t buffer[14] = {};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART3)
  {
	  //HAL_UART_Receive_IT(&huart3, (uint8_t *)buffer, sizeof(buffer));
    //logi("buffer");
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_BMP390_Init>:
static void _BMP390_Init(void){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	BMP390_AssignI2C(&hi2c1);
 8003dac:	4803      	ldr	r0, [pc, #12]	; (8003dbc <_BMP390_Init+0x14>)
 8003dae:	f7ff f9e5 	bl	800317c <BMP390_AssignI2C>
	BMP390_Init();
 8003db2:	f7ff f949 	bl	8003048 <BMP390_Init>
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200005b4 	.word	0x200005b4

08003dc0 <_BNO055_Init>:
static void _BNO055_Init(void){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c1);
 8003dc4:	4804      	ldr	r0, [pc, #16]	; (8003dd8 <_BNO055_Init+0x18>)
 8003dc6:	f7ff fc5f 	bl	8003688 <bno055_assignI2C>
	bno055_setup();
 8003dca:	f7ff fa27 	bl	800321c <bno055_setup>
	bno055_setOperationModeNDOF();
 8003dce:	f7ff fa12 	bl	80031f6 <bno055_setOperationModeNDOF>
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200005b4 	.word	0x200005b4

08003ddc <_SD_Init>:
static void _SD_Init(void){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
	SD_Assign(&hspi2);
 8003de0:	4809      	ldr	r0, [pc, #36]	; (8003e08 <_SD_Init+0x2c>)
 8003de2:	f7ff fd7b 	bl	80038dc <SD_Assign>
	retUSER = f_mount(&USERFatFS, USERPath, 1);
 8003de6:	2201      	movs	r2, #1
 8003de8:	4908      	ldr	r1, [pc, #32]	; (8003e0c <_SD_Init+0x30>)
 8003dea:	4809      	ldr	r0, [pc, #36]	; (8003e10 <_SD_Init+0x34>)
 8003dec:	f00d f868 	bl	8010ec0 <f_mount>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <_SD_Init+0x38>)
 8003df6:	701a      	strb	r2, [r3, #0]
	if ( retUSER != FR_OK ) Error_Handler();
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <_SD_Init+0x38>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <_SD_Init+0x28>
 8003e00:	f000 fb58 	bl	80044b4 <Error_Handler>
}
 8003e04:	bf00      	nop
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000628 	.word	0x20000628
 8003e0c:	200007c0 	.word	0x200007c0
 8003e10:	200007c4 	.word	0x200007c4
 8003e14:	200007bc 	.word	0x200007bc

08003e18 <_Servo_Init>:
static void _Servo_Init(void){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
	Servo_Attach(&hservo1, &htim3, TIM_CHANNEL_1);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	490e      	ldr	r1, [pc, #56]	; (8003e58 <_Servo_Init+0x40>)
 8003e20:	480e      	ldr	r0, [pc, #56]	; (8003e5c <_Servo_Init+0x44>)
 8003e22:	f7ff fe23 	bl	8003a6c <Servo_Attach>
	Servo_Attach(&hservo2, &htim3, TIM_CHANNEL_2);
 8003e26:	2204      	movs	r2, #4
 8003e28:	490b      	ldr	r1, [pc, #44]	; (8003e58 <_Servo_Init+0x40>)
 8003e2a:	480d      	ldr	r0, [pc, #52]	; (8003e60 <_Servo_Init+0x48>)
 8003e2c:	f7ff fe1e 	bl	8003a6c <Servo_Attach>
	Servo_Attach(&hservo3, &htim3, TIM_CHANNEL_3);
 8003e30:	2208      	movs	r2, #8
 8003e32:	4909      	ldr	r1, [pc, #36]	; (8003e58 <_Servo_Init+0x40>)
 8003e34:	480b      	ldr	r0, [pc, #44]	; (8003e64 <_Servo_Init+0x4c>)
 8003e36:	f7ff fe19 	bl	8003a6c <Servo_Attach>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4806      	ldr	r0, [pc, #24]	; (8003e58 <_Servo_Init+0x40>)
 8003e3e:	f006 ff33 	bl	800aca8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8003e42:	2104      	movs	r1, #4
 8003e44:	4804      	ldr	r0, [pc, #16]	; (8003e58 <_Servo_Init+0x40>)
 8003e46:	f006 ff2f 	bl	800aca8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	4802      	ldr	r0, [pc, #8]	; (8003e58 <_Servo_Init+0x40>)
 8003e4e:	f006 ff2b 	bl	800aca8 <HAL_TIM_PWM_Start_IT>
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000680 	.word	0x20000680
 8003e5c:	200003e8 	.word	0x200003e8
 8003e60:	200003f0 	.word	0x200003f0
 8003e64:	200003f8 	.word	0x200003f8

08003e68 <vMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vMainTask */
void vMainTask(void *argument)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003e70:	f011 f974 	bl	801515c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  //HAL_UART_Receive_IT(&huart3, (uint8_t *) buffer, sizeof(buffer));
  //uint8_t data[]= {0x7E, 0x00, 0x0A, 0x01, 0x01, 0xCC, 0xCC, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x71};
  logi("Initializing...");
 8003e74:	480e      	ldr	r0, [pc, #56]	; (8003eb0 <vMainTask+0x48>)
 8003e76:	f7ff fe9d 	bl	8003bb4 <logi>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e80:	480c      	ldr	r0, [pc, #48]	; (8003eb4 <vMainTask+0x4c>)
 8003e82:	f002 fa69 	bl	8006358 <HAL_GPIO_WritePin>
  osDelay(100);
 8003e86:	2064      	movs	r0, #100	; 0x64
 8003e88:	f00d fa40 	bl	801130c <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e92:	4808      	ldr	r0, [pc, #32]	; (8003eb4 <vMainTask+0x4c>)
 8003e94:	f002 fa60 	bl	8006358 <HAL_GPIO_WritePin>
  logi("Initialized");
 8003e98:	4807      	ldr	r0, [pc, #28]	; (8003eb8 <vMainTask+0x50>)
 8003e9a:	f7ff fe8b 	bl	8003bb4 <logi>
  for(;;)
  {
    osDelay(1000);
 8003e9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ea2:	f00d fa33 	bl	801130c <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003ea6:	2120      	movs	r1, #32
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <vMainTask+0x4c>)
 8003eaa:	f002 fa6e 	bl	800638a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8003eae:	e7f6      	b.n	8003e9e <vMainTask+0x36>
 8003eb0:	08019654 	.word	0x08019654
 8003eb4:	40020000 	.word	0x40020000
 8003eb8:	08019664 	.word	0x08019664

08003ebc <vGPSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vGPSTask */
void vGPSTask(void *argument)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vGPSTask */
  /* Infinite loop */
	// Task for gathering NMEA message from GPS module using UART1 port
  for(;;)
  {
  	if ( HAL_UART_Receive(&huart1, &IH_UART1_byteBuf, sizeof(IH_UART1_byteBuf), HAL_MAX_DELAY)!= HAL_OK){
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4938      	ldr	r1, [pc, #224]	; (8003fac <vGPSTask+0xf0>)
 8003ecc:	4838      	ldr	r0, [pc, #224]	; (8003fb0 <vGPSTask+0xf4>)
 8003ece:	f007 fea8 	bl	800bc22 <HAL_UART_Receive>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d167      	bne.n	8003fa8 <vGPSTask+0xec>
  		continue;
  	}
  	if (IH_UART1_byteBuf == IH_UART1_HEADER1 && IH_UART1_headerPass == 0){
 8003ed8:	4b34      	ldr	r3, [pc, #208]	; (8003fac <vGPSTask+0xf0>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b47      	cmp	r3, #71	; 0x47
 8003ede:	d107      	bne.n	8003ef0 <vGPSTask+0x34>
 8003ee0:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <vGPSTask+0xf8>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d103      	bne.n	8003ef0 <vGPSTask+0x34>
  		// the forward one is less frequent condition
  		IH_UART1_headerPass = 1;
 8003ee8:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <vGPSTask+0xf8>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e052      	b.n	8003f96 <vGPSTask+0xda>
  	}
  	else if (IH_UART1_headerPass == 1 && IH_UART1_byteBuf == IH_UART1_HEADER2){
 8003ef0:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <vGPSTask+0xf8>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d107      	bne.n	8003f08 <vGPSTask+0x4c>
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <vGPSTask+0xf0>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b47      	cmp	r3, #71	; 0x47
 8003efe:	d103      	bne.n	8003f08 <vGPSTask+0x4c>
  		IH_UART1_headerPass = 2;
 8003f00:	4b2c      	ldr	r3, [pc, #176]	; (8003fb4 <vGPSTask+0xf8>)
 8003f02:	2202      	movs	r2, #2
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e046      	b.n	8003f96 <vGPSTask+0xda>
  	}
  	else if (IH_UART1_headerPass == 2 && IH_UART1_byteBuf == IH_UART1_HEADER3){
 8003f08:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <vGPSTask+0xf8>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d107      	bne.n	8003f20 <vGPSTask+0x64>
 8003f10:	4b26      	ldr	r3, [pc, #152]	; (8003fac <vGPSTask+0xf0>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b41      	cmp	r3, #65	; 0x41
 8003f16:	d103      	bne.n	8003f20 <vGPSTask+0x64>
  		IH_UART1_headerPass = 3;
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <vGPSTask+0xf8>)
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e03a      	b.n	8003f96 <vGPSTask+0xda>
  	}
  	else if (IH_UART1_headerPass == 3){
 8003f20:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <vGPSTask+0xf8>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d130      	bne.n	8003f8a <vGPSTask+0xce>
  		// message, start with comma(',')
  		if (IH_UART1_byteBuf != IH_UART1_TERMINATOR){
 8003f28:	4b20      	ldr	r3, [pc, #128]	; (8003fac <vGPSTask+0xf0>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f2e:	d00d      	beq.n	8003f4c <vGPSTask+0x90>
  			// not last byte
  			IH_UART1_buf[IH_UART1_pMessage] = IH_UART1_byteBuf;
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <vGPSTask+0xfc>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <vGPSTask+0xf0>)
 8003f38:	7819      	ldrb	r1, [r3, #0]
 8003f3a:	4b20      	ldr	r3, [pc, #128]	; (8003fbc <vGPSTask+0x100>)
 8003f3c:	5499      	strb	r1, [r3, r2]
  			IH_UART1_pMessage++;
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <vGPSTask+0xfc>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <vGPSTask+0xfc>)
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e024      	b.n	8003f96 <vGPSTask+0xda>
  		}
  		else{
  			// last byte
  			IH_UART1_buf[IH_UART1_pMessage] = '\0';
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <vGPSTask+0xfc>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <vGPSTask+0x100>)
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]
  			IH_UART1_headerPass = 0;
 8003f58:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <vGPSTask+0xf8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
  			IH_UART1_pMessage = 0;
 8003f5e:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <vGPSTask+0xfc>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]

  			strcpy(GPS_message, IH_UART1_buf);
 8003f64:	4915      	ldr	r1, [pc, #84]	; (8003fbc <vGPSTask+0x100>)
 8003f66:	4816      	ldr	r0, [pc, #88]	; (8003fc0 <vGPSTask+0x104>)
 8003f68:	f012 fe8b 	bl	8016c82 <strcpy>
  			// ToDo: request parsing


  			if (GPS_notReadFlag == 1){
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <vGPSTask+0x108>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <vGPSTask+0xc6>
  				GPS_overwriteFlag = 1;
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <vGPSTask+0x10c>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	701a      	strb	r2, [r3, #0]
  				GPS_onceOverwriteFlag = 1;
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <vGPSTask+0x110>)
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e009      	b.n	8003f96 <vGPSTask+0xda>
  			}
  			else{
  				GPS_notReadFlag = 1;
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <vGPSTask+0x108>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	e005      	b.n	8003f96 <vGPSTask+0xda>
  			}
  		}
  	}
  	else{
  		// none of above
  		IH_UART1_headerPass = 0;
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <vGPSTask+0xf8>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
  		IH_UART1_pMessage = 0;
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <vGPSTask+0xfc>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
  	}
  	HAL_UART_Receive_IT(&huart1, &IH_UART1_byteBuf, sizeof(IH_UART1_byteBuf));
 8003f96:	2201      	movs	r2, #1
 8003f98:	4904      	ldr	r1, [pc, #16]	; (8003fac <vGPSTask+0xf0>)
 8003f9a:	4805      	ldr	r0, [pc, #20]	; (8003fb0 <vGPSTask+0xf4>)
 8003f9c:	f007 fee3 	bl	800bd66 <HAL_UART_Receive_IT>
  	osDelay(1);
 8003fa0:	2001      	movs	r0, #1
 8003fa2:	f00d f9b3 	bl	801130c <osDelay>
 8003fa6:	e78d      	b.n	8003ec4 <vGPSTask+0x8>
  		continue;
 8003fa8:	bf00      	nop
  	if ( HAL_UART_Receive(&huart1, &IH_UART1_byteBuf, sizeof(IH_UART1_byteBuf), HAL_MAX_DELAY)!= HAL_OK){
 8003faa:	e78b      	b.n	8003ec4 <vGPSTask+0x8>
 8003fac:	2000047b 	.word	0x2000047b
 8003fb0:	200006c8 	.word	0x200006c8
 8003fb4:	20000479 	.word	0x20000479
 8003fb8:	2000047a 	.word	0x2000047a
 8003fbc:	2000047c 	.word	0x2000047c
 8003fc0:	200004cc 	.word	0x200004cc
 8003fc4:	20000018 	.word	0x20000018
 8003fc8:	20000019 	.word	0x20000019
 8003fcc:	2000001a 	.word	0x2000001a

08003fd0 <vStateManagingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStateManagingTask */
void vStateManagingTask(void *argument)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b089      	sub	sp, #36	; 0x24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStateManagingTask */
	// only cares about automatic state transfer from altitude change
//	VehicleStateTypeDef vehicle_state;
	int32_t altitude = 0, old_altitude = 0, max_altitude = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
	int32_t s_altitude = 0, s_old_altitude = 0, s_max_altitude = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	2300      	movs	r3, #0
 8003fee:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
  	// altitude update
  	while(sensor_data_container.altitude_updated_flag == 0); // false when the flag is set
 8003ff0:	bf00      	nop
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <vStateManagingTask+0x174>)
 8003ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0fb      	beq.n	8003ff2 <vStateManagingTask+0x22>

  	// add blocking start here
  	old_altitude = altitude;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	617b      	str	r3, [r7, #20]
  	altitude = sensor_data_container.altitude;
 8003ffe:	4b51      	ldr	r3, [pc, #324]	; (8004144 <vStateManagingTask+0x174>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61fb      	str	r3, [r7, #28]
  	sensor_data_container.altitude_updated_flag = 0;
 8004004:	4b4f      	ldr	r3, [pc, #316]	; (8004144 <vStateManagingTask+0x174>)
 8004006:	2200      	movs	r2, #0
 8004008:	665a      	str	r2, [r3, #100]	; 0x64
  	if ( altitude > max_altitude ) max_altitude = altitude;
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	429a      	cmp	r2, r3
 8004010:	dd01      	ble.n	8004016 <vStateManagingTask+0x46>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	61bb      	str	r3, [r7, #24]
//  	s_old_altitude = altitude;
//  	s_altitude = sensor_data_container.s_altitude;
//  	sensor_data_container.s_altitude_updated_flag = 0;
//  	if ( s_altitude > s_max_altitude ) s_max_altitude = s_altitude;

  	switch(vehicle_state){
 8004016:	4b4c      	ldr	r3, [pc, #304]	; (8004148 <vStateManagingTask+0x178>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	2b13      	cmp	r3, #19
 800401e:	d87f      	bhi.n	8004120 <vStateManagingTask+0x150>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <vStateManagingTask+0x58>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004079 	.word	0x08004079
 800402c:	08004089 	.word	0x08004089
 8004030:	0800409d 	.word	0x0800409d
 8004034:	080040af 	.word	0x080040af
 8004038:	08004121 	.word	0x08004121
 800403c:	08004121 	.word	0x08004121
 8004040:	08004121 	.word	0x08004121
 8004044:	08004121 	.word	0x08004121
 8004048:	08004121 	.word	0x08004121
 800404c:	08004121 	.word	0x08004121
 8004050:	08004121 	.word	0x08004121
 8004054:	08004121 	.word	0x08004121
 8004058:	08004121 	.word	0x08004121
 800405c:	08004121 	.word	0x08004121
 8004060:	08004121 	.word	0x08004121
 8004064:	08004121 	.word	0x08004121
 8004068:	080040cd 	.word	0x080040cd
 800406c:	080040dd 	.word	0x080040dd
 8004070:	080040f1 	.word	0x080040f1
 8004074:	08004103 	.word	0x08004103
  	case F_LAUNCH_WAIT:
  		if (altitude > VEHICLE_ASCENT_THRESHOLD) {
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800407e:	dd51      	ble.n	8004124 <vStateManagingTask+0x154>
  			vehicle_state = F_ASCENT;
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <vStateManagingTask+0x178>)
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 8004086:	e04d      	b.n	8004124 <vStateManagingTask+0x154>
  	case F_ASCENT:
  		if (max_altitude - altitude > VEHICLE_HS_THRESHOLD){
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004092:	dd49      	ble.n	8004128 <vStateManagingTask+0x158>
  			// PC deploy if needed
  			vehicle_state = F_HS_DEPLOYED;
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <vStateManagingTask+0x178>)
 8004096:	2203      	movs	r2, #3
 8004098:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 800409a:	e045      	b.n	8004128 <vStateManagingTask+0x158>
  	case F_HS_DEPLOYED:
  		if (altitude < VEHICLE_PC_THRESHOLD){
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f242 720f 	movw	r2, #9999	; 0x270f
 80040a2:	4293      	cmp	r3, r2
 80040a4:	dc42      	bgt.n	800412c <vStateManagingTask+0x15c>
  			// ToDo: implement PC deploy
  			vehicle_state = F_PC_DEPLOYED;
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <vStateManagingTask+0x178>)
 80040a8:	2204      	movs	r2, #4
 80040aa:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 80040ac:	e03e      	b.n	800412c <vStateManagingTask+0x15c>
  	case F_PC_DEPLOYED:
  		if ((old_altitude - altitude) < VEHICLE_LAND_THRESHOLD &&\
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b63      	cmp	r3, #99	; 0x63
 80040b6:	dc3b      	bgt.n	8004130 <vStateManagingTask+0x160>
  				(old_altitude - altitude) > -VEHICLE_LAND_THRESHOLD ){
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	1ad3      	subs	r3, r2, r3
  		if ((old_altitude - altitude) < VEHICLE_LAND_THRESHOLD &&\
 80040be:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80040c2:	db35      	blt.n	8004130 <vStateManagingTask+0x160>
  			// ToDo: implement buzz
  			// implement CX OFF
  			vehicle_state = F_LANDED;
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <vStateManagingTask+0x178>)
 80040c6:	2205      	movs	r2, #5
 80040c8:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 80040ca:	e031      	b.n	8004130 <vStateManagingTask+0x160>
  	case S_LAUNCH_WAIT:
  		if (s_altitude > VEHICLE_ASCENT_THRESHOLD) {
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040d2:	dd2f      	ble.n	8004134 <vStateManagingTask+0x164>
  			vehicle_state = S_ASCENT;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <vStateManagingTask+0x178>)
 80040d6:	2212      	movs	r2, #18
 80040d8:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 80040da:	e02b      	b.n	8004134 <vStateManagingTask+0x164>
  	case S_ASCENT:
  		if (s_max_altitude - s_altitude > VEHICLE_HS_THRESHOLD){
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040e6:	dd27      	ble.n	8004138 <vStateManagingTask+0x168>
  			// PC deploy if needed
  			vehicle_state = S_HS_DEPLOYED;
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <vStateManagingTask+0x178>)
 80040ea:	2213      	movs	r2, #19
 80040ec:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 80040ee:	e023      	b.n	8004138 <vStateManagingTask+0x168>
  	case S_HS_DEPLOYED:
  		if (s_altitude < VEHICLE_PC_THRESHOLD){
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80040f6:	4293      	cmp	r3, r2
 80040f8:	dc20      	bgt.n	800413c <vStateManagingTask+0x16c>
  			// ToDo: implement PC deploy
  			vehicle_state = S_PC_DEPLOYED;
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <vStateManagingTask+0x178>)
 80040fc:	2214      	movs	r2, #20
 80040fe:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 8004100:	e01c      	b.n	800413c <vStateManagingTask+0x16c>
  	case S_PC_DEPLOYED:
  		if ((s_old_altitude - altitude) < VEHICLE_LAND_THRESHOLD &&\
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b63      	cmp	r3, #99	; 0x63
 800410a:	dc19      	bgt.n	8004140 <vStateManagingTask+0x170>
  				(s_old_altitude - altitude) > -VEHICLE_LAND_THRESHOLD ){
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	1ad3      	subs	r3, r2, r3
  		if ((s_old_altitude - altitude) < VEHICLE_LAND_THRESHOLD &&\
 8004112:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004116:	db13      	blt.n	8004140 <vStateManagingTask+0x170>
  			// ToDo: implement buzz
  			// implement CX OFF
  			vehicle_state = S_LANDED;
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <vStateManagingTask+0x178>)
 800411a:	2215      	movs	r2, #21
 800411c:	701a      	strb	r2, [r3, #0]
  		}
  		break;
 800411e:	e00f      	b.n	8004140 <vStateManagingTask+0x170>
  	default:
  		// VEHICLE_RESET, F_LANDED, SIM_ENABLED, S_LANDED
  		// do nothing, basically...
  		// doing commanded task will be implemented in vRecieveTask(); function
  		break;
 8004120:	bf00      	nop
 8004122:	e765      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 8004124:	bf00      	nop
 8004126:	e763      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 8004128:	bf00      	nop
 800412a:	e761      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 800412c:	bf00      	nop
 800412e:	e75f      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 8004130:	bf00      	nop
 8004132:	e75d      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 8004134:	bf00      	nop
 8004136:	e75b      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 8004138:	bf00      	nop
 800413a:	e759      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 800413c:	bf00      	nop
 800413e:	e757      	b.n	8003ff0 <vStateManagingTask+0x20>
  		break;
 8004140:	bf00      	nop
  	while(sensor_data_container.altitude_updated_flag == 0); // false when the flag is set
 8004142:	e755      	b.n	8003ff0 <vStateManagingTask+0x20>
 8004144:	20000410 	.word	0x20000410
 8004148:	20000478 	.word	0x20000478

0800414c <vReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vReceiveTask */
void vReceiveTask(void *argument)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004154:	2001      	movs	r0, #1
 8004156:	f00d f8d9 	bl	801130c <osDelay>
 800415a:	e7fb      	b.n	8004154 <vReceiveTask+0x8>

0800415c <vDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugTask */
void vDebugTask(void *argument)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugTask */
  /* Infinite loop */
	uint32_t event_flag;
	uint32_t buffer;
	uint16_t cmd = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	81fb      	strh	r3, [r7, #14]
	HAL_StatusTypeDef status;
	for (;;) {
		event_flag = osEventFlagsWait(USBEventHandle, RECEIVED_USB, osFlagsWaitAny, 1000);
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <vDebugTask+0x30>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004170:	2200      	movs	r2, #0
 8004172:	2101      	movs	r1, #1
 8004174:	f00d fa28 	bl	80115c8 <osEventFlagsWait>
 8004178:	60b8      	str	r0, [r7, #8]
		if (event_flag & RECEIVED_USB) {
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f1      	beq.n	8004168 <vDebugTask+0xc>
			Buzzer_Once();
 8004184:	f001 f898 	bl	80052b8 <Buzzer_Once>
		event_flag = osEventFlagsWait(USBEventHandle, RECEIVED_USB, osFlagsWaitAny, 1000);
 8004188:	e7ee      	b.n	8004168 <vDebugTask+0xc>
 800418a:	bf00      	nop
 800418c:	200003dc 	.word	0x200003dc

08004190 <vSensorReadingCallback>:
  /* USER CODE END vDebugTask */
}

/* vSensorReadingCallback function */
void vSensorReadingCallback(void *argument)
{
 8004190:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8004194:	b0a7      	sub	sp, #156	; 0x9c
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
	int32_t altitude;
	uint16_t battery_voltage;
	uint16_t air_speed;

	// read bmp390
	BMP390_GetValue(&temperature, &pressure, 50);
 800419a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800419e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041a2:	2232      	movs	r2, #50	; 0x32
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe ffad 	bl	8003104 <BMP390_GetValue>

	// read bno055
	bno055vector = bno055_getVectorAccelerometer();
 80041aa:	f7ff f9a3 	bl	80034f4 <bno055_getVectorAccelerometer>
 80041ae:	eeb0 4a40 	vmov.f32	s8, s0
 80041b2:	eef0 4a60 	vmov.f32	s9, s1
 80041b6:	eeb0 5a41 	vmov.f32	s10, s2
 80041ba:	eef0 5a61 	vmov.f32	s11, s3
 80041be:	eeb0 6a42 	vmov.f32	s12, s4
 80041c2:	eef0 6a62 	vmov.f32	s13, s5
 80041c6:	eeb0 7a43 	vmov.f32	s14, s6
 80041ca:	eef0 7a63 	vmov.f32	s15, s7
 80041ce:	ed87 4b02 	vstr	d4, [r7, #8]
 80041d2:	ed87 5b04 	vstr	d5, [r7, #16]
 80041d6:	ed87 6b06 	vstr	d6, [r7, #24]
 80041da:	ed87 7b08 	vstr	d7, [r7, #32]
	acc_x = bno055vector.x;
 80041de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041e2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	acc_y = bno055vector.y;
 80041e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ea:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	acc_z = bno055vector.z;
 80041ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041f2:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	bno055vector = bno055_getVectorGyroscope();
 80041f6:	f7ff fa03 	bl	8003600 <bno055_getVectorGyroscope>
 80041fa:	eeb0 4a40 	vmov.f32	s8, s0
 80041fe:	eef0 4a60 	vmov.f32	s9, s1
 8004202:	eeb0 5a41 	vmov.f32	s10, s2
 8004206:	eef0 5a61 	vmov.f32	s11, s3
 800420a:	eeb0 6a42 	vmov.f32	s12, s4
 800420e:	eef0 6a62 	vmov.f32	s13, s5
 8004212:	eeb0 7a43 	vmov.f32	s14, s6
 8004216:	eef0 7a63 	vmov.f32	s15, s7
 800421a:	ed87 4b02 	vstr	d4, [r7, #8]
 800421e:	ed87 5b04 	vstr	d5, [r7, #16]
 8004222:	ed87 6b06 	vstr	d6, [r7, #24]
 8004226:	ed87 7b08 	vstr	d7, [r7, #32]
	rot_x = bno055vector.x;
 800422a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800422e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	rot_y = bno055vector.y;
 8004232:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004236:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	rot_z = bno055vector.z;
 800423a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800423e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	bno055vector = bno055_getVectorMagnetometer();
 8004242:	f7ff f99a 	bl	800357a <bno055_getVectorMagnetometer>
 8004246:	eeb0 4a40 	vmov.f32	s8, s0
 800424a:	eef0 4a60 	vmov.f32	s9, s1
 800424e:	eeb0 5a41 	vmov.f32	s10, s2
 8004252:	eef0 5a61 	vmov.f32	s11, s3
 8004256:	eeb0 6a42 	vmov.f32	s12, s4
 800425a:	eef0 6a62 	vmov.f32	s13, s5
 800425e:	eeb0 7a43 	vmov.f32	s14, s6
 8004262:	eef0 7a63 	vmov.f32	s15, s7
 8004266:	ed87 4b02 	vstr	d4, [r7, #8]
 800426a:	ed87 5b04 	vstr	d5, [r7, #16]
 800426e:	ed87 6b06 	vstr	d6, [r7, #24]
 8004272:	ed87 7b08 	vstr	d7, [r7, #32]
	mag_x = bno055vector.x;
 8004276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800427a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	mag_y = bno055vector.y;
 800427e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004282:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	mag_z = bno055vector.z;
 8004286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800428a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// read ADC1 CH0
	HAL_ADC_Start(&hadc1);
 800428e:	4876      	ldr	r0, [pc, #472]	; (8004468 <vSensorReadingCallback+0x2d8>)
 8004290:	f001 f9c2 	bl	8005618 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8004294:	2132      	movs	r1, #50	; 0x32
 8004296:	4874      	ldr	r0, [pc, #464]	; (8004468 <vSensorReadingCallback+0x2d8>)
 8004298:	f001 fa90 	bl	80057bc <HAL_ADC_PollForConversion>
	ADC1_CH0 = HAL_ADC_GetValue(&hadc1);
 800429c:	4872      	ldr	r0, [pc, #456]	; (8004468 <vSensorReadingCallback+0x2d8>)
 800429e:	f001 fb18 	bl	80058d2 <HAL_ADC_GetValue>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	// read ADC1 CH1
	HAL_ADC_Start(&hadc1);
 80042a8:	486f      	ldr	r0, [pc, #444]	; (8004468 <vSensorReadingCallback+0x2d8>)
 80042aa:	f001 f9b5 	bl	8005618 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 80042ae:	2132      	movs	r1, #50	; 0x32
 80042b0:	486d      	ldr	r0, [pc, #436]	; (8004468 <vSensorReadingCallback+0x2d8>)
 80042b2:	f001 fa83 	bl	80057bc <HAL_ADC_PollForConversion>
	ADC1_CH1 = HAL_ADC_GetValue(&hadc1);
 80042b6:	486c      	ldr	r0, [pc, #432]	; (8004468 <vSensorReadingCallback+0x2d8>)
 80042b8:	f001 fb0b 	bl	80058d2 <HAL_ADC_GetValue>
 80042bc:	4603      	mov	r3, r0
 80042be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  	 * T1: temperature, sea level
  	 */
  //ToDo: get sea level pressure (calibrated)from RTC backup register
//  double pressure_sea_level = 101325*100;
//  double pressure_ratio = pressure / pressure_sea_level;
  double pressure_ratio = pressure * 9.869232667160128e-4;
 80042c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fc f97f 	bl	80005cc <__aeabi_ul2d>
 80042ce:	a360      	add	r3, pc, #384	; (adr r3, 8004450 <vSensorReadingCallback+0x2c0>)
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f7fc f9b0 	bl	8000638 <__aeabi_dmul>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  altitude = (powf(pressure_ratio, ALTITUDE_POWER_COEFFICIENT) - 1) * ALTITUDE_PRODUCT_COEFFICIENT * 100;
 80042e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80042e4:	f7fc fca0 	bl	8000c28 <__aeabi_d2f>
 80042e8:	4603      	mov	r3, r0
 80042ea:	eddf 0a60 	vldr	s1, [pc, #384]	; 800446c <vSensorReadingCallback+0x2dc>
 80042ee:	ee00 3a10 	vmov	s0, r3
 80042f2:	f014 fb7d 	bl	80189f0 <powf>
 80042f6:	eef0 7a40 	vmov.f32	s15, s0
 80042fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004302:	ee17 0a90 	vmov	r0, s15
 8004306:	f7fc f93f 	bl	8000588 <__aeabi_f2d>
 800430a:	a353      	add	r3, pc, #332	; (adr r3, 8004458 <vSensorReadingCallback+0x2c8>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f7fc f992 	bl	8000638 <__aeabi_dmul>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	4b53      	ldr	r3, [pc, #332]	; (8004470 <vSensorReadingCallback+0x2e0>)
 8004322:	f7fc f989 	bl	8000638 <__aeabi_dmul>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	f7fc fc33 	bl	8000b98 <__aeabi_d2iz>
 8004332:	4603      	mov	r3, r0
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c

	// calculate battery voltage
  //battery_voltage = ADC1_CH0 / 4015 * 3.3 * 1.5 * 100;
  battery_voltage = ADC1_CH0 * 0.123287671232877;
 8004336:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f912 	bl	8000564 <__aeabi_i2d>
 8004340:	a347      	add	r3, pc, #284	; (adr r3, 8004460 <vSensorReadingCallback+0x2d0>)
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f7fc f977 	bl	8000638 <__aeabi_dmul>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	f7fc fc49 	bl	8000be8 <__aeabi_d2uiz>
 8004356:	4603      	mov	r3, r0
 8004358:	877b      	strh	r3, [r7, #58]	; 0x3a

	// calculate air speed
  air_speed = DP_calculateAirSpeedComp(ADC1_CH1, pressure / 100.f, temperature / 100.f);
 800435a:	f8b7 404c 	ldrh.w	r4, [r7, #76]	; 0x4c
 800435e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	f7fc fd77 	bl	8000e58 <__aeabi_ul2f>
 800436a:	ee06 0a90 	vmov	s13, r0
 800436e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8004474 <vSensorReadingCallback+0x2e4>
 8004372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004376:	ee17 0a10 	vmov	r0, s14
 800437a:	f7fc f905 	bl	8000588 <__aeabi_f2d>
 800437e:	4680      	mov	r8, r0
 8004380:	4689      	mov	r9, r1
 8004382:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	f7fc fd6d 	bl	8000e68 <__aeabi_l2f>
 800438e:	ee06 0a90 	vmov	s13, r0
 8004392:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004474 <vSensorReadingCallback+0x2e4>
 8004396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439a:	ee17 0a10 	vmov	r0, s14
 800439e:	f7fc f8f3 	bl	8000588 <__aeabi_f2d>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	ec43 2b11 	vmov	d1, r2, r3
 80043aa:	ec49 8b10 	vmov	d0, r8, r9
 80043ae:	4620      	mov	r0, r4
 80043b0:	f7ff faa6 	bl	8003900 <DP_calculateAirSpeedComp>
 80043b4:	4603      	mov	r3, r0
 80043b6:	873b      	strh	r3, [r7, #56]	; 0x38

	// move data to sensor data container
  // ToDo: block other task and move data
  sensor_data_container.pressure = pressure;
 80043b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043bc:	492e      	ldr	r1, [pc, #184]	; (8004478 <vSensorReadingCallback+0x2e8>)
 80043be:	e9c1 2304 	strd	r2, r3, [r1, #16]
  sensor_data_container.temperature = temperature;
 80043c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043c6:	492c      	ldr	r1, [pc, #176]	; (8004478 <vSensorReadingCallback+0x2e8>)
 80043c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  sensor_data_container.acc_x = acc_x;
 80043cc:	492a      	ldr	r1, [pc, #168]	; (8004478 <vSensorReadingCallback+0x2e8>)
 80043ce:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80043d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
  sensor_data_container.acc_y = acc_y;
 80043d6:	4928      	ldr	r1, [pc, #160]	; (8004478 <vSensorReadingCallback+0x2e8>)
 80043d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80043dc:	e9c1 2308 	strd	r2, r3, [r1, #32]
  sensor_data_container.acc_z = acc_z;
 80043e0:	4925      	ldr	r1, [pc, #148]	; (8004478 <vSensorReadingCallback+0x2e8>)
 80043e2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80043e6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  sensor_data_container.rot_x = rot_x;
 80043ea:	4923      	ldr	r1, [pc, #140]	; (8004478 <vSensorReadingCallback+0x2e8>)
 80043ec:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80043f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  sensor_data_container.rot_y = rot_y;
 80043f4:	4920      	ldr	r1, [pc, #128]	; (8004478 <vSensorReadingCallback+0x2e8>)
 80043f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043fa:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  sensor_data_container.rot_z = rot_z;
 80043fe:	491e      	ldr	r1, [pc, #120]	; (8004478 <vSensorReadingCallback+0x2e8>)
 8004400:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004404:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
  sensor_data_container.mag_x = mag_x;
 8004408:	491b      	ldr	r1, [pc, #108]	; (8004478 <vSensorReadingCallback+0x2e8>)
 800440a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800440e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  sensor_data_container.mag_y = mag_y;
 8004412:	4919      	ldr	r1, [pc, #100]	; (8004478 <vSensorReadingCallback+0x2e8>)
 8004414:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004418:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
  sensor_data_container.mag_z = mag_z;
 800441c:	4916      	ldr	r1, [pc, #88]	; (8004478 <vSensorReadingCallback+0x2e8>)
 800441e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004422:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
  sensor_data_container.altitude = altitude;
 8004426:	4a14      	ldr	r2, [pc, #80]	; (8004478 <vSensorReadingCallback+0x2e8>)
 8004428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442a:	6013      	str	r3, [r2, #0]
  sensor_data_container.battery_voltage = battery_voltage;
 800442c:	4a12      	ldr	r2, [pc, #72]	; (8004478 <vSensorReadingCallback+0x2e8>)
 800442e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004430:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
  sensor_data_container.air_speed = air_speed;
 8004434:	4a10      	ldr	r2, [pc, #64]	; (8004478 <vSensorReadingCallback+0x2e8>)
 8004436:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004438:	f8a2 3062 	strh.w	r3, [r2, #98]	; 0x62
  sensor_data_container.altitude_updated_flag = 1;
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <vSensorReadingCallback+0x2e8>)
 800443e:	2201      	movs	r2, #1
 8004440:	665a      	str	r2, [r3, #100]	; 0x64
  /* USER CODE END vSensorReadingCallback */
}
 8004442:	bf00      	nop
 8004444:	379c      	adds	r7, #156	; 0x9c
 8004446:	46bd      	mov	sp, r7
 8004448:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800444c:	f3af 8000 	nop.w
 8004450:	c9de8608 	.word	0xc9de8608
 8004454:	3f502b74 	.word	0x3f502b74
 8004458:	9d89d89d 	.word	0x9d89d89d
 800445c:	c0e5a558 	.word	0xc0e5a558
 8004460:	e3f1f911 	.word	0xe3f1f911
 8004464:	3fbf8fc7 	.word	0x3fbf8fc7
 8004468:	2000056c 	.word	0x2000056c
 800446c:	3e42d455 	.word	0x3e42d455
 8004470:	40590000 	.word	0x40590000
 8004474:	42c80000 	.word	0x42c80000
 8004478:	20000410 	.word	0x20000410

0800447c <vTransmitCallback>:

/* vTransmitCallback function */
void vTransmitCallback(void *argument)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTransmitCallback */

  /* USER CODE END vTransmitCallback */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80044a2:	f001 f831 	bl	8005508 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40001000 	.word	0x40001000

080044b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error_Handler\r\n");
 80044b8:	4803      	ldr	r0, [pc, #12]	; (80044c8 <Error_Handler+0x14>)
 80044ba:	f012 fb1d 	bl	8016af8 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044be:	b672      	cpsid	i
}
 80044c0:	bf00      	nop
  __disable_irq();

  while (1)
  {
	  break;
 80044c2:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	08019670 	.word	0x08019670

080044cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]
 80044d6:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_MspInit+0x54>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	4a11      	ldr	r2, [pc, #68]	; (8004520 <HAL_MspInit+0x54>)
 80044dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044e0:	6453      	str	r3, [r2, #68]	; 0x44
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <HAL_MspInit+0x54>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ea:	607b      	str	r3, [r7, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_MspInit+0x54>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <HAL_MspInit+0x54>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	6413      	str	r3, [r2, #64]	; 0x40
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <HAL_MspInit+0x54>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800450a:	2200      	movs	r2, #0
 800450c:	210f      	movs	r1, #15
 800450e:	f06f 0001 	mvn.w	r0, #1
 8004512:	f001 fcd1 	bl	8005eb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40023800 	.word	0x40023800

08004524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a17      	ldr	r2, [pc, #92]	; (80045a0 <HAL_ADC_MspInit+0x7c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d127      	bne.n	8004596 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <HAL_ADC_MspInit+0x80>)
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <HAL_ADC_MspInit+0x80>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6453      	str	r3, [r2, #68]	; 0x44
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <HAL_ADC_MspInit+0x80>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <HAL_ADC_MspInit+0x80>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <HAL_ADC_MspInit+0x80>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	6313      	str	r3, [r2, #48]	; 0x30
 8004572:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_ADC_MspInit+0x80>)
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800457e:	2303      	movs	r3, #3
 8004580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004582:	2303      	movs	r3, #3
 8004584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458a:	f107 0314 	add.w	r3, r7, #20
 800458e:	4619      	mov	r1, r3
 8004590:	4805      	ldr	r0, [pc, #20]	; (80045a8 <HAL_ADC_MspInit+0x84>)
 8004592:	f001 fd4d 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004596:	bf00      	nop
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40012000 	.word	0x40012000
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40020000 	.word	0x40020000

080045ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_I2C_MspInit+0x84>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d12c      	bne.n	8004628 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	4b18      	ldr	r3, [pc, #96]	; (8004634 <HAL_I2C_MspInit+0x88>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a17      	ldr	r2, [pc, #92]	; (8004634 <HAL_I2C_MspInit+0x88>)
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b15      	ldr	r3, [pc, #84]	; (8004634 <HAL_I2C_MspInit+0x88>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80045ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045f0:	2312      	movs	r3, #18
 80045f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f8:	2303      	movs	r3, #3
 80045fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045fc:	2304      	movs	r3, #4
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	4619      	mov	r1, r3
 8004606:	480c      	ldr	r0, [pc, #48]	; (8004638 <HAL_I2C_MspInit+0x8c>)
 8004608:	f001 fd12 	bl	8006030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_I2C_MspInit+0x88>)
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	4a07      	ldr	r2, [pc, #28]	; (8004634 <HAL_I2C_MspInit+0x88>)
 8004616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800461a:	6413      	str	r3, [r2, #64]	; 0x40
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_I2C_MspInit+0x88>)
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004628:	bf00      	nop
 800462a:	3728      	adds	r7, #40	; 0x28
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40005400 	.word	0x40005400
 8004634:	40023800 	.word	0x40023800
 8004638:	40020400 	.word	0x40020400

0800463c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b09a      	sub	sp, #104	; 0x68
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004644:	f107 030c 	add.w	r3, r7, #12
 8004648:	225c      	movs	r2, #92	; 0x5c
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f011 fc7b 	bl	8015f48 <memset>
  if(hrtc->Instance==RTC)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <HAL_RTC_MspInit+0x4c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d111      	bne.n	8004680 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800465c:	2320      	movs	r3, #32
 800465e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004664:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004666:	f107 030c 	add.w	r3, r7, #12
 800466a:	4618      	mov	r0, r3
 800466c:	f004 ff0a 	bl	8009484 <HAL_RCCEx_PeriphCLKConfig>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004676:	f7ff ff1d 	bl	80044b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <HAL_RTC_MspInit+0x50>)
 800467c:	2201      	movs	r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004680:	bf00      	nop
 8004682:	3768      	adds	r7, #104	; 0x68
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40002800 	.word	0x40002800
 800468c:	42470e3c 	.word	0x42470e3c

08004690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	; 0x28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004698:	f107 0314 	add.w	r3, r7, #20
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	60da      	str	r2, [r3, #12]
 80046a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a19      	ldr	r2, [pc, #100]	; (8004714 <HAL_SPI_MspInit+0x84>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d12c      	bne.n	800470c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	4b18      	ldr	r3, [pc, #96]	; (8004718 <HAL_SPI_MspInit+0x88>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	4a17      	ldr	r2, [pc, #92]	; (8004718 <HAL_SPI_MspInit+0x88>)
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c0:	6413      	str	r3, [r2, #64]	; 0x40
 80046c2:	4b15      	ldr	r3, [pc, #84]	; (8004718 <HAL_SPI_MspInit+0x88>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_SPI_MspInit+0x88>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	4a10      	ldr	r2, [pc, #64]	; (8004718 <HAL_SPI_MspInit+0x88>)
 80046d8:	f043 0302 	orr.w	r3, r3, #2
 80046dc:	6313      	str	r3, [r2, #48]	; 0x30
 80046de:	4b0e      	ldr	r3, [pc, #56]	; (8004718 <HAL_SPI_MspInit+0x88>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80046ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f8:	2303      	movs	r3, #3
 80046fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046fc:	2305      	movs	r3, #5
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004700:	f107 0314 	add.w	r3, r7, #20
 8004704:	4619      	mov	r1, r3
 8004706:	4805      	ldr	r0, [pc, #20]	; (800471c <HAL_SPI_MspInit+0x8c>)
 8004708:	f001 fc92 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800470c:	bf00      	nop
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40003800 	.word	0x40003800
 8004718:	40023800 	.word	0x40023800
 800471c:	40020400 	.word	0x40020400

08004720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <HAL_TIM_Base_MspInit+0x3c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d10d      	bne.n	800474e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	4b0a      	ldr	r3, [pc, #40]	; (8004760 <HAL_TIM_Base_MspInit+0x40>)
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	4a09      	ldr	r2, [pc, #36]	; (8004760 <HAL_TIM_Base_MspInit+0x40>)
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	6413      	str	r3, [r2, #64]	; 0x40
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_TIM_Base_MspInit+0x40>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40000400 	.word	0x40000400
 8004760:	40023800 	.word	0x40023800

08004764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a12      	ldr	r2, [pc, #72]	; (80047cc <HAL_TIM_MspPostInit+0x68>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d11e      	bne.n	80047c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_TIM_MspPostInit+0x6c>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <HAL_TIM_MspPostInit+0x6c>)
 8004790:	f043 0304 	orr.w	r3, r3, #4
 8004794:	6313      	str	r3, [r2, #48]	; 0x30
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <HAL_TIM_MspPostInit+0x6c>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80047a2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80047a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a8:	2302      	movs	r3, #2
 80047aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80047b4:	2302      	movs	r3, #2
 80047b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	4619      	mov	r1, r3
 80047be:	4805      	ldr	r0, [pc, #20]	; (80047d4 <HAL_TIM_MspPostInit+0x70>)
 80047c0:	f001 fc36 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80047c4:	bf00      	nop
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40020800 	.word	0x40020800

080047d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08e      	sub	sp, #56	; 0x38
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a4f      	ldr	r2, [pc, #316]	; (8004934 <HAL_UART_MspInit+0x15c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d12c      	bne.n	8004854 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	4b4e      	ldr	r3, [pc, #312]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4a4d      	ldr	r2, [pc, #308]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004804:	f043 0310 	orr.w	r3, r3, #16
 8004808:	6453      	str	r3, [r2, #68]	; 0x44
 800480a:	4b4b      	ldr	r3, [pc, #300]	; (8004938 <HAL_UART_MspInit+0x160>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f003 0310 	and.w	r3, r3, #16
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	4b47      	ldr	r3, [pc, #284]	; (8004938 <HAL_UART_MspInit+0x160>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a46      	ldr	r2, [pc, #280]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004820:	f043 0302 	orr.w	r3, r3, #2
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
 8004826:	4b44      	ldr	r3, [pc, #272]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004832:	23c0      	movs	r3, #192	; 0xc0
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800483e:	2303      	movs	r3, #3
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004842:	2307      	movs	r3, #7
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800484a:	4619      	mov	r1, r3
 800484c:	483b      	ldr	r0, [pc, #236]	; (800493c <HAL_UART_MspInit+0x164>)
 800484e:	f001 fbef 	bl	8006030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004852:	e06b      	b.n	800492c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a39      	ldr	r2, [pc, #228]	; (8004940 <HAL_UART_MspInit+0x168>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d12c      	bne.n	80048b8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
 8004862:	4b35      	ldr	r3, [pc, #212]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	4a34      	ldr	r2, [pc, #208]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486c:	6413      	str	r3, [r2, #64]	; 0x40
 800486e:	4b32      	ldr	r3, [pc, #200]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	61bb      	str	r3, [r7, #24]
 8004878:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <HAL_UART_MspInit+0x160>)
 8004884:	f043 0301 	orr.w	r3, r3, #1
 8004888:	6313      	str	r3, [r2, #48]	; 0x30
 800488a:	4b2b      	ldr	r3, [pc, #172]	; (8004938 <HAL_UART_MspInit+0x160>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004896:	230c      	movs	r3, #12
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489a:	2302      	movs	r3, #2
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a2:	2303      	movs	r3, #3
 80048a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048a6:	2307      	movs	r3, #7
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ae:	4619      	mov	r1, r3
 80048b0:	4824      	ldr	r0, [pc, #144]	; (8004944 <HAL_UART_MspInit+0x16c>)
 80048b2:	f001 fbbd 	bl	8006030 <HAL_GPIO_Init>
}
 80048b6:	e039      	b.n	800492c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a22      	ldr	r2, [pc, #136]	; (8004948 <HAL_UART_MspInit+0x170>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d134      	bne.n	800492c <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_UART_MspInit+0x160>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a1b      	ldr	r2, [pc, #108]	; (8004938 <HAL_UART_MspInit+0x160>)
 80048cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b19      	ldr	r3, [pc, #100]	; (8004938 <HAL_UART_MspInit+0x160>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <HAL_UART_MspInit+0x160>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4a14      	ldr	r2, [pc, #80]	; (8004938 <HAL_UART_MspInit+0x160>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
 80048ee:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_UART_MspInit+0x160>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80048fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004900:	2302      	movs	r3, #2
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004904:	2300      	movs	r3, #0
 8004906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004908:	2303      	movs	r3, #3
 800490a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800490c:	2307      	movs	r3, #7
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004914:	4619      	mov	r1, r3
 8004916:	480d      	ldr	r0, [pc, #52]	; (800494c <HAL_UART_MspInit+0x174>)
 8004918:	f001 fb8a 	bl	8006030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800491c:	2200      	movs	r2, #0
 800491e:	2105      	movs	r1, #5
 8004920:	2027      	movs	r0, #39	; 0x27
 8004922:	f001 fac9 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004926:	2027      	movs	r0, #39	; 0x27
 8004928:	f001 fae2 	bl	8005ef0 <HAL_NVIC_EnableIRQ>
}
 800492c:	bf00      	nop
 800492e:	3738      	adds	r7, #56	; 0x38
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40011000 	.word	0x40011000
 8004938:	40023800 	.word	0x40023800
 800493c:	40020400 	.word	0x40020400
 8004940:	40004400 	.word	0x40004400
 8004944:	40020000 	.word	0x40020000
 8004948:	40004800 	.word	0x40004800
 800494c:	40020800 	.word	0x40020800

08004950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08e      	sub	sp, #56	; 0x38
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	4b33      	ldr	r3, [pc, #204]	; (8004a34 <HAL_InitTick+0xe4>)
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	4a32      	ldr	r2, [pc, #200]	; (8004a34 <HAL_InitTick+0xe4>)
 800496a:	f043 0310 	orr.w	r3, r3, #16
 800496e:	6413      	str	r3, [r2, #64]	; 0x40
 8004970:	4b30      	ldr	r3, [pc, #192]	; (8004a34 <HAL_InitTick+0xe4>)
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800497c:	f107 0210 	add.w	r2, r7, #16
 8004980:	f107 0314 	add.w	r3, r7, #20
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f004 fd4a 	bl	8009420 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004996:	f004 fd1b 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 800499a:	6378      	str	r0, [r7, #52]	; 0x34
 800499c:	e004      	b.n	80049a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800499e:	f004 fd17 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 80049a2:	4603      	mov	r3, r0
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <HAL_InitTick+0xe8>)
 80049ac:	fba2 2303 	umull	r2, r3, r2, r3
 80049b0:	0c9b      	lsrs	r3, r3, #18
 80049b2:	3b01      	subs	r3, #1
 80049b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80049b6:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <HAL_InitTick+0xec>)
 80049b8:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <HAL_InitTick+0xf0>)
 80049ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80049bc:	4b1f      	ldr	r3, [pc, #124]	; (8004a3c <HAL_InitTick+0xec>)
 80049be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80049c4:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <HAL_InitTick+0xec>)
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80049ca:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <HAL_InitTick+0xec>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049d0:	4b1a      	ldr	r3, [pc, #104]	; (8004a3c <HAL_InitTick+0xec>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049d6:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_InitTick+0xec>)
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80049dc:	4817      	ldr	r0, [pc, #92]	; (8004a3c <HAL_InitTick+0xec>)
 80049de:	f006 f84a 	bl	800aa76 <HAL_TIM_Base_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80049e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d11b      	bne.n	8004a28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80049f0:	4812      	ldr	r0, [pc, #72]	; (8004a3c <HAL_InitTick+0xec>)
 80049f2:	f006 f88f 	bl	800ab14 <HAL_TIM_Base_Start_IT>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80049fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d111      	bne.n	8004a28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a04:	2036      	movs	r0, #54	; 0x36
 8004a06:	f001 fa73 	bl	8005ef0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b0f      	cmp	r3, #15
 8004a0e:	d808      	bhi.n	8004a22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004a10:	2200      	movs	r2, #0
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	2036      	movs	r0, #54	; 0x36
 8004a16:	f001 fa4f 	bl	8005eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <HAL_InitTick+0xf4>)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	e002      	b.n	8004a28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3738      	adds	r7, #56	; 0x38
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800
 8004a38:	431bde83 	.word	0x431bde83
 8004a3c:	20000520 	.word	0x20000520
 8004a40:	40001000 	.word	0x40001000
 8004a44:	20000020 	.word	0x20000020

08004a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a4c:	e7fe      	b.n	8004a4c <NMI_Handler+0x4>
	...

08004a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  	loge("HardFault");
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <HardFault_Handler+0x10>)
 8004a56:	f7ff f8c3 	bl	8003be0 <loge>
  	break;
 8004a5a:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	08019680 	.word	0x08019680

08004a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a68:	e7fe      	b.n	8004a68 <MemManage_Handler+0x4>

08004a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a6e:	e7fe      	b.n	8004a6e <BusFault_Handler+0x4>

08004a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a74:	e7fe      	b.n	8004a74 <UsageFault_Handler+0x4>

08004a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <USART3_IRQHandler+0x10>)
 8004a8a:	f007 f99d 	bl	800bdc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000750 	.word	0x20000750

08004a98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <TIM6_DAC_IRQHandler+0x10>)
 8004a9e:	f006 fa19 	bl	800aed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000520 	.word	0x20000520

08004aac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <OTG_FS_IRQHandler+0x10>)
 8004ab2:	f003 fa29 	bl	8007f08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20006928 	.word	0x20006928

08004ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return 1;
 8004ac4:	2301      	movs	r3, #1
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <_kill>:

int _kill(int pid, int sig)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ada:	f011 f8ff 	bl	8015cdc <__errno>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2216      	movs	r2, #22
 8004ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8004ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <_exit>:

void _exit (int status)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff ffe7 	bl	8004ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b02:	e7fe      	b.n	8004b02 <_exit+0x12>

08004b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e00a      	b.n	8004b2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b16:	f3af 8000 	nop.w
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	60ba      	str	r2, [r7, #8]
 8004b22:	b2ca      	uxtb	r2, r1
 8004b24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	dbf0      	blt.n	8004b16 <_read+0x12>
  }

  return len;
 8004b34:	687b      	ldr	r3, [r7, #4]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b66:	605a      	str	r2, [r3, #4]
  return 0;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <_isatty>:

int _isatty(int file)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b7e:	2301      	movs	r3, #1
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bb0:	4a14      	ldr	r2, [pc, #80]	; (8004c04 <_sbrk+0x5c>)
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <_sbrk+0x60>)
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bbc:	4b13      	ldr	r3, [pc, #76]	; (8004c0c <_sbrk+0x64>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <_sbrk+0x64>)
 8004bc6:	4a12      	ldr	r2, [pc, #72]	; (8004c10 <_sbrk+0x68>)
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <_sbrk+0x64>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d207      	bcs.n	8004be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bd8:	f011 f880 	bl	8015cdc <__errno>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	220c      	movs	r2, #12
 8004be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	e009      	b.n	8004bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004be8:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <_sbrk+0x64>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <_sbrk+0x64>)
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <_sbrk+0x64>)
 8004bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20020000 	.word	0x20020000
 8004c08:	00000400 	.word	0x00000400
 8004c0c:	20000568 	.word	0x20000568
 8004c10:	20007060 	.word	0x20007060

08004c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <SystemInit+0x20>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <SystemInit+0x20>)
 8004c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	e000ed00 	.word	0xe000ed00

08004c38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004c3e:	463b      	mov	r3, r7
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004c4a:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c4c:	4a29      	ldr	r2, [pc, #164]	; (8004cf4 <MX_ADC1_Init+0xbc>)
 8004c4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004c50:	4b27      	ldr	r3, [pc, #156]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c56:	4b26      	ldr	r3, [pc, #152]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004c5c:	4b24      	ldr	r3, [pc, #144]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004c62:	4b23      	ldr	r3, [pc, #140]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8004c68:	4b21      	ldr	r3, [pc, #132]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c7c:	4b1c      	ldr	r3, [pc, #112]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <MX_ADC1_Init+0xc0>)
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c82:	4b1b      	ldr	r3, [pc, #108]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004c8e:	4b18      	ldr	r3, [pc, #96]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c96:	4b16      	ldr	r3, [pc, #88]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004c9c:	4814      	ldr	r0, [pc, #80]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004c9e:	f000 fc77 	bl	8005590 <HAL_ADC_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8004ca8:	f7ff fc04 	bl	80044b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cb8:	463b      	mov	r3, r7
 8004cba:	4619      	mov	r1, r3
 8004cbc:	480c      	ldr	r0, [pc, #48]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004cbe:	f000 fe15 	bl	80058ec <HAL_ADC_ConfigChannel>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8004cc8:	f7ff fbf4 	bl	80044b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4805      	ldr	r0, [pc, #20]	; (8004cf0 <MX_ADC1_Init+0xb8>)
 8004cda:	f000 fe07 	bl	80058ec <HAL_ADC_ConfigChannel>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004ce4:	f7ff fbe6 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	2000056c 	.word	0x2000056c
 8004cf4:	40012000 	.word	0x40012000
 8004cf8:	0f000001 	.word	0x0f000001

08004cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b094      	sub	sp, #80	; 0x50
 8004d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d02:	f107 031c 	add.w	r3, r7, #28
 8004d06:	2234      	movs	r2, #52	; 0x34
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f011 f91c 	bl	8015f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d20:	2300      	movs	r3, #0
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	4b2a      	ldr	r3, [pc, #168]	; (8004dd0 <SystemClock_Config+0xd4>)
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	4a29      	ldr	r2, [pc, #164]	; (8004dd0 <SystemClock_Config+0xd4>)
 8004d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <SystemClock_Config+0xd4>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d38:	607b      	str	r3, [r7, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <SystemClock_Config+0xd8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004d48:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <SystemClock_Config+0xd8>)
 8004d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <SystemClock_Config+0xd8>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004d5c:	2305      	movs	r3, #5
 8004d5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d64:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004d66:	2301      	movs	r3, #1
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004d74:	2306      	movs	r3, #6
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004d78:	2348      	movs	r3, #72	; 0x48
 8004d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004d80:	2303      	movs	r3, #3
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004d84:	2302      	movs	r3, #2
 8004d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d88:	f107 031c 	add.w	r3, r7, #28
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f005 f84d 	bl	8009e2c <HAL_RCC_OscConfig>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8004d98:	f7ff fb8c 	bl	80044b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004da0:	2302      	movs	r3, #2
 8004da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004db2:	f107 0308 	add.w	r3, r7, #8
 8004db6:	2102      	movs	r1, #2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f004 fa17 	bl	80091ec <HAL_RCC_ClockConfig>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8004dc4:	f7ff fb76 	bl	80044b4 <Error_Handler>
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3750      	adds	r7, #80	; 0x50
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40007000 	.word	0x40007000

08004dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dde:	f107 0314 	add.w	r3, r7, #20
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	605a      	str	r2, [r3, #4]
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	4b49      	ldr	r3, [pc, #292]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4a48      	ldr	r2, [pc, #288]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004df8:	f043 0304 	orr.w	r3, r3, #4
 8004dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfe:	4b46      	ldr	r3, [pc, #280]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	4b42      	ldr	r3, [pc, #264]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	4a41      	ldr	r2, [pc, #260]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e18:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1a:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	4b3b      	ldr	r3, [pc, #236]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	4a3a      	ldr	r2, [pc, #232]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	6313      	str	r3, [r2, #48]	; 0x30
 8004e36:	4b38      	ldr	r3, [pc, #224]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	4b34      	ldr	r3, [pc, #208]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	4a33      	ldr	r2, [pc, #204]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e4c:	f043 0302 	orr.w	r3, r3, #2
 8004e50:	6313      	str	r3, [r2, #48]	; 0x30
 8004e52:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <MX_GPIO_Init+0x140>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|CM1_Pin|CM2_Pin, GPIO_PIN_RESET);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	210e      	movs	r1, #14
 8004e62:	482e      	ldr	r0, [pc, #184]	; (8004f1c <MX_GPIO_Init+0x144>)
 8004e64:	f001 fa78 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|USB_IO_Pin, GPIO_PIN_RESET);
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004e6e:	482c      	ldr	r0, [pc, #176]	; (8004f20 <MX_GPIO_Init+0x148>)
 8004e70:	f001 fa72 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8004e74:	2200      	movs	r2, #0
 8004e76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e7a:	482a      	ldr	r0, [pc, #168]	; (8004f24 <MX_GPIO_Init+0x14c>)
 8004e7c:	f001 fa6c 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004e86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004e90:	f107 0314 	add.w	r3, r7, #20
 8004e94:	4619      	mov	r1, r3
 8004e96:	4821      	ldr	r0, [pc, #132]	; (8004f1c <MX_GPIO_Init+0x144>)
 8004e98:	f001 f8ca 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	481a      	ldr	r0, [pc, #104]	; (8004f1c <MX_GPIO_Init+0x144>)
 8004eb4:	f001 f8bc 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : CM1_Pin CM2_Pin */
  GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin;
 8004eb8:	230c      	movs	r3, #12
 8004eba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ec8:	f107 0314 	add.w	r3, r7, #20
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4813      	ldr	r0, [pc, #76]	; (8004f1c <MX_GPIO_Init+0x144>)
 8004ed0:	f001 f8ae 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin USB_IO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|USB_IO_Pin;
 8004ed4:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee6:	f107 0314 	add.w	r3, r7, #20
 8004eea:	4619      	mov	r1, r3
 8004eec:	480c      	ldr	r0, [pc, #48]	; (8004f20 <MX_GPIO_Init+0x148>)
 8004eee:	f001 f89f 	bl	8006030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8004ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f00:	2303      	movs	r3, #3
 8004f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8004f04:	f107 0314 	add.w	r3, r7, #20
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4806      	ldr	r0, [pc, #24]	; (8004f24 <MX_GPIO_Init+0x14c>)
 8004f0c:	f001 f890 	bl	8006030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004f10:	bf00      	nop
 8004f12:	3728      	adds	r7, #40	; 0x28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40020800 	.word	0x40020800
 8004f20:	40020000 	.word	0x40020000
 8004f24:	40020400 	.word	0x40020400

08004f28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004f2c:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <MX_I2C1_Init+0x54>)
 8004f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004f32:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f34:	4a12      	ldr	r2, [pc, #72]	; (8004f80 <MX_I2C1_Init+0x58>)
 8004f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f64:	4804      	ldr	r0, [pc, #16]	; (8004f78 <MX_I2C1_Init+0x50>)
 8004f66:	f001 fa2b 	bl	80063c0 <HAL_I2C_Init>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004f70:	f7ff faa0 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	200005b4 	.word	0x200005b4
 8004f7c:	40005400 	.word	0x40005400
 8004f80:	00061a80 	.word	0x00061a80

08004f84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004f8a:	1d3b      	adds	r3, r7, #4
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	605a      	str	r2, [r3, #4]
 8004f92:	609a      	str	r2, [r3, #8]
 8004f94:	60da      	str	r2, [r3, #12]
 8004f96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004f98:	2300      	movs	r3, #0
 8004f9a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004f9c:	4b24      	ldr	r3, [pc, #144]	; (8005030 <MX_RTC_Init+0xac>)
 8004f9e:	4a25      	ldr	r2, [pc, #148]	; (8005034 <MX_RTC_Init+0xb0>)
 8004fa0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004fa2:	4b23      	ldr	r3, [pc, #140]	; (8005030 <MX_RTC_Init+0xac>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004fa8:	4b21      	ldr	r3, [pc, #132]	; (8005030 <MX_RTC_Init+0xac>)
 8004faa:	227f      	movs	r2, #127	; 0x7f
 8004fac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004fae:	4b20      	ldr	r3, [pc, #128]	; (8005030 <MX_RTC_Init+0xac>)
 8004fb0:	22ff      	movs	r2, #255	; 0xff
 8004fb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <MX_RTC_Init+0xac>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004fba:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <MX_RTC_Init+0xac>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <MX_RTC_Init+0xac>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004fc6:	481a      	ldr	r0, [pc, #104]	; (8005030 <MX_RTC_Init+0xac>)
 8004fc8:	f005 f9ce 	bl	800a368 <HAL_RTC_Init>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004fd2:	f7ff fa6f 	bl	80044b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	2201      	movs	r2, #1
 8004fee:	4619      	mov	r1, r3
 8004ff0:	480f      	ldr	r0, [pc, #60]	; (8005030 <MX_RTC_Init+0xac>)
 8004ff2:	f005 fa2f 	bl	800a454 <HAL_RTC_SetTime>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004ffc:	f7ff fa5a 	bl	80044b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005000:	2301      	movs	r3, #1
 8005002:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8005004:	2301      	movs	r3, #1
 8005006:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8005008:	2301      	movs	r3, #1
 800500a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800500c:	2300      	movs	r3, #0
 800500e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005010:	463b      	mov	r3, r7
 8005012:	2201      	movs	r2, #1
 8005014:	4619      	mov	r1, r3
 8005016:	4806      	ldr	r0, [pc, #24]	; (8005030 <MX_RTC_Init+0xac>)
 8005018:	f005 fb14 	bl	800a644 <HAL_RTC_SetDate>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8005022:	f7ff fa47 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	20000608 	.word	0x20000608
 8005034:	40002800 	.word	0x40002800

08005038 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <MX_SPI2_Init+0x64>)
 800503e:	4a18      	ldr	r2, [pc, #96]	; (80050a0 <MX_SPI2_Init+0x68>)
 8005040:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005042:	4b16      	ldr	r3, [pc, #88]	; (800509c <MX_SPI2_Init+0x64>)
 8005044:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005048:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800504a:	4b14      	ldr	r3, [pc, #80]	; (800509c <MX_SPI2_Init+0x64>)
 800504c:	2200      	movs	r2, #0
 800504e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005050:	4b12      	ldr	r3, [pc, #72]	; (800509c <MX_SPI2_Init+0x64>)
 8005052:	2200      	movs	r2, #0
 8005054:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <MX_SPI2_Init+0x64>)
 8005058:	2200      	movs	r2, #0
 800505a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <MX_SPI2_Init+0x64>)
 800505e:	2200      	movs	r2, #0
 8005060:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <MX_SPI2_Init+0x64>)
 8005064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005068:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <MX_SPI2_Init+0x64>)
 800506c:	2200      	movs	r2, #0
 800506e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005070:	4b0a      	ldr	r3, [pc, #40]	; (800509c <MX_SPI2_Init+0x64>)
 8005072:	2200      	movs	r2, #0
 8005074:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <MX_SPI2_Init+0x64>)
 8005078:	2200      	movs	r2, #0
 800507a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <MX_SPI2_Init+0x64>)
 800507e:	2200      	movs	r2, #0
 8005080:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <MX_SPI2_Init+0x64>)
 8005084:	220a      	movs	r2, #10
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005088:	4804      	ldr	r0, [pc, #16]	; (800509c <MX_SPI2_Init+0x64>)
 800508a:	f005 fc6b 	bl	800a964 <HAL_SPI_Init>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005094:	f7ff fa0e 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20000628 	.word	0x20000628
 80050a0:	40003800 	.word	0x40003800

080050a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b08e      	sub	sp, #56	; 0x38
 80050a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	605a      	str	r2, [r3, #4]
 80050b4:	609a      	str	r2, [r3, #8]
 80050b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050b8:	f107 0320 	add.w	r3, r7, #32
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050c2:	1d3b      	adds	r3, r7, #4
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	611a      	str	r2, [r3, #16]
 80050d0:	615a      	str	r2, [r3, #20]
 80050d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80050d4:	4b37      	ldr	r3, [pc, #220]	; (80051b4 <MX_TIM3_Init+0x110>)
 80050d6:	4a38      	ldr	r2, [pc, #224]	; (80051b8 <MX_TIM3_Init+0x114>)
 80050d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80050da:	4b36      	ldr	r3, [pc, #216]	; (80051b4 <MX_TIM3_Init+0x110>)
 80050dc:	2247      	movs	r2, #71	; 0x47
 80050de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050e0:	4b34      	ldr	r3, [pc, #208]	; (80051b4 <MX_TIM3_Init+0x110>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80050e6:	4b33      	ldr	r3, [pc, #204]	; (80051b4 <MX_TIM3_Init+0x110>)
 80050e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050ee:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <MX_TIM3_Init+0x110>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050f4:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <MX_TIM3_Init+0x110>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80050fa:	482e      	ldr	r0, [pc, #184]	; (80051b4 <MX_TIM3_Init+0x110>)
 80050fc:	f005 fcbb 	bl	800aa76 <HAL_TIM_Base_Init>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005106:	f7ff f9d5 	bl	80044b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800510a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005114:	4619      	mov	r1, r3
 8005116:	4827      	ldr	r0, [pc, #156]	; (80051b4 <MX_TIM3_Init+0x110>)
 8005118:	f006 f8a6 	bl	800b268 <HAL_TIM_ConfigClockSource>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005122:	f7ff f9c7 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005126:	4823      	ldr	r0, [pc, #140]	; (80051b4 <MX_TIM3_Init+0x110>)
 8005128:	f005 fd64 	bl	800abf4 <HAL_TIM_PWM_Init>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005132:	f7ff f9bf 	bl	80044b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005136:	2300      	movs	r3, #0
 8005138:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800513e:	f107 0320 	add.w	r3, r7, #32
 8005142:	4619      	mov	r1, r3
 8005144:	481b      	ldr	r0, [pc, #108]	; (80051b4 <MX_TIM3_Init+0x110>)
 8005146:	f006 fc8f 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005150:	f7ff f9b0 	bl	80044b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005154:	2360      	movs	r3, #96	; 0x60
 8005156:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	2200      	movs	r2, #0
 8005168:	4619      	mov	r1, r3
 800516a:	4812      	ldr	r0, [pc, #72]	; (80051b4 <MX_TIM3_Init+0x110>)
 800516c:	f005 ffba 	bl	800b0e4 <HAL_TIM_PWM_ConfigChannel>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005176:	f7ff f99d 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	2204      	movs	r2, #4
 800517e:	4619      	mov	r1, r3
 8005180:	480c      	ldr	r0, [pc, #48]	; (80051b4 <MX_TIM3_Init+0x110>)
 8005182:	f005 ffaf 	bl	800b0e4 <HAL_TIM_PWM_ConfigChannel>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800518c:	f7ff f992 	bl	80044b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	2208      	movs	r2, #8
 8005194:	4619      	mov	r1, r3
 8005196:	4807      	ldr	r0, [pc, #28]	; (80051b4 <MX_TIM3_Init+0x110>)
 8005198:	f005 ffa4 	bl	800b0e4 <HAL_TIM_PWM_ConfigChannel>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80051a2:	f7ff f987 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80051a6:	4803      	ldr	r0, [pc, #12]	; (80051b4 <MX_TIM3_Init+0x110>)
 80051a8:	f7ff fadc 	bl	8004764 <HAL_TIM_MspPostInit>

}
 80051ac:	bf00      	nop
 80051ae:	3738      	adds	r7, #56	; 0x38
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000680 	.word	0x20000680
 80051b8:	40000400 	.word	0x40000400

080051bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051c2:	4a12      	ldr	r2, [pc, #72]	; (800520c <MX_USART1_UART_Init+0x50>)
 80051c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80051c6:	4b10      	ldr	r3, [pc, #64]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80051cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051e2:	220c      	movs	r2, #12
 80051e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051f2:	4805      	ldr	r0, [pc, #20]	; (8005208 <MX_USART1_UART_Init+0x4c>)
 80051f4:	f006 fcc8 	bl	800bb88 <HAL_UART_Init>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80051fe:	f7ff f959 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200006c8 	.word	0x200006c8
 800520c:	40011000 	.word	0x40011000

08005210 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005214:	4b11      	ldr	r3, [pc, #68]	; (800525c <MX_USART2_UART_Init+0x4c>)
 8005216:	4a12      	ldr	r2, [pc, #72]	; (8005260 <MX_USART2_UART_Init+0x50>)
 8005218:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <MX_USART2_UART_Init+0x4c>)
 800521c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005220:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <MX_USART2_UART_Init+0x4c>)
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <MX_USART2_UART_Init+0x4c>)
 800522a:	2200      	movs	r2, #0
 800522c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <MX_USART2_UART_Init+0x4c>)
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005234:	4b09      	ldr	r3, [pc, #36]	; (800525c <MX_USART2_UART_Init+0x4c>)
 8005236:	220c      	movs	r2, #12
 8005238:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800523a:	4b08      	ldr	r3, [pc, #32]	; (800525c <MX_USART2_UART_Init+0x4c>)
 800523c:	2200      	movs	r2, #0
 800523e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <MX_USART2_UART_Init+0x4c>)
 8005242:	2200      	movs	r2, #0
 8005244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005246:	4805      	ldr	r0, [pc, #20]	; (800525c <MX_USART2_UART_Init+0x4c>)
 8005248:	f006 fc9e 	bl	800bb88 <HAL_UART_Init>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005252:	f7ff f92f 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000070c 	.word	0x2000070c
 8005260:	40004400 	.word	0x40004400

08005264 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005268:	4b11      	ldr	r3, [pc, #68]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 800526a:	4a12      	ldr	r2, [pc, #72]	; (80052b4 <MX_USART3_UART_Init+0x50>)
 800526c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 8005270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 8005278:	2200      	movs	r2, #0
 800527a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 800527e:	2200      	movs	r2, #0
 8005280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005282:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 8005284:	2200      	movs	r2, #0
 8005286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 800528a:	220c      	movs	r2, #12
 800528c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800528e:	4b08      	ldr	r3, [pc, #32]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 8005290:	2200      	movs	r2, #0
 8005292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 8005296:	2200      	movs	r2, #0
 8005298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800529a:	4805      	ldr	r0, [pc, #20]	; (80052b0 <MX_USART3_UART_Init+0x4c>)
 800529c:	f006 fc74 	bl	800bb88 <HAL_UART_Init>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80052a6:	f7ff f905 	bl	80044b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000750 	.word	0x20000750
 80052b4:	40004800 	.word	0x40004800

080052b8 <Buzzer_Once>:
#ifndef SRC_MODULE_BUZZER_C_
#define SRC_MODULE_BUZZER_C_

#include "module/buzzer.h"

void Buzzer_Once() {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80052bc:	2201      	movs	r2, #1
 80052be:	2102      	movs	r1, #2
 80052c0:	4806      	ldr	r0, [pc, #24]	; (80052dc <Buzzer_Once+0x24>)
 80052c2:	f001 f849 	bl	8006358 <HAL_GPIO_WritePin>
	osDelay(100);
 80052c6:	2064      	movs	r0, #100	; 0x64
 80052c8:	f00c f820 	bl	801130c <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80052cc:	2200      	movs	r2, #0
 80052ce:	2102      	movs	r1, #2
 80052d0:	4802      	ldr	r0, [pc, #8]	; (80052dc <Buzzer_Once+0x24>)
 80052d2:	f001 f841 	bl	8006358 <HAL_GPIO_WritePin>
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40020800 	.word	0x40020800

080052e0 <Reset_Handler>:
 80052e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005318 <LoopFillZerobss+0x12>
 80052e4:	480d      	ldr	r0, [pc, #52]	; (800531c <LoopFillZerobss+0x16>)
 80052e6:	490e      	ldr	r1, [pc, #56]	; (8005320 <LoopFillZerobss+0x1a>)
 80052e8:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <LoopFillZerobss+0x1e>)
 80052ea:	2300      	movs	r3, #0
 80052ec:	e002      	b.n	80052f4 <LoopCopyDataInit>

080052ee <CopyDataInit>:
 80052ee:	58d4      	ldr	r4, [r2, r3]
 80052f0:	50c4      	str	r4, [r0, r3]
 80052f2:	3304      	adds	r3, #4

080052f4 <LoopCopyDataInit>:
 80052f4:	18c4      	adds	r4, r0, r3
 80052f6:	428c      	cmp	r4, r1
 80052f8:	d3f9      	bcc.n	80052ee <CopyDataInit>
 80052fa:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <LoopFillZerobss+0x22>)
 80052fc:	4c0b      	ldr	r4, [pc, #44]	; (800532c <LoopFillZerobss+0x26>)
 80052fe:	2300      	movs	r3, #0
 8005300:	e001      	b.n	8005306 <LoopFillZerobss>

08005302 <FillZerobss>:
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	3204      	adds	r2, #4

08005306 <LoopFillZerobss>:
 8005306:	42a2      	cmp	r2, r4
 8005308:	d3fb      	bcc.n	8005302 <FillZerobss>
 800530a:	f7ff fc83 	bl	8004c14 <SystemInit>
 800530e:	f010 fde1 	bl	8015ed4 <__libc_init_array>
 8005312:	f7fe fc7b 	bl	8003c0c <main>
 8005316:	4770      	bx	lr
 8005318:	20020000 	.word	0x20020000
 800531c:	20000000 	.word	0x20000000
 8005320:	20000310 	.word	0x20000310
 8005324:	08019c1c 	.word	0x08019c1c
 8005328:	20000310 	.word	0x20000310
 800532c:	20007060 	.word	0x20007060

08005330 <ADC_IRQHandler>:
 8005330:	e7fe      	b.n	8005330 <ADC_IRQHandler>

08005332 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005340:	b672      	cpsid	i
}
 8005342:	bf00      	nop
 8005344:	f7ff f8b6 	bl	80044b4 <Error_Handler>
 8005348:	e7fe      	b.n	8005348 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e007      	b.n	8005360 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	2100      	movs	r1, #0
 8005356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d9f4      	bls.n	8005350 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	721a      	strb	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005382:	b672      	cpsid	i
}
 8005384:	bf00      	nop
 8005386:	f7ff f895 	bl	80044b4 <Error_Handler>
 800538a:	e7fe      	b.n	800538a <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	7a1b      	ldrb	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d904      	bls.n	800539e <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8005394:	b672      	cpsid	i
}
 8005396:	bf00      	nop
 8005398:	f7ff f88c 	bl	80044b4 <Error_Handler>
 800539c:	e7fe      	b.n	800539c <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	7a1b      	ldrb	r3, [r3, #8]
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	b2d1      	uxtb	r1, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	7211      	strb	r1, [r2, #8]
 80053aa:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053ac:	f3ef 8211 	mrs	r2, BASEPRI
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fa      	str	r2, [r7, #12]
 80053c2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80053e2:	b672      	cpsid	i
}
 80053e4:	bf00      	nop
 80053e6:	f7ff f865 	bl	80044b4 <Error_Handler>
 80053ea:	e7fe      	b.n	80053ea <stm32_lock_release+0x16>
  lock->nesting_level--;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	7a1b      	ldrb	r3, [r3, #8]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	7a1b      	ldrb	r3, [r3, #8]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d904      	bls.n	800540a <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8005400:	b672      	cpsid	i
}
 8005402:	bf00      	nop
 8005404:	f7ff f856 	bl	80044b4 <Error_Handler>
 8005408:	e7fe      	b.n	8005408 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	7a1b      	ldrb	r3, [r3, #8]
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005416:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800541e:	bf00      	nop
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d105      	bne.n	8005442 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8005436:	f010 fc51 	bl	8015cdc <__errno>
 800543a:	4603      	mov	r3, r0
 800543c:	2216      	movs	r2, #22
 800543e:	601a      	str	r2, [r3, #0]
    return;
 8005440:	e015      	b.n	800546e <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005442:	200c      	movs	r0, #12
 8005444:	f010 fd6a 	bl	8015f1c <malloc>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ff68 	bl	8005332 <stm32_lock_init>
    return;
 8005462:	e004      	b.n	800546e <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8005464:	b672      	cpsid	i
}
 8005466:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8005468:	f7ff f824 	bl	80044b4 <Error_Handler>
 800546c:	e7fe      	b.n	800546c <__retarget_lock_init_recursive+0x44>
}
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d104      	bne.n	800548c <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005482:	b672      	cpsid	i
}
 8005484:	bf00      	nop
 8005486:	f7ff f815 	bl	80044b4 <Error_Handler>
 800548a:	e7fe      	b.n	800548a <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff70 	bl	8005374 <stm32_lock_acquire>
}
 8005494:	bf00      	nop
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d104      	bne.n	80054b4 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80054aa:	b672      	cpsid	i
}
 80054ac:	bf00      	nop
 80054ae:	f7ff f801 	bl	80044b4 <Error_Handler>
 80054b2:	e7fe      	b.n	80054b2 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff ff8c 	bl	80053d4 <stm32_lock_release>
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054c8:	4b0e      	ldr	r3, [pc, #56]	; (8005504 <HAL_Init+0x40>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a0d      	ldr	r2, [pc, #52]	; (8005504 <HAL_Init+0x40>)
 80054ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_Init+0x40>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <HAL_Init+0x40>)
 80054da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054e0:	4b08      	ldr	r3, [pc, #32]	; (8005504 <HAL_Init+0x40>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a07      	ldr	r2, [pc, #28]	; (8005504 <HAL_Init+0x40>)
 80054e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054ec:	2003      	movs	r0, #3
 80054ee:	f000 fcd8 	bl	8005ea2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054f2:	200f      	movs	r0, #15
 80054f4:	f7ff fa2c 	bl	8004950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054f8:	f7fe ffe8 	bl	80044cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023c00 	.word	0x40023c00

08005508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_IncTick+0x20>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	461a      	mov	r2, r3
 8005512:	4b06      	ldr	r3, [pc, #24]	; (800552c <HAL_IncTick+0x24>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4413      	add	r3, r2
 8005518:	4a04      	ldr	r2, [pc, #16]	; (800552c <HAL_IncTick+0x24>)
 800551a:	6013      	str	r3, [r2, #0]
}
 800551c:	bf00      	nop
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	20000024 	.word	0x20000024
 800552c:	200007b8 	.word	0x200007b8

08005530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return uwTick;
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <HAL_GetTick+0x14>)
 8005536:	681b      	ldr	r3, [r3, #0]
}
 8005538:	4618      	mov	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	200007b8 	.word	0x200007b8

08005548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005550:	f7ff ffee 	bl	8005530 <HAL_GetTick>
 8005554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005560:	d005      	beq.n	800556e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005562:	4b0a      	ldr	r3, [pc, #40]	; (800558c <HAL_Delay+0x44>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800556e:	bf00      	nop
 8005570:	f7ff ffde 	bl	8005530 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	429a      	cmp	r2, r3
 800557e:	d8f7      	bhi.n	8005570 <HAL_Delay+0x28>
  {
  }
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	20000024 	.word	0x20000024

08005590 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005598:	2300      	movs	r3, #0
 800559a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e033      	b.n	800560e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fe ffb8 	bl	8004524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d118      	bne.n	8005600 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055d6:	f023 0302 	bic.w	r3, r3, #2
 80055da:	f043 0202 	orr.w	r2, r3, #2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fab4 	bl	8005b50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f023 0303 	bic.w	r3, r3, #3
 80055f6:	f043 0201 	orr.w	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
 80055fe:	e001      	b.n	8005604 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_ADC_Start+0x1a>
 800562e:	2302      	movs	r3, #2
 8005630:	e0b2      	b.n	8005798 <HAL_ADC_Start+0x180>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b01      	cmp	r3, #1
 8005646:	d018      	beq.n	800567a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005658:	4b52      	ldr	r3, [pc, #328]	; (80057a4 <HAL_ADC_Start+0x18c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a52      	ldr	r2, [pc, #328]	; (80057a8 <HAL_ADC_Start+0x190>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	0c9a      	lsrs	r2, r3, #18
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800566c:	e002      	b.n	8005674 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3b01      	subs	r3, #1
 8005672:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f9      	bne.n	800566e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b01      	cmp	r3, #1
 8005686:	d17a      	bne.n	800577e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d106      	bne.n	80056d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	f023 0206 	bic.w	r2, r3, #6
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	645a      	str	r2, [r3, #68]	; 0x44
 80056d4:	e002      	b.n	80056dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056e4:	4b31      	ldr	r3, [pc, #196]	; (80057ac <HAL_ADC_Start+0x194>)
 80056e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80056f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d12a      	bne.n	8005754 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2b      	ldr	r2, [pc, #172]	; (80057b0 <HAL_ADC_Start+0x198>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d015      	beq.n	8005734 <HAL_ADC_Start+0x11c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a29      	ldr	r2, [pc, #164]	; (80057b4 <HAL_ADC_Start+0x19c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d105      	bne.n	800571e <HAL_ADC_Start+0x106>
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <HAL_ADC_Start+0x194>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <HAL_ADC_Start+0x1a0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d136      	bne.n	8005796 <HAL_ADC_Start+0x17e>
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <HAL_ADC_Start+0x194>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	d130      	bne.n	8005796 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d129      	bne.n	8005796 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005750:	609a      	str	r2, [r3, #8]
 8005752:	e020      	b.n	8005796 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <HAL_ADC_Start+0x198>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d11b      	bne.n	8005796 <HAL_ADC_Start+0x17e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d114      	bne.n	8005796 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	e00b      	b.n	8005796 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0210 	orr.w	r2, r3, #16
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	2000001c 	.word	0x2000001c
 80057a8:	431bde83 	.word	0x431bde83
 80057ac:	40012300 	.word	0x40012300
 80057b0:	40012000 	.word	0x40012000
 80057b4:	40012100 	.word	0x40012100
 80057b8:	40012200 	.word	0x40012200

080057bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d8:	d113      	bne.n	8005802 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80057e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e8:	d10b      	bne.n	8005802 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e063      	b.n	80058ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005802:	f7ff fe95 	bl	8005530 <HAL_GetTick>
 8005806:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005808:	e021      	b.n	800584e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d01d      	beq.n	800584e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_ADC_PollForConversion+0x6c>
 8005818:	f7ff fe8a 	bl	8005530 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d212      	bcs.n	800584e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d00b      	beq.n	800584e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e03d      	b.n	80058ca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b02      	cmp	r3, #2
 800585a:	d1d6      	bne.n	800580a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f06f 0212 	mvn.w	r2, #18
 8005864:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d123      	bne.n	80058c8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005884:	2b00      	cmp	r3, #0
 8005886:	d11f      	bne.n	80058c8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005892:	2b00      	cmp	r3, #0
 8005894:	d006      	beq.n	80058a4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d111      	bne.n	80058c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005900:	2b01      	cmp	r3, #1
 8005902:	d101      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x1c>
 8005904:	2302      	movs	r3, #2
 8005906:	e113      	b.n	8005b30 <HAL_ADC_ConfigChannel+0x244>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b09      	cmp	r3, #9
 8005916:	d925      	bls.n	8005964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68d9      	ldr	r1, [r3, #12]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	4613      	mov	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	4413      	add	r3, r2
 800592c:	3b1e      	subs	r3, #30
 800592e:	2207      	movs	r2, #7
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	43da      	mvns	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	400a      	ands	r2, r1
 800593c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68d9      	ldr	r1, [r3, #12]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	4618      	mov	r0, r3
 8005950:	4603      	mov	r3, r0
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4403      	add	r3, r0
 8005956:	3b1e      	subs	r3, #30
 8005958:	409a      	lsls	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	e022      	b.n	80059aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6919      	ldr	r1, [r3, #16]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	2207      	movs	r2, #7
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43da      	mvns	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	400a      	ands	r2, r1
 8005986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6919      	ldr	r1, [r3, #16]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	b29b      	uxth	r3, r3
 8005998:	4618      	mov	r0, r3
 800599a:	4603      	mov	r3, r0
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4403      	add	r3, r0
 80059a0:	409a      	lsls	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d824      	bhi.n	80059fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	3b05      	subs	r3, #5
 80059c4:	221f      	movs	r2, #31
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43da      	mvns	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	400a      	ands	r2, r1
 80059d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	3b05      	subs	r3, #5
 80059ee:	fa00 f203 	lsl.w	r2, r0, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	635a      	str	r2, [r3, #52]	; 0x34
 80059fa:	e04c      	b.n	8005a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b0c      	cmp	r3, #12
 8005a02:	d824      	bhi.n	8005a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	3b23      	subs	r3, #35	; 0x23
 8005a16:	221f      	movs	r2, #31
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43da      	mvns	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	400a      	ands	r2, r1
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	4618      	mov	r0, r3
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3b23      	subs	r3, #35	; 0x23
 8005a40:	fa00 f203 	lsl.w	r2, r0, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a4c:	e023      	b.n	8005a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3b41      	subs	r3, #65	; 0x41
 8005a60:	221f      	movs	r2, #31
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43da      	mvns	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	3b41      	subs	r3, #65	; 0x41
 8005a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a96:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <HAL_ADC_ConfigChannel+0x250>)
 8005a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <HAL_ADC_ConfigChannel+0x254>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10f      	bne.n	8005ac4 <HAL_ADC_ConfigChannel+0x1d8>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b12      	cmp	r3, #18
 8005aaa:	d10b      	bne.n	8005ac4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <HAL_ADC_ConfigChannel+0x254>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d12b      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x23a>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <HAL_ADC_ConfigChannel+0x258>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0x1f4>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b11      	cmp	r3, #17
 8005ade:	d122      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a11      	ldr	r2, [pc, #68]	; (8005b44 <HAL_ADC_ConfigChannel+0x258>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d111      	bne.n	8005b26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <HAL_ADC_ConfigChannel+0x25c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a11      	ldr	r2, [pc, #68]	; (8005b4c <HAL_ADC_ConfigChannel+0x260>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	0c9a      	lsrs	r2, r3, #18
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b18:	e002      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1f9      	bne.n	8005b1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	40012300 	.word	0x40012300
 8005b40:	40012000 	.word	0x40012000
 8005b44:	10000012 	.word	0x10000012
 8005b48:	2000001c 	.word	0x2000001c
 8005b4c:	431bde83 	.word	0x431bde83

08005b50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b58:	4b79      	ldr	r3, [pc, #484]	; (8005d40 <ADC_Init+0x1f0>)
 8005b5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	021a      	lsls	r2, r3, #8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ba8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6859      	ldr	r1, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6899      	ldr	r1, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	4a58      	ldr	r2, [pc, #352]	; (8005d44 <ADC_Init+0x1f4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d022      	beq.n	8005c2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6899      	ldr	r1, [r3, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6899      	ldr	r1, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	e00f      	b.n	8005c4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0202 	bic.w	r2, r2, #2
 8005c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6899      	ldr	r1, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	7e1b      	ldrb	r3, [r3, #24]
 8005c68:	005a      	lsls	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	035a      	lsls	r2, r3, #13
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
 8005cb2:	e007      	b.n	8005cc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	051a      	lsls	r2, r3, #20
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6899      	ldr	r1, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d06:	025a      	lsls	r2, r3, #9
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6899      	ldr	r1, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	029a      	lsls	r2, r3, #10
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	609a      	str	r2, [r3, #8]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40012300 	.word	0x40012300
 8005d44:	0f000001 	.word	0x0f000001

08005d48 <__NVIC_SetPriorityGrouping>:
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <__NVIC_SetPriorityGrouping+0x44>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d64:	4013      	ands	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d7a:	4a04      	ldr	r2, [pc, #16]	; (8005d8c <__NVIC_SetPriorityGrouping+0x44>)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	60d3      	str	r3, [r2, #12]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	e000ed00 	.word	0xe000ed00

08005d90 <__NVIC_GetPriorityGrouping>:
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <__NVIC_GetPriorityGrouping+0x18>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	f003 0307 	and.w	r3, r3, #7
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	e000ed00 	.word	0xe000ed00

08005dac <__NVIC_EnableIRQ>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	db0b      	blt.n	8005dd6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	f003 021f 	and.w	r2, r3, #31
 8005dc4:	4907      	ldr	r1, [pc, #28]	; (8005de4 <__NVIC_EnableIRQ+0x38>)
 8005dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	2001      	movs	r0, #1
 8005dce:	fa00 f202 	lsl.w	r2, r0, r2
 8005dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	e000e100 	.word	0xe000e100

08005de8 <__NVIC_SetPriority>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	6039      	str	r1, [r7, #0]
 8005df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	db0a      	blt.n	8005e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	490c      	ldr	r1, [pc, #48]	; (8005e34 <__NVIC_SetPriority+0x4c>)
 8005e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e06:	0112      	lsls	r2, r2, #4
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e10:	e00a      	b.n	8005e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	4908      	ldr	r1, [pc, #32]	; (8005e38 <__NVIC_SetPriority+0x50>)
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	3b04      	subs	r3, #4
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	440b      	add	r3, r1
 8005e26:	761a      	strb	r2, [r3, #24]
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	e000e100 	.word	0xe000e100
 8005e38:	e000ed00 	.word	0xe000ed00

08005e3c <NVIC_EncodePriority>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	; 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f1c3 0307 	rsb	r3, r3, #7
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	bf28      	it	cs
 8005e5a:	2304      	movcs	r3, #4
 8005e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3304      	adds	r3, #4
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d902      	bls.n	8005e6c <NVIC_EncodePriority+0x30>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3b03      	subs	r3, #3
 8005e6a:	e000      	b.n	8005e6e <NVIC_EncodePriority+0x32>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43da      	mvns	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	401a      	ands	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e84:	f04f 31ff 	mov.w	r1, #4294967295
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8e:	43d9      	mvns	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e94:	4313      	orrs	r3, r2
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3724      	adds	r7, #36	; 0x24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff ff4c 	bl	8005d48 <__NVIC_SetPriorityGrouping>
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005eca:	f7ff ff61 	bl	8005d90 <__NVIC_GetPriorityGrouping>
 8005ece:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	6978      	ldr	r0, [r7, #20]
 8005ed6:	f7ff ffb1 	bl	8005e3c <NVIC_EncodePriority>
 8005eda:	4602      	mov	r2, r0
 8005edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee0:	4611      	mov	r1, r2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff ff80 	bl	8005de8 <__NVIC_SetPriority>
}
 8005ee8:	bf00      	nop
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff ff54 	bl	8005dac <__NVIC_EnableIRQ>
}
 8005f04:	bf00      	nop
 8005f06:	3708      	adds	r7, #8
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f1a:	f7ff fb09 	bl	8005530 <HAL_GetTick>
 8005f1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d008      	beq.n	8005f3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e052      	b.n	8005fe4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0216 	bic.w	r2, r2, #22
 8005f4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d103      	bne.n	8005f6e <HAL_DMA_Abort+0x62>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d007      	beq.n	8005f7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0208 	bic.w	r2, r2, #8
 8005f7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f8e:	e013      	b.n	8005fb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f90:	f7ff face 	bl	8005530 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b05      	cmp	r3, #5
 8005f9c:	d90c      	bls.n	8005fb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2203      	movs	r2, #3
 8005fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e015      	b.n	8005fe4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e4      	bne.n	8005f90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	223f      	movs	r2, #63	; 0x3f
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d004      	beq.n	800600a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2280      	movs	r2, #128	; 0x80
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e00c      	b.n	8006024 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2205      	movs	r2, #5
 800600e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0201 	bic.w	r2, r2, #1
 8006020:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006030:	b480      	push	{r7}
 8006032:	b089      	sub	sp, #36	; 0x24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006046:	2300      	movs	r3, #0
 8006048:	61fb      	str	r3, [r7, #28]
 800604a:	e165      	b.n	8006318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800604c:	2201      	movs	r2, #1
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4013      	ands	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	429a      	cmp	r2, r3
 8006066:	f040 8154 	bne.w	8006312 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b01      	cmp	r3, #1
 8006074:	d005      	beq.n	8006082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800607e:	2b02      	cmp	r3, #2
 8006080:	d130      	bne.n	80060e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	2203      	movs	r2, #3
 800608e:	fa02 f303 	lsl.w	r3, r2, r3
 8006092:	43db      	mvns	r3, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4013      	ands	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060b8:	2201      	movs	r2, #1
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4013      	ands	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	091b      	lsrs	r3, r3, #4
 80060ce:	f003 0201 	and.w	r2, r3, #1
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0303 	and.w	r3, r3, #3
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d017      	beq.n	8006120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	2203      	movs	r2, #3
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	43db      	mvns	r3, r3
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	4013      	ands	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4313      	orrs	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f003 0303 	and.w	r3, r3, #3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d123      	bne.n	8006174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	08da      	lsrs	r2, r3, #3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3208      	adds	r2, #8
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f003 0307 	and.w	r3, r3, #7
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	220f      	movs	r2, #15
 8006144:	fa02 f303 	lsl.w	r3, r2, r3
 8006148:	43db      	mvns	r3, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4013      	ands	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	08da      	lsrs	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3208      	adds	r2, #8
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2203      	movs	r2, #3
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4013      	ands	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 0203 	and.w	r2, r3, #3
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4313      	orrs	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80ae 	beq.w	8006312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	4b5d      	ldr	r3, [pc, #372]	; (8006330 <HAL_GPIO_Init+0x300>)
 80061bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061be:	4a5c      	ldr	r2, [pc, #368]	; (8006330 <HAL_GPIO_Init+0x300>)
 80061c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061c4:	6453      	str	r3, [r2, #68]	; 0x44
 80061c6:	4b5a      	ldr	r3, [pc, #360]	; (8006330 <HAL_GPIO_Init+0x300>)
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061d2:	4a58      	ldr	r2, [pc, #352]	; (8006334 <HAL_GPIO_Init+0x304>)
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	089b      	lsrs	r3, r3, #2
 80061d8:	3302      	adds	r3, #2
 80061da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	220f      	movs	r2, #15
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	43db      	mvns	r3, r3
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	4013      	ands	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a4f      	ldr	r2, [pc, #316]	; (8006338 <HAL_GPIO_Init+0x308>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d025      	beq.n	800624a <HAL_GPIO_Init+0x21a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a4e      	ldr	r2, [pc, #312]	; (800633c <HAL_GPIO_Init+0x30c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01f      	beq.n	8006246 <HAL_GPIO_Init+0x216>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a4d      	ldr	r2, [pc, #308]	; (8006340 <HAL_GPIO_Init+0x310>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d019      	beq.n	8006242 <HAL_GPIO_Init+0x212>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a4c      	ldr	r2, [pc, #304]	; (8006344 <HAL_GPIO_Init+0x314>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d013      	beq.n	800623e <HAL_GPIO_Init+0x20e>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a4b      	ldr	r2, [pc, #300]	; (8006348 <HAL_GPIO_Init+0x318>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00d      	beq.n	800623a <HAL_GPIO_Init+0x20a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a4a      	ldr	r2, [pc, #296]	; (800634c <HAL_GPIO_Init+0x31c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <HAL_GPIO_Init+0x206>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a49      	ldr	r2, [pc, #292]	; (8006350 <HAL_GPIO_Init+0x320>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d101      	bne.n	8006232 <HAL_GPIO_Init+0x202>
 800622e:	2306      	movs	r3, #6
 8006230:	e00c      	b.n	800624c <HAL_GPIO_Init+0x21c>
 8006232:	2307      	movs	r3, #7
 8006234:	e00a      	b.n	800624c <HAL_GPIO_Init+0x21c>
 8006236:	2305      	movs	r3, #5
 8006238:	e008      	b.n	800624c <HAL_GPIO_Init+0x21c>
 800623a:	2304      	movs	r3, #4
 800623c:	e006      	b.n	800624c <HAL_GPIO_Init+0x21c>
 800623e:	2303      	movs	r3, #3
 8006240:	e004      	b.n	800624c <HAL_GPIO_Init+0x21c>
 8006242:	2302      	movs	r3, #2
 8006244:	e002      	b.n	800624c <HAL_GPIO_Init+0x21c>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <HAL_GPIO_Init+0x21c>
 800624a:	2300      	movs	r3, #0
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	f002 0203 	and.w	r2, r2, #3
 8006252:	0092      	lsls	r2, r2, #2
 8006254:	4093      	lsls	r3, r2
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	4313      	orrs	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800625c:	4935      	ldr	r1, [pc, #212]	; (8006334 <HAL_GPIO_Init+0x304>)
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	089b      	lsrs	r3, r3, #2
 8006262:	3302      	adds	r3, #2
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800626a:	4b3a      	ldr	r3, [pc, #232]	; (8006354 <HAL_GPIO_Init+0x324>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800628e:	4a31      	ldr	r2, [pc, #196]	; (8006354 <HAL_GPIO_Init+0x324>)
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006294:	4b2f      	ldr	r3, [pc, #188]	; (8006354 <HAL_GPIO_Init+0x324>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062b8:	4a26      	ldr	r2, [pc, #152]	; (8006354 <HAL_GPIO_Init+0x324>)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062be:	4b25      	ldr	r3, [pc, #148]	; (8006354 <HAL_GPIO_Init+0x324>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	43db      	mvns	r3, r3
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4013      	ands	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062e2:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <HAL_GPIO_Init+0x324>)
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062e8:	4b1a      	ldr	r3, [pc, #104]	; (8006354 <HAL_GPIO_Init+0x324>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4013      	ands	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800630c:	4a11      	ldr	r2, [pc, #68]	; (8006354 <HAL_GPIO_Init+0x324>)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	3301      	adds	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b0f      	cmp	r3, #15
 800631c:	f67f ae96 	bls.w	800604c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3724      	adds	r7, #36	; 0x24
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40023800 	.word	0x40023800
 8006334:	40013800 	.word	0x40013800
 8006338:	40020000 	.word	0x40020000
 800633c:	40020400 	.word	0x40020400
 8006340:	40020800 	.word	0x40020800
 8006344:	40020c00 	.word	0x40020c00
 8006348:	40021000 	.word	0x40021000
 800634c:	40021400 	.word	0x40021400
 8006350:	40021800 	.word	0x40021800
 8006354:	40013c00 	.word	0x40013c00

08006358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
 8006364:	4613      	mov	r3, r2
 8006366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006368:	787b      	ldrb	r3, [r7, #1]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006374:	e003      	b.n	800637e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	041a      	lsls	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	619a      	str	r2, [r3, #24]
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800639c:	887a      	ldrh	r2, [r7, #2]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4013      	ands	r3, r2
 80063a2:	041a      	lsls	r2, r3, #16
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	43d9      	mvns	r1, r3
 80063a8:	887b      	ldrh	r3, [r7, #2]
 80063aa:	400b      	ands	r3, r1
 80063ac:	431a      	orrs	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	619a      	str	r2, [r3, #24]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e12b      	b.n	800662a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d106      	bne.n	80063ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fe f8e0 	bl	80045ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2224      	movs	r2, #36	; 0x24
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0201 	bic.w	r2, r2, #1
 8006402:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006422:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006424:	f002 ffd4 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 8006428:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	4a81      	ldr	r2, [pc, #516]	; (8006634 <HAL_I2C_Init+0x274>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d807      	bhi.n	8006444 <HAL_I2C_Init+0x84>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a80      	ldr	r2, [pc, #512]	; (8006638 <HAL_I2C_Init+0x278>)
 8006438:	4293      	cmp	r3, r2
 800643a:	bf94      	ite	ls
 800643c:	2301      	movls	r3, #1
 800643e:	2300      	movhi	r3, #0
 8006440:	b2db      	uxtb	r3, r3
 8006442:	e006      	b.n	8006452 <HAL_I2C_Init+0x92>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a7d      	ldr	r2, [pc, #500]	; (800663c <HAL_I2C_Init+0x27c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	bf94      	ite	ls
 800644c:	2301      	movls	r3, #1
 800644e:	2300      	movhi	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e0e7      	b.n	800662a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a78      	ldr	r2, [pc, #480]	; (8006640 <HAL_I2C_Init+0x280>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	0c9b      	lsrs	r3, r3, #18
 8006464:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	4a6a      	ldr	r2, [pc, #424]	; (8006634 <HAL_I2C_Init+0x274>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d802      	bhi.n	8006494 <HAL_I2C_Init+0xd4>
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3301      	adds	r3, #1
 8006492:	e009      	b.n	80064a8 <HAL_I2C_Init+0xe8>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	4a69      	ldr	r2, [pc, #420]	; (8006644 <HAL_I2C_Init+0x284>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	099b      	lsrs	r3, r3, #6
 80064a6:	3301      	adds	r3, #1
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80064ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	495c      	ldr	r1, [pc, #368]	; (8006634 <HAL_I2C_Init+0x274>)
 80064c4:	428b      	cmp	r3, r1
 80064c6:	d819      	bhi.n	80064fc <HAL_I2C_Init+0x13c>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1e59      	subs	r1, r3, #1
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80064d6:	1c59      	adds	r1, r3, #1
 80064d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064dc:	400b      	ands	r3, r1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <HAL_I2C_Init+0x138>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	1e59      	subs	r1, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80064f0:	3301      	adds	r3, #1
 80064f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064f6:	e051      	b.n	800659c <HAL_I2C_Init+0x1dc>
 80064f8:	2304      	movs	r3, #4
 80064fa:	e04f      	b.n	800659c <HAL_I2C_Init+0x1dc>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d111      	bne.n	8006528 <HAL_I2C_Init+0x168>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	1e58      	subs	r0, r3, #1
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6859      	ldr	r1, [r3, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	440b      	add	r3, r1
 8006512:	fbb0 f3f3 	udiv	r3, r0, r3
 8006516:	3301      	adds	r3, #1
 8006518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf0c      	ite	eq
 8006520:	2301      	moveq	r3, #1
 8006522:	2300      	movne	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e012      	b.n	800654e <HAL_I2C_Init+0x18e>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	1e58      	subs	r0, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6859      	ldr	r1, [r3, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	0099      	lsls	r1, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	fbb0 f3f3 	udiv	r3, r0, r3
 800653e:	3301      	adds	r3, #1
 8006540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006544:	2b00      	cmp	r3, #0
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <HAL_I2C_Init+0x196>
 8006552:	2301      	movs	r3, #1
 8006554:	e022      	b.n	800659c <HAL_I2C_Init+0x1dc>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10e      	bne.n	800657c <HAL_I2C_Init+0x1bc>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	1e58      	subs	r0, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6859      	ldr	r1, [r3, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	440b      	add	r3, r1
 800656c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006570:	3301      	adds	r3, #1
 8006572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800657a:	e00f      	b.n	800659c <HAL_I2C_Init+0x1dc>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	1e58      	subs	r0, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6859      	ldr	r1, [r3, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	0099      	lsls	r1, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006592:	3301      	adds	r3, #1
 8006594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	6809      	ldr	r1, [r1, #0]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69da      	ldr	r2, [r3, #28]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80065ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6911      	ldr	r1, [r2, #16]
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	68d2      	ldr	r2, [r2, #12]
 80065d6:	4311      	orrs	r1, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	430b      	orrs	r3, r1
 80065de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695a      	ldr	r2, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0201 	orr.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	000186a0 	.word	0x000186a0
 8006638:	001e847f 	.word	0x001e847f
 800663c:	003d08ff 	.word	0x003d08ff
 8006640:	431bde83 	.word	0x431bde83
 8006644:	10624dd3 	.word	0x10624dd3

08006648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	461a      	mov	r2, r3
 8006654:	460b      	mov	r3, r1
 8006656:	817b      	strh	r3, [r7, #10]
 8006658:	4613      	mov	r3, r2
 800665a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800665c:	f7fe ff68 	bl	8005530 <HAL_GetTick>
 8006660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b20      	cmp	r3, #32
 800666c:	f040 80e0 	bne.w	8006830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	2319      	movs	r3, #25
 8006676:	2201      	movs	r2, #1
 8006678:	4970      	ldr	r1, [pc, #448]	; (800683c <HAL_I2C_Master_Transmit+0x1f4>)
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f001 f910 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006686:	2302      	movs	r3, #2
 8006688:	e0d3      	b.n	8006832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_I2C_Master_Transmit+0x50>
 8006694:	2302      	movs	r3, #2
 8006696:	e0cc      	b.n	8006832 <HAL_I2C_Master_Transmit+0x1ea>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d007      	beq.n	80066be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2221      	movs	r2, #33	; 0x21
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2210      	movs	r2, #16
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	893a      	ldrh	r2, [r7, #8]
 80066ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4a50      	ldr	r2, [pc, #320]	; (8006840 <HAL_I2C_Master_Transmit+0x1f8>)
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006700:	8979      	ldrh	r1, [r7, #10]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	6a3a      	ldr	r2, [r7, #32]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 fdfc 	bl	8007304 <I2C_MasterRequestWrite>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e08d      	b.n	8006832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	613b      	str	r3, [r7, #16]
 800672a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800672c:	e066      	b.n	80067fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	6a39      	ldr	r1, [r7, #32]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f001 f98a 	bl	8007a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00d      	beq.n	800675a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	2b04      	cmp	r3, #4
 8006744:	d107      	bne.n	8006756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e06b      	b.n	8006832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	3b01      	subs	r3, #1
 8006784:	b29a      	uxth	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b04      	cmp	r3, #4
 8006796:	d11b      	bne.n	80067d0 <HAL_I2C_Master_Transmit+0x188>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679c:	2b00      	cmp	r3, #0
 800679e:	d017      	beq.n	80067d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	781a      	ldrb	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	6a39      	ldr	r1, [r7, #32]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f001 f97a 	bl	8007ace <I2C_WaitOnBTFFlagUntilTimeout>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00d      	beq.n	80067fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d107      	bne.n	80067f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e01a      	b.n	8006832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d194      	bne.n	800672e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	00100002 	.word	0x00100002
 8006840:	ffff0000 	.word	0xffff0000

08006844 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08c      	sub	sp, #48	; 0x30
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	607a      	str	r2, [r7, #4]
 800684e:	461a      	mov	r2, r3
 8006850:	460b      	mov	r3, r1
 8006852:	817b      	strh	r3, [r7, #10]
 8006854:	4613      	mov	r3, r2
 8006856:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006858:	f7fe fe6a 	bl	8005530 <HAL_GetTick>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b20      	cmp	r3, #32
 8006868:	f040 820b 	bne.w	8006c82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2319      	movs	r3, #25
 8006872:	2201      	movs	r2, #1
 8006874:	497c      	ldr	r1, [pc, #496]	; (8006a68 <HAL_I2C_Master_Receive+0x224>)
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f001 f812 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	e1fe      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_I2C_Master_Receive+0x50>
 8006890:	2302      	movs	r3, #2
 8006892:	e1f7      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d007      	beq.n	80068ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2222      	movs	r2, #34	; 0x22
 80068ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2210      	movs	r2, #16
 80068d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	893a      	ldrh	r2, [r7, #8]
 80068ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a5c      	ldr	r2, [pc, #368]	; (8006a6c <HAL_I2C_Master_Receive+0x228>)
 80068fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80068fc:	8979      	ldrh	r1, [r7, #10]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fd80 	bl	8007408 <I2C_MasterRequestRead>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e1b8      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006916:	2b00      	cmp	r3, #0
 8006918:	d113      	bne.n	8006942 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800691a:	2300      	movs	r3, #0
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	623b      	str	r3, [r7, #32]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	623b      	str	r3, [r7, #32]
 800692e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	e18c      	b.n	8006c5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006946:	2b01      	cmp	r3, #1
 8006948:	d11b      	bne.n	8006982 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006958:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	61fb      	str	r3, [r7, #28]
 800696e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	e16c      	b.n	8006c5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006986:	2b02      	cmp	r3, #2
 8006988:	d11b      	bne.n	80069c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006998:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069aa:	2300      	movs	r3, #0
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	e14c      	b.n	8006c5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d2:	2300      	movs	r3, #0
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80069e8:	e138      	b.n	8006c5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	f200 80f1 	bhi.w	8006bd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d123      	bne.n	8006a44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f001 f8a5 	bl	8007b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e139      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a42:	e10b      	b.n	8006c5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d14e      	bne.n	8006aea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	2200      	movs	r2, #0
 8006a54:	4906      	ldr	r1, [pc, #24]	; (8006a70 <HAL_I2C_Master_Receive+0x22c>)
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 ff22 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e10e      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
 8006a66:	bf00      	nop
 8006a68:	00100002 	.word	0x00100002
 8006a6c:	ffff0000 	.word	0xffff0000
 8006a70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691a      	ldr	r2, [r3, #16]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ae8:	e0b8      	b.n	8006c5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2200      	movs	r2, #0
 8006af2:	4966      	ldr	r1, [pc, #408]	; (8006c8c <HAL_I2C_Master_Receive+0x448>)
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fed3 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0bf      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b30:	3b01      	subs	r3, #1
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	494f      	ldr	r1, [pc, #316]	; (8006c8c <HAL_I2C_Master_Receive+0x448>)
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f000 fea5 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e091      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	b2d2      	uxtb	r2, r2
 8006b7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	b2d2      	uxtb	r2, r2
 8006bae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006bd4:	e042      	b.n	8006c5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 ffb8 	bl	8007b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e04c      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	b2d2      	uxtb	r2, r2
 8006bf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d118      	bne.n	8006c5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f47f aec2 	bne.w	80069ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e000      	b.n	8006c84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006c82:	2302      	movs	r3, #2
  }
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3728      	adds	r7, #40	; 0x28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	00010004 	.word	0x00010004

08006c90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	4608      	mov	r0, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	817b      	strh	r3, [r7, #10]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	813b      	strh	r3, [r7, #8]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006caa:	f7fe fc41 	bl	8005530 <HAL_GetTick>
 8006cae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	f040 80d9 	bne.w	8006e70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	2319      	movs	r3, #25
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	496d      	ldr	r1, [pc, #436]	; (8006e7c <HAL_I2C_Mem_Write+0x1ec>)
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fde9 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e0cc      	b.n	8006e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_I2C_Mem_Write+0x56>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e0c5      	b.n	8006e72 <HAL_I2C_Mem_Write+0x1e2>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d007      	beq.n	8006d0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2221      	movs	r2, #33	; 0x21
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2240      	movs	r2, #64	; 0x40
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a3a      	ldr	r2, [r7, #32]
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4a4d      	ldr	r2, [pc, #308]	; (8006e80 <HAL_I2C_Mem_Write+0x1f0>)
 8006d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d4e:	88f8      	ldrh	r0, [r7, #6]
 8006d50:	893a      	ldrh	r2, [r7, #8]
 8006d52:	8979      	ldrh	r1, [r7, #10]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	9301      	str	r3, [sp, #4]
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fc20 	bl	80075a4 <I2C_RequestMemoryWrite>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d052      	beq.n	8006e10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e081      	b.n	8006e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 fe6a 	bl	8007a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00d      	beq.n	8006d9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	2b04      	cmp	r3, #4
 8006d84:	d107      	bne.n	8006d96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e06b      	b.n	8006e72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	781a      	ldrb	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d11b      	bne.n	8006e10 <HAL_I2C_Mem_Write+0x180>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d017      	beq.n	8006e10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	781a      	ldrb	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1aa      	bne.n	8006d6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fe56 	bl	8007ace <I2C_WaitOnBTFFlagUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00d      	beq.n	8006e44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d107      	bne.n	8006e40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e016      	b.n	8006e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	00100002 	.word	0x00100002
 8006e80:	ffff0000 	.word	0xffff0000

08006e84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	4611      	mov	r1, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	817b      	strh	r3, [r7, #10]
 8006e96:	460b      	mov	r3, r1
 8006e98:	813b      	strh	r3, [r7, #8]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e9e:	f7fe fb47 	bl	8005530 <HAL_GetTick>
 8006ea2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b20      	cmp	r3, #32
 8006eae:	f040 8208 	bne.w	80072c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2319      	movs	r3, #25
 8006eb8:	2201      	movs	r2, #1
 8006eba:	497b      	ldr	r1, [pc, #492]	; (80070a8 <HAL_I2C_Mem_Read+0x224>)
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fcef 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e1fb      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_I2C_Mem_Read+0x56>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e1f4      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d007      	beq.n	8006f00 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2222      	movs	r2, #34	; 0x22
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2240      	movs	r2, #64	; 0x40
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a5b      	ldr	r2, [pc, #364]	; (80070ac <HAL_I2C_Mem_Read+0x228>)
 8006f40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f42:	88f8      	ldrh	r0, [r7, #6]
 8006f44:	893a      	ldrh	r2, [r7, #8]
 8006f46:	8979      	ldrh	r1, [r7, #10]
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	4603      	mov	r3, r0
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fbbc 	bl	80076d0 <I2C_RequestMemoryRead>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e1b0      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d113      	bne.n	8006f92 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	623b      	str	r3, [r7, #32]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	623b      	str	r3, [r7, #32]
 8006f7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	e184      	b.n	800729c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d11b      	bne.n	8006fd2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	695b      	ldr	r3, [r3, #20]
 8006fb4:	61fb      	str	r3, [r7, #28]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e164      	b.n	800729c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d11b      	bne.n	8007012 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	e144      	b.n	800729c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007028:	e138      	b.n	800729c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702e:	2b03      	cmp	r3, #3
 8007030:	f200 80f1 	bhi.w	8007216 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007038:	2b01      	cmp	r3, #1
 800703a:	d123      	bne.n	8007084 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800703c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fd85 	bl	8007b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e139      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691a      	ldr	r2, [r3, #16]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007078:	b29b      	uxth	r3, r3
 800707a:	3b01      	subs	r3, #1
 800707c:	b29a      	uxth	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007082:	e10b      	b.n	800729c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007088:	2b02      	cmp	r3, #2
 800708a:	d14e      	bne.n	800712a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	2200      	movs	r2, #0
 8007094:	4906      	ldr	r1, [pc, #24]	; (80070b0 <HAL_I2C_Mem_Read+0x22c>)
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fc02 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d008      	beq.n	80070b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e10e      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
 80070a6:	bf00      	nop
 80070a8:	00100002 	.word	0x00100002
 80070ac:	ffff0000 	.word	0xffff0000
 80070b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691a      	ldr	r2, [r3, #16]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711e:	b29b      	uxth	r3, r3
 8007120:	3b01      	subs	r3, #1
 8007122:	b29a      	uxth	r2, r3
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007128:	e0b8      	b.n	800729c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	2200      	movs	r2, #0
 8007132:	4966      	ldr	r1, [pc, #408]	; (80072cc <HAL_I2C_Mem_Read+0x448>)
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fbb3 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e0bf      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007152:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007170:	3b01      	subs	r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	2200      	movs	r2, #0
 800718e:	494f      	ldr	r1, [pc, #316]	; (80072cc <HAL_I2C_Mem_Read+0x448>)
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fb85 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e091      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	1c5a      	adds	r2, r3, #1
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007214:	e042      	b.n	800729c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fc98 	bl	8007b50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e04c      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b04      	cmp	r3, #4
 8007268:	d118      	bne.n	800729c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	1c5a      	adds	r2, r3, #1
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f47f aec2 	bne.w	800702a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e000      	b.n	80072c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80072c2:	2302      	movs	r3, #2
  }
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3728      	adds	r7, #40	; 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	00010004 	.word	0x00010004

080072d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072de:	b2db      	uxtb	r3, r3
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af02      	add	r7, sp, #8
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	460b      	mov	r3, r1
 8007312:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b08      	cmp	r3, #8
 800731e:	d006      	beq.n	800732e <I2C_MasterRequestWrite+0x2a>
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d003      	beq.n	800732e <I2C_MasterRequestWrite+0x2a>
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800732c:	d108      	bne.n	8007340 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	e00b      	b.n	8007358 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007344:	2b12      	cmp	r3, #18
 8007346:	d107      	bne.n	8007358 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007356:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fa9b 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800737e:	d103      	bne.n	8007388 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007386:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e035      	b.n	80073f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007394:	d108      	bne.n	80073a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007396:	897b      	ldrh	r3, [r7, #10]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073a4:	611a      	str	r2, [r3, #16]
 80073a6:	e01b      	b.n	80073e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80073a8:	897b      	ldrh	r3, [r7, #10]
 80073aa:	11db      	asrs	r3, r3, #7
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0306 	and.w	r3, r3, #6
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f063 030f 	orn	r3, r3, #15
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	490e      	ldr	r1, [pc, #56]	; (8007400 <I2C_MasterRequestWrite+0xfc>)
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 fac1 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d001      	beq.n	80073d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	e010      	b.n	80073f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80073d6:	897b      	ldrh	r3, [r7, #10]
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4907      	ldr	r1, [pc, #28]	; (8007404 <I2C_MasterRequestWrite+0x100>)
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f000 fab1 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	00010008 	.word	0x00010008
 8007404:	00010002 	.word	0x00010002

08007408 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af02      	add	r7, sp, #8
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	460b      	mov	r3, r1
 8007416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800742c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d006      	beq.n	8007442 <I2C_MasterRequestRead+0x3a>
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d003      	beq.n	8007442 <I2C_MasterRequestRead+0x3a>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007440:	d108      	bne.n	8007454 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007450:	601a      	str	r2, [r3, #0]
 8007452:	e00b      	b.n	800746c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	2b11      	cmp	r3, #17
 800745a:	d107      	bne.n	800746c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800746a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fa11 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00d      	beq.n	80074a0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007492:	d103      	bne.n	800749c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f44f 7200 	mov.w	r2, #512	; 0x200
 800749a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e079      	b.n	8007594 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a8:	d108      	bne.n	80074bc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80074aa:	897b      	ldrh	r3, [r7, #10]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f043 0301 	orr.w	r3, r3, #1
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	611a      	str	r2, [r3, #16]
 80074ba:	e05f      	b.n	800757c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80074bc:	897b      	ldrh	r3, [r7, #10]
 80074be:	11db      	asrs	r3, r3, #7
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	f003 0306 	and.w	r3, r3, #6
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	f063 030f 	orn	r3, r3, #15
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4930      	ldr	r1, [pc, #192]	; (800759c <I2C_MasterRequestRead+0x194>)
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 fa37 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e054      	b.n	8007594 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074ea:	897b      	ldrh	r3, [r7, #10]
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	4929      	ldr	r1, [pc, #164]	; (80075a0 <I2C_MasterRequestRead+0x198>)
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fa27 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e044      	b.n	8007594 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800752e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f000 f9af 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00d      	beq.n	8007564 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007556:	d103      	bne.n	8007560 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e017      	b.n	8007594 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007564:	897b      	ldrh	r3, [r7, #10]
 8007566:	11db      	asrs	r3, r3, #7
 8007568:	b2db      	uxtb	r3, r3
 800756a:	f003 0306 	and.w	r3, r3, #6
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f063 030e 	orn	r3, r3, #14
 8007574:	b2da      	uxtb	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	4907      	ldr	r1, [pc, #28]	; (80075a0 <I2C_MasterRequestRead+0x198>)
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 f9e3 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	00010008 	.word	0x00010008
 80075a0:	00010002 	.word	0x00010002

080075a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	461a      	mov	r2, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	817b      	strh	r3, [r7, #10]
 80075b6:	460b      	mov	r3, r1
 80075b8:	813b      	strh	r3, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f960 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00d      	beq.n	8007602 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f4:	d103      	bne.n	80075fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e05f      	b.n	80076c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007602:	897b      	ldrh	r3, [r7, #10]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007610:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	6a3a      	ldr	r2, [r7, #32]
 8007616:	492d      	ldr	r1, [pc, #180]	; (80076cc <I2C_RequestMemoryWrite+0x128>)
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f998 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e04c      	b.n	80076c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007628:	2300      	movs	r3, #0
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800763e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007640:	6a39      	ldr	r1, [r7, #32]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fa02 	bl	8007a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	2b04      	cmp	r3, #4
 8007654:	d107      	bne.n	8007666 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007664:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e02b      	b.n	80076c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800766a:	88fb      	ldrh	r3, [r7, #6]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d105      	bne.n	800767c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007670:	893b      	ldrh	r3, [r7, #8]
 8007672:	b2da      	uxtb	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	611a      	str	r2, [r3, #16]
 800767a:	e021      	b.n	80076c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800767c:	893b      	ldrh	r3, [r7, #8]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	b29b      	uxth	r3, r3
 8007682:	b2da      	uxtb	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800768a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768c:	6a39      	ldr	r1, [r7, #32]
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f9dc 	bl	8007a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00d      	beq.n	80076b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d107      	bne.n	80076b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e005      	b.n	80076c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076b6:	893b      	ldrh	r3, [r7, #8]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	00010002 	.word	0x00010002

080076d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	4608      	mov	r0, r1
 80076da:	4611      	mov	r1, r2
 80076dc:	461a      	mov	r2, r3
 80076de:	4603      	mov	r3, r0
 80076e0:	817b      	strh	r3, [r7, #10]
 80076e2:	460b      	mov	r3, r1
 80076e4:	813b      	strh	r3, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	2200      	movs	r2, #0
 8007712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f8c2 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00d      	beq.n	800773e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007730:	d103      	bne.n	800773a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007738:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e0aa      	b.n	8007894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800773e:	897b      	ldrh	r3, [r7, #10]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	461a      	mov	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800774c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	6a3a      	ldr	r2, [r7, #32]
 8007752:	4952      	ldr	r1, [pc, #328]	; (800789c <I2C_RequestMemoryRead+0x1cc>)
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f8fa 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e097      	b.n	8007894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	6a39      	ldr	r1, [r7, #32]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 f964 	bl	8007a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00d      	beq.n	80077a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	2b04      	cmp	r3, #4
 8007790:	d107      	bne.n	80077a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e076      	b.n	8007894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d105      	bne.n	80077b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077ac:	893b      	ldrh	r3, [r7, #8]
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	611a      	str	r2, [r3, #16]
 80077b6:	e021      	b.n	80077fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	b29b      	uxth	r3, r3
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c8:	6a39      	ldr	r1, [r7, #32]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f93e 	bl	8007a4c <I2C_WaitOnTXEFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00d      	beq.n	80077f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077da:	2b04      	cmp	r3, #4
 80077dc:	d107      	bne.n	80077ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e050      	b.n	8007894 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80077f2:	893b      	ldrh	r3, [r7, #8]
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fe:	6a39      	ldr	r1, [r7, #32]
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f923 	bl	8007a4c <I2C_WaitOnTXEFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00d      	beq.n	8007828 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	2b04      	cmp	r3, #4
 8007812:	d107      	bne.n	8007824 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007822:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e035      	b.n	8007894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007836:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	2200      	movs	r2, #0
 8007840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f82b 	bl	80078a0 <I2C_WaitOnFlagUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00d      	beq.n	800786c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800785e:	d103      	bne.n	8007868 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e013      	b.n	8007894 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800786c:	897b      	ldrh	r3, [r7, #10]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	b2da      	uxtb	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	6a3a      	ldr	r2, [r7, #32]
 8007880:	4906      	ldr	r1, [pc, #24]	; (800789c <I2C_RequestMemoryRead+0x1cc>)
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 f863 	bl	800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e000      	b.n	8007894 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	00010002 	.word	0x00010002

080078a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078b0:	e025      	b.n	80078fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d021      	beq.n	80078fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ba:	f7fd fe39 	bl	8005530 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d116      	bne.n	80078fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	f043 0220 	orr.w	r2, r3, #32
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e023      	b.n	8007946 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10d      	bne.n	8007924 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	43da      	mvns	r2, r3
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	4013      	ands	r3, r2
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	bf0c      	ite	eq
 800791a:	2301      	moveq	r3, #1
 800791c:	2300      	movne	r3, #0
 800791e:	b2db      	uxtb	r3, r3
 8007920:	461a      	mov	r2, r3
 8007922:	e00c      	b.n	800793e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	43da      	mvns	r2, r3
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	4013      	ands	r3, r2
 8007930:	b29b      	uxth	r3, r3
 8007932:	2b00      	cmp	r3, #0
 8007934:	bf0c      	ite	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	2300      	movne	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	461a      	mov	r2, r3
 800793e:	79fb      	ldrb	r3, [r7, #7]
 8007940:	429a      	cmp	r2, r3
 8007942:	d0b6      	beq.n	80078b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800795c:	e051      	b.n	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800796c:	d123      	bne.n	80079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800797c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007986:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2220      	movs	r2, #32
 8007992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	f043 0204 	orr.w	r2, r3, #4
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e046      	b.n	8007a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d021      	beq.n	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079be:	f7fd fdb7 	bl	8005530 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d116      	bne.n	8007a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2220      	movs	r2, #32
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f043 0220 	orr.w	r2, r3, #32
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e020      	b.n	8007a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	0c1b      	lsrs	r3, r3, #16
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d10c      	bne.n	8007a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	43da      	mvns	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4013      	ands	r3, r2
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bf14      	ite	ne
 8007a1e:	2301      	movne	r3, #1
 8007a20:	2300      	moveq	r3, #0
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	e00b      	b.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	43da      	mvns	r2, r3
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	4013      	ands	r3, r2
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	bf14      	ite	ne
 8007a38:	2301      	movne	r3, #1
 8007a3a:	2300      	moveq	r3, #0
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d18d      	bne.n	800795e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a58:	e02d      	b.n	8007ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f8ce 	bl	8007bfc <I2C_IsAcknowledgeFailed>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e02d      	b.n	8007ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d021      	beq.n	8007ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a72:	f7fd fd5d 	bl	8005530 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d116      	bne.n	8007ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2220      	movs	r2, #32
 8007a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f043 0220 	orr.w	r2, r3, #32
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e007      	b.n	8007ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ac0:	2b80      	cmp	r3, #128	; 0x80
 8007ac2:	d1ca      	bne.n	8007a5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	60f8      	str	r0, [r7, #12]
 8007ad6:	60b9      	str	r1, [r7, #8]
 8007ad8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ada:	e02d      	b.n	8007b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f88d 	bl	8007bfc <I2C_IsAcknowledgeFailed>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e02d      	b.n	8007b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d021      	beq.n	8007b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007af4:	f7fd fd1c 	bl	8005530 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d302      	bcc.n	8007b0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d116      	bne.n	8007b38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	f043 0220 	orr.w	r2, r3, #32
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e007      	b.n	8007b48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f003 0304 	and.w	r3, r3, #4
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	d1ca      	bne.n	8007adc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b5c:	e042      	b.n	8007be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	f003 0310 	and.w	r3, r3, #16
 8007b68:	2b10      	cmp	r3, #16
 8007b6a:	d119      	bne.n	8007ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f06f 0210 	mvn.w	r2, #16
 8007b74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2220      	movs	r2, #32
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e029      	b.n	8007bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba0:	f7fd fcc6 	bl	8005530 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d116      	bne.n	8007be4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd0:	f043 0220 	orr.w	r2, r3, #32
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e007      	b.n	8007bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bee:	2b40      	cmp	r3, #64	; 0x40
 8007bf0:	d1b5      	bne.n	8007b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c12:	d11b      	bne.n	8007c4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	f043 0204 	orr.w	r2, r3, #4
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c5c:	b08f      	sub	sp, #60	; 0x3c
 8007c5e:	af0a      	add	r7, sp, #40	; 0x28
 8007c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e116      	b.n	8007e9a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f00d fcb0 	bl	80155ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d102      	bne.n	8007ca6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f005 f909 	bl	800cec2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	603b      	str	r3, [r7, #0]
 8007cb6:	687e      	ldr	r6, [r7, #4]
 8007cb8:	466d      	mov	r5, sp
 8007cba:	f106 0410 	add.w	r4, r6, #16
 8007cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007cca:	e885 0003 	stmia.w	r5, {r0, r1}
 8007cce:	1d33      	adds	r3, r6, #4
 8007cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cd2:	6838      	ldr	r0, [r7, #0]
 8007cd4:	f004 ffe0 	bl	800cc98 <USB_CoreInit>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d005      	beq.n	8007cea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e0d7      	b.n	8007e9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2100      	movs	r1, #0
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f005 f8f7 	bl	800cee4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
 8007cfa:	e04a      	b.n	8007d92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cfc:	7bfa      	ldrb	r2, [r7, #15]
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	4613      	mov	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	333d      	adds	r3, #61	; 0x3d
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	4613      	mov	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	440b      	add	r3, r1
 8007d1e:	333c      	adds	r3, #60	; 0x3c
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d24:	7bfa      	ldrb	r2, [r7, #15]
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	b298      	uxth	r0, r3
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	3344      	adds	r3, #68	; 0x44
 8007d38:	4602      	mov	r2, r0
 8007d3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d3c:	7bfa      	ldrb	r2, [r7, #15]
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	3340      	adds	r3, #64	; 0x40
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d50:	7bfa      	ldrb	r2, [r7, #15]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	3348      	adds	r3, #72	; 0x48
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d64:	7bfa      	ldrb	r2, [r7, #15]
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	334c      	adds	r3, #76	; 0x4c
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d78:	7bfa      	ldrb	r2, [r7, #15]
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	4413      	add	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	440b      	add	r3, r1
 8007d86:	3354      	adds	r3, #84	; 0x54
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	73fb      	strb	r3, [r7, #15]
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d3af      	bcc.n	8007cfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
 8007da0:	e044      	b.n	8007e2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007da2:	7bfa      	ldrb	r2, [r7, #15]
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	440b      	add	r3, r1
 8007db0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007db4:	2200      	movs	r2, #0
 8007db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007db8:	7bfa      	ldrb	r2, [r7, #15]
 8007dba:	6879      	ldr	r1, [r7, #4]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	00db      	lsls	r3, r3, #3
 8007dc0:	4413      	add	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	440b      	add	r3, r1
 8007dc6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007dca:	7bfa      	ldrb	r2, [r7, #15]
 8007dcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007dce:	7bfa      	ldrb	r2, [r7, #15]
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007de4:	7bfa      	ldrb	r2, [r7, #15]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4613      	mov	r3, r2
 8007dea:	00db      	lsls	r3, r3, #3
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	440b      	add	r3, r1
 8007df2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007dfa:	7bfa      	ldrb	r2, [r7, #15]
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e10:	7bfa      	ldrb	r2, [r7, #15]
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	440b      	add	r3, r1
 8007e1e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	7bfa      	ldrb	r2, [r7, #15]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d3b5      	bcc.n	8007da2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	687e      	ldr	r6, [r7, #4]
 8007e3e:	466d      	mov	r5, sp
 8007e40:	f106 0410 	add.w	r4, r6, #16
 8007e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e54:	1d33      	adds	r3, r6, #4
 8007e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e58:	6838      	ldr	r0, [r7, #0]
 8007e5a:	f005 f88f 	bl	800cf7c <USB_DevInit>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e014      	b.n	8007e9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d102      	bne.n	8007e8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f001 f98b 	bl	80091a4 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f006 f9d1 	bl	800e23a <USB_DevDisconnect>

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ea2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_PCD_Start+0x1c>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e020      	b.n	8007f00 <HAL_PCD_Start+0x5e>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d109      	bne.n	8007ee2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d005      	beq.n	8007ee2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f004 ffda 	bl	800cea0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f006 f981 	bl	800e1f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007f08:	b590      	push	{r4, r7, lr}
 8007f0a:	b08d      	sub	sp, #52	; 0x34
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f006 fa3f 	bl	800e3a2 <USB_GetMode>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f040 84b7 	bne.w	800889a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f006 f9a3 	bl	800e27c <USB_ReadInterrupts>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 84ad 	beq.w	8008898 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	0a1b      	lsrs	r3, r3, #8
 8007f48:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f006 f990 	bl	800e27c <USB_ReadInterrupts>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d107      	bne.n	8007f76 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695a      	ldr	r2, [r3, #20]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f002 0202 	and.w	r2, r2, #2
 8007f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f006 f97e 	bl	800e27c <USB_ReadInterrupts>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f003 0310 	and.w	r3, r3, #16
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d161      	bne.n	800804e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699a      	ldr	r2, [r3, #24]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f022 0210 	bic.w	r2, r2, #16
 8007f98:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f003 020f 	and.w	r2, r3, #15
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	00db      	lsls	r3, r3, #3
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	0c5b      	lsrs	r3, r3, #17
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d124      	bne.n	8008010 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007fcc:	4013      	ands	r3, r2
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d035      	beq.n	800803e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	091b      	lsrs	r3, r3, #4
 8007fda:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6a38      	ldr	r0, [r7, #32]
 8007fe6:	f005 ffb5 	bl	800df54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	691a      	ldr	r2, [r3, #16]
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	091b      	lsrs	r3, r3, #4
 8007ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ff6:	441a      	add	r2, r3
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	6a1a      	ldr	r2, [r3, #32]
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008008:	441a      	add	r2, r3
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	621a      	str	r2, [r3, #32]
 800800e:	e016      	b.n	800803e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	0c5b      	lsrs	r3, r3, #17
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	2b06      	cmp	r3, #6
 800801a:	d110      	bne.n	800803e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008022:	2208      	movs	r2, #8
 8008024:	4619      	mov	r1, r3
 8008026:	6a38      	ldr	r0, [r7, #32]
 8008028:	f005 ff94 	bl	800df54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	6a1a      	ldr	r2, [r3, #32]
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	091b      	lsrs	r3, r3, #4
 8008034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008038:	441a      	add	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0210 	orr.w	r2, r2, #16
 800804c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f006 f912 	bl	800e27c <USB_ReadInterrupts>
 8008058:	4603      	mov	r3, r0
 800805a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800805e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008062:	f040 80a7 	bne.w	80081b4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f006 f917 	bl	800e2a2 <USB_ReadDevAllOutEpInterrupt>
 8008074:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008076:	e099      	b.n	80081ac <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 808e 	beq.w	80081a0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f006 f93b 	bl	800e30a <USB_ReadDevOutEPInterrupt>
 8008094:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ac:	461a      	mov	r2, r3
 80080ae:	2301      	movs	r3, #1
 80080b0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80080b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 feef 	bl	8008e98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00c      	beq.n	80080de <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80080c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d0:	461a      	mov	r2, r3
 80080d2:	2308      	movs	r3, #8
 80080d4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80080d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 ffc5 	bl	8009068 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d008      	beq.n	80080fa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f4:	461a      	mov	r2, r3
 80080f6:	2310      	movs	r3, #16
 80080f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d030      	beq.n	8008166 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810c:	2b80      	cmp	r3, #128	; 0x80
 800810e:	d109      	bne.n	8008124 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800811e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008122:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008126:	4613      	mov	r3, r2
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4413      	add	r3, r2
 8008136:	3304      	adds	r3, #4
 8008138:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	78db      	ldrb	r3, [r3, #3]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d108      	bne.n	8008154 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2200      	movs	r2, #0
 8008146:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	b2db      	uxtb	r3, r3
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f00d fb68 	bl	8015824 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008160:	461a      	mov	r2, r3
 8008162:	2302      	movs	r3, #2
 8008164:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	d008      	beq.n	8008182 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817c:	461a      	mov	r2, r3
 800817e:	2320      	movs	r3, #32
 8008180:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008198:	461a      	mov	r2, r3
 800819a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800819e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	3301      	adds	r3, #1
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80081a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a8:	085b      	lsrs	r3, r3, #1
 80081aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80081ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f47f af62 	bne.w	8008078 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f006 f85f 	bl	800e27c <USB_ReadInterrupts>
 80081be:	4603      	mov	r3, r0
 80081c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081c8:	f040 80db 	bne.w	8008382 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f006 f880 	bl	800e2d6 <USB_ReadDevAllInEpInterrupt>
 80081d6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80081dc:	e0cd      	b.n	800837a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80c2 	beq.w	800836e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	4611      	mov	r1, r2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f006 f8a6 	bl	800e346 <USB_ReadDevInEPInterrupt>
 80081fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d057      	beq.n	80082b6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	2201      	movs	r2, #1
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	43db      	mvns	r3, r3
 8008220:	69f9      	ldr	r1, [r7, #28]
 8008222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008226:	4013      	ands	r3, r2
 8008228:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008236:	461a      	mov	r2, r3
 8008238:	2301      	movs	r3, #1
 800823a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d132      	bne.n	80082aa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	334c      	adds	r3, #76	; 0x4c
 8008254:	6819      	ldr	r1, [r3, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825a:	4613      	mov	r3, r2
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4403      	add	r3, r0
 8008264:	3348      	adds	r3, #72	; 0x48
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4419      	add	r1, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800826e:	4613      	mov	r3, r2
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	4413      	add	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4403      	add	r3, r0
 8008278:	334c      	adds	r3, #76	; 0x4c
 800827a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d113      	bne.n	80082aa <HAL_PCD_IRQHandler+0x3a2>
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008286:	4613      	mov	r3, r2
 8008288:	00db      	lsls	r3, r3, #3
 800828a:	4413      	add	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	440b      	add	r3, r1
 8008290:	3354      	adds	r3, #84	; 0x54
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d108      	bne.n	80082aa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80082a2:	461a      	mov	r2, r3
 80082a4:	2101      	movs	r1, #1
 80082a6:	f006 f8ad 	bl	800e404 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f00d fa32 	bl	801571a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f003 0308 	and.w	r3, r3, #8
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082cc:	461a      	mov	r2, r3
 80082ce:	2308      	movs	r3, #8
 80082d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f003 0310 	and.w	r3, r3, #16
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e8:	461a      	mov	r2, r3
 80082ea:	2310      	movs	r3, #16
 80082ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	015a      	lsls	r2, r3, #5
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	4413      	add	r3, r2
 8008300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008304:	461a      	mov	r2, r3
 8008306:	2340      	movs	r3, #64	; 0x40
 8008308:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f003 0302 	and.w	r3, r3, #2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d023      	beq.n	800835c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008316:	6a38      	ldr	r0, [r7, #32]
 8008318:	f004 ff8e 	bl	800d238 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800831c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831e:	4613      	mov	r3, r2
 8008320:	00db      	lsls	r3, r3, #3
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	3338      	adds	r3, #56	; 0x38
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	4413      	add	r3, r2
 800832c:	3304      	adds	r3, #4
 800832e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	78db      	ldrb	r3, [r3, #3]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d108      	bne.n	800834a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2200      	movs	r2, #0
 800833c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	b2db      	uxtb	r3, r3
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f00d fa7f 	bl	8015848 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008356:	461a      	mov	r2, r3
 8008358:	2302      	movs	r3, #2
 800835a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008362:	2b00      	cmp	r3, #0
 8008364:	d003      	beq.n	800836e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fd08 	bl	8008d7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	3301      	adds	r3, #1
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	2b00      	cmp	r3, #0
 800837e:	f47f af2e 	bne.w	80081de <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4618      	mov	r0, r3
 8008388:	f005 ff78 	bl	800e27c <USB_ReadInterrupts>
 800838c:	4603      	mov	r3, r0
 800838e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008396:	d122      	bne.n	80083de <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	69fa      	ldr	r2, [r7, #28]
 80083a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083a6:	f023 0301 	bic.w	r3, r3, #1
 80083aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d108      	bne.n	80083c8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80083be:	2100      	movs	r1, #0
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f00d fbf9 	bl	8015bb8 <HAL_PCDEx_LPM_Callback>
 80083c6:	e002      	b.n	80083ce <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f00d fa1d 	bl	8015808 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695a      	ldr	r2, [r3, #20]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80083dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f005 ff4a 	bl	800e27c <USB_ReadInterrupts>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f2:	d112      	bne.n	800841a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b01      	cmp	r3, #1
 8008402:	d102      	bne.n	800840a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f00d f9d9 	bl	80157bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	695a      	ldr	r2, [r3, #20]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008418:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f005 ff2c 	bl	800e27c <USB_ReadInterrupts>
 8008424:	4603      	mov	r3, r0
 8008426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800842a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800842e:	d121      	bne.n	8008474 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695a      	ldr	r2, [r3, #20]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800843e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008446:	2b00      	cmp	r3, #0
 8008448:	d111      	bne.n	800846e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008458:	089b      	lsrs	r3, r3, #2
 800845a:	f003 020f 	and.w	r2, r3, #15
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008464:	2101      	movs	r1, #1
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f00d fba6 	bl	8015bb8 <HAL_PCDEx_LPM_Callback>
 800846c:	e002      	b.n	8008474 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f00d f9a4 	bl	80157bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f005 feff 	bl	800e27c <USB_ReadInterrupts>
 800847e:	4603      	mov	r3, r0
 8008480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008488:	f040 80b7 	bne.w	80085fa <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2110      	movs	r1, #16
 80084a6:	4618      	mov	r0, r3
 80084a8:	f004 fec6 	bl	800d238 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ac:	2300      	movs	r3, #0
 80084ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084b0:	e046      	b.n	8008540 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084be:	461a      	mov	r2, r3
 80084c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084d6:	0151      	lsls	r1, r2, #5
 80084d8:	69fa      	ldr	r2, [r7, #28]
 80084da:	440a      	add	r2, r1
 80084dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	461a      	mov	r2, r3
 80084f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	440a      	add	r2, r1
 8008510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008514:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008518:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800851a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	440a      	add	r2, r1
 8008530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008534:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008538:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800853a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853c:	3301      	adds	r3, #1
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008546:	429a      	cmp	r2, r3
 8008548:	d3b3      	bcc.n	80084b2 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008558:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800855c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	2b00      	cmp	r3, #0
 8008564:	d016      	beq.n	8008594 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008570:	69fa      	ldr	r2, [r7, #28]
 8008572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008576:	f043 030b 	orr.w	r3, r3, #11
 800857a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008586:	69fa      	ldr	r2, [r7, #28]
 8008588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800858c:	f043 030b 	orr.w	r3, r3, #11
 8008590:	6453      	str	r3, [r2, #68]	; 0x44
 8008592:	e015      	b.n	80085c0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80085a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80085aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ba:	f043 030b 	orr.w	r3, r3, #11
 80085be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69fa      	ldr	r2, [r7, #28]
 80085ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80085d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80085e4:	461a      	mov	r2, r3
 80085e6:	f005 ff0d 	bl	800e404 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695a      	ldr	r2, [r3, #20]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80085f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f005 fe3c 	bl	800e27c <USB_ReadInterrupts>
 8008604:	4603      	mov	r3, r0
 8008606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800860a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860e:	d124      	bne.n	800865a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f005 fed2 	bl	800e3be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f004 fe87 	bl	800d332 <USB_GetDevSpeed>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681c      	ldr	r4, [r3, #0]
 8008630:	f000 fec2 	bl	80093b8 <HAL_RCC_GetHCLKFreq>
 8008634:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800863a:	b2db      	uxtb	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	4620      	mov	r0, r4
 8008640:	f004 fb8c 	bl	800cd5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f00d f890 	bl	801576a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	695a      	ldr	r2, [r3, #20]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008658:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4618      	mov	r0, r3
 8008660:	f005 fe0c 	bl	800e27c <USB_ReadInterrupts>
 8008664:	4603      	mov	r3, r0
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b08      	cmp	r3, #8
 800866c:	d10a      	bne.n	8008684 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f00d f86d 	bl	801574e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695a      	ldr	r2, [r3, #20]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f002 0208 	and.w	r2, r2, #8
 8008682:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4618      	mov	r0, r3
 800868a:	f005 fdf7 	bl	800e27c <USB_ReadInterrupts>
 800868e:	4603      	mov	r3, r0
 8008690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008694:	2b80      	cmp	r3, #128	; 0x80
 8008696:	d122      	bne.n	80086de <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086a4:	2301      	movs	r3, #1
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
 80086a8:	e014      	b.n	80086d4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ae:	4613      	mov	r3, r2
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	440b      	add	r3, r1
 80086b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d105      	bne.n	80086ce <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fb27 	bl	8008d1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	3301      	adds	r3, #1
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086da:	429a      	cmp	r2, r3
 80086dc:	d3e5      	bcc.n	80086aa <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f005 fdca 	bl	800e27c <USB_ReadInterrupts>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086f2:	d13b      	bne.n	800876c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086f4:	2301      	movs	r3, #1
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
 80086f8:	e02b      	b.n	8008752 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870e:	4613      	mov	r3, r2
 8008710:	00db      	lsls	r3, r3, #3
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	3340      	adds	r3, #64	; 0x40
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d115      	bne.n	800874c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008720:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008722:	2b00      	cmp	r3, #0
 8008724:	da12      	bge.n	800874c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872a:	4613      	mov	r3, r2
 800872c:	00db      	lsls	r3, r3, #3
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	333f      	adds	r3, #63	; 0x3f
 8008736:	2201      	movs	r2, #1
 8008738:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873c:	b2db      	uxtb	r3, r3
 800873e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008742:	b2db      	uxtb	r3, r3
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fae8 	bl	8008d1c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	3301      	adds	r3, #1
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008758:	429a      	cmp	r2, r3
 800875a:	d3ce      	bcc.n	80086fa <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800876a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f005 fd83 	bl	800e27c <USB_ReadInterrupts>
 8008776:	4603      	mov	r3, r0
 8008778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800877c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008780:	d155      	bne.n	800882e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008782:	2301      	movs	r3, #1
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
 8008786:	e045      	b.n	8008814 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d12e      	bne.n	800880e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80087b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	da2b      	bge.n	800880e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80087c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d121      	bne.n	800880e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ce:	4613      	mov	r3, r2
 80087d0:	00db      	lsls	r3, r3, #3
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80087dc:	2201      	movs	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800880a:	6053      	str	r3, [r2, #4]
            break;
 800880c:	e007      	b.n	800881e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	3301      	adds	r3, #1
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881a:	429a      	cmp	r2, r3
 800881c:	d3b4      	bcc.n	8008788 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	695a      	ldr	r2, [r3, #20]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800882c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4618      	mov	r0, r3
 8008834:	f005 fd22 	bl	800e27c <USB_ReadInterrupts>
 8008838:	4603      	mov	r3, r0
 800883a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800883e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008842:	d10a      	bne.n	800885a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f00d f811 	bl	801586c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	695a      	ldr	r2, [r3, #20]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f005 fd0c 	bl	800e27c <USB_ReadInterrupts>
 8008864:	4603      	mov	r3, r0
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	2b04      	cmp	r3, #4
 800886c:	d115      	bne.n	800889a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d002      	beq.n	8008886 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f00d f801 	bl	8015888 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6859      	ldr	r1, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
 8008896:	e000      	b.n	800889a <HAL_PCD_IRQHandler+0x992>
      return;
 8008898:	bf00      	nop
    }
  }
}
 800889a:	3734      	adds	r7, #52	; 0x34
 800889c:	46bd      	mov	sp, r7
 800889e:	bd90      	pop	{r4, r7, pc}

080088a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d101      	bne.n	80088ba <HAL_PCD_SetAddress+0x1a>
 80088b6:	2302      	movs	r3, #2
 80088b8:	e013      	b.n	80088e2 <HAL_PCD_SetAddress+0x42>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	78fa      	ldrb	r2, [r7, #3]
 80088c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	78fa      	ldrb	r2, [r7, #3]
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f005 fc6a 	bl	800e1ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b084      	sub	sp, #16
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
 80088f2:	4608      	mov	r0, r1
 80088f4:	4611      	mov	r1, r2
 80088f6:	461a      	mov	r2, r3
 80088f8:	4603      	mov	r3, r0
 80088fa:	70fb      	strb	r3, [r7, #3]
 80088fc:	460b      	mov	r3, r1
 80088fe:	803b      	strh	r3, [r7, #0]
 8008900:	4613      	mov	r3, r2
 8008902:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800890c:	2b00      	cmp	r3, #0
 800890e:	da0f      	bge.n	8008930 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	f003 020f 	and.w	r2, r3, #15
 8008916:	4613      	mov	r3, r2
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	3338      	adds	r3, #56	; 0x38
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	4413      	add	r3, r2
 8008924:	3304      	adds	r3, #4
 8008926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2201      	movs	r2, #1
 800892c:	705a      	strb	r2, [r3, #1]
 800892e:	e00f      	b.n	8008950 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008930:	78fb      	ldrb	r3, [r7, #3]
 8008932:	f003 020f 	and.w	r2, r3, #15
 8008936:	4613      	mov	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	4413      	add	r3, r2
 8008946:	3304      	adds	r3, #4
 8008948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	f003 030f 	and.w	r3, r3, #15
 8008956:	b2da      	uxtb	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800895c:	883a      	ldrh	r2, [r7, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	78ba      	ldrb	r2, [r7, #2]
 8008966:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	785b      	ldrb	r3, [r3, #1]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d004      	beq.n	800897a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800897a:	78bb      	ldrb	r3, [r7, #2]
 800897c:	2b02      	cmp	r3, #2
 800897e:	d102      	bne.n	8008986 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_PCD_EP_Open+0xaa>
 8008990:	2302      	movs	r3, #2
 8008992:	e00e      	b.n	80089b2 <HAL_PCD_EP_Open+0xc8>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68f9      	ldr	r1, [r7, #12]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f004 fcea 	bl	800d37c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	460b      	mov	r3, r1
 80089c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80089c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da0f      	bge.n	80089ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089ce:	78fb      	ldrb	r3, [r7, #3]
 80089d0:	f003 020f 	and.w	r2, r3, #15
 80089d4:	4613      	mov	r3, r2
 80089d6:	00db      	lsls	r3, r3, #3
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	3338      	adds	r3, #56	; 0x38
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	3304      	adds	r3, #4
 80089e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	705a      	strb	r2, [r3, #1]
 80089ec:	e00f      	b.n	8008a0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089ee:	78fb      	ldrb	r3, [r7, #3]
 80089f0:	f003 020f 	and.w	r2, r3, #15
 80089f4:	4613      	mov	r3, r2
 80089f6:	00db      	lsls	r3, r3, #3
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	4413      	add	r3, r2
 8008a04:	3304      	adds	r3, #4
 8008a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008a0e:	78fb      	ldrb	r3, [r7, #3]
 8008a10:	f003 030f 	and.w	r3, r3, #15
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <HAL_PCD_EP_Close+0x6e>
 8008a24:	2302      	movs	r3, #2
 8008a26:	e00e      	b.n	8008a46 <HAL_PCD_EP_Close+0x8c>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68f9      	ldr	r1, [r7, #12]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f004 fd28 	bl	800d48c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b086      	sub	sp, #24
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	60f8      	str	r0, [r7, #12]
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	603b      	str	r3, [r7, #0]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	4613      	mov	r3, r2
 8008a66:	00db      	lsls	r3, r3, #3
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	4413      	add	r3, r2
 8008a74:	3304      	adds	r3, #4
 8008a76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2200      	movs	r2, #0
 8008a88:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	f003 030f 	and.w	r3, r3, #15
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d102      	bne.n	8008aaa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	6979      	ldr	r1, [r7, #20]
 8008ac2:	f005 f807 	bl	800dad4 <USB_EP0StartXfer>
 8008ac6:	e008      	b.n	8008ada <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6979      	ldr	r1, [r7, #20]
 8008ad6:	f004 fdb5 	bl	800d644 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008af0:	78fb      	ldrb	r3, [r7, #3]
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8008b06:	681b      	ldr	r3, [r3, #0]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	460b      	mov	r3, r1
 8008b22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	f003 020f 	and.w	r2, r3, #15
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	00db      	lsls	r3, r3, #3
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	3338      	adds	r3, #56	; 0x38
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	3304      	adds	r3, #4
 8008b3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	2201      	movs	r2, #1
 8008b52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b54:	7afb      	ldrb	r3, [r7, #11]
 8008b56:	f003 030f 	and.w	r3, r3, #15
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d102      	bne.n	8008b6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6818      	ldr	r0, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	461a      	mov	r2, r3
 8008b84:	6979      	ldr	r1, [r7, #20]
 8008b86:	f004 ffa5 	bl	800dad4 <USB_EP0StartXfer>
 8008b8a:	e008      	b.n	8008b9e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	6979      	ldr	r1, [r7, #20]
 8008b9a:	f004 fd53 	bl	800d644 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	f003 020f 	and.w	r2, r3, #15
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d901      	bls.n	8008bc6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e050      	b.n	8008c68 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da0f      	bge.n	8008bee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bce:	78fb      	ldrb	r3, [r7, #3]
 8008bd0:	f003 020f 	and.w	r2, r3, #15
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	00db      	lsls	r3, r3, #3
 8008bd8:	4413      	add	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	3338      	adds	r3, #56	; 0x38
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	4413      	add	r3, r2
 8008be2:	3304      	adds	r3, #4
 8008be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2201      	movs	r2, #1
 8008bea:	705a      	strb	r2, [r3, #1]
 8008bec:	e00d      	b.n	8008c0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008bee:	78fa      	ldrb	r2, [r7, #3]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	4413      	add	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	4413      	add	r3, r2
 8008c00:	3304      	adds	r3, #4
 8008c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	f003 030f 	and.w	r3, r3, #15
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d101      	bne.n	8008c2a <HAL_PCD_EP_SetStall+0x82>
 8008c26:	2302      	movs	r3, #2
 8008c28:	e01e      	b.n	8008c68 <HAL_PCD_EP_SetStall+0xc0>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68f9      	ldr	r1, [r7, #12]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f005 f9e3 	bl	800e004 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	f003 030f 	and.w	r3, r3, #15
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	b2d9      	uxtb	r1, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f005 fbd3 	bl	800e404 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	f003 020f 	and.w	r2, r3, #15
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d901      	bls.n	8008c8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e042      	b.n	8008d14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	da0f      	bge.n	8008cb6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	f003 020f 	and.w	r2, r3, #15
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	3338      	adds	r3, #56	; 0x38
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	3304      	adds	r3, #4
 8008cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	705a      	strb	r2, [r3, #1]
 8008cb4:	e00f      	b.n	8008cd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	f003 020f 	and.w	r2, r3, #15
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4413      	add	r3, r2
 8008ccc:	3304      	adds	r3, #4
 8008cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	f003 030f 	and.w	r3, r3, #15
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d101      	bne.n	8008cf6 <HAL_PCD_EP_ClrStall+0x86>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	e00e      	b.n	8008d14 <HAL_PCD_EP_ClrStall+0xa4>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68f9      	ldr	r1, [r7, #12]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f005 f9eb 	bl	800e0e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	460b      	mov	r3, r1
 8008d26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	da0c      	bge.n	8008d4a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	f003 020f 	and.w	r2, r3, #15
 8008d36:	4613      	mov	r3, r2
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	3338      	adds	r3, #56	; 0x38
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	4413      	add	r3, r2
 8008d44:	3304      	adds	r3, #4
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	e00c      	b.n	8008d64 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	f003 020f 	and.w	r2, r3, #15
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	4413      	add	r3, r2
 8008d60:	3304      	adds	r3, #4
 8008d62:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68f9      	ldr	r1, [r7, #12]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f005 f80a 	bl	800dd84 <USB_EPStopXfer>
 8008d70:	4603      	mov	r3, r0
 8008d72:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008d74:	7afb      	ldrb	r3, [r7, #11]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b08a      	sub	sp, #40	; 0x28
 8008d82:	af02      	add	r7, sp, #8
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	4613      	mov	r3, r2
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	3338      	adds	r3, #56	; 0x38
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	4413      	add	r3, r2
 8008da2:	3304      	adds	r3, #4
 8008da4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1a      	ldr	r2, [r3, #32]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d901      	bls.n	8008db6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e06c      	b.n	8008e90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	699a      	ldr	r2, [r3, #24]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d902      	bls.n	8008dd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	3303      	adds	r3, #3
 8008dd6:	089b      	lsrs	r3, r3, #2
 8008dd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008dda:	e02b      	b.n	8008e34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	699a      	ldr	r2, [r3, #24]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	69fa      	ldr	r2, [r7, #28]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d902      	bls.n	8008df8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	3303      	adds	r3, #3
 8008dfc:	089b      	lsrs	r3, r3, #2
 8008dfe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6919      	ldr	r1, [r3, #16]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	4603      	mov	r3, r0
 8008e16:	6978      	ldr	r0, [r7, #20]
 8008e18:	f005 f85e 	bl	800ded8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	441a      	add	r2, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1a      	ldr	r2, [r3, #32]
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	441a      	add	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d809      	bhi.n	8008e5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6a1a      	ldr	r2, [r3, #32]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d203      	bcs.n	8008e5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1be      	bne.n	8008ddc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	699a      	ldr	r2, [r3, #24]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d811      	bhi.n	8008e8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	f003 030f 	and.w	r3, r3, #15
 8008e70:	2201      	movs	r2, #1
 8008e72:	fa02 f303 	lsl.w	r3, r2, r3
 8008e76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	43db      	mvns	r3, r3
 8008e84:	6939      	ldr	r1, [r7, #16]
 8008e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3720      	adds	r7, #32
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	333c      	adds	r3, #60	; 0x3c
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d17b      	bne.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f003 0308 	and.w	r3, r3, #8
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d015      	beq.n	8008f04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	4a61      	ldr	r2, [pc, #388]	; (8009060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	f240 80b9 	bls.w	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80b3 	beq.w	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efa:	461a      	mov	r2, r3
 8008efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f00:	6093      	str	r3, [r2, #8]
 8008f02:	e0a7      	b.n	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f003 0320 	and.w	r3, r3, #32
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	2320      	movs	r3, #32
 8008f1e:	6093      	str	r3, [r2, #8]
 8008f20:	e098      	b.n	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f040 8093 	bne.w	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	4a4b      	ldr	r2, [pc, #300]	; (8009060 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d90f      	bls.n	8008f56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00a      	beq.n	8008f56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f52:	6093      	str	r3, [r2, #8]
 8008f54:	e07e      	b.n	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	69da      	ldr	r2, [r3, #28]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	0159      	lsls	r1, r3, #5
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	440b      	add	r3, r1
 8008f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d114      	bne.n	8008fb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	f005 fa2e 	bl	800e404 <USB_EP0_OutStart>
 8008fa8:	e006      	b.n	8008fb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	691a      	ldr	r2, [r3, #16]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	441a      	add	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f00c fb90 	bl	80156e4 <HAL_PCD_DataOutStageCallback>
 8008fc4:	e046      	b.n	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4a26      	ldr	r2, [pc, #152]	; (8009064 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d124      	bne.n	8009018 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d00a      	beq.n	8008fee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fea:	6093      	str	r3, [r2, #8]
 8008fec:	e032      	b.n	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d008      	beq.n	800900a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009004:	461a      	mov	r2, r3
 8009006:	2320      	movs	r3, #32
 8009008:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f00c fb67 	bl	80156e4 <HAL_PCD_DataOutStageCallback>
 8009016:	e01d      	b.n	8009054 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d114      	bne.n	8009048 <PCD_EP_OutXfrComplete_int+0x1b0>
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	4613      	mov	r3, r2
 8009024:	00db      	lsls	r3, r3, #3
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d108      	bne.n	8009048 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009040:	461a      	mov	r2, r3
 8009042:	2100      	movs	r1, #0
 8009044:	f005 f9de 	bl	800e404 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f00c fb48 	bl	80156e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3720      	adds	r7, #32
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	4f54300a 	.word	0x4f54300a
 8009064:	4f54310a 	.word	0x4f54310a

08009068 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	333c      	adds	r3, #60	; 0x3c
 8009080:	3304      	adds	r3, #4
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4a15      	ldr	r2, [pc, #84]	; (80090f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d90e      	bls.n	80090bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d009      	beq.n	80090bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b4:	461a      	mov	r2, r3
 80090b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f00c faff 	bl	80156c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4a0a      	ldr	r2, [pc, #40]	; (80090f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d90c      	bls.n	80090e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d108      	bne.n	80090e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80090dc:	461a      	mov	r2, r3
 80090de:	2101      	movs	r1, #1
 80090e0:	f005 f990 	bl	800e404 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	4f54300a 	.word	0x4f54300a

080090f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
 8009100:	4613      	mov	r3, r2
 8009102:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d107      	bne.n	8009122 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009112:	883b      	ldrh	r3, [r7, #0]
 8009114:	0419      	lsls	r1, r3, #16
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	430a      	orrs	r2, r1
 800911e:	629a      	str	r2, [r3, #40]	; 0x28
 8009120:	e028      	b.n	8009174 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	0c1b      	lsrs	r3, r3, #16
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4413      	add	r3, r2
 800912e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009130:	2300      	movs	r3, #0
 8009132:	73fb      	strb	r3, [r7, #15]
 8009134:	e00d      	b.n	8009152 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	3340      	adds	r3, #64	; 0x40
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	0c1b      	lsrs	r3, r3, #16
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	4413      	add	r3, r2
 800914a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	3301      	adds	r3, #1
 8009150:	73fb      	strb	r3, [r7, #15]
 8009152:	7bfa      	ldrb	r2, [r7, #15]
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	3b01      	subs	r3, #1
 8009158:	429a      	cmp	r2, r3
 800915a:	d3ec      	bcc.n	8009136 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800915c:	883b      	ldrh	r3, [r7, #0]
 800915e:	0418      	lsls	r0, r3, #16
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6819      	ldr	r1, [r3, #0]
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	3b01      	subs	r3, #1
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	4302      	orrs	r2, r0
 800916c:	3340      	adds	r3, #64	; 0x40
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
 800918a:	460b      	mov	r3, r1
 800918c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	887a      	ldrh	r2, [r7, #2]
 8009194:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d6:	f043 0303 	orr.w	r3, r3, #3
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d101      	bne.n	8009200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	e0cc      	b.n	800939a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009200:	4b68      	ldr	r3, [pc, #416]	; (80093a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 030f 	and.w	r3, r3, #15
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d90c      	bls.n	8009228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800920e:	4b65      	ldr	r3, [pc, #404]	; (80093a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009216:	4b63      	ldr	r3, [pc, #396]	; (80093a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	429a      	cmp	r2, r3
 8009222:	d001      	beq.n	8009228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e0b8      	b.n	800939a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0302 	and.w	r3, r3, #2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d020      	beq.n	8009276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009240:	4b59      	ldr	r3, [pc, #356]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	4a58      	ldr	r2, [pc, #352]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800924a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 0308 	and.w	r3, r3, #8
 8009254:	2b00      	cmp	r3, #0
 8009256:	d005      	beq.n	8009264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009258:	4b53      	ldr	r3, [pc, #332]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	4a52      	ldr	r2, [pc, #328]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 800925e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009264:	4b50      	ldr	r3, [pc, #320]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	494d      	ldr	r1, [pc, #308]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009272:	4313      	orrs	r3, r2
 8009274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0301 	and.w	r3, r3, #1
 800927e:	2b00      	cmp	r3, #0
 8009280:	d044      	beq.n	800930c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d107      	bne.n	800929a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800928a:	4b47      	ldr	r3, [pc, #284]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009292:	2b00      	cmp	r3, #0
 8009294:	d119      	bne.n	80092ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	e07f      	b.n	800939a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d003      	beq.n	80092aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d107      	bne.n	80092ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092aa:	4b3f      	ldr	r3, [pc, #252]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d109      	bne.n	80092ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e06f      	b.n	800939a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ba:	4b3b      	ldr	r3, [pc, #236]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e067      	b.n	800939a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092ca:	4b37      	ldr	r3, [pc, #220]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f023 0203 	bic.w	r2, r3, #3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	4934      	ldr	r1, [pc, #208]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092dc:	f7fc f928 	bl	8005530 <HAL_GetTick>
 80092e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092e2:	e00a      	b.n	80092fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092e4:	f7fc f924 	bl	8005530 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d901      	bls.n	80092fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e04f      	b.n	800939a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092fa:	4b2b      	ldr	r3, [pc, #172]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f003 020c 	and.w	r2, r3, #12
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	429a      	cmp	r2, r3
 800930a:	d1eb      	bne.n	80092e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <HAL_RCC_ClockConfig+0x1b8>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 030f 	and.w	r3, r3, #15
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d20c      	bcs.n	8009334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800931a:	4b22      	ldr	r3, [pc, #136]	; (80093a4 <HAL_RCC_ClockConfig+0x1b8>)
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009322:	4b20      	ldr	r3, [pc, #128]	; (80093a4 <HAL_RCC_ClockConfig+0x1b8>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d001      	beq.n	8009334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e032      	b.n	800939a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0304 	and.w	r3, r3, #4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d008      	beq.n	8009352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009340:	4b19      	ldr	r3, [pc, #100]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	4916      	ldr	r1, [pc, #88]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 800934e:	4313      	orrs	r3, r2
 8009350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0308 	and.w	r3, r3, #8
 800935a:	2b00      	cmp	r3, #0
 800935c:	d009      	beq.n	8009372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800935e:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	490e      	ldr	r1, [pc, #56]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 800936e:	4313      	orrs	r3, r2
 8009370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009372:	f000 fbb1 	bl	8009ad8 <HAL_RCC_GetSysClockFreq>
 8009376:	4602      	mov	r2, r0
 8009378:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <HAL_RCC_ClockConfig+0x1bc>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	091b      	lsrs	r3, r3, #4
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	490a      	ldr	r1, [pc, #40]	; (80093ac <HAL_RCC_ClockConfig+0x1c0>)
 8009384:	5ccb      	ldrb	r3, [r1, r3]
 8009386:	fa22 f303 	lsr.w	r3, r2, r3
 800938a:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <HAL_RCC_ClockConfig+0x1c4>)
 800938c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800938e:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <HAL_RCC_ClockConfig+0x1c8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4618      	mov	r0, r3
 8009394:	f7fb fadc 	bl	8004950 <HAL_InitTick>

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	40023c00 	.word	0x40023c00
 80093a8:	40023800 	.word	0x40023800
 80093ac:	08019800 	.word	0x08019800
 80093b0:	2000001c 	.word	0x2000001c
 80093b4:	20000020 	.word	0x20000020

080093b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093b8:	b480      	push	{r7}
 80093ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093bc:	4b03      	ldr	r3, [pc, #12]	; (80093cc <HAL_RCC_GetHCLKFreq+0x14>)
 80093be:	681b      	ldr	r3, [r3, #0]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	2000001c 	.word	0x2000001c

080093d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093d4:	f7ff fff0 	bl	80093b8 <HAL_RCC_GetHCLKFreq>
 80093d8:	4602      	mov	r2, r0
 80093da:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	0a9b      	lsrs	r3, r3, #10
 80093e0:	f003 0307 	and.w	r3, r3, #7
 80093e4:	4903      	ldr	r1, [pc, #12]	; (80093f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093e6:	5ccb      	ldrb	r3, [r1, r3]
 80093e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	40023800 	.word	0x40023800
 80093f4:	08019810 	.word	0x08019810

080093f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093fc:	f7ff ffdc 	bl	80093b8 <HAL_RCC_GetHCLKFreq>
 8009400:	4602      	mov	r2, r0
 8009402:	4b05      	ldr	r3, [pc, #20]	; (8009418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	0b5b      	lsrs	r3, r3, #13
 8009408:	f003 0307 	and.w	r3, r3, #7
 800940c:	4903      	ldr	r1, [pc, #12]	; (800941c <HAL_RCC_GetPCLK2Freq+0x24>)
 800940e:	5ccb      	ldrb	r3, [r1, r3]
 8009410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009414:	4618      	mov	r0, r3
 8009416:	bd80      	pop	{r7, pc}
 8009418:	40023800 	.word	0x40023800
 800941c:	08019810 	.word	0x08019810

08009420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	220f      	movs	r2, #15
 800942e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009430:	4b12      	ldr	r3, [pc, #72]	; (800947c <HAL_RCC_GetClockConfig+0x5c>)
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f003 0203 	and.w	r2, r3, #3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800943c:	4b0f      	ldr	r3, [pc, #60]	; (800947c <HAL_RCC_GetClockConfig+0x5c>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009448:	4b0c      	ldr	r3, [pc, #48]	; (800947c <HAL_RCC_GetClockConfig+0x5c>)
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <HAL_RCC_GetClockConfig+0x5c>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	08db      	lsrs	r3, r3, #3
 800945a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <HAL_RCC_GetClockConfig+0x60>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 020f 	and.w	r2, r3, #15
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	601a      	str	r2, [r3, #0]
}
 800946e:	bf00      	nop
 8009470:	370c      	adds	r7, #12
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	40023800 	.word	0x40023800
 8009480:	40023c00 	.word	0x40023c00

08009484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08c      	sub	sp, #48	; 0x30
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800948c:	2300      	movs	r3, #0
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8009498:	2300      	movs	r3, #0
 800949a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d010      	beq.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80094bc:	4b6f      	ldr	r3, [pc, #444]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094c2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	496c      	ldr	r1, [pc, #432]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80094da:	2301      	movs	r3, #1
 80094dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d010      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80094ea:	4b64      	ldr	r3, [pc, #400]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f8:	4960      	ldr	r1, [pc, #384]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8009508:	2301      	movs	r3, #1
 800950a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d017      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009518:	4b58      	ldr	r3, [pc, #352]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800951a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800951e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009526:	4955      	ldr	r1, [pc, #340]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009528:	4313      	orrs	r3, r2
 800952a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009536:	d101      	bne.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8009538:	2301      	movs	r3, #1
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8009544:	2301      	movs	r3, #1
 8009546:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0308 	and.w	r3, r3, #8
 8009550:	2b00      	cmp	r3, #0
 8009552:	d017      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009554:	4b49      	ldr	r3, [pc, #292]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800955a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009562:	4946      	ldr	r1, [pc, #280]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009564:	4313      	orrs	r3, r2
 8009566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009572:	d101      	bne.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009574:	2301      	movs	r3, #1
 8009576:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8009580:	2301      	movs	r3, #1
 8009582:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0320 	and.w	r3, r3, #32
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 808a 	beq.w	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009592:	2300      	movs	r3, #0
 8009594:	60bb      	str	r3, [r7, #8]
 8009596:	4b39      	ldr	r3, [pc, #228]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959a:	4a38      	ldr	r2, [pc, #224]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800959c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a0:	6413      	str	r3, [r2, #64]	; 0x40
 80095a2:	4b36      	ldr	r3, [pc, #216]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095aa:	60bb      	str	r3, [r7, #8]
 80095ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80095ae:	4b34      	ldr	r3, [pc, #208]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a33      	ldr	r2, [pc, #204]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80095b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095ba:	f7fb ffb9 	bl	8005530 <HAL_GetTick>
 80095be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80095c0:	e008      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80095c2:	f7fb ffb5 	bl	8005530 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e278      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80095d4:	4b2a      	ldr	r3, [pc, #168]	; (8009680 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0f0      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80095e0:	4b26      	ldr	r3, [pc, #152]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80095e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095e8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d02f      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095f8:	6a3a      	ldr	r2, [r7, #32]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d028      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80095fe:	4b1f      	ldr	r3, [pc, #124]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009606:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009608:	4b1e      	ldr	r3, [pc, #120]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800960a:	2201      	movs	r2, #1
 800960c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800960e:	4b1d      	ldr	r3, [pc, #116]	; (8009684 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009614:	4a19      	ldr	r2, [pc, #100]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800961a:	4b18      	ldr	r3, [pc, #96]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800961c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b01      	cmp	r3, #1
 8009624:	d114      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009626:	f7fb ff83 	bl	8005530 <HAL_GetTick>
 800962a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800962c:	e00a      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800962e:	f7fb ff7f 	bl	8005530 <HAL_GetTick>
 8009632:	4602      	mov	r2, r0
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	1ad3      	subs	r3, r2, r3
 8009638:	f241 3288 	movw	r2, #5000	; 0x1388
 800963c:	4293      	cmp	r3, r2
 800963e:	d901      	bls.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e240      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009644:	4b0d      	ldr	r3, [pc, #52]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0ee      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800965c:	d114      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800965e:	4b07      	ldr	r3, [pc, #28]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800966e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009672:	4902      	ldr	r1, [pc, #8]	; (800967c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009674:	4313      	orrs	r3, r2
 8009676:	608b      	str	r3, [r1, #8]
 8009678:	e00c      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800967a:	bf00      	nop
 800967c:	40023800 	.word	0x40023800
 8009680:	40007000 	.word	0x40007000
 8009684:	42470e40 	.word	0x42470e40
 8009688:	4b4a      	ldr	r3, [pc, #296]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	4a49      	ldr	r2, [pc, #292]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800968e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009692:	6093      	str	r3, [r2, #8]
 8009694:	4b47      	ldr	r3, [pc, #284]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009696:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096a0:	4944      	ldr	r1, [pc, #272]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0310 	and.w	r3, r3, #16
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80096b8:	4b3f      	ldr	r3, [pc, #252]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80096ba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80096c8:	4b3a      	ldr	r3, [pc, #232]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096d6:	4937      	ldr	r1, [pc, #220]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80096ea:	4b32      	ldr	r3, [pc, #200]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096f0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096f8:	492e      	ldr	r1, [pc, #184]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009708:	2b00      	cmp	r3, #0
 800970a:	d011      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800970c:	4b29      	ldr	r3, [pc, #164]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800970e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009712:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971a:	4926      	ldr	r1, [pc, #152]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800972a:	d101      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800972c:	2301      	movs	r3, #1
 800972e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00a      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800973c:	4b1d      	ldr	r3, [pc, #116]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800973e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009742:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800974a:	491a      	ldr	r1, [pc, #104]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800974c:	4313      	orrs	r3, r2
 800974e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800975a:	2b00      	cmp	r3, #0
 800975c:	d011      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800975e:	4b15      	ldr	r3, [pc, #84]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8009760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009764:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976c:	4911      	ldr	r1, [pc, #68]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800976e:	4313      	orrs	r3, r2
 8009770:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800977c:	d101      	bne.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800977e:	2301      	movs	r3, #1
 8009780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009784:	2b01      	cmp	r3, #1
 8009786:	d005      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009790:	f040 80ff 	bne.w	8009992 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009794:	4b09      	ldr	r3, [pc, #36]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800979a:	f7fb fec9 	bl	8005530 <HAL_GetTick>
 800979e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80097a0:	e00e      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097a2:	f7fb fec5 	bl	8005530 <HAL_GetTick>
 80097a6:	4602      	mov	r2, r0
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d907      	bls.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	e188      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80097b4:	40023800 	.word	0x40023800
 80097b8:	424711e0 	.word	0x424711e0
 80097bc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80097c0:	4b7e      	ldr	r3, [pc, #504]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1ea      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d009      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d028      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d124      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80097f4:	4b71      	ldr	r3, [pc, #452]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80097f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	f003 0303 	and.w	r3, r3, #3
 8009800:	3301      	adds	r3, #1
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009806:	4b6d      	ldr	r3, [pc, #436]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800980c:	0e1b      	lsrs	r3, r3, #24
 800980e:	f003 030f 	and.w	r3, r3, #15
 8009812:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	019b      	lsls	r3, r3, #6
 800981e:	431a      	orrs	r2, r3
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	085b      	lsrs	r3, r3, #1
 8009824:	3b01      	subs	r3, #1
 8009826:	041b      	lsls	r3, r3, #16
 8009828:	431a      	orrs	r2, r3
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	061b      	lsls	r3, r3, #24
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	071b      	lsls	r3, r3, #28
 8009836:	4961      	ldr	r1, [pc, #388]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009838:	4313      	orrs	r3, r2
 800983a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0304 	and.w	r3, r3, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	d004      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009852:	d00a      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800985c:	2b00      	cmp	r3, #0
 800985e:	d035      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009868:	d130      	bne.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800986a:	4b54      	ldr	r3, [pc, #336]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800986c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	3301      	adds	r3, #1
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800987c:	4b4f      	ldr	r3, [pc, #316]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800987e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009882:	0f1b      	lsrs	r3, r3, #28
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	019b      	lsls	r3, r3, #6
 8009894:	431a      	orrs	r2, r3
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	085b      	lsrs	r3, r3, #1
 800989a:	3b01      	subs	r3, #1
 800989c:	041b      	lsls	r3, r3, #16
 800989e:	431a      	orrs	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	061b      	lsls	r3, r3, #24
 80098a6:	431a      	orrs	r2, r3
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	071b      	lsls	r3, r3, #28
 80098ac:	4943      	ldr	r1, [pc, #268]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80098b4:	4b41      	ldr	r3, [pc, #260]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ba:	f023 021f 	bic.w	r2, r3, #31
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c2:	3b01      	subs	r3, #1
 80098c4:	493d      	ldr	r1, [pc, #244]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098c6:	4313      	orrs	r3, r2
 80098c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d029      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e0:	d124      	bne.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80098e2:	4b36      	ldr	r3, [pc, #216]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098e8:	0c1b      	lsrs	r3, r3, #16
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	3301      	adds	r3, #1
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80098f4:	4b31      	ldr	r3, [pc, #196]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80098f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	f003 0307 	and.w	r3, r3, #7
 8009900:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685a      	ldr	r2, [r3, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	019b      	lsls	r3, r3, #6
 800990c:	431a      	orrs	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	085b      	lsrs	r3, r3, #1
 8009914:	3b01      	subs	r3, #1
 8009916:	041b      	lsls	r3, r3, #16
 8009918:	431a      	orrs	r2, r3
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	061b      	lsls	r3, r3, #24
 800991e:	431a      	orrs	r2, r3
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	071b      	lsls	r3, r3, #28
 8009924:	4925      	ldr	r1, [pc, #148]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009926:	4313      	orrs	r3, r2
 8009928:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009934:	2b00      	cmp	r3, #0
 8009936:	d016      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	019b      	lsls	r3, r3, #6
 8009942:	431a      	orrs	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	085b      	lsrs	r3, r3, #1
 800994a:	3b01      	subs	r3, #1
 800994c:	041b      	lsls	r3, r3, #16
 800994e:	431a      	orrs	r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	061b      	lsls	r3, r3, #24
 8009956:	431a      	orrs	r2, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	071b      	lsls	r3, r3, #28
 800995e:	4917      	ldr	r1, [pc, #92]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009960:	4313      	orrs	r3, r2
 8009962:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009966:	4b16      	ldr	r3, [pc, #88]	; (80099c0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8009968:	2201      	movs	r2, #1
 800996a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800996c:	f7fb fde0 	bl	8005530 <HAL_GetTick>
 8009970:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009972:	e008      	b.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009974:	f7fb fddc 	bl	8005530 <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b02      	cmp	r3, #2
 8009980:	d901      	bls.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e09f      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009986:	4b0d      	ldr	r3, [pc, #52]	; (80099bc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0f0      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	2b01      	cmp	r3, #1
 8009996:	f040 8095 	bne.w	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800999a:	4b0a      	ldr	r3, [pc, #40]	; (80099c4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800999c:	2200      	movs	r2, #0
 800999e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80099a0:	f7fb fdc6 	bl	8005530 <HAL_GetTick>
 80099a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80099a6:	e00f      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80099a8:	f7fb fdc2 	bl	8005530 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d908      	bls.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e085      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80099ba:	bf00      	nop
 80099bc:	40023800 	.word	0x40023800
 80099c0:	42470068 	.word	0x42470068
 80099c4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80099c8:	4b41      	ldr	r3, [pc, #260]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099d4:	d0e8      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d003      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x566>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02b      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d127      	bne.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80099fe:	4b34      	ldr	r3, [pc, #208]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a04:	0c1b      	lsrs	r3, r3, #16
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	699a      	ldr	r2, [r3, #24]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	019b      	lsls	r3, r3, #6
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	085b      	lsrs	r3, r3, #1
 8009a20:	3b01      	subs	r3, #1
 8009a22:	041b      	lsls	r3, r3, #16
 8009a24:	431a      	orrs	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	061b      	lsls	r3, r3, #24
 8009a2c:	4928      	ldr	r1, [pc, #160]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009a34:	4b26      	ldr	r3, [pc, #152]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a3a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a42:	3b01      	subs	r3, #1
 8009a44:	021b      	lsls	r3, r3, #8
 8009a46:	4922      	ldr	r1, [pc, #136]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d01d      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a62:	d118      	bne.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009a64:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6a:	0e1b      	lsrs	r3, r3, #24
 8009a6c:	f003 030f 	and.w	r3, r3, #15
 8009a70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	019b      	lsls	r3, r3, #6
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	085b      	lsrs	r3, r3, #1
 8009a84:	3b01      	subs	r3, #1
 8009a86:	041b      	lsls	r3, r3, #16
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	061b      	lsls	r3, r3, #24
 8009a8e:	4910      	ldr	r1, [pc, #64]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a96:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a9c:	f7fb fd48 	bl	8005530 <HAL_GetTick>
 8009aa0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009aa2:	e008      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009aa4:	f7fb fd44 	bl	8005530 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d901      	bls.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e007      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ab6:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ac2:	d1ef      	bne.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3730      	adds	r7, #48	; 0x30
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	40023800 	.word	0x40023800
 8009ad4:	42470070 	.word	0x42470070

08009ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009adc:	b0a6      	sub	sp, #152	; 0x98
 8009ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009afe:	4bc8      	ldr	r3, [pc, #800]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	f003 030c 	and.w	r3, r3, #12
 8009b06:	2b0c      	cmp	r3, #12
 8009b08:	f200 817e 	bhi.w	8009e08 <HAL_RCC_GetSysClockFreq+0x330>
 8009b0c:	a201      	add	r2, pc, #4	; (adr r2, 8009b14 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b12:	bf00      	nop
 8009b14:	08009b49 	.word	0x08009b49
 8009b18:	08009e09 	.word	0x08009e09
 8009b1c:	08009e09 	.word	0x08009e09
 8009b20:	08009e09 	.word	0x08009e09
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	08009e09 	.word	0x08009e09
 8009b2c:	08009e09 	.word	0x08009e09
 8009b30:	08009e09 	.word	0x08009e09
 8009b34:	08009b59 	.word	0x08009b59
 8009b38:	08009e09 	.word	0x08009e09
 8009b3c:	08009e09 	.word	0x08009e09
 8009b40:	08009e09 	.word	0x08009e09
 8009b44:	08009cc3 	.word	0x08009cc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b48:	4bb6      	ldr	r3, [pc, #728]	; (8009e24 <HAL_RCC_GetSysClockFreq+0x34c>)
 8009b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8009b4e:	e15f      	b.n	8009e10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b50:	4bb5      	ldr	r3, [pc, #724]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x350>)
 8009b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009b56:	e15b      	b.n	8009e10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b58:	4bb1      	ldr	r3, [pc, #708]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b64:	4bae      	ldr	r3, [pc, #696]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d031      	beq.n	8009bd4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b70:	4bab      	ldr	r3, [pc, #684]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	099b      	lsrs	r3, r3, #6
 8009b76:	2200      	movs	r2, #0
 8009b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b82:	663b      	str	r3, [r7, #96]	; 0x60
 8009b84:	2300      	movs	r3, #0
 8009b86:	667b      	str	r3, [r7, #100]	; 0x64
 8009b88:	4ba7      	ldr	r3, [pc, #668]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x350>)
 8009b8a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009b8e:	462a      	mov	r2, r5
 8009b90:	fb03 f202 	mul.w	r2, r3, r2
 8009b94:	2300      	movs	r3, #0
 8009b96:	4621      	mov	r1, r4
 8009b98:	fb01 f303 	mul.w	r3, r1, r3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	4aa2      	ldr	r2, [pc, #648]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x350>)
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	fba1 1202 	umull	r1, r2, r1, r2
 8009ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ba8:	460a      	mov	r2, r1
 8009baa:	67ba      	str	r2, [r7, #120]	; 0x78
 8009bac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009bae:	4413      	add	r3, r2
 8009bb0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009bbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009bc0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8009bc4:	f7f7 f9de 	bl	8000f84 <__aeabi_uldivmod>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4613      	mov	r3, r2
 8009bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009bd2:	e064      	b.n	8009c9e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bd4:	4b92      	ldr	r3, [pc, #584]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	099b      	lsrs	r3, r3, #6
 8009bda:	2200      	movs	r2, #0
 8009bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8009bde:	657a      	str	r2, [r7, #84]	; 0x54
 8009be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8009be8:	2300      	movs	r3, #0
 8009bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	f04f 0000 	mov.w	r0, #0
 8009bf8:	f04f 0100 	mov.w	r1, #0
 8009bfc:	0159      	lsls	r1, r3, #5
 8009bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c02:	0150      	lsls	r0, r2, #5
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4621      	mov	r1, r4
 8009c0a:	1a51      	subs	r1, r2, r1
 8009c0c:	6139      	str	r1, [r7, #16]
 8009c0e:	4629      	mov	r1, r5
 8009c10:	eb63 0301 	sbc.w	r3, r3, r1
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	f04f 0200 	mov.w	r2, #0
 8009c1a:	f04f 0300 	mov.w	r3, #0
 8009c1e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c22:	4659      	mov	r1, fp
 8009c24:	018b      	lsls	r3, r1, #6
 8009c26:	4651      	mov	r1, sl
 8009c28:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009c2c:	4651      	mov	r1, sl
 8009c2e:	018a      	lsls	r2, r1, #6
 8009c30:	4651      	mov	r1, sl
 8009c32:	ebb2 0801 	subs.w	r8, r2, r1
 8009c36:	4659      	mov	r1, fp
 8009c38:	eb63 0901 	sbc.w	r9, r3, r1
 8009c3c:	f04f 0200 	mov.w	r2, #0
 8009c40:	f04f 0300 	mov.w	r3, #0
 8009c44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c50:	4690      	mov	r8, r2
 8009c52:	4699      	mov	r9, r3
 8009c54:	4623      	mov	r3, r4
 8009c56:	eb18 0303 	adds.w	r3, r8, r3
 8009c5a:	60bb      	str	r3, [r7, #8]
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	eb49 0303 	adc.w	r3, r9, r3
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	f04f 0200 	mov.w	r2, #0
 8009c68:	f04f 0300 	mov.w	r3, #0
 8009c6c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009c70:	4629      	mov	r1, r5
 8009c72:	028b      	lsls	r3, r1, #10
 8009c74:	4621      	mov	r1, r4
 8009c76:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009c7a:	4621      	mov	r1, r4
 8009c7c:	028a      	lsls	r2, r1, #10
 8009c7e:	4610      	mov	r0, r2
 8009c80:	4619      	mov	r1, r3
 8009c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c86:	2200      	movs	r2, #0
 8009c88:	643b      	str	r3, [r7, #64]	; 0x40
 8009c8a:	647a      	str	r2, [r7, #68]	; 0x44
 8009c8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009c90:	f7f7 f978 	bl	8000f84 <__aeabi_uldivmod>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4613      	mov	r3, r2
 8009c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009c9e:	4b60      	ldr	r3, [pc, #384]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	0c1b      	lsrs	r3, r3, #16
 8009ca4:	f003 0303 	and.w	r3, r3, #3
 8009ca8:	3301      	adds	r3, #1
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8009cb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009cc0:	e0a6      	b.n	8009e10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009cc2:	4b57      	ldr	r3, [pc, #348]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009cce:	4b54      	ldr	r3, [pc, #336]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d02a      	beq.n	8009d30 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cda:	4b51      	ldr	r3, [pc, #324]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	099b      	lsrs	r3, r3, #6
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009cec:	2100      	movs	r1, #0
 8009cee:	4b4e      	ldr	r3, [pc, #312]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x350>)
 8009cf0:	fb03 f201 	mul.w	r2, r3, r1
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	fb00 f303 	mul.w	r3, r0, r3
 8009cfa:	4413      	add	r3, r2
 8009cfc:	4a4a      	ldr	r2, [pc, #296]	; (8009e28 <HAL_RCC_GetSysClockFreq+0x350>)
 8009cfe:	fba0 1202 	umull	r1, r2, r0, r2
 8009d02:	677a      	str	r2, [r7, #116]	; 0x74
 8009d04:	460a      	mov	r2, r1
 8009d06:	673a      	str	r2, [r7, #112]	; 0x70
 8009d08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009d0a:	4413      	add	r3, r2
 8009d0c:	677b      	str	r3, [r7, #116]	; 0x74
 8009d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d12:	2200      	movs	r2, #0
 8009d14:	633b      	str	r3, [r7, #48]	; 0x30
 8009d16:	637a      	str	r2, [r7, #52]	; 0x34
 8009d18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8009d20:	f7f7 f930 	bl	8000f84 <__aeabi_uldivmod>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	4613      	mov	r3, r2
 8009d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d2e:	e05b      	b.n	8009de8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d30:	4b3b      	ldr	r3, [pc, #236]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	099b      	lsrs	r3, r3, #6
 8009d36:	2200      	movs	r2, #0
 8009d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d42:	623b      	str	r3, [r7, #32]
 8009d44:	2300      	movs	r3, #0
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
 8009d48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	464b      	mov	r3, r9
 8009d50:	f04f 0000 	mov.w	r0, #0
 8009d54:	f04f 0100 	mov.w	r1, #0
 8009d58:	0159      	lsls	r1, r3, #5
 8009d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d5e:	0150      	lsls	r0, r2, #5
 8009d60:	4602      	mov	r2, r0
 8009d62:	460b      	mov	r3, r1
 8009d64:	4641      	mov	r1, r8
 8009d66:	ebb2 0a01 	subs.w	sl, r2, r1
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	f04f 0300 	mov.w	r3, #0
 8009d78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009d7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009d80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009d84:	ebb2 040a 	subs.w	r4, r2, sl
 8009d88:	eb63 050b 	sbc.w	r5, r3, fp
 8009d8c:	f04f 0200 	mov.w	r2, #0
 8009d90:	f04f 0300 	mov.w	r3, #0
 8009d94:	00eb      	lsls	r3, r5, #3
 8009d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d9a:	00e2      	lsls	r2, r4, #3
 8009d9c:	4614      	mov	r4, r2
 8009d9e:	461d      	mov	r5, r3
 8009da0:	4643      	mov	r3, r8
 8009da2:	18e3      	adds	r3, r4, r3
 8009da4:	603b      	str	r3, [r7, #0]
 8009da6:	464b      	mov	r3, r9
 8009da8:	eb45 0303 	adc.w	r3, r5, r3
 8009dac:	607b      	str	r3, [r7, #4]
 8009dae:	f04f 0200 	mov.w	r2, #0
 8009db2:	f04f 0300 	mov.w	r3, #0
 8009db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009dba:	4629      	mov	r1, r5
 8009dbc:	028b      	lsls	r3, r1, #10
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009dc4:	4621      	mov	r1, r4
 8009dc6:	028a      	lsls	r2, r1, #10
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4619      	mov	r1, r3
 8009dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	61bb      	str	r3, [r7, #24]
 8009dd4:	61fa      	str	r2, [r7, #28]
 8009dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dda:	f7f7 f8d3 	bl	8000f84 <__aeabi_uldivmod>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4613      	mov	r3, r2
 8009de4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009de8:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <HAL_RCC_GetSysClockFreq+0x348>)
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	0f1b      	lsrs	r3, r3, #28
 8009dee:	f003 0307 	and.w	r3, r3, #7
 8009df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8009df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009e06:	e003      	b.n	8009e10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e08:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <HAL_RCC_GetSysClockFreq+0x34c>)
 8009e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8009e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3798      	adds	r7, #152	; 0x98
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e1e:	bf00      	nop
 8009e20:	40023800 	.word	0x40023800
 8009e24:	00f42400 	.word	0x00f42400
 8009e28:	00b71b00 	.word	0x00b71b00

08009e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e28d      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f000 8083 	beq.w	8009f52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e4c:	4b94      	ldr	r3, [pc, #592]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f003 030c 	and.w	r3, r3, #12
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d019      	beq.n	8009e8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009e58:	4b91      	ldr	r3, [pc, #580]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	d106      	bne.n	8009e72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009e64:	4b8e      	ldr	r3, [pc, #568]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e70:	d00c      	beq.n	8009e8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e72:	4b8b      	ldr	r3, [pc, #556]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009e7a:	2b0c      	cmp	r3, #12
 8009e7c:	d112      	bne.n	8009ea4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e7e:	4b88      	ldr	r3, [pc, #544]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e8a:	d10b      	bne.n	8009ea4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e8c:	4b84      	ldr	r3, [pc, #528]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d05b      	beq.n	8009f50 <HAL_RCC_OscConfig+0x124>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d157      	bne.n	8009f50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e25a      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eac:	d106      	bne.n	8009ebc <HAL_RCC_OscConfig+0x90>
 8009eae:	4b7c      	ldr	r3, [pc, #496]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a7b      	ldr	r2, [pc, #492]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eb8:	6013      	str	r3, [r2, #0]
 8009eba:	e01d      	b.n	8009ef8 <HAL_RCC_OscConfig+0xcc>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ec4:	d10c      	bne.n	8009ee0 <HAL_RCC_OscConfig+0xb4>
 8009ec6:	4b76      	ldr	r3, [pc, #472]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a75      	ldr	r2, [pc, #468]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ed0:	6013      	str	r3, [r2, #0]
 8009ed2:	4b73      	ldr	r3, [pc, #460]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a72      	ldr	r2, [pc, #456]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	e00b      	b.n	8009ef8 <HAL_RCC_OscConfig+0xcc>
 8009ee0:	4b6f      	ldr	r3, [pc, #444]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a6e      	ldr	r2, [pc, #440]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eea:	6013      	str	r3, [r2, #0]
 8009eec:	4b6c      	ldr	r3, [pc, #432]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a6b      	ldr	r2, [pc, #428]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d013      	beq.n	8009f28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f00:	f7fb fb16 	bl	8005530 <HAL_GetTick>
 8009f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f06:	e008      	b.n	8009f1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f08:	f7fb fb12 	bl	8005530 <HAL_GetTick>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	2b64      	cmp	r3, #100	; 0x64
 8009f14:	d901      	bls.n	8009f1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e21f      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f1a:	4b61      	ldr	r3, [pc, #388]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d0f0      	beq.n	8009f08 <HAL_RCC_OscConfig+0xdc>
 8009f26:	e014      	b.n	8009f52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f28:	f7fb fb02 	bl	8005530 <HAL_GetTick>
 8009f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f30:	f7fb fafe 	bl	8005530 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b64      	cmp	r3, #100	; 0x64
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e20b      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f42:	4b57      	ldr	r3, [pc, #348]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f0      	bne.n	8009f30 <HAL_RCC_OscConfig+0x104>
 8009f4e:	e000      	b.n	8009f52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d06f      	beq.n	800a03e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f5e:	4b50      	ldr	r3, [pc, #320]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f003 030c 	and.w	r3, r3, #12
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d017      	beq.n	8009f9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009f6a:	4b4d      	ldr	r3, [pc, #308]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009f72:	2b08      	cmp	r3, #8
 8009f74:	d105      	bne.n	8009f82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009f76:	4b4a      	ldr	r3, [pc, #296]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d00b      	beq.n	8009f9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f82:	4b47      	ldr	r3, [pc, #284]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009f8a:	2b0c      	cmp	r3, #12
 8009f8c:	d11c      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f8e:	4b44      	ldr	r3, [pc, #272]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d116      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f9a:	4b41      	ldr	r3, [pc, #260]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0302 	and.w	r3, r3, #2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d005      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x186>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d001      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e1d3      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fb2:	4b3b      	ldr	r3, [pc, #236]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4937      	ldr	r1, [pc, #220]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fc6:	e03a      	b.n	800a03e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d020      	beq.n	800a012 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009fd0:	4b34      	ldr	r3, [pc, #208]	; (800a0a4 <HAL_RCC_OscConfig+0x278>)
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fd6:	f7fb faab 	bl	8005530 <HAL_GetTick>
 8009fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fdc:	e008      	b.n	8009ff0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fde:	f7fb faa7 	bl	8005530 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e1b4      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ff0:	4b2b      	ldr	r3, [pc, #172]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0f0      	beq.n	8009fde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ffc:	4b28      	ldr	r3, [pc, #160]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	4925      	ldr	r1, [pc, #148]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	600b      	str	r3, [r1, #0]
 800a010:	e015      	b.n	800a03e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a012:	4b24      	ldr	r3, [pc, #144]	; (800a0a4 <HAL_RCC_OscConfig+0x278>)
 800a014:	2200      	movs	r2, #0
 800a016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a018:	f7fb fa8a 	bl	8005530 <HAL_GetTick>
 800a01c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a01e:	e008      	b.n	800a032 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a020:	f7fb fa86 	bl	8005530 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d901      	bls.n	800a032 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e193      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a032:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 0302 	and.w	r3, r3, #2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1f0      	bne.n	800a020 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d036      	beq.n	800a0b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d016      	beq.n	800a080 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a052:	4b15      	ldr	r3, [pc, #84]	; (800a0a8 <HAL_RCC_OscConfig+0x27c>)
 800a054:	2201      	movs	r2, #1
 800a056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a058:	f7fb fa6a 	bl	8005530 <HAL_GetTick>
 800a05c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a05e:	e008      	b.n	800a072 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a060:	f7fb fa66 	bl	8005530 <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	2b02      	cmp	r3, #2
 800a06c:	d901      	bls.n	800a072 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e173      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a072:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <HAL_RCC_OscConfig+0x274>)
 800a074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a076:	f003 0302 	and.w	r3, r3, #2
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0f0      	beq.n	800a060 <HAL_RCC_OscConfig+0x234>
 800a07e:	e01b      	b.n	800a0b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <HAL_RCC_OscConfig+0x27c>)
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a086:	f7fb fa53 	bl	8005530 <HAL_GetTick>
 800a08a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a08c:	e00e      	b.n	800a0ac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a08e:	f7fb fa4f 	bl	8005530 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d907      	bls.n	800a0ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e15c      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
 800a0a0:	40023800 	.word	0x40023800
 800a0a4:	42470000 	.word	0x42470000
 800a0a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0ac:	4b8a      	ldr	r3, [pc, #552]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a0ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d1ea      	bne.n	800a08e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0304 	and.w	r3, r3, #4
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 8097 	beq.w	800a1f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a0ca:	4b83      	ldr	r3, [pc, #524]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10f      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60bb      	str	r3, [r7, #8]
 800a0da:	4b7f      	ldr	r3, [pc, #508]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	4a7e      	ldr	r2, [pc, #504]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a0e6:	4b7c      	ldr	r3, [pc, #496]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0ee:	60bb      	str	r3, [r7, #8]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0f6:	4b79      	ldr	r3, [pc, #484]	; (800a2dc <HAL_RCC_OscConfig+0x4b0>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d118      	bne.n	800a134 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a102:	4b76      	ldr	r3, [pc, #472]	; (800a2dc <HAL_RCC_OscConfig+0x4b0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a75      	ldr	r2, [pc, #468]	; (800a2dc <HAL_RCC_OscConfig+0x4b0>)
 800a108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a10c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a10e:	f7fb fa0f 	bl	8005530 <HAL_GetTick>
 800a112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a114:	e008      	b.n	800a128 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a116:	f7fb fa0b 	bl	8005530 <HAL_GetTick>
 800a11a:	4602      	mov	r2, r0
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	2b02      	cmp	r3, #2
 800a122:	d901      	bls.n	800a128 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e118      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a128:	4b6c      	ldr	r3, [pc, #432]	; (800a2dc <HAL_RCC_OscConfig+0x4b0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a130:	2b00      	cmp	r3, #0
 800a132:	d0f0      	beq.n	800a116 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d106      	bne.n	800a14a <HAL_RCC_OscConfig+0x31e>
 800a13c:	4b66      	ldr	r3, [pc, #408]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a140:	4a65      	ldr	r2, [pc, #404]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a142:	f043 0301 	orr.w	r3, r3, #1
 800a146:	6713      	str	r3, [r2, #112]	; 0x70
 800a148:	e01c      	b.n	800a184 <HAL_RCC_OscConfig+0x358>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	2b05      	cmp	r3, #5
 800a150:	d10c      	bne.n	800a16c <HAL_RCC_OscConfig+0x340>
 800a152:	4b61      	ldr	r3, [pc, #388]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a156:	4a60      	ldr	r2, [pc, #384]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a158:	f043 0304 	orr.w	r3, r3, #4
 800a15c:	6713      	str	r3, [r2, #112]	; 0x70
 800a15e:	4b5e      	ldr	r3, [pc, #376]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a162:	4a5d      	ldr	r2, [pc, #372]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a164:	f043 0301 	orr.w	r3, r3, #1
 800a168:	6713      	str	r3, [r2, #112]	; 0x70
 800a16a:	e00b      	b.n	800a184 <HAL_RCC_OscConfig+0x358>
 800a16c:	4b5a      	ldr	r3, [pc, #360]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a170:	4a59      	ldr	r2, [pc, #356]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a172:	f023 0301 	bic.w	r3, r3, #1
 800a176:	6713      	str	r3, [r2, #112]	; 0x70
 800a178:	4b57      	ldr	r3, [pc, #348]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a17a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17c:	4a56      	ldr	r2, [pc, #344]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a17e:	f023 0304 	bic.w	r3, r3, #4
 800a182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d015      	beq.n	800a1b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a18c:	f7fb f9d0 	bl	8005530 <HAL_GetTick>
 800a190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a192:	e00a      	b.n	800a1aa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a194:	f7fb f9cc 	bl	8005530 <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d901      	bls.n	800a1aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e0d7      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a1aa:	4b4b      	ldr	r3, [pc, #300]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d0ee      	beq.n	800a194 <HAL_RCC_OscConfig+0x368>
 800a1b6:	e014      	b.n	800a1e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1b8:	f7fb f9ba 	bl	8005530 <HAL_GetTick>
 800a1bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1be:	e00a      	b.n	800a1d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a1c0:	f7fb f9b6 	bl	8005530 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d901      	bls.n	800a1d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	e0c1      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a1d6:	4b40      	ldr	r3, [pc, #256]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1da:	f003 0302 	and.w	r3, r3, #2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1ee      	bne.n	800a1c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1e2:	7dfb      	ldrb	r3, [r7, #23]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d105      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1e8:	4b3b      	ldr	r3, [pc, #236]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ec:	4a3a      	ldr	r2, [pc, #232]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a1ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	699b      	ldr	r3, [r3, #24]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 80ad 	beq.w	800a358 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a1fe:	4b36      	ldr	r3, [pc, #216]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	f003 030c 	and.w	r3, r3, #12
 800a206:	2b08      	cmp	r3, #8
 800a208:	d060      	beq.n	800a2cc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	2b02      	cmp	r3, #2
 800a210:	d145      	bne.n	800a29e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a212:	4b33      	ldr	r3, [pc, #204]	; (800a2e0 <HAL_RCC_OscConfig+0x4b4>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a218:	f7fb f98a 	bl	8005530 <HAL_GetTick>
 800a21c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a21e:	e008      	b.n	800a232 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a220:	f7fb f986 	bl	8005530 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e093      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a232:	4b29      	ldr	r3, [pc, #164]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1f0      	bne.n	800a220 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69da      	ldr	r2, [r3, #28]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a1b      	ldr	r3, [r3, #32]
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24c:	019b      	lsls	r3, r3, #6
 800a24e:	431a      	orrs	r2, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a254:	085b      	lsrs	r3, r3, #1
 800a256:	3b01      	subs	r3, #1
 800a258:	041b      	lsls	r3, r3, #16
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a260:	061b      	lsls	r3, r3, #24
 800a262:	431a      	orrs	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a268:	071b      	lsls	r3, r3, #28
 800a26a:	491b      	ldr	r1, [pc, #108]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a26c:	4313      	orrs	r3, r2
 800a26e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a270:	4b1b      	ldr	r3, [pc, #108]	; (800a2e0 <HAL_RCC_OscConfig+0x4b4>)
 800a272:	2201      	movs	r2, #1
 800a274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a276:	f7fb f95b 	bl	8005530 <HAL_GetTick>
 800a27a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a27c:	e008      	b.n	800a290 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a27e:	f7fb f957 	bl	8005530 <HAL_GetTick>
 800a282:	4602      	mov	r2, r0
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d901      	bls.n	800a290 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e064      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a290:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d0f0      	beq.n	800a27e <HAL_RCC_OscConfig+0x452>
 800a29c:	e05c      	b.n	800a358 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a29e:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <HAL_RCC_OscConfig+0x4b4>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a4:	f7fb f944 	bl	8005530 <HAL_GetTick>
 800a2a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2aa:	e008      	b.n	800a2be <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2ac:	f7fb f940 	bl	8005530 <HAL_GetTick>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d901      	bls.n	800a2be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e04d      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2be:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <HAL_RCC_OscConfig+0x4ac>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1f0      	bne.n	800a2ac <HAL_RCC_OscConfig+0x480>
 800a2ca:	e045      	b.n	800a358 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d107      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e040      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
 800a2d8:	40023800 	.word	0x40023800
 800a2dc:	40007000 	.word	0x40007000
 800a2e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a2e4:	4b1f      	ldr	r3, [pc, #124]	; (800a364 <HAL_RCC_OscConfig+0x538>)
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d030      	beq.n	800a354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d129      	bne.n	800a354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d122      	bne.n	800a354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a314:	4013      	ands	r3, r2
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a31a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d119      	bne.n	800a354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a32a:	085b      	lsrs	r3, r3, #1
 800a32c:	3b01      	subs	r3, #1
 800a32e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a330:	429a      	cmp	r2, r3
 800a332:	d10f      	bne.n	800a354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a340:	429a      	cmp	r2, r3
 800a342:	d107      	bne.n	800a354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a350:	429a      	cmp	r2, r3
 800a352:	d001      	beq.n	800a358 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3718      	adds	r7, #24
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	40023800 	.word	0x40023800

0800a368 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e066      	b.n	800a44c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	7f5b      	ldrb	r3, [r3, #29]
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b00      	cmp	r3, #0
 800a386:	d105      	bne.n	800a394 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fa f954 	bl	800463c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	22ca      	movs	r2, #202	; 0xca
 800a3a0:	625a      	str	r2, [r3, #36]	; 0x24
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2253      	movs	r2, #83	; 0x53
 800a3a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fa45 	bl	800a83a <RTC_EnterInitMode>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d12c      	bne.n	800a414 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6812      	ldr	r2, [r2, #0]
 800a3c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3cc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6899      	ldr	r1, [r3, #8]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	430a      	orrs	r2, r1
 800a3ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	68d2      	ldr	r2, [r2, #12]
 800a3f4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6919      	ldr	r1, [r3, #16]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	041a      	lsls	r2, r3, #16
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fa4c 	bl	800a8a8 <RTC_ExitInitMode>
 800a410:	4603      	mov	r3, r0
 800a412:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d113      	bne.n	800a442 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a428:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	699a      	ldr	r2, [r3, #24]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	22ff      	movs	r2, #255	; 0xff
 800a448:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	7f1b      	ldrb	r3, [r3, #28]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d101      	bne.n	800a470 <HAL_RTC_SetTime+0x1c>
 800a46c:	2302      	movs	r3, #2
 800a46e:	e087      	b.n	800a580 <HAL_RTC_SetTime+0x12c>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2201      	movs	r2, #1
 800a474:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2202      	movs	r2, #2
 800a47a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d126      	bne.n	800a4d0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d102      	bne.n	800a496 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fa29 	bl	800a8f2 <RTC_ByteToBcd2>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	785b      	ldrb	r3, [r3, #1]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 fa22 	bl	800a8f2 <RTC_ByteToBcd2>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a4b2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	789b      	ldrb	r3, [r3, #2]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f000 fa1a 	bl	800a8f2 <RTC_ByteToBcd2>
 800a4be:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4c0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	78db      	ldrb	r3, [r3, #3]
 800a4c8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	e018      	b.n	800a502 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	785b      	ldrb	r3, [r3, #1]
 800a4ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a4f0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a4f6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	78db      	ldrb	r3, [r3, #3]
 800a4fc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	22ca      	movs	r2, #202	; 0xca
 800a508:	625a      	str	r2, [r3, #36]	; 0x24
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2253      	movs	r2, #83	; 0x53
 800a510:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 f991 	bl	800a83a <RTC_EnterInitMode>
 800a518:	4603      	mov	r3, r0
 800a51a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a51c:	7cfb      	ldrb	r3, [r7, #19]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d120      	bne.n	800a564 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a52c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a530:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a540:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6899      	ldr	r1, [r3, #8]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	431a      	orrs	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 f9a4 	bl	800a8a8 <RTC_ExitInitMode>
 800a560:	4603      	mov	r3, r0
 800a562:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a564:	7cfb      	ldrb	r3, [r7, #19]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d102      	bne.n	800a570 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	22ff      	movs	r2, #255	; 0xff
 800a576:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	771a      	strb	r2, [r3, #28]

  return status;
 800a57e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a580:	4618      	mov	r0, r3
 800a582:	371c      	adds	r7, #28
 800a584:	46bd      	mov	sp, r7
 800a586:	bd90      	pop	{r4, r7, pc}

0800a588 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a5ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a5be:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	0c1b      	lsrs	r3, r3, #16
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	0a1b      	lsrs	r3, r3, #8
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	0d9b      	lsrs	r3, r3, #22
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d11a      	bne.n	800a63a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 f98f 	bl	800a92c <RTC_Bcd2ToByte>
 800a60e:	4603      	mov	r3, r0
 800a610:	461a      	mov	r2, r3
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	785b      	ldrb	r3, [r3, #1]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f986 	bl	800a92c <RTC_Bcd2ToByte>
 800a620:	4603      	mov	r3, r0
 800a622:	461a      	mov	r2, r3
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	789b      	ldrb	r3, [r3, #2]
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 f97d 	bl	800a92c <RTC_Bcd2ToByte>
 800a632:	4603      	mov	r3, r0
 800a634:	461a      	mov	r2, r3
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3718      	adds	r7, #24
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a644:	b590      	push	{r4, r7, lr}
 800a646:	b087      	sub	sp, #28
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a650:	2300      	movs	r3, #0
 800a652:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	7f1b      	ldrb	r3, [r3, #28]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d101      	bne.n	800a660 <HAL_RTC_SetDate+0x1c>
 800a65c:	2302      	movs	r3, #2
 800a65e:	e071      	b.n	800a744 <HAL_RTC_SetDate+0x100>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2201      	movs	r2, #1
 800a664:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2202      	movs	r2, #2
 800a66a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10e      	bne.n	800a690 <HAL_RTC_SetDate+0x4c>
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	f003 0310 	and.w	r3, r3, #16
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d008      	beq.n	800a690 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	f023 0310 	bic.w	r3, r3, #16
 800a686:	b2db      	uxtb	r3, r3
 800a688:	330a      	adds	r3, #10
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d11c      	bne.n	800a6d0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	78db      	ldrb	r3, [r3, #3]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 f929 	bl	800a8f2 <RTC_ByteToBcd2>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	785b      	ldrb	r3, [r3, #1]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 f922 	bl	800a8f2 <RTC_ByteToBcd2>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6b2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	789b      	ldrb	r3, [r3, #2]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 f91a 	bl	800a8f2 <RTC_ByteToBcd2>
 800a6be:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a6c0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]
 800a6ce:	e00e      	b.n	800a6ee <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	78db      	ldrb	r3, [r3, #3]
 800a6d4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a6dc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a6e2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	22ca      	movs	r2, #202	; 0xca
 800a6f4:	625a      	str	r2, [r3, #36]	; 0x24
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2253      	movs	r2, #83	; 0x53
 800a6fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 f89b 	bl	800a83a <RTC_EnterInitMode>
 800a704:	4603      	mov	r3, r0
 800a706:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a708:	7cfb      	ldrb	r3, [r7, #19]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10c      	bne.n	800a728 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a718:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a71c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 f8c2 	bl	800a8a8 <RTC_ExitInitMode>
 800a724:	4603      	mov	r3, r0
 800a726:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a728:	7cfb      	ldrb	r3, [r7, #19]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	22ff      	movs	r2, #255	; 0xff
 800a73a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	771a      	strb	r2, [r3, #28]

  return status;
 800a742:	7cfb      	ldrb	r3, [r7, #19]
}
 800a744:	4618      	mov	r0, r3
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd90      	pop	{r4, r7, pc}

0800a74c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a758:	2300      	movs	r3, #0
 800a75a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a766:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a76a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	0c1b      	lsrs	r3, r3, #16
 800a770:	b2da      	uxtb	r2, r3
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	0a1b      	lsrs	r3, r3, #8
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 031f 	and.w	r3, r3, #31
 800a780:	b2da      	uxtb	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	0b5b      	lsrs	r3, r3, #13
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 0307 	and.w	r3, r3, #7
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d11a      	bne.n	800a7e0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	78db      	ldrb	r3, [r3, #3]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 f8bc 	bl	800a92c <RTC_Bcd2ToByte>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 f8b3 	bl	800a92c <RTC_Bcd2ToByte>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	789b      	ldrb	r3, [r3, #2]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 f8aa 	bl	800a92c <RTC_Bcd2ToByte>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b084      	sub	sp, #16
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68da      	ldr	r2, [r3, #12]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a804:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a806:	f7fa fe93 	bl	8005530 <HAL_GetTick>
 800a80a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a80c:	e009      	b.n	800a822 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a80e:	f7fa fe8f 	bl	8005530 <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a81c:	d901      	bls.n	800a822 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a81e:	2303      	movs	r3, #3
 800a820:	e007      	b.n	800a832 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68db      	ldr	r3, [r3, #12]
 800a828:	f003 0320 	and.w	r3, r3, #32
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0ee      	beq.n	800a80e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a854:	2b00      	cmp	r3, #0
 800a856:	d122      	bne.n	800a89e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a866:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a868:	f7fa fe62 	bl	8005530 <HAL_GetTick>
 800a86c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a86e:	e00c      	b.n	800a88a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a870:	f7fa fe5e 	bl	8005530 <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a87e:	d904      	bls.n	800a88a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2204      	movs	r2, #4
 800a884:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <RTC_EnterInitMode+0x64>
 800a898:	7bfb      	ldrb	r3, [r7, #15]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d1e8      	bne.n	800a870 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8c2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f003 0320 	and.w	r3, r3, #32
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d10a      	bne.n	800a8e8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff ff89 	bl	800a7ea <HAL_RTC_WaitForSynchro>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2204      	movs	r2, #4
 800a8e2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800a900:	e005      	b.n	800a90e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	3301      	adds	r3, #1
 800a906:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	3b0a      	subs	r3, #10
 800a90c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	2b09      	cmp	r3, #9
 800a912:	d8f6      	bhi.n	800a902 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a914:	7bfb      	ldrb	r3, [r7, #15]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	b2da      	uxtb	r2, r3
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	b2db      	uxtb	r3, r3
}
 800a920:	4618      	mov	r0, r3
 800a922:	3714      	adds	r7, #20
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	091b      	lsrs	r3, r3, #4
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	4413      	add	r3, r2
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a94a:	79fb      	ldrb	r3, [r7, #7]
 800a94c:	f003 030f 	and.w	r3, r3, #15
 800a950:	b2da      	uxtb	r2, r3
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	4413      	add	r3, r2
 800a956:	b2db      	uxtb	r3, r3
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e07b      	b.n	800aa6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d108      	bne.n	800a990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a986:	d009      	beq.n	800a99c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	61da      	str	r2, [r3, #28]
 800a98e:	e005      	b.n	800a99c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d106      	bne.n	800a9bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7f9 fe6a 	bl	8004690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a9e4:	431a      	orrs	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	f003 0302 	and.w	r3, r3, #2
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	431a      	orrs	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa0c:	431a      	orrs	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa16:	431a      	orrs	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa20:	ea42 0103 	orr.w	r1, r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	430a      	orrs	r2, r1
 800aa32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	0c1b      	lsrs	r3, r3, #16
 800aa3a:	f003 0104 	and.w	r1, r3, #4
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa42:	f003 0210 	and.w	r2, r3, #16
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	69da      	ldr	r2, [r3, #28]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800aa6c:	2300      	movs	r3, #0
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e041      	b.n	800ab0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d106      	bne.n	800aaa2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7f9 fe3f 	bl	8004720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	3304      	adds	r3, #4
 800aab2:	4619      	mov	r1, r3
 800aab4:	4610      	mov	r0, r2
 800aab6:	f000 fcc7 	bl	800b448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d001      	beq.n	800ab2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e04e      	b.n	800abca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2202      	movs	r2, #2
 800ab30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0201 	orr.w	r2, r2, #1
 800ab42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a23      	ldr	r2, [pc, #140]	; (800abd8 <HAL_TIM_Base_Start_IT+0xc4>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d022      	beq.n	800ab94 <HAL_TIM_Base_Start_IT+0x80>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab56:	d01d      	beq.n	800ab94 <HAL_TIM_Base_Start_IT+0x80>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a1f      	ldr	r2, [pc, #124]	; (800abdc <HAL_TIM_Base_Start_IT+0xc8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d018      	beq.n	800ab94 <HAL_TIM_Base_Start_IT+0x80>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a1e      	ldr	r2, [pc, #120]	; (800abe0 <HAL_TIM_Base_Start_IT+0xcc>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d013      	beq.n	800ab94 <HAL_TIM_Base_Start_IT+0x80>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a1c      	ldr	r2, [pc, #112]	; (800abe4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00e      	beq.n	800ab94 <HAL_TIM_Base_Start_IT+0x80>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a1b      	ldr	r2, [pc, #108]	; (800abe8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d009      	beq.n	800ab94 <HAL_TIM_Base_Start_IT+0x80>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a19      	ldr	r2, [pc, #100]	; (800abec <HAL_TIM_Base_Start_IT+0xd8>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d004      	beq.n	800ab94 <HAL_TIM_Base_Start_IT+0x80>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a18      	ldr	r2, [pc, #96]	; (800abf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d111      	bne.n	800abb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b06      	cmp	r3, #6
 800aba4:	d010      	beq.n	800abc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f042 0201 	orr.w	r2, r2, #1
 800abb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb6:	e007      	b.n	800abc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f042 0201 	orr.w	r2, r2, #1
 800abc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3714      	adds	r7, #20
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	40010000 	.word	0x40010000
 800abdc:	40000400 	.word	0x40000400
 800abe0:	40000800 	.word	0x40000800
 800abe4:	40000c00 	.word	0x40000c00
 800abe8:	40010400 	.word	0x40010400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40001800 	.word	0x40001800

0800abf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b082      	sub	sp, #8
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e041      	b.n	800ac8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d106      	bne.n	800ac20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f839 	bl	800ac92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4610      	mov	r0, r2
 800ac34:	f000 fc08 	bl	800b448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac9a:	bf00      	nop
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr
	...

0800aca8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d109      	bne.n	800acd0 <HAL_TIM_PWM_Start_IT+0x28>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	bf14      	ite	ne
 800acc8:	2301      	movne	r3, #1
 800acca:	2300      	moveq	r3, #0
 800accc:	b2db      	uxtb	r3, r3
 800acce:	e022      	b.n	800ad16 <HAL_TIM_PWM_Start_IT+0x6e>
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	2b04      	cmp	r3, #4
 800acd4:	d109      	bne.n	800acea <HAL_TIM_PWM_Start_IT+0x42>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b01      	cmp	r3, #1
 800ace0:	bf14      	ite	ne
 800ace2:	2301      	movne	r3, #1
 800ace4:	2300      	moveq	r3, #0
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	e015      	b.n	800ad16 <HAL_TIM_PWM_Start_IT+0x6e>
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2b08      	cmp	r3, #8
 800acee:	d109      	bne.n	800ad04 <HAL_TIM_PWM_Start_IT+0x5c>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	bf14      	ite	ne
 800acfc:	2301      	movne	r3, #1
 800acfe:	2300      	moveq	r3, #0
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	e008      	b.n	800ad16 <HAL_TIM_PWM_Start_IT+0x6e>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	bf14      	ite	ne
 800ad10:	2301      	movne	r3, #1
 800ad12:	2300      	moveq	r3, #0
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e0c7      	b.n	800aeae <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d104      	bne.n	800ad2e <HAL_TIM_PWM_Start_IT+0x86>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2202      	movs	r2, #2
 800ad28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad2c:	e013      	b.n	800ad56 <HAL_TIM_PWM_Start_IT+0xae>
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	2b04      	cmp	r3, #4
 800ad32:	d104      	bne.n	800ad3e <HAL_TIM_PWM_Start_IT+0x96>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2202      	movs	r2, #2
 800ad38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad3c:	e00b      	b.n	800ad56 <HAL_TIM_PWM_Start_IT+0xae>
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b08      	cmp	r3, #8
 800ad42:	d104      	bne.n	800ad4e <HAL_TIM_PWM_Start_IT+0xa6>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2202      	movs	r2, #2
 800ad48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad4c:	e003      	b.n	800ad56 <HAL_TIM_PWM_Start_IT+0xae>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2202      	movs	r2, #2
 800ad52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	2b0c      	cmp	r3, #12
 800ad5a:	d841      	bhi.n	800ade0 <HAL_TIM_PWM_Start_IT+0x138>
 800ad5c:	a201      	add	r2, pc, #4	; (adr r2, 800ad64 <HAL_TIM_PWM_Start_IT+0xbc>)
 800ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad62:	bf00      	nop
 800ad64:	0800ad99 	.word	0x0800ad99
 800ad68:	0800ade1 	.word	0x0800ade1
 800ad6c:	0800ade1 	.word	0x0800ade1
 800ad70:	0800ade1 	.word	0x0800ade1
 800ad74:	0800adab 	.word	0x0800adab
 800ad78:	0800ade1 	.word	0x0800ade1
 800ad7c:	0800ade1 	.word	0x0800ade1
 800ad80:	0800ade1 	.word	0x0800ade1
 800ad84:	0800adbd 	.word	0x0800adbd
 800ad88:	0800ade1 	.word	0x0800ade1
 800ad8c:	0800ade1 	.word	0x0800ade1
 800ad90:	0800ade1 	.word	0x0800ade1
 800ad94:	0800adcf 	.word	0x0800adcf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68da      	ldr	r2, [r3, #12]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f042 0202 	orr.w	r2, r2, #2
 800ada6:	60da      	str	r2, [r3, #12]
      break;
 800ada8:	e01d      	b.n	800ade6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f042 0204 	orr.w	r2, r2, #4
 800adb8:	60da      	str	r2, [r3, #12]
      break;
 800adba:	e014      	b.n	800ade6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68da      	ldr	r2, [r3, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f042 0208 	orr.w	r2, r2, #8
 800adca:	60da      	str	r2, [r3, #12]
      break;
 800adcc:	e00b      	b.n	800ade6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68da      	ldr	r2, [r3, #12]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f042 0210 	orr.w	r2, r2, #16
 800addc:	60da      	str	r2, [r3, #12]
      break;
 800adde:	e002      	b.n	800ade6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	73fb      	strb	r3, [r7, #15]
      break;
 800ade4:	bf00      	nop
  }

  if (status == HAL_OK)
 800ade6:	7bfb      	ldrb	r3, [r7, #15]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d15f      	bne.n	800aeac <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2201      	movs	r2, #1
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fe11 	bl	800ba1c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a2e      	ldr	r2, [pc, #184]	; (800aeb8 <HAL_TIM_PWM_Start_IT+0x210>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d004      	beq.n	800ae0e <HAL_TIM_PWM_Start_IT+0x166>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a2c      	ldr	r2, [pc, #176]	; (800aebc <HAL_TIM_PWM_Start_IT+0x214>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d101      	bne.n	800ae12 <HAL_TIM_PWM_Start_IT+0x16a>
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e000      	b.n	800ae14 <HAL_TIM_PWM_Start_IT+0x16c>
 800ae12:	2300      	movs	r3, #0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d007      	beq.n	800ae28 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a22      	ldr	r2, [pc, #136]	; (800aeb8 <HAL_TIM_PWM_Start_IT+0x210>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d022      	beq.n	800ae78 <HAL_TIM_PWM_Start_IT+0x1d0>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae3a:	d01d      	beq.n	800ae78 <HAL_TIM_PWM_Start_IT+0x1d0>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a1f      	ldr	r2, [pc, #124]	; (800aec0 <HAL_TIM_PWM_Start_IT+0x218>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d018      	beq.n	800ae78 <HAL_TIM_PWM_Start_IT+0x1d0>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a1e      	ldr	r2, [pc, #120]	; (800aec4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d013      	beq.n	800ae78 <HAL_TIM_PWM_Start_IT+0x1d0>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a1c      	ldr	r2, [pc, #112]	; (800aec8 <HAL_TIM_PWM_Start_IT+0x220>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d00e      	beq.n	800ae78 <HAL_TIM_PWM_Start_IT+0x1d0>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a17      	ldr	r2, [pc, #92]	; (800aebc <HAL_TIM_PWM_Start_IT+0x214>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d009      	beq.n	800ae78 <HAL_TIM_PWM_Start_IT+0x1d0>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	4a18      	ldr	r2, [pc, #96]	; (800aecc <HAL_TIM_PWM_Start_IT+0x224>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d004      	beq.n	800ae78 <HAL_TIM_PWM_Start_IT+0x1d0>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a17      	ldr	r2, [pc, #92]	; (800aed0 <HAL_TIM_PWM_Start_IT+0x228>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d111      	bne.n	800ae9c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	2b06      	cmp	r3, #6
 800ae88:	d010      	beq.n	800aeac <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f042 0201 	orr.w	r2, r2, #1
 800ae98:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae9a:	e007      	b.n	800aeac <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0201 	orr.w	r2, r2, #1
 800aeaa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	40010000 	.word	0x40010000
 800aebc:	40010400 	.word	0x40010400
 800aec0:	40000400 	.word	0x40000400
 800aec4:	40000800 	.word	0x40000800
 800aec8:	40000c00 	.word	0x40000c00
 800aecc:	40014000 	.word	0x40014000
 800aed0:	40001800 	.word	0x40001800

0800aed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d122      	bne.n	800af30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d11b      	bne.n	800af30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f06f 0202 	mvn.w	r2, #2
 800af00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	f003 0303 	and.w	r3, r3, #3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fa77 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
 800af1c:	e005      	b.n	800af2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fa69 	bl	800b3f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fa7a 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f003 0304 	and.w	r3, r3, #4
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d122      	bne.n	800af84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b04      	cmp	r3, #4
 800af4a:	d11b      	bne.n	800af84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f06f 0204 	mvn.w	r2, #4
 800af54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2202      	movs	r2, #2
 800af5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af66:	2b00      	cmp	r3, #0
 800af68:	d003      	beq.n	800af72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fa4d 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
 800af70:	e005      	b.n	800af7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fa3f 	bl	800b3f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 fa50 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	f003 0308 	and.w	r3, r3, #8
 800af8e:	2b08      	cmp	r3, #8
 800af90:	d122      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	f003 0308 	and.w	r3, r3, #8
 800af9c:	2b08      	cmp	r3, #8
 800af9e:	d11b      	bne.n	800afd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f06f 0208 	mvn.w	r2, #8
 800afa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2204      	movs	r2, #4
 800afae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	f003 0303 	and.w	r3, r3, #3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fa23 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
 800afc4:	e005      	b.n	800afd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fa15 	bl	800b3f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fa26 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	f003 0310 	and.w	r3, r3, #16
 800afe2:	2b10      	cmp	r3, #16
 800afe4:	d122      	bne.n	800b02c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f003 0310 	and.w	r3, r3, #16
 800aff0:	2b10      	cmp	r3, #16
 800aff2:	d11b      	bne.n	800b02c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f06f 0210 	mvn.w	r2, #16
 800affc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2208      	movs	r2, #8
 800b002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	69db      	ldr	r3, [r3, #28]
 800b00a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9f9 	bl	800b40a <HAL_TIM_IC_CaptureCallback>
 800b018:	e005      	b.n	800b026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f9eb 	bl	800b3f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 f9fc 	bl	800b41e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b01      	cmp	r3, #1
 800b038:	d10e      	bne.n	800b058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b01      	cmp	r3, #1
 800b046:	d107      	bne.n	800b058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f06f 0201 	mvn.w	r2, #1
 800b050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f7f9 fa1c 	bl	8004490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	691b      	ldr	r3, [r3, #16]
 800b05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b062:	2b80      	cmp	r3, #128	; 0x80
 800b064:	d10e      	bne.n	800b084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b070:	2b80      	cmp	r3, #128	; 0x80
 800b072:	d107      	bne.n	800b084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b07c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fd78 	bl	800bb74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b08e:	2b40      	cmp	r3, #64	; 0x40
 800b090:	d10e      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b09c:	2b40      	cmp	r3, #64	; 0x40
 800b09e:	d107      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 f9c1 	bl	800b432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f003 0320 	and.w	r3, r3, #32
 800b0ba:	2b20      	cmp	r3, #32
 800b0bc:	d10e      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f003 0320 	and.w	r3, r3, #32
 800b0c8:	2b20      	cmp	r3, #32
 800b0ca:	d107      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f06f 0220 	mvn.w	r2, #32
 800b0d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fd42 	bl	800bb60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d101      	bne.n	800b102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e0ae      	b.n	800b260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2201      	movs	r2, #1
 800b106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2b0c      	cmp	r3, #12
 800b10e:	f200 809f 	bhi.w	800b250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b112:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b14d 	.word	0x0800b14d
 800b11c:	0800b251 	.word	0x0800b251
 800b120:	0800b251 	.word	0x0800b251
 800b124:	0800b251 	.word	0x0800b251
 800b128:	0800b18d 	.word	0x0800b18d
 800b12c:	0800b251 	.word	0x0800b251
 800b130:	0800b251 	.word	0x0800b251
 800b134:	0800b251 	.word	0x0800b251
 800b138:	0800b1cf 	.word	0x0800b1cf
 800b13c:	0800b251 	.word	0x0800b251
 800b140:	0800b251 	.word	0x0800b251
 800b144:	0800b251 	.word	0x0800b251
 800b148:	0800b20f 	.word	0x0800b20f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	68b9      	ldr	r1, [r7, #8]
 800b152:	4618      	mov	r0, r3
 800b154:	f000 fa18 	bl	800b588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	699a      	ldr	r2, [r3, #24]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f042 0208 	orr.w	r2, r2, #8
 800b166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	699a      	ldr	r2, [r3, #24]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f022 0204 	bic.w	r2, r2, #4
 800b176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	6999      	ldr	r1, [r3, #24]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	691a      	ldr	r2, [r3, #16]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	619a      	str	r2, [r3, #24]
      break;
 800b18a:	e064      	b.n	800b256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68b9      	ldr	r1, [r7, #8]
 800b192:	4618      	mov	r0, r3
 800b194:	f000 fa68 	bl	800b668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	699a      	ldr	r2, [r3, #24]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b1a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	699a      	ldr	r2, [r3, #24]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	6999      	ldr	r1, [r3, #24]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	021a      	lsls	r2, r3, #8
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	619a      	str	r2, [r3, #24]
      break;
 800b1cc:	e043      	b.n	800b256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68b9      	ldr	r1, [r7, #8]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 fabd 	bl	800b754 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	69da      	ldr	r2, [r3, #28]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f042 0208 	orr.w	r2, r2, #8
 800b1e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	69da      	ldr	r2, [r3, #28]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f022 0204 	bic.w	r2, r2, #4
 800b1f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	69d9      	ldr	r1, [r3, #28]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	691a      	ldr	r2, [r3, #16]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	430a      	orrs	r2, r1
 800b20a:	61da      	str	r2, [r3, #28]
      break;
 800b20c:	e023      	b.n	800b256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68b9      	ldr	r1, [r7, #8]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 fb11 	bl	800b83c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69da      	ldr	r2, [r3, #28]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	69da      	ldr	r2, [r3, #28]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	69d9      	ldr	r1, [r3, #28]
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	021a      	lsls	r2, r3, #8
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	61da      	str	r2, [r3, #28]
      break;
 800b24e:	e002      	b.n	800b256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	75fb      	strb	r3, [r7, #23]
      break;
 800b254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d101      	bne.n	800b284 <HAL_TIM_ConfigClockSource+0x1c>
 800b280:	2302      	movs	r3, #2
 800b282:	e0b4      	b.n	800b3ee <HAL_TIM_ConfigClockSource+0x186>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2202      	movs	r2, #2
 800b290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b2a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b2aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2bc:	d03e      	beq.n	800b33c <HAL_TIM_ConfigClockSource+0xd4>
 800b2be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2c2:	f200 8087 	bhi.w	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ca:	f000 8086 	beq.w	800b3da <HAL_TIM_ConfigClockSource+0x172>
 800b2ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2d2:	d87f      	bhi.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2d4:	2b70      	cmp	r3, #112	; 0x70
 800b2d6:	d01a      	beq.n	800b30e <HAL_TIM_ConfigClockSource+0xa6>
 800b2d8:	2b70      	cmp	r3, #112	; 0x70
 800b2da:	d87b      	bhi.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2dc:	2b60      	cmp	r3, #96	; 0x60
 800b2de:	d050      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x11a>
 800b2e0:	2b60      	cmp	r3, #96	; 0x60
 800b2e2:	d877      	bhi.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e4:	2b50      	cmp	r3, #80	; 0x50
 800b2e6:	d03c      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0xfa>
 800b2e8:	2b50      	cmp	r3, #80	; 0x50
 800b2ea:	d873      	bhi.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2ec:	2b40      	cmp	r3, #64	; 0x40
 800b2ee:	d058      	beq.n	800b3a2 <HAL_TIM_ConfigClockSource+0x13a>
 800b2f0:	2b40      	cmp	r3, #64	; 0x40
 800b2f2:	d86f      	bhi.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f4:	2b30      	cmp	r3, #48	; 0x30
 800b2f6:	d064      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b2f8:	2b30      	cmp	r3, #48	; 0x30
 800b2fa:	d86b      	bhi.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2fc:	2b20      	cmp	r3, #32
 800b2fe:	d060      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b300:	2b20      	cmp	r3, #32
 800b302:	d867      	bhi.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b304:	2b00      	cmp	r3, #0
 800b306:	d05c      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b308:	2b10      	cmp	r3, #16
 800b30a:	d05a      	beq.n	800b3c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b30c:	e062      	b.n	800b3d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	6899      	ldr	r1, [r3, #8]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	f000 fb5d 	bl	800b9dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	609a      	str	r2, [r3, #8]
      break;
 800b33a:	e04f      	b.n	800b3dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6818      	ldr	r0, [r3, #0]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	6899      	ldr	r1, [r3, #8]
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	685a      	ldr	r2, [r3, #4]
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f000 fb46 	bl	800b9dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689a      	ldr	r2, [r3, #8]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b35e:	609a      	str	r2, [r3, #8]
      break;
 800b360:	e03c      	b.n	800b3dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6818      	ldr	r0, [r3, #0]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	6859      	ldr	r1, [r3, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	68db      	ldr	r3, [r3, #12]
 800b36e:	461a      	mov	r2, r3
 800b370:	f000 faba 	bl	800b8e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2150      	movs	r1, #80	; 0x50
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fb13 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800b380:	e02c      	b.n	800b3dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	6859      	ldr	r1, [r3, #4]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	461a      	mov	r2, r3
 800b390:	f000 fad9 	bl	800b946 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2160      	movs	r1, #96	; 0x60
 800b39a:	4618      	mov	r0, r3
 800b39c:	f000 fb03 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800b3a0:	e01c      	b.n	800b3dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6818      	ldr	r0, [r3, #0]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	6859      	ldr	r1, [r3, #4]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f000 fa9a 	bl	800b8e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2140      	movs	r1, #64	; 0x40
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f000 faf3 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800b3c0:	e00c      	b.n	800b3dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4610      	mov	r0, r2
 800b3ce:	f000 faea 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800b3d2:	e003      	b.n	800b3dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b3d8:	e000      	b.n	800b3dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3fe:	bf00      	nop
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b083      	sub	sp, #12
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b412:	bf00      	nop
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b41e:	b480      	push	{r7}
 800b420:	b083      	sub	sp, #12
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b426:	bf00      	nop
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b43a:	bf00      	nop
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
	...

0800b448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a40      	ldr	r2, [pc, #256]	; (800b55c <TIM_Base_SetConfig+0x114>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d013      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b466:	d00f      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	4a3d      	ldr	r2, [pc, #244]	; (800b560 <TIM_Base_SetConfig+0x118>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d00b      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a3c      	ldr	r2, [pc, #240]	; (800b564 <TIM_Base_SetConfig+0x11c>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d007      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a3b      	ldr	r2, [pc, #236]	; (800b568 <TIM_Base_SetConfig+0x120>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d003      	beq.n	800b488 <TIM_Base_SetConfig+0x40>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a3a      	ldr	r2, [pc, #232]	; (800b56c <TIM_Base_SetConfig+0x124>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d108      	bne.n	800b49a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b48e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a2f      	ldr	r2, [pc, #188]	; (800b55c <TIM_Base_SetConfig+0x114>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d02b      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4a8:	d027      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a2c      	ldr	r2, [pc, #176]	; (800b560 <TIM_Base_SetConfig+0x118>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d023      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a2b      	ldr	r2, [pc, #172]	; (800b564 <TIM_Base_SetConfig+0x11c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d01f      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4a2a      	ldr	r2, [pc, #168]	; (800b568 <TIM_Base_SetConfig+0x120>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d01b      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a29      	ldr	r2, [pc, #164]	; (800b56c <TIM_Base_SetConfig+0x124>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d017      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a28      	ldr	r2, [pc, #160]	; (800b570 <TIM_Base_SetConfig+0x128>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d013      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a27      	ldr	r2, [pc, #156]	; (800b574 <TIM_Base_SetConfig+0x12c>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d00f      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a26      	ldr	r2, [pc, #152]	; (800b578 <TIM_Base_SetConfig+0x130>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00b      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a25      	ldr	r2, [pc, #148]	; (800b57c <TIM_Base_SetConfig+0x134>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d007      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a24      	ldr	r2, [pc, #144]	; (800b580 <TIM_Base_SetConfig+0x138>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d003      	beq.n	800b4fa <TIM_Base_SetConfig+0xb2>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a23      	ldr	r2, [pc, #140]	; (800b584 <TIM_Base_SetConfig+0x13c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d108      	bne.n	800b50c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a0a      	ldr	r2, [pc, #40]	; (800b55c <TIM_Base_SetConfig+0x114>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d003      	beq.n	800b540 <TIM_Base_SetConfig+0xf8>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a0c      	ldr	r2, [pc, #48]	; (800b56c <TIM_Base_SetConfig+0x124>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d103      	bne.n	800b548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	691a      	ldr	r2, [r3, #16]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	615a      	str	r2, [r3, #20]
}
 800b54e:	bf00      	nop
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	40010000 	.word	0x40010000
 800b560:	40000400 	.word	0x40000400
 800b564:	40000800 	.word	0x40000800
 800b568:	40000c00 	.word	0x40000c00
 800b56c:	40010400 	.word	0x40010400
 800b570:	40014000 	.word	0x40014000
 800b574:	40014400 	.word	0x40014400
 800b578:	40014800 	.word	0x40014800
 800b57c:	40001800 	.word	0x40001800
 800b580:	40001c00 	.word	0x40001c00
 800b584:	40002000 	.word	0x40002000

0800b588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b588:	b480      	push	{r7}
 800b58a:	b087      	sub	sp, #28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	f023 0201 	bic.w	r2, r3, #1
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a1b      	ldr	r3, [r3, #32]
 800b5a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	699b      	ldr	r3, [r3, #24]
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f023 0303 	bic.w	r3, r3, #3
 800b5be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	f023 0302 	bic.w	r3, r3, #2
 800b5d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a20      	ldr	r2, [pc, #128]	; (800b660 <TIM_OC1_SetConfig+0xd8>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d003      	beq.n	800b5ec <TIM_OC1_SetConfig+0x64>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a1f      	ldr	r2, [pc, #124]	; (800b664 <TIM_OC1_SetConfig+0xdc>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d10c      	bne.n	800b606 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f023 0308 	bic.w	r3, r3, #8
 800b5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f023 0304 	bic.w	r3, r3, #4
 800b604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a15      	ldr	r2, [pc, #84]	; (800b660 <TIM_OC1_SetConfig+0xd8>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d003      	beq.n	800b616 <TIM_OC1_SetConfig+0x8e>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a14      	ldr	r2, [pc, #80]	; (800b664 <TIM_OC1_SetConfig+0xdc>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d111      	bne.n	800b63a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b61c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	695b      	ldr	r3, [r3, #20]
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	699b      	ldr	r3, [r3, #24]
 800b634:	693a      	ldr	r2, [r7, #16]
 800b636:	4313      	orrs	r3, r2
 800b638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	685a      	ldr	r2, [r3, #4]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	621a      	str	r2, [r3, #32]
}
 800b654:	bf00      	nop
 800b656:	371c      	adds	r7, #28
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	40010000 	.word	0x40010000
 800b664:	40010400 	.word	0x40010400

0800b668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b668:	b480      	push	{r7}
 800b66a:	b087      	sub	sp, #28
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	f023 0210 	bic.w	r2, r3, #16
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	021b      	lsls	r3, r3, #8
 800b6a6:	68fa      	ldr	r2, [r7, #12]
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f023 0320 	bic.w	r3, r3, #32
 800b6b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	011b      	lsls	r3, r3, #4
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a22      	ldr	r2, [pc, #136]	; (800b74c <TIM_OC2_SetConfig+0xe4>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d003      	beq.n	800b6d0 <TIM_OC2_SetConfig+0x68>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a21      	ldr	r2, [pc, #132]	; (800b750 <TIM_OC2_SetConfig+0xe8>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d10d      	bne.n	800b6ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	011b      	lsls	r3, r3, #4
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a17      	ldr	r2, [pc, #92]	; (800b74c <TIM_OC2_SetConfig+0xe4>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d003      	beq.n	800b6fc <TIM_OC2_SetConfig+0x94>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a16      	ldr	r2, [pc, #88]	; (800b750 <TIM_OC2_SetConfig+0xe8>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d113      	bne.n	800b724 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b70a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	4313      	orrs	r3, r2
 800b716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	621a      	str	r2, [r3, #32]
}
 800b73e:	bf00      	nop
 800b740:	371c      	adds	r7, #28
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	40010000 	.word	0x40010000
 800b750:	40010400 	.word	0x40010400

0800b754 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b754:	b480      	push	{r7}
 800b756:	b087      	sub	sp, #28
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f023 0303 	bic.w	r3, r3, #3
 800b78a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4313      	orrs	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b79c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a21      	ldr	r2, [pc, #132]	; (800b834 <TIM_OC3_SetConfig+0xe0>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d003      	beq.n	800b7ba <TIM_OC3_SetConfig+0x66>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a20      	ldr	r2, [pc, #128]	; (800b838 <TIM_OC3_SetConfig+0xe4>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d10d      	bne.n	800b7d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a16      	ldr	r2, [pc, #88]	; (800b834 <TIM_OC3_SetConfig+0xe0>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d003      	beq.n	800b7e6 <TIM_OC3_SetConfig+0x92>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a15      	ldr	r2, [pc, #84]	; (800b838 <TIM_OC3_SetConfig+0xe4>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d113      	bne.n	800b80e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	011b      	lsls	r3, r3, #4
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	697a      	ldr	r2, [r7, #20]
 800b826:	621a      	str	r2, [r3, #32]
}
 800b828:	bf00      	nop
 800b82a:	371c      	adds	r7, #28
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	40010000 	.word	0x40010000
 800b838:	40010400 	.word	0x40010400

0800b83c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b087      	sub	sp, #28
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6a1b      	ldr	r3, [r3, #32]
 800b84a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	031b      	lsls	r3, r3, #12
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	4313      	orrs	r3, r2
 800b892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a12      	ldr	r2, [pc, #72]	; (800b8e0 <TIM_OC4_SetConfig+0xa4>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d003      	beq.n	800b8a4 <TIM_OC4_SetConfig+0x68>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a11      	ldr	r2, [pc, #68]	; (800b8e4 <TIM_OC4_SetConfig+0xa8>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d109      	bne.n	800b8b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	019b      	lsls	r3, r3, #6
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	697a      	ldr	r2, [r7, #20]
 800b8bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	621a      	str	r2, [r3, #32]
}
 800b8d2:	bf00      	nop
 800b8d4:	371c      	adds	r7, #28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	40010000 	.word	0x40010000
 800b8e4:	40010400 	.word	0x40010400

0800b8e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b087      	sub	sp, #28
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	f023 0201 	bic.w	r2, r3, #1
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	011b      	lsls	r3, r3, #4
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f023 030a 	bic.w	r3, r3, #10
 800b924:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	621a      	str	r2, [r3, #32]
}
 800b93a:	bf00      	nop
 800b93c:	371c      	adds	r7, #28
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b946:	b480      	push	{r7}
 800b948:	b087      	sub	sp, #28
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	60f8      	str	r0, [r7, #12]
 800b94e:	60b9      	str	r1, [r7, #8]
 800b950:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	f023 0210 	bic.w	r2, r3, #16
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b970:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	031b      	lsls	r3, r3, #12
 800b976:	697a      	ldr	r2, [r7, #20]
 800b978:	4313      	orrs	r3, r2
 800b97a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b982:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	011b      	lsls	r3, r3, #4
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	621a      	str	r2, [r3, #32]
}
 800b99a:	bf00      	nop
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	f043 0307 	orr.w	r3, r3, #7
 800b9c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	609a      	str	r2, [r3, #8]
}
 800b9d0:	bf00      	nop
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	021a      	lsls	r2, r3, #8
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	609a      	str	r2, [r3, #8]
}
 800ba10:	bf00      	nop
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f003 031f 	and.w	r3, r3, #31
 800ba2e:	2201      	movs	r2, #1
 800ba30:	fa02 f303 	lsl.w	r3, r2, r3
 800ba34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6a1a      	ldr	r2, [r3, #32]
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	43db      	mvns	r3, r3
 800ba3e:	401a      	ands	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6a1a      	ldr	r2, [r3, #32]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f003 031f 	and.w	r3, r3, #31
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	fa01 f303 	lsl.w	r3, r1, r3
 800ba54:	431a      	orrs	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	621a      	str	r2, [r3, #32]
}
 800ba5a:	bf00      	nop
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
	...

0800ba68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e05a      	b.n	800bb36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baa6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	4313      	orrs	r3, r2
 800bab0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a21      	ldr	r2, [pc, #132]	; (800bb44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d022      	beq.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bacc:	d01d      	beq.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a1d      	ldr	r2, [pc, #116]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d018      	beq.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a1b      	ldr	r2, [pc, #108]	; (800bb4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d013      	beq.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a1a      	ldr	r2, [pc, #104]	; (800bb50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d00e      	beq.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a18      	ldr	r2, [pc, #96]	; (800bb54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d009      	beq.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a17      	ldr	r2, [pc, #92]	; (800bb58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d004      	beq.n	800bb0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a15      	ldr	r2, [pc, #84]	; (800bb5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d10c      	bne.n	800bb24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	40010000 	.word	0x40010000
 800bb48:	40000400 	.word	0x40000400
 800bb4c:	40000800 	.word	0x40000800
 800bb50:	40000c00 	.word	0x40000c00
 800bb54:	40010400 	.word	0x40010400
 800bb58:	40014000 	.word	0x40014000
 800bb5c:	40001800 	.word	0x40001800

0800bb60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb68:	bf00      	nop
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d101      	bne.n	800bb9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	e03f      	b.n	800bc1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f7f8 fe12 	bl	80047d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2224      	movs	r2, #36	; 0x24
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68da      	ldr	r2, [r3, #12]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bbca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fdef 	bl	800c7b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	691a      	ldr	r2, [r3, #16]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	695a      	ldr	r2, [r3, #20]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	68da      	ldr	r2, [r3, #12]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2200      	movs	r2, #0
 800bc06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b08a      	sub	sp, #40	; 0x28
 800bc26:	af02      	add	r7, sp, #8
 800bc28:	60f8      	str	r0, [r7, #12]
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	603b      	str	r3, [r7, #0]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bc32:	2300      	movs	r3, #0
 800bc34:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	2b20      	cmp	r3, #32
 800bc40:	f040 808c 	bne.w	800bd5c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d002      	beq.n	800bc50 <HAL_UART_Receive+0x2e>
 800bc4a:	88fb      	ldrh	r3, [r7, #6]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d101      	bne.n	800bc54 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	e084      	b.n	800bd5e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d101      	bne.n	800bc62 <HAL_UART_Receive+0x40>
 800bc5e:	2302      	movs	r3, #2
 800bc60:	e07d      	b.n	800bd5e <HAL_UART_Receive+0x13c>
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2222      	movs	r2, #34	; 0x22
 800bc74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc7e:	f7f9 fc57 	bl	8005530 <HAL_GetTick>
 800bc82:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	88fa      	ldrh	r2, [r7, #6]
 800bc88:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	88fa      	ldrh	r2, [r7, #6]
 800bc8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc98:	d108      	bne.n	800bcac <HAL_UART_Receive+0x8a>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d104      	bne.n	800bcac <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800bca2:	2300      	movs	r3, #0
 800bca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	61bb      	str	r3, [r7, #24]
 800bcaa:	e003      	b.n	800bcb4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bcbc:	e043      	b.n	800bd46 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2120      	movs	r1, #32
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f000 fb2b 	bl	800c324 <UART_WaitOnFlagUntilTimeout>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d001      	beq.n	800bcd8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e042      	b.n	800bd5e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10c      	bne.n	800bcf8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	3302      	adds	r3, #2
 800bcf4:	61bb      	str	r3, [r7, #24]
 800bcf6:	e01f      	b.n	800bd38 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd00:	d007      	beq.n	800bd12 <HAL_UART_Receive+0xf0>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10a      	bne.n	800bd20 <HAL_UART_Receive+0xfe>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d106      	bne.n	800bd20 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	701a      	strb	r2, [r3, #0]
 800bd1e:	e008      	b.n	800bd32 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	3301      	adds	r3, #1
 800bd36:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1b6      	bne.n	800bcbe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2220      	movs	r2, #32
 800bd54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	e000      	b.n	800bd5e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800bd5c:	2302      	movs	r3, #2
  }
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3720      	adds	r7, #32
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd66:	b580      	push	{r7, lr}
 800bd68:	b084      	sub	sp, #16
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	4613      	mov	r3, r2
 800bd72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	2b20      	cmp	r3, #32
 800bd7e:	d11d      	bne.n	800bdbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <HAL_UART_Receive_IT+0x26>
 800bd86:	88fb      	ldrh	r3, [r7, #6]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d101      	bne.n	800bd90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e016      	b.n	800bdbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d101      	bne.n	800bd9e <HAL_UART_Receive_IT+0x38>
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	e00f      	b.n	800bdbe <HAL_UART_Receive_IT+0x58>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bdac:	88fb      	ldrh	r3, [r7, #6]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	68b9      	ldr	r1, [r7, #8]
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fb24 	bl	800c400 <UART_Start_Receive_IT>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	e000      	b.n	800bdbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bdbc:	2302      	movs	r3, #2
  }
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
	...

0800bdc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b0ba      	sub	sp, #232	; 0xe8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bdfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdfe:	f003 030f 	and.w	r3, r3, #15
 800be02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800be06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10f      	bne.n	800be2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be12:	f003 0320 	and.w	r3, r3, #32
 800be16:	2b00      	cmp	r3, #0
 800be18:	d009      	beq.n	800be2e <HAL_UART_IRQHandler+0x66>
 800be1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be1e:	f003 0320 	and.w	r3, r3, #32
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fc07 	bl	800c63a <UART_Receive_IT>
      return;
 800be2c:	e256      	b.n	800c2dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 80de 	beq.w	800bff4 <HAL_UART_IRQHandler+0x22c>
 800be38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	2b00      	cmp	r3, #0
 800be42:	d106      	bne.n	800be52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 80d1 	beq.w	800bff4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800be52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00b      	beq.n	800be76 <HAL_UART_IRQHandler+0xae>
 800be5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be66:	2b00      	cmp	r3, #0
 800be68:	d005      	beq.n	800be76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6e:	f043 0201 	orr.w	r2, r3, #1
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7a:	f003 0304 	and.w	r3, r3, #4
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00b      	beq.n	800be9a <HAL_UART_IRQHandler+0xd2>
 800be82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d005      	beq.n	800be9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be92:	f043 0202 	orr.w	r2, r3, #2
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9e:	f003 0302 	and.w	r3, r3, #2
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d00b      	beq.n	800bebe <HAL_UART_IRQHandler+0xf6>
 800bea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beaa:	f003 0301 	and.w	r3, r3, #1
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d005      	beq.n	800bebe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb6:	f043 0204 	orr.w	r2, r3, #4
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec2:	f003 0308 	and.w	r3, r3, #8
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d011      	beq.n	800beee <HAL_UART_IRQHandler+0x126>
 800beca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bece:	f003 0320 	and.w	r3, r3, #32
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d105      	bne.n	800bee2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beda:	f003 0301 	and.w	r3, r3, #1
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d005      	beq.n	800beee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee6:	f043 0208 	orr.w	r2, r3, #8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f000 81ed 	beq.w	800c2d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800befc:	f003 0320 	and.w	r3, r3, #32
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d008      	beq.n	800bf16 <HAL_UART_IRQHandler+0x14e>
 800bf04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf08:	f003 0320 	and.w	r3, r3, #32
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 fb92 	bl	800c63a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf20:	2b40      	cmp	r3, #64	; 0x40
 800bf22:	bf0c      	ite	eq
 800bf24:	2301      	moveq	r3, #1
 800bf26:	2300      	movne	r3, #0
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f003 0308 	and.w	r3, r3, #8
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d103      	bne.n	800bf42 <HAL_UART_IRQHandler+0x17a>
 800bf3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d04f      	beq.n	800bfe2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fa9a 	bl	800c47c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf52:	2b40      	cmp	r3, #64	; 0x40
 800bf54:	d141      	bne.n	800bfda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	3314      	adds	r3, #20
 800bf5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf64:	e853 3f00 	ldrex	r3, [r3]
 800bf68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3314      	adds	r3, #20
 800bf7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf92:	e841 2300 	strex	r3, r2, [r1]
 800bf96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1d9      	bne.n	800bf56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d013      	beq.n	800bfd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfae:	4a7d      	ldr	r2, [pc, #500]	; (800c1a4 <HAL_UART_IRQHandler+0x3dc>)
 800bfb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7fa f818 	bl	8005fec <HAL_DMA_Abort_IT>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d016      	beq.n	800bff0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd0:	e00e      	b.n	800bff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f000 f990 	bl	800c2f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd8:	e00a      	b.n	800bff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f98c 	bl	800c2f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe0:	e006      	b.n	800bff0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 f988 	bl	800c2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bfee:	e170      	b.n	800c2d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff0:	bf00      	nop
    return;
 800bff2:	e16e      	b.n	800c2d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	f040 814a 	bne.w	800c292 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c002:	f003 0310 	and.w	r3, r3, #16
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 8143 	beq.w	800c292 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c00c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c010:	f003 0310 	and.w	r3, r3, #16
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 813c 	beq.w	800c292 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c01a:	2300      	movs	r3, #0
 800c01c:	60bb      	str	r3, [r7, #8]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	60bb      	str	r3, [r7, #8]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	60bb      	str	r3, [r7, #8]
 800c02e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	695b      	ldr	r3, [r3, #20]
 800c036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03a:	2b40      	cmp	r3, #64	; 0x40
 800c03c:	f040 80b4 	bne.w	800c1a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c04c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 8140 	beq.w	800c2d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c05a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c05e:	429a      	cmp	r2, r3
 800c060:	f080 8139 	bcs.w	800c2d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c06a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c076:	f000 8088 	beq.w	800c18a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	330c      	adds	r3, #12
 800c080:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c084:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c088:	e853 3f00 	ldrex	r3, [r3]
 800c08c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c090:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c098:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	330c      	adds	r3, #12
 800c0a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c0a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c0aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0b6:	e841 2300 	strex	r3, r2, [r1]
 800c0ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1d9      	bne.n	800c07a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	3314      	adds	r3, #20
 800c0cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0d0:	e853 3f00 	ldrex	r3, [r3]
 800c0d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c0d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0d8:	f023 0301 	bic.w	r3, r3, #1
 800c0dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	3314      	adds	r3, #20
 800c0e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c0ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c0fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e1      	bne.n	800c0c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3314      	adds	r3, #20
 800c108:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c10c:	e853 3f00 	ldrex	r3, [r3]
 800c110:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3314      	adds	r3, #20
 800c122:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c126:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c128:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c12c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c12e:	e841 2300 	strex	r3, r2, [r1]
 800c132:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1e3      	bne.n	800c102 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	330c      	adds	r3, #12
 800c14e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c152:	e853 3f00 	ldrex	r3, [r3]
 800c156:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c15a:	f023 0310 	bic.w	r3, r3, #16
 800c15e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	330c      	adds	r3, #12
 800c168:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c16c:	65ba      	str	r2, [r7, #88]	; 0x58
 800c16e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c170:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c172:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c174:	e841 2300 	strex	r3, r2, [r1]
 800c178:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c17a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1e3      	bne.n	800c148 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c184:	4618      	mov	r0, r3
 800c186:	f7f9 fec1 	bl	8005f0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c192:	b29b      	uxth	r3, r3
 800c194:	1ad3      	subs	r3, r2, r3
 800c196:	b29b      	uxth	r3, r3
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f8b6 	bl	800c30c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1a0:	e099      	b.n	800c2d6 <HAL_UART_IRQHandler+0x50e>
 800c1a2:	bf00      	nop
 800c1a4:	0800c543 	.word	0x0800c543
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	f000 808b 	beq.w	800c2da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c1c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 8086 	beq.w	800c2da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	330c      	adds	r3, #12
 800c1d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	e853 3f00 	ldrex	r3, [r3]
 800c1dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	330c      	adds	r3, #12
 800c1ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c1f2:	647a      	str	r2, [r7, #68]	; 0x44
 800c1f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1fa:	e841 2300 	strex	r3, r2, [r1]
 800c1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c202:	2b00      	cmp	r3, #0
 800c204:	d1e3      	bne.n	800c1ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3314      	adds	r3, #20
 800c20c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	e853 3f00 	ldrex	r3, [r3]
 800c214:	623b      	str	r3, [r7, #32]
   return(result);
 800c216:	6a3b      	ldr	r3, [r7, #32]
 800c218:	f023 0301 	bic.w	r3, r3, #1
 800c21c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	3314      	adds	r3, #20
 800c226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c22a:	633a      	str	r2, [r7, #48]	; 0x30
 800c22c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c232:	e841 2300 	strex	r3, r2, [r1]
 800c236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1e3      	bne.n	800c206 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2220      	movs	r2, #32
 800c242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	330c      	adds	r3, #12
 800c252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	e853 3f00 	ldrex	r3, [r3]
 800c25a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f023 0310 	bic.w	r3, r3, #16
 800c262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	330c      	adds	r3, #12
 800c26c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c270:	61fa      	str	r2, [r7, #28]
 800c272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c274:	69b9      	ldr	r1, [r7, #24]
 800c276:	69fa      	ldr	r2, [r7, #28]
 800c278:	e841 2300 	strex	r3, r2, [r1]
 800c27c:	617b      	str	r3, [r7, #20]
   return(result);
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d1e3      	bne.n	800c24c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c288:	4619      	mov	r1, r3
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f83e 	bl	800c30c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c290:	e023      	b.n	800c2da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d009      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x4ea>
 800c29e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d003      	beq.n	800c2b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f000 f95d 	bl	800c56a <UART_Transmit_IT>
    return;
 800c2b0:	e014      	b.n	800c2dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00e      	beq.n	800c2dc <HAL_UART_IRQHandler+0x514>
 800c2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d008      	beq.n	800c2dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f99d 	bl	800c60a <UART_EndTransmit_IT>
    return;
 800c2d0:	e004      	b.n	800c2dc <HAL_UART_IRQHandler+0x514>
    return;
 800c2d2:	bf00      	nop
 800c2d4:	e002      	b.n	800c2dc <HAL_UART_IRQHandler+0x514>
      return;
 800c2d6:	bf00      	nop
 800c2d8:	e000      	b.n	800c2dc <HAL_UART_IRQHandler+0x514>
      return;
 800c2da:	bf00      	nop
  }
}
 800c2dc:	37e8      	adds	r7, #232	; 0xe8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop

0800c2e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b090      	sub	sp, #64	; 0x40
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	603b      	str	r3, [r7, #0]
 800c330:	4613      	mov	r3, r2
 800c332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c334:	e050      	b.n	800c3d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33c:	d04c      	beq.n	800c3d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c33e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c340:	2b00      	cmp	r3, #0
 800c342:	d007      	beq.n	800c354 <UART_WaitOnFlagUntilTimeout+0x30>
 800c344:	f7f9 f8f4 	bl	8005530 <HAL_GetTick>
 800c348:	4602      	mov	r2, r0
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c350:	429a      	cmp	r2, r3
 800c352:	d241      	bcs.n	800c3d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	330c      	adds	r3, #12
 800c35a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35e:	e853 3f00 	ldrex	r3, [r3]
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c36a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	330c      	adds	r3, #12
 800c372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c374:	637a      	str	r2, [r7, #52]	; 0x34
 800c376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c37a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c37c:	e841 2300 	strex	r3, r2, [r1]
 800c380:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1e5      	bne.n	800c354 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	3314      	adds	r3, #20
 800c38e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	e853 3f00 	ldrex	r3, [r3]
 800c396:	613b      	str	r3, [r7, #16]
   return(result);
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	f023 0301 	bic.w	r3, r3, #1
 800c39e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3314      	adds	r3, #20
 800c3a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3a8:	623a      	str	r2, [r7, #32]
 800c3aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ac:	69f9      	ldr	r1, [r7, #28]
 800c3ae:	6a3a      	ldr	r2, [r7, #32]
 800c3b0:	e841 2300 	strex	r3, r2, [r1]
 800c3b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1e5      	bne.n	800c388 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	e00f      	b.n	800c3f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	bf0c      	ite	eq
 800c3e8:	2301      	moveq	r3, #1
 800c3ea:	2300      	movne	r3, #0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	79fb      	ldrb	r3, [r7, #7]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d09f      	beq.n	800c336 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3740      	adds	r7, #64	; 0x40
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	4613      	mov	r3, r2
 800c40c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	88fa      	ldrh	r2, [r7, #6]
 800c418:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	88fa      	ldrh	r2, [r7, #6]
 800c41e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2222      	movs	r2, #34	; 0x22
 800c42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d007      	beq.n	800c44e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68da      	ldr	r2, [r3, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c44c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	695a      	ldr	r2, [r3, #20]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f042 0201 	orr.w	r2, r2, #1
 800c45c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68da      	ldr	r2, [r3, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f042 0220 	orr.w	r2, r2, #32
 800c46c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b095      	sub	sp, #84	; 0x54
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	330c      	adds	r3, #12
 800c48a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c48e:	e853 3f00 	ldrex	r3, [r3]
 800c492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c49a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	330c      	adds	r3, #12
 800c4a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c4a4:	643a      	str	r2, [r7, #64]	; 0x40
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4ac:	e841 2300 	strex	r3, r2, [r1]
 800c4b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e5      	bne.n	800c484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3314      	adds	r3, #20
 800c4be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	e853 3f00 	ldrex	r3, [r3]
 800c4c6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4c8:	69fb      	ldr	r3, [r7, #28]
 800c4ca:	f023 0301 	bic.w	r3, r3, #1
 800c4ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3314      	adds	r3, #20
 800c4d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4e0:	e841 2300 	strex	r3, r2, [r1]
 800c4e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1e5      	bne.n	800c4b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d119      	bne.n	800c528 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	330c      	adds	r3, #12
 800c4fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	60bb      	str	r3, [r7, #8]
   return(result);
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	f023 0310 	bic.w	r3, r3, #16
 800c50a:	647b      	str	r3, [r7, #68]	; 0x44
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	330c      	adds	r3, #12
 800c512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c514:	61ba      	str	r2, [r7, #24]
 800c516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	6979      	ldr	r1, [r7, #20]
 800c51a:	69ba      	ldr	r2, [r7, #24]
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	613b      	str	r3, [r7, #16]
   return(result);
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e5      	bne.n	800c4f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2220      	movs	r2, #32
 800c52c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c536:	bf00      	nop
 800c538:	3754      	adds	r7, #84	; 0x54
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b084      	sub	sp, #16
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f7ff fecb 	bl	800c2f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c562:	bf00      	nop
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}

0800c56a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c56a:	b480      	push	{r7}
 800c56c:	b085      	sub	sp, #20
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b21      	cmp	r3, #33	; 0x21
 800c57c:	d13e      	bne.n	800c5fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c586:	d114      	bne.n	800c5b2 <UART_Transmit_IT+0x48>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d110      	bne.n	800c5b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a1b      	ldr	r3, [r3, #32]
 800c594:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	1c9a      	adds	r2, r3, #2
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	621a      	str	r2, [r3, #32]
 800c5b0:	e008      	b.n	800c5c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a1b      	ldr	r3, [r3, #32]
 800c5b6:	1c59      	adds	r1, r3, #1
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	6211      	str	r1, [r2, #32]
 800c5bc:	781a      	ldrb	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10f      	bne.n	800c5f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	e000      	b.n	800c5fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c5fc:	2302      	movs	r3, #2
  }
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3714      	adds	r7, #20
 800c602:	46bd      	mov	sp, r7
 800c604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c608:	4770      	bx	lr

0800c60a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b082      	sub	sp, #8
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68da      	ldr	r2, [r3, #12]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c620:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2220      	movs	r2, #32
 800c626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff fe5a 	bl	800c2e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b08c      	sub	sp, #48	; 0x30
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c648:	b2db      	uxtb	r3, r3
 800c64a:	2b22      	cmp	r3, #34	; 0x22
 800c64c:	f040 80ab 	bne.w	800c7a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c658:	d117      	bne.n	800c68a <UART_Receive_IT+0x50>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d113      	bne.n	800c68a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c662:	2300      	movs	r3, #0
 800c664:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	b29b      	uxth	r3, r3
 800c674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c678:	b29a      	uxth	r2, r3
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c682:	1c9a      	adds	r2, r3, #2
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	629a      	str	r2, [r3, #40]	; 0x28
 800c688:	e026      	b.n	800c6d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c68e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c690:	2300      	movs	r3, #0
 800c692:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c69c:	d007      	beq.n	800c6ae <UART_Receive_IT+0x74>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d10a      	bne.n	800c6bc <UART_Receive_IT+0x82>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d106      	bne.n	800c6bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	701a      	strb	r2, [r3, #0]
 800c6ba:	e008      	b.n	800c6ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	3b01      	subs	r3, #1
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d15a      	bne.n	800c7a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68da      	ldr	r2, [r3, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f022 0220 	bic.w	r2, r2, #32
 800c6fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68da      	ldr	r2, [r3, #12]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c70a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	695a      	ldr	r2, [r3, #20]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f022 0201 	bic.w	r2, r2, #1
 800c71a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2220      	movs	r2, #32
 800c720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d135      	bne.n	800c798 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	330c      	adds	r3, #12
 800c738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	e853 3f00 	ldrex	r3, [r3]
 800c740:	613b      	str	r3, [r7, #16]
   return(result);
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	f023 0310 	bic.w	r3, r3, #16
 800c748:	627b      	str	r3, [r7, #36]	; 0x24
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	330c      	adds	r3, #12
 800c750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c752:	623a      	str	r2, [r7, #32]
 800c754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c756:	69f9      	ldr	r1, [r7, #28]
 800c758:	6a3a      	ldr	r2, [r7, #32]
 800c75a:	e841 2300 	strex	r3, r2, [r1]
 800c75e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d1e5      	bne.n	800c732 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0310 	and.w	r3, r3, #16
 800c770:	2b10      	cmp	r3, #16
 800c772:	d10a      	bne.n	800c78a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c774:	2300      	movs	r3, #0
 800c776:	60fb      	str	r3, [r7, #12]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c78e:	4619      	mov	r1, r3
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f7ff fdbb 	bl	800c30c <HAL_UARTEx_RxEventCallback>
 800c796:	e002      	b.n	800c79e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7f7 fafb 	bl	8003d94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	e002      	b.n	800c7a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e000      	b.n	800c7a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c7a6:	2302      	movs	r3, #2
  }
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3730      	adds	r7, #48	; 0x30
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7b4:	b0c0      	sub	sp, #256	; 0x100
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7cc:	68d9      	ldr	r1, [r3, #12]
 800c7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	ea40 0301 	orr.w	r3, r0, r1
 800c7d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7de:	689a      	ldr	r2, [r3, #8]
 800c7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7f4:	69db      	ldr	r3, [r3, #28]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c808:	f021 010c 	bic.w	r1, r1, #12
 800c80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c816:	430b      	orrs	r3, r1
 800c818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c81a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c82a:	6999      	ldr	r1, [r3, #24]
 800c82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	ea40 0301 	orr.w	r3, r0, r1
 800c836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	4b8f      	ldr	r3, [pc, #572]	; (800ca7c <UART_SetConfig+0x2cc>)
 800c840:	429a      	cmp	r2, r3
 800c842:	d005      	beq.n	800c850 <UART_SetConfig+0xa0>
 800c844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	4b8d      	ldr	r3, [pc, #564]	; (800ca80 <UART_SetConfig+0x2d0>)
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d104      	bne.n	800c85a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c850:	f7fc fdd2 	bl	80093f8 <HAL_RCC_GetPCLK2Freq>
 800c854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c858:	e003      	b.n	800c862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c85a:	f7fc fdb9 	bl	80093d0 <HAL_RCC_GetPCLK1Freq>
 800c85e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c866:	69db      	ldr	r3, [r3, #28]
 800c868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c86c:	f040 810c 	bne.w	800ca88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c874:	2200      	movs	r2, #0
 800c876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c87a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c87e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c882:	4622      	mov	r2, r4
 800c884:	462b      	mov	r3, r5
 800c886:	1891      	adds	r1, r2, r2
 800c888:	65b9      	str	r1, [r7, #88]	; 0x58
 800c88a:	415b      	adcs	r3, r3
 800c88c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c88e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c892:	4621      	mov	r1, r4
 800c894:	eb12 0801 	adds.w	r8, r2, r1
 800c898:	4629      	mov	r1, r5
 800c89a:	eb43 0901 	adc.w	r9, r3, r1
 800c89e:	f04f 0200 	mov.w	r2, #0
 800c8a2:	f04f 0300 	mov.w	r3, #0
 800c8a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8b2:	4690      	mov	r8, r2
 800c8b4:	4699      	mov	r9, r3
 800c8b6:	4623      	mov	r3, r4
 800c8b8:	eb18 0303 	adds.w	r3, r8, r3
 800c8bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	eb49 0303 	adc.w	r3, r9, r3
 800c8c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c8ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c8da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8de:	460b      	mov	r3, r1
 800c8e0:	18db      	adds	r3, r3, r3
 800c8e2:	653b      	str	r3, [r7, #80]	; 0x50
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	eb42 0303 	adc.w	r3, r2, r3
 800c8ea:	657b      	str	r3, [r7, #84]	; 0x54
 800c8ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c8f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c8f4:	f7f4 fb46 	bl	8000f84 <__aeabi_uldivmod>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4b61      	ldr	r3, [pc, #388]	; (800ca84 <UART_SetConfig+0x2d4>)
 800c8fe:	fba3 2302 	umull	r2, r3, r3, r2
 800c902:	095b      	lsrs	r3, r3, #5
 800c904:	011c      	lsls	r4, r3, #4
 800c906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c90a:	2200      	movs	r2, #0
 800c90c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c918:	4642      	mov	r2, r8
 800c91a:	464b      	mov	r3, r9
 800c91c:	1891      	adds	r1, r2, r2
 800c91e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c920:	415b      	adcs	r3, r3
 800c922:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c928:	4641      	mov	r1, r8
 800c92a:	eb12 0a01 	adds.w	sl, r2, r1
 800c92e:	4649      	mov	r1, r9
 800c930:	eb43 0b01 	adc.w	fp, r3, r1
 800c934:	f04f 0200 	mov.w	r2, #0
 800c938:	f04f 0300 	mov.w	r3, #0
 800c93c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c948:	4692      	mov	sl, r2
 800c94a:	469b      	mov	fp, r3
 800c94c:	4643      	mov	r3, r8
 800c94e:	eb1a 0303 	adds.w	r3, sl, r3
 800c952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c956:	464b      	mov	r3, r9
 800c958:	eb4b 0303 	adc.w	r3, fp, r3
 800c95c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c96c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c974:	460b      	mov	r3, r1
 800c976:	18db      	adds	r3, r3, r3
 800c978:	643b      	str	r3, [r7, #64]	; 0x40
 800c97a:	4613      	mov	r3, r2
 800c97c:	eb42 0303 	adc.w	r3, r2, r3
 800c980:	647b      	str	r3, [r7, #68]	; 0x44
 800c982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c98a:	f7f4 fafb 	bl	8000f84 <__aeabi_uldivmod>
 800c98e:	4602      	mov	r2, r0
 800c990:	460b      	mov	r3, r1
 800c992:	4611      	mov	r1, r2
 800c994:	4b3b      	ldr	r3, [pc, #236]	; (800ca84 <UART_SetConfig+0x2d4>)
 800c996:	fba3 2301 	umull	r2, r3, r3, r1
 800c99a:	095b      	lsrs	r3, r3, #5
 800c99c:	2264      	movs	r2, #100	; 0x64
 800c99e:	fb02 f303 	mul.w	r3, r2, r3
 800c9a2:	1acb      	subs	r3, r1, r3
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c9aa:	4b36      	ldr	r3, [pc, #216]	; (800ca84 <UART_SetConfig+0x2d4>)
 800c9ac:	fba3 2302 	umull	r2, r3, r3, r2
 800c9b0:	095b      	lsrs	r3, r3, #5
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c9b8:	441c      	add	r4, r3
 800c9ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c9c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c9cc:	4642      	mov	r2, r8
 800c9ce:	464b      	mov	r3, r9
 800c9d0:	1891      	adds	r1, r2, r2
 800c9d2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c9d4:	415b      	adcs	r3, r3
 800c9d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9dc:	4641      	mov	r1, r8
 800c9de:	1851      	adds	r1, r2, r1
 800c9e0:	6339      	str	r1, [r7, #48]	; 0x30
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	414b      	adcs	r3, r1
 800c9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9e8:	f04f 0200 	mov.w	r2, #0
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c9f4:	4659      	mov	r1, fp
 800c9f6:	00cb      	lsls	r3, r1, #3
 800c9f8:	4651      	mov	r1, sl
 800c9fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9fe:	4651      	mov	r1, sl
 800ca00:	00ca      	lsls	r2, r1, #3
 800ca02:	4610      	mov	r0, r2
 800ca04:	4619      	mov	r1, r3
 800ca06:	4603      	mov	r3, r0
 800ca08:	4642      	mov	r2, r8
 800ca0a:	189b      	adds	r3, r3, r2
 800ca0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca10:	464b      	mov	r3, r9
 800ca12:	460a      	mov	r2, r1
 800ca14:	eb42 0303 	adc.w	r3, r2, r3
 800ca18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ca28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ca2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ca30:	460b      	mov	r3, r1
 800ca32:	18db      	adds	r3, r3, r3
 800ca34:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca36:	4613      	mov	r3, r2
 800ca38:	eb42 0303 	adc.w	r3, r2, r3
 800ca3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ca46:	f7f4 fa9d 	bl	8000f84 <__aeabi_uldivmod>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4b0d      	ldr	r3, [pc, #52]	; (800ca84 <UART_SetConfig+0x2d4>)
 800ca50:	fba3 1302 	umull	r1, r3, r3, r2
 800ca54:	095b      	lsrs	r3, r3, #5
 800ca56:	2164      	movs	r1, #100	; 0x64
 800ca58:	fb01 f303 	mul.w	r3, r1, r3
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	3332      	adds	r3, #50	; 0x32
 800ca62:	4a08      	ldr	r2, [pc, #32]	; (800ca84 <UART_SetConfig+0x2d4>)
 800ca64:	fba2 2303 	umull	r2, r3, r2, r3
 800ca68:	095b      	lsrs	r3, r3, #5
 800ca6a:	f003 0207 	and.w	r2, r3, #7
 800ca6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4422      	add	r2, r4
 800ca76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca78:	e105      	b.n	800cc86 <UART_SetConfig+0x4d6>
 800ca7a:	bf00      	nop
 800ca7c:	40011000 	.word	0x40011000
 800ca80:	40011400 	.word	0x40011400
 800ca84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca9a:	4642      	mov	r2, r8
 800ca9c:	464b      	mov	r3, r9
 800ca9e:	1891      	adds	r1, r2, r2
 800caa0:	6239      	str	r1, [r7, #32]
 800caa2:	415b      	adcs	r3, r3
 800caa4:	627b      	str	r3, [r7, #36]	; 0x24
 800caa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800caaa:	4641      	mov	r1, r8
 800caac:	1854      	adds	r4, r2, r1
 800caae:	4649      	mov	r1, r9
 800cab0:	eb43 0501 	adc.w	r5, r3, r1
 800cab4:	f04f 0200 	mov.w	r2, #0
 800cab8:	f04f 0300 	mov.w	r3, #0
 800cabc:	00eb      	lsls	r3, r5, #3
 800cabe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cac2:	00e2      	lsls	r2, r4, #3
 800cac4:	4614      	mov	r4, r2
 800cac6:	461d      	mov	r5, r3
 800cac8:	4643      	mov	r3, r8
 800caca:	18e3      	adds	r3, r4, r3
 800cacc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cad0:	464b      	mov	r3, r9
 800cad2:	eb45 0303 	adc.w	r3, r5, r3
 800cad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	2200      	movs	r2, #0
 800cae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800caea:	f04f 0200 	mov.w	r2, #0
 800caee:	f04f 0300 	mov.w	r3, #0
 800caf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800caf6:	4629      	mov	r1, r5
 800caf8:	008b      	lsls	r3, r1, #2
 800cafa:	4621      	mov	r1, r4
 800cafc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb00:	4621      	mov	r1, r4
 800cb02:	008a      	lsls	r2, r1, #2
 800cb04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cb08:	f7f4 fa3c 	bl	8000f84 <__aeabi_uldivmod>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4b60      	ldr	r3, [pc, #384]	; (800cc94 <UART_SetConfig+0x4e4>)
 800cb12:	fba3 2302 	umull	r2, r3, r3, r2
 800cb16:	095b      	lsrs	r3, r3, #5
 800cb18:	011c      	lsls	r4, r3, #4
 800cb1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cb28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cb2c:	4642      	mov	r2, r8
 800cb2e:	464b      	mov	r3, r9
 800cb30:	1891      	adds	r1, r2, r2
 800cb32:	61b9      	str	r1, [r7, #24]
 800cb34:	415b      	adcs	r3, r3
 800cb36:	61fb      	str	r3, [r7, #28]
 800cb38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb3c:	4641      	mov	r1, r8
 800cb3e:	1851      	adds	r1, r2, r1
 800cb40:	6139      	str	r1, [r7, #16]
 800cb42:	4649      	mov	r1, r9
 800cb44:	414b      	adcs	r3, r1
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	f04f 0200 	mov.w	r2, #0
 800cb4c:	f04f 0300 	mov.w	r3, #0
 800cb50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb54:	4659      	mov	r1, fp
 800cb56:	00cb      	lsls	r3, r1, #3
 800cb58:	4651      	mov	r1, sl
 800cb5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb5e:	4651      	mov	r1, sl
 800cb60:	00ca      	lsls	r2, r1, #3
 800cb62:	4610      	mov	r0, r2
 800cb64:	4619      	mov	r1, r3
 800cb66:	4603      	mov	r3, r0
 800cb68:	4642      	mov	r2, r8
 800cb6a:	189b      	adds	r3, r3, r2
 800cb6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb70:	464b      	mov	r3, r9
 800cb72:	460a      	mov	r2, r1
 800cb74:	eb42 0303 	adc.w	r3, r2, r3
 800cb78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb86:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb88:	f04f 0200 	mov.w	r2, #0
 800cb8c:	f04f 0300 	mov.w	r3, #0
 800cb90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb94:	4649      	mov	r1, r9
 800cb96:	008b      	lsls	r3, r1, #2
 800cb98:	4641      	mov	r1, r8
 800cb9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb9e:	4641      	mov	r1, r8
 800cba0:	008a      	lsls	r2, r1, #2
 800cba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cba6:	f7f4 f9ed 	bl	8000f84 <__aeabi_uldivmod>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	4b39      	ldr	r3, [pc, #228]	; (800cc94 <UART_SetConfig+0x4e4>)
 800cbb0:	fba3 1302 	umull	r1, r3, r3, r2
 800cbb4:	095b      	lsrs	r3, r3, #5
 800cbb6:	2164      	movs	r1, #100	; 0x64
 800cbb8:	fb01 f303 	mul.w	r3, r1, r3
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	011b      	lsls	r3, r3, #4
 800cbc0:	3332      	adds	r3, #50	; 0x32
 800cbc2:	4a34      	ldr	r2, [pc, #208]	; (800cc94 <UART_SetConfig+0x4e4>)
 800cbc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc8:	095b      	lsrs	r3, r3, #5
 800cbca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbce:	441c      	add	r4, r3
 800cbd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	673b      	str	r3, [r7, #112]	; 0x70
 800cbd8:	677a      	str	r2, [r7, #116]	; 0x74
 800cbda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cbde:	4642      	mov	r2, r8
 800cbe0:	464b      	mov	r3, r9
 800cbe2:	1891      	adds	r1, r2, r2
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	415b      	adcs	r3, r3
 800cbe8:	60fb      	str	r3, [r7, #12]
 800cbea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbee:	4641      	mov	r1, r8
 800cbf0:	1851      	adds	r1, r2, r1
 800cbf2:	6039      	str	r1, [r7, #0]
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	414b      	adcs	r3, r1
 800cbf8:	607b      	str	r3, [r7, #4]
 800cbfa:	f04f 0200 	mov.w	r2, #0
 800cbfe:	f04f 0300 	mov.w	r3, #0
 800cc02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cc06:	4659      	mov	r1, fp
 800cc08:	00cb      	lsls	r3, r1, #3
 800cc0a:	4651      	mov	r1, sl
 800cc0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc10:	4651      	mov	r1, sl
 800cc12:	00ca      	lsls	r2, r1, #3
 800cc14:	4610      	mov	r0, r2
 800cc16:	4619      	mov	r1, r3
 800cc18:	4603      	mov	r3, r0
 800cc1a:	4642      	mov	r2, r8
 800cc1c:	189b      	adds	r3, r3, r2
 800cc1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc20:	464b      	mov	r3, r9
 800cc22:	460a      	mov	r2, r1
 800cc24:	eb42 0303 	adc.w	r3, r2, r3
 800cc28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	663b      	str	r3, [r7, #96]	; 0x60
 800cc34:	667a      	str	r2, [r7, #100]	; 0x64
 800cc36:	f04f 0200 	mov.w	r2, #0
 800cc3a:	f04f 0300 	mov.w	r3, #0
 800cc3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cc42:	4649      	mov	r1, r9
 800cc44:	008b      	lsls	r3, r1, #2
 800cc46:	4641      	mov	r1, r8
 800cc48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc4c:	4641      	mov	r1, r8
 800cc4e:	008a      	lsls	r2, r1, #2
 800cc50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc54:	f7f4 f996 	bl	8000f84 <__aeabi_uldivmod>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4b0d      	ldr	r3, [pc, #52]	; (800cc94 <UART_SetConfig+0x4e4>)
 800cc5e:	fba3 1302 	umull	r1, r3, r3, r2
 800cc62:	095b      	lsrs	r3, r3, #5
 800cc64:	2164      	movs	r1, #100	; 0x64
 800cc66:	fb01 f303 	mul.w	r3, r1, r3
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	011b      	lsls	r3, r3, #4
 800cc6e:	3332      	adds	r3, #50	; 0x32
 800cc70:	4a08      	ldr	r2, [pc, #32]	; (800cc94 <UART_SetConfig+0x4e4>)
 800cc72:	fba2 2303 	umull	r2, r3, r2, r3
 800cc76:	095b      	lsrs	r3, r3, #5
 800cc78:	f003 020f 	and.w	r2, r3, #15
 800cc7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4422      	add	r2, r4
 800cc84:	609a      	str	r2, [r3, #8]
}
 800cc86:	bf00      	nop
 800cc88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc92:	bf00      	nop
 800cc94:	51eb851f 	.word	0x51eb851f

0800cc98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cc98:	b084      	sub	sp, #16
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	f107 001c 	add.w	r0, r7, #28
 800cca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	2b01      	cmp	r3, #1
 800ccae:	d122      	bne.n	800ccf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ccc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ccd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccda:	2b01      	cmp	r3, #1
 800ccdc:	d105      	bne.n	800ccea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f001 fbe8 	bl	800e4c0 <USB_CoreReset>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	73fb      	strb	r3, [r7, #15]
 800ccf4:	e01a      	b.n	800cd2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	68db      	ldr	r3, [r3, #12]
 800ccfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f001 fbdc 	bl	800e4c0 <USB_CoreReset>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d106      	bne.n	800cd20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	639a      	str	r2, [r3, #56]	; 0x38
 800cd1e:	e005      	b.n	800cd2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d10b      	bne.n	800cd4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	689b      	ldr	r3, [r3, #8]
 800cd36:	f043 0206 	orr.w	r2, r3, #6
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f043 0220 	orr.w	r2, r3, #32
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3710      	adds	r7, #16
 800cd50:	46bd      	mov	sp, r7
 800cd52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cd56:	b004      	add	sp, #16
 800cd58:	4770      	bx	lr
	...

0800cd5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b087      	sub	sp, #28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	4613      	mov	r3, r2
 800cd68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d165      	bne.n	800ce3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	4a41      	ldr	r2, [pc, #260]	; (800ce78 <USB_SetTurnaroundTime+0x11c>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d906      	bls.n	800cd86 <USB_SetTurnaroundTime+0x2a>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	4a40      	ldr	r2, [pc, #256]	; (800ce7c <USB_SetTurnaroundTime+0x120>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d202      	bcs.n	800cd86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cd80:	230f      	movs	r3, #15
 800cd82:	617b      	str	r3, [r7, #20]
 800cd84:	e062      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	4a3c      	ldr	r2, [pc, #240]	; (800ce7c <USB_SetTurnaroundTime+0x120>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d306      	bcc.n	800cd9c <USB_SetTurnaroundTime+0x40>
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	4a3b      	ldr	r2, [pc, #236]	; (800ce80 <USB_SetTurnaroundTime+0x124>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d202      	bcs.n	800cd9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cd96:	230e      	movs	r3, #14
 800cd98:	617b      	str	r3, [r7, #20]
 800cd9a:	e057      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	4a38      	ldr	r2, [pc, #224]	; (800ce80 <USB_SetTurnaroundTime+0x124>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d306      	bcc.n	800cdb2 <USB_SetTurnaroundTime+0x56>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	4a37      	ldr	r2, [pc, #220]	; (800ce84 <USB_SetTurnaroundTime+0x128>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d202      	bcs.n	800cdb2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cdac:	230d      	movs	r3, #13
 800cdae:	617b      	str	r3, [r7, #20]
 800cdb0:	e04c      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	4a33      	ldr	r2, [pc, #204]	; (800ce84 <USB_SetTurnaroundTime+0x128>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d306      	bcc.n	800cdc8 <USB_SetTurnaroundTime+0x6c>
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	4a32      	ldr	r2, [pc, #200]	; (800ce88 <USB_SetTurnaroundTime+0x12c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d802      	bhi.n	800cdc8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cdc2:	230c      	movs	r3, #12
 800cdc4:	617b      	str	r3, [r7, #20]
 800cdc6:	e041      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	4a2f      	ldr	r2, [pc, #188]	; (800ce88 <USB_SetTurnaroundTime+0x12c>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d906      	bls.n	800cdde <USB_SetTurnaroundTime+0x82>
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	4a2e      	ldr	r2, [pc, #184]	; (800ce8c <USB_SetTurnaroundTime+0x130>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d802      	bhi.n	800cdde <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cdd8:	230b      	movs	r3, #11
 800cdda:	617b      	str	r3, [r7, #20]
 800cddc:	e036      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	4a2a      	ldr	r2, [pc, #168]	; (800ce8c <USB_SetTurnaroundTime+0x130>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d906      	bls.n	800cdf4 <USB_SetTurnaroundTime+0x98>
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	4a29      	ldr	r2, [pc, #164]	; (800ce90 <USB_SetTurnaroundTime+0x134>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d802      	bhi.n	800cdf4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cdee:	230a      	movs	r3, #10
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	e02b      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	4a26      	ldr	r2, [pc, #152]	; (800ce90 <USB_SetTurnaroundTime+0x134>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d906      	bls.n	800ce0a <USB_SetTurnaroundTime+0xae>
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	4a25      	ldr	r2, [pc, #148]	; (800ce94 <USB_SetTurnaroundTime+0x138>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d202      	bcs.n	800ce0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ce04:	2309      	movs	r3, #9
 800ce06:	617b      	str	r3, [r7, #20]
 800ce08:	e020      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	4a21      	ldr	r2, [pc, #132]	; (800ce94 <USB_SetTurnaroundTime+0x138>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d306      	bcc.n	800ce20 <USB_SetTurnaroundTime+0xc4>
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	4a20      	ldr	r2, [pc, #128]	; (800ce98 <USB_SetTurnaroundTime+0x13c>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d802      	bhi.n	800ce20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ce1a:	2308      	movs	r3, #8
 800ce1c:	617b      	str	r3, [r7, #20]
 800ce1e:	e015      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	4a1d      	ldr	r2, [pc, #116]	; (800ce98 <USB_SetTurnaroundTime+0x13c>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d906      	bls.n	800ce36 <USB_SetTurnaroundTime+0xda>
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	4a1c      	ldr	r2, [pc, #112]	; (800ce9c <USB_SetTurnaroundTime+0x140>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d202      	bcs.n	800ce36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ce30:	2307      	movs	r3, #7
 800ce32:	617b      	str	r3, [r7, #20]
 800ce34:	e00a      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ce36:	2306      	movs	r3, #6
 800ce38:	617b      	str	r3, [r7, #20]
 800ce3a:	e007      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ce3c:	79fb      	ldrb	r3, [r7, #7]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ce42:	2309      	movs	r3, #9
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	e001      	b.n	800ce4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ce48:	2309      	movs	r3, #9
 800ce4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68da      	ldr	r2, [r3, #12]
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	029b      	lsls	r3, r3, #10
 800ce60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ce64:	431a      	orrs	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	371c      	adds	r7, #28
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr
 800ce78:	00d8acbf 	.word	0x00d8acbf
 800ce7c:	00e4e1c0 	.word	0x00e4e1c0
 800ce80:	00f42400 	.word	0x00f42400
 800ce84:	01067380 	.word	0x01067380
 800ce88:	011a499f 	.word	0x011a499f
 800ce8c:	01312cff 	.word	0x01312cff
 800ce90:	014ca43f 	.word	0x014ca43f
 800ce94:	016e3600 	.word	0x016e3600
 800ce98:	01a6ab1f 	.word	0x01a6ab1f
 800ce9c:	01e84800 	.word	0x01e84800

0800cea0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	f043 0201 	orr.w	r2, r3, #1
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	f023 0201 	bic.w	r2, r3, #1
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ced6:	2300      	movs	r3, #0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cef0:	2300      	movs	r3, #0
 800cef2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	68db      	ldr	r3, [r3, #12]
 800cef8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf00:	78fb      	ldrb	r3, [r7, #3]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d115      	bne.n	800cf32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cf12:	2001      	movs	r0, #1
 800cf14:	f7f8 fb18 	bl	8005548 <HAL_Delay>
      ms++;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f001 fa3f 	bl	800e3a2 <USB_GetMode>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	d01e      	beq.n	800cf68 <USB_SetCurrentMode+0x84>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2b31      	cmp	r3, #49	; 0x31
 800cf2e:	d9f0      	bls.n	800cf12 <USB_SetCurrentMode+0x2e>
 800cf30:	e01a      	b.n	800cf68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cf32:	78fb      	ldrb	r3, [r7, #3]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d115      	bne.n	800cf64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	68db      	ldr	r3, [r3, #12]
 800cf3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cf44:	2001      	movs	r0, #1
 800cf46:	f7f8 faff 	bl	8005548 <HAL_Delay>
      ms++;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f001 fa26 	bl	800e3a2 <USB_GetMode>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d005      	beq.n	800cf68 <USB_SetCurrentMode+0x84>
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b31      	cmp	r3, #49	; 0x31
 800cf60:	d9f0      	bls.n	800cf44 <USB_SetCurrentMode+0x60>
 800cf62:	e001      	b.n	800cf68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e005      	b.n	800cf74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b32      	cmp	r3, #50	; 0x32
 800cf6c:	d101      	bne.n	800cf72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e000      	b.n	800cf74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b086      	sub	sp, #24
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
 800cf86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cf8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cf96:	2300      	movs	r3, #0
 800cf98:	613b      	str	r3, [r7, #16]
 800cf9a:	e009      	b.n	800cfb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	3340      	adds	r3, #64	; 0x40
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	3301      	adds	r3, #1
 800cfae:	613b      	str	r3, [r7, #16]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	2b0e      	cmp	r3, #14
 800cfb4:	d9f2      	bls.n	800cf9c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cfb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d11c      	bne.n	800cff6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfca:	f043 0302 	orr.w	r3, r3, #2
 800cfce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	e005      	b.n	800d002 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d008:	461a      	mov	r2, r3
 800d00a:	2300      	movs	r3, #0
 800d00c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d014:	4619      	mov	r1, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d01c:	461a      	mov	r2, r3
 800d01e:	680b      	ldr	r3, [r1, #0]
 800d020:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d024:	2b01      	cmp	r3, #1
 800d026:	d10c      	bne.n	800d042 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d104      	bne.n	800d038 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d02e:	2100      	movs	r1, #0
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f965 	bl	800d300 <USB_SetDevSpeed>
 800d036:	e008      	b.n	800d04a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d038:	2101      	movs	r1, #1
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f960 	bl	800d300 <USB_SetDevSpeed>
 800d040:	e003      	b.n	800d04a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d042:	2103      	movs	r1, #3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f95b 	bl	800d300 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d04a:	2110      	movs	r1, #16
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f8f3 	bl	800d238 <USB_FlushTxFifo>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d058:	2301      	movs	r3, #1
 800d05a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 f91f 	bl	800d2a0 <USB_FlushRxFifo>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d001      	beq.n	800d06c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d072:	461a      	mov	r2, r3
 800d074:	2300      	movs	r3, #0
 800d076:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d07e:	461a      	mov	r2, r3
 800d080:	2300      	movs	r3, #0
 800d082:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d08a:	461a      	mov	r2, r3
 800d08c:	2300      	movs	r3, #0
 800d08e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d090:	2300      	movs	r3, #0
 800d092:	613b      	str	r3, [r7, #16]
 800d094:	e043      	b.n	800d11e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	015a      	lsls	r2, r3, #5
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	4413      	add	r3, r2
 800d09e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d0a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d0ac:	d118      	bne.n	800d0e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d10a      	bne.n	800d0ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	015a      	lsls	r2, r3, #5
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	e013      	b.n	800d0f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d0dc:	6013      	str	r3, [r2, #0]
 800d0de:	e008      	b.n	800d0f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	015a      	lsls	r2, r3, #5
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	015a      	lsls	r2, r3, #5
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0fe:	461a      	mov	r2, r3
 800d100:	2300      	movs	r3, #0
 800d102:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	015a      	lsls	r2, r3, #5
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	4413      	add	r3, r2
 800d10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d110:	461a      	mov	r2, r3
 800d112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d116:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	3301      	adds	r3, #1
 800d11c:	613b      	str	r3, [r7, #16]
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	693a      	ldr	r2, [r7, #16]
 800d122:	429a      	cmp	r2, r3
 800d124:	d3b7      	bcc.n	800d096 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
 800d12a:	e043      	b.n	800d1b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	015a      	lsls	r2, r3, #5
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	4413      	add	r3, r2
 800d134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d13e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d142:	d118      	bne.n	800d176 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10a      	bne.n	800d160 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	015a      	lsls	r2, r3, #5
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	4413      	add	r3, r2
 800d152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d156:	461a      	mov	r2, r3
 800d158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d15c:	6013      	str	r3, [r2, #0]
 800d15e:	e013      	b.n	800d188 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d16c:	461a      	mov	r2, r3
 800d16e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	e008      	b.n	800d188 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	015a      	lsls	r2, r3, #5
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	4413      	add	r3, r2
 800d17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d182:	461a      	mov	r2, r3
 800d184:	2300      	movs	r3, #0
 800d186:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	015a      	lsls	r2, r3, #5
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	4413      	add	r3, r2
 800d190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d194:	461a      	mov	r2, r3
 800d196:	2300      	movs	r3, #0
 800d198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	015a      	lsls	r2, r3, #5
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	613b      	str	r3, [r7, #16]
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d3b7      	bcc.n	800d12c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d1dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d105      	bne.n	800d1f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	699b      	ldr	r3, [r3, #24]
 800d1e8:	f043 0210 	orr.w	r2, r3, #16
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	699a      	ldr	r2, [r3, #24]
 800d1f4:	4b0f      	ldr	r3, [pc, #60]	; (800d234 <USB_DevInit+0x2b8>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	687a      	ldr	r2, [r7, #4]
 800d1fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	699b      	ldr	r3, [r3, #24]
 800d206:	f043 0208 	orr.w	r2, r3, #8
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d20e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d210:	2b01      	cmp	r3, #1
 800d212:	d107      	bne.n	800d224 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d21c:	f043 0304 	orr.w	r3, r3, #4
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d230:	b004      	add	sp, #16
 800d232:	4770      	bx	lr
 800d234:	803c3800 	.word	0x803c3800

0800d238 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d242:	2300      	movs	r3, #0
 800d244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3301      	adds	r3, #1
 800d24a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4a13      	ldr	r2, [pc, #76]	; (800d29c <USB_FlushTxFifo+0x64>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d901      	bls.n	800d258 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d254:	2303      	movs	r3, #3
 800d256:	e01b      	b.n	800d290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	daf2      	bge.n	800d246 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d260:	2300      	movs	r3, #0
 800d262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	019b      	lsls	r3, r3, #6
 800d268:	f043 0220 	orr.w	r2, r3, #32
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	3301      	adds	r3, #1
 800d274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	4a08      	ldr	r2, [pc, #32]	; (800d29c <USB_FlushTxFifo+0x64>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d901      	bls.n	800d282 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d27e:	2303      	movs	r3, #3
 800d280:	e006      	b.n	800d290 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	f003 0320 	and.w	r3, r3, #32
 800d28a:	2b20      	cmp	r3, #32
 800d28c:	d0f0      	beq.n	800d270 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	00030d40 	.word	0x00030d40

0800d2a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	4a11      	ldr	r2, [pc, #68]	; (800d2fc <USB_FlushRxFifo+0x5c>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d901      	bls.n	800d2be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d2ba:	2303      	movs	r3, #3
 800d2bc:	e018      	b.n	800d2f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	daf2      	bge.n	800d2ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2210      	movs	r2, #16
 800d2ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	4a08      	ldr	r2, [pc, #32]	; (800d2fc <USB_FlushRxFifo+0x5c>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d901      	bls.n	800d2e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d2de:	2303      	movs	r3, #3
 800d2e0:	e006      	b.n	800d2f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	691b      	ldr	r3, [r3, #16]
 800d2e6:	f003 0310 	and.w	r3, r3, #16
 800d2ea:	2b10      	cmp	r3, #16
 800d2ec:	d0f0      	beq.n	800d2d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	00030d40 	.word	0x00030d40

0800d300 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d300:	b480      	push	{r7}
 800d302:	b085      	sub	sp, #20
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	78fb      	ldrb	r3, [r7, #3]
 800d31a:	68f9      	ldr	r1, [r7, #12]
 800d31c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d320:	4313      	orrs	r3, r2
 800d322:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3714      	adds	r7, #20
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d332:	b480      	push	{r7}
 800d334:	b087      	sub	sp, #28
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	f003 0306 	and.w	r3, r3, #6
 800d34a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d102      	bne.n	800d358 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d352:	2300      	movs	r3, #0
 800d354:	75fb      	strb	r3, [r7, #23]
 800d356:	e00a      	b.n	800d36e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d002      	beq.n	800d364 <USB_GetDevSpeed+0x32>
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b06      	cmp	r3, #6
 800d362:	d102      	bne.n	800d36a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d364:	2302      	movs	r3, #2
 800d366:	75fb      	strb	r3, [r7, #23]
 800d368:	e001      	b.n	800d36e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d36a:	230f      	movs	r3, #15
 800d36c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d370:	4618      	mov	r0, r3
 800d372:	371c      	adds	r7, #28
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	785b      	ldrb	r3, [r3, #1]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d13a      	bne.n	800d40e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d39e:	69da      	ldr	r2, [r3, #28]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	f003 030f 	and.w	r3, r3, #15
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	68f9      	ldr	r1, [r7, #12]
 800d3b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	015a      	lsls	r2, r3, #5
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d155      	bne.n	800d47c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	015a      	lsls	r2, r3, #5
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	791b      	ldrb	r3, [r3, #4]
 800d3ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d3ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	059b      	lsls	r3, r3, #22
 800d3f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	0151      	lsls	r1, r2, #5
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	440a      	add	r2, r1
 800d3fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d40a:	6013      	str	r3, [r2, #0]
 800d40c:	e036      	b.n	800d47c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d414:	69da      	ldr	r2, [r3, #28]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	f003 030f 	and.w	r3, r3, #15
 800d41e:	2101      	movs	r1, #1
 800d420:	fa01 f303 	lsl.w	r3, r1, r3
 800d424:	041b      	lsls	r3, r3, #16
 800d426:	68f9      	ldr	r1, [r7, #12]
 800d428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d42c:	4313      	orrs	r3, r2
 800d42e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	015a      	lsls	r2, r3, #5
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4413      	add	r3, r2
 800d438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d11a      	bne.n	800d47c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	015a      	lsls	r2, r3, #5
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	4413      	add	r3, r2
 800d44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	791b      	ldrb	r3, [r3, #4]
 800d460:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d462:	430b      	orrs	r3, r1
 800d464:	4313      	orrs	r3, r2
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	0151      	lsls	r1, r2, #5
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	440a      	add	r2, r1
 800d46e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d47a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
	...

0800d48c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	785b      	ldrb	r3, [r3, #1]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d161      	bne.n	800d56c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	015a      	lsls	r2, r3, #5
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4be:	d11f      	bne.n	800d500 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	0151      	lsls	r1, r2, #5
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	440a      	add	r2, r1
 800d4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	015a      	lsls	r2, r3, #5
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	0151      	lsls	r1, r2, #5
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	440a      	add	r2, r1
 800d4f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d4fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	f003 030f 	and.w	r3, r3, #15
 800d510:	2101      	movs	r1, #1
 800d512:	fa01 f303 	lsl.w	r3, r1, r3
 800d516:	b29b      	uxth	r3, r3
 800d518:	43db      	mvns	r3, r3
 800d51a:	68f9      	ldr	r1, [r7, #12]
 800d51c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d520:	4013      	ands	r3, r2
 800d522:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d52a:	69da      	ldr	r2, [r3, #28]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	f003 030f 	and.w	r3, r3, #15
 800d534:	2101      	movs	r1, #1
 800d536:	fa01 f303 	lsl.w	r3, r1, r3
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	43db      	mvns	r3, r3
 800d53e:	68f9      	ldr	r1, [r7, #12]
 800d540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d544:	4013      	ands	r3, r2
 800d546:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	015a      	lsls	r2, r3, #5
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	4413      	add	r3, r2
 800d550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	0159      	lsls	r1, r3, #5
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	440b      	add	r3, r1
 800d55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d562:	4619      	mov	r1, r3
 800d564:	4b35      	ldr	r3, [pc, #212]	; (800d63c <USB_DeactivateEndpoint+0x1b0>)
 800d566:	4013      	ands	r3, r2
 800d568:	600b      	str	r3, [r1, #0]
 800d56a:	e060      	b.n	800d62e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	015a      	lsls	r2, r3, #5
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	4413      	add	r3, r2
 800d574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d57e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d582:	d11f      	bne.n	800d5c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	015a      	lsls	r2, r3, #5
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	4413      	add	r3, r2
 800d58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68ba      	ldr	r2, [r7, #8]
 800d594:	0151      	lsls	r1, r2, #5
 800d596:	68fa      	ldr	r2, [r7, #12]
 800d598:	440a      	add	r2, r1
 800d59a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d59e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	015a      	lsls	r2, r3, #5
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	0151      	lsls	r1, r2, #5
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	440a      	add	r2, r1
 800d5ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	f003 030f 	and.w	r3, r3, #15
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5da:	041b      	lsls	r3, r3, #16
 800d5dc:	43db      	mvns	r3, r3
 800d5de:	68f9      	ldr	r1, [r7, #12]
 800d5e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5ee:	69da      	ldr	r2, [r3, #28]
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	f003 030f 	and.w	r3, r3, #15
 800d5f8:	2101      	movs	r1, #1
 800d5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d5fe:	041b      	lsls	r3, r3, #16
 800d600:	43db      	mvns	r3, r3
 800d602:	68f9      	ldr	r1, [r7, #12]
 800d604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d608:	4013      	ands	r3, r2
 800d60a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	015a      	lsls	r2, r3, #5
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4413      	add	r3, r2
 800d614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	0159      	lsls	r1, r3, #5
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	440b      	add	r3, r1
 800d622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d626:	4619      	mov	r1, r3
 800d628:	4b05      	ldr	r3, [pc, #20]	; (800d640 <USB_DeactivateEndpoint+0x1b4>)
 800d62a:	4013      	ands	r3, r2
 800d62c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	ec337800 	.word	0xec337800
 800d640:	eff37800 	.word	0xeff37800

0800d644 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08a      	sub	sp, #40	; 0x28
 800d648:	af02      	add	r7, sp, #8
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	4613      	mov	r3, r2
 800d650:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	785b      	ldrb	r3, [r3, #1]
 800d660:	2b01      	cmp	r3, #1
 800d662:	f040 815c 	bne.w	800d91e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d132      	bne.n	800d6d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	015a      	lsls	r2, r3, #5
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	4413      	add	r3, r2
 800d676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	69ba      	ldr	r2, [r7, #24]
 800d67e:	0151      	lsls	r1, r2, #5
 800d680:	69fa      	ldr	r2, [r7, #28]
 800d682:	440a      	add	r2, r1
 800d684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d68c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	015a      	lsls	r2, r3, #5
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	4413      	add	r3, r2
 800d69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	69ba      	ldr	r2, [r7, #24]
 800d6a2:	0151      	lsls	r1, r2, #5
 800d6a4:	69fa      	ldr	r2, [r7, #28]
 800d6a6:	440a      	add	r2, r1
 800d6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d6b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	015a      	lsls	r2, r3, #5
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	4413      	add	r3, r2
 800d6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	69ba      	ldr	r2, [r7, #24]
 800d6c2:	0151      	lsls	r1, r2, #5
 800d6c4:	69fa      	ldr	r2, [r7, #28]
 800d6c6:	440a      	add	r2, r1
 800d6c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6cc:	0cdb      	lsrs	r3, r3, #19
 800d6ce:	04db      	lsls	r3, r3, #19
 800d6d0:	6113      	str	r3, [r2, #16]
 800d6d2:	e074      	b.n	800d7be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d6d4:	69bb      	ldr	r3, [r7, #24]
 800d6d6:	015a      	lsls	r2, r3, #5
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	4413      	add	r3, r2
 800d6dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e0:	691b      	ldr	r3, [r3, #16]
 800d6e2:	69ba      	ldr	r2, [r7, #24]
 800d6e4:	0151      	lsls	r1, r2, #5
 800d6e6:	69fa      	ldr	r2, [r7, #28]
 800d6e8:	440a      	add	r2, r1
 800d6ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6ee:	0cdb      	lsrs	r3, r3, #19
 800d6f0:	04db      	lsls	r3, r3, #19
 800d6f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	015a      	lsls	r2, r3, #5
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	69ba      	ldr	r2, [r7, #24]
 800d704:	0151      	lsls	r1, r2, #5
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	440a      	add	r2, r1
 800d70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d70e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d712:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	015a      	lsls	r2, r3, #5
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	4413      	add	r3, r2
 800d720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d724:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	6999      	ldr	r1, [r3, #24]
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	440b      	add	r3, r1
 800d730:	1e59      	subs	r1, r3, #1
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	fbb1 f3f3 	udiv	r3, r1, r3
 800d73a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d73c:	4b9d      	ldr	r3, [pc, #628]	; (800d9b4 <USB_EPStartXfer+0x370>)
 800d73e:	400b      	ands	r3, r1
 800d740:	69b9      	ldr	r1, [r7, #24]
 800d742:	0148      	lsls	r0, r1, #5
 800d744:	69f9      	ldr	r1, [r7, #28]
 800d746:	4401      	add	r1, r0
 800d748:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d74c:	4313      	orrs	r3, r2
 800d74e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	4413      	add	r3, r2
 800d758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d75c:	691a      	ldr	r2, [r3, #16]
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d766:	69b9      	ldr	r1, [r7, #24]
 800d768:	0148      	lsls	r0, r1, #5
 800d76a:	69f9      	ldr	r1, [r7, #28]
 800d76c:	4401      	add	r1, r0
 800d76e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d772:	4313      	orrs	r3, r2
 800d774:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	791b      	ldrb	r3, [r3, #4]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d11f      	bne.n	800d7be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	015a      	lsls	r2, r3, #5
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	4413      	add	r3, r2
 800d786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d78a:	691b      	ldr	r3, [r3, #16]
 800d78c:	69ba      	ldr	r2, [r7, #24]
 800d78e:	0151      	lsls	r1, r2, #5
 800d790:	69fa      	ldr	r2, [r7, #28]
 800d792:	440a      	add	r2, r1
 800d794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d798:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d79c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	69ba      	ldr	r2, [r7, #24]
 800d7ae:	0151      	lsls	r1, r2, #5
 800d7b0:	69fa      	ldr	r2, [r7, #28]
 800d7b2:	440a      	add	r2, r1
 800d7b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d7bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d7be:	79fb      	ldrb	r3, [r7, #7]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d14b      	bne.n	800d85c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	695b      	ldr	r3, [r3, #20]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d009      	beq.n	800d7e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	015a      	lsls	r2, r3, #5
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	4413      	add	r3, r2
 800d7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7d8:	461a      	mov	r2, r3
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	791b      	ldrb	r3, [r3, #4]
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d128      	bne.n	800d83a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d110      	bne.n	800d81a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	015a      	lsls	r2, r3, #5
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	69ba      	ldr	r2, [r7, #24]
 800d808:	0151      	lsls	r1, r2, #5
 800d80a:	69fa      	ldr	r2, [r7, #28]
 800d80c:	440a      	add	r2, r1
 800d80e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	e00f      	b.n	800d83a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	015a      	lsls	r2, r3, #5
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	4413      	add	r3, r2
 800d822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	0151      	lsls	r1, r2, #5
 800d82c:	69fa      	ldr	r2, [r7, #28]
 800d82e:	440a      	add	r2, r1
 800d830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d838:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	015a      	lsls	r2, r3, #5
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	4413      	add	r3, r2
 800d842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	0151      	lsls	r1, r2, #5
 800d84c:	69fa      	ldr	r2, [r7, #28]
 800d84e:	440a      	add	r2, r1
 800d850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d854:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d858:	6013      	str	r3, [r2, #0]
 800d85a:	e133      	b.n	800dac4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	015a      	lsls	r2, r3, #5
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	4413      	add	r3, r2
 800d864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	69ba      	ldr	r2, [r7, #24]
 800d86c:	0151      	lsls	r1, r2, #5
 800d86e:	69fa      	ldr	r2, [r7, #28]
 800d870:	440a      	add	r2, r1
 800d872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d87a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	791b      	ldrb	r3, [r3, #4]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d015      	beq.n	800d8b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	f000 811b 	beq.w	800dac4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	f003 030f 	and.w	r3, r3, #15
 800d89e:	2101      	movs	r1, #1
 800d8a0:	fa01 f303 	lsl.w	r3, r1, r3
 800d8a4:	69f9      	ldr	r1, [r7, #28]
 800d8a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	634b      	str	r3, [r1, #52]	; 0x34
 800d8ae:	e109      	b.n	800dac4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8b0:	69fb      	ldr	r3, [r7, #28]
 800d8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d110      	bne.n	800d8e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	015a      	lsls	r2, r3, #5
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	0151      	lsls	r1, r2, #5
 800d8d2:	69fa      	ldr	r2, [r7, #28]
 800d8d4:	440a      	add	r2, r1
 800d8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8de:	6013      	str	r3, [r2, #0]
 800d8e0:	e00f      	b.n	800d902 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	015a      	lsls	r2, r3, #5
 800d8e6:	69fb      	ldr	r3, [r7, #28]
 800d8e8:	4413      	add	r3, r2
 800d8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	69ba      	ldr	r2, [r7, #24]
 800d8f2:	0151      	lsls	r1, r2, #5
 800d8f4:	69fa      	ldr	r2, [r7, #28]
 800d8f6:	440a      	add	r2, r1
 800d8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d900:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6919      	ldr	r1, [r3, #16]
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	781a      	ldrb	r2, [r3, #0]
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	699b      	ldr	r3, [r3, #24]
 800d90e:	b298      	uxth	r0, r3
 800d910:	79fb      	ldrb	r3, [r7, #7]
 800d912:	9300      	str	r3, [sp, #0]
 800d914:	4603      	mov	r3, r0
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f000 fade 	bl	800ded8 <USB_WritePacket>
 800d91c:	e0d2      	b.n	800dac4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	015a      	lsls	r2, r3, #5
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	4413      	add	r3, r2
 800d926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	0151      	lsls	r1, r2, #5
 800d930:	69fa      	ldr	r2, [r7, #28]
 800d932:	440a      	add	r2, r1
 800d934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d938:	0cdb      	lsrs	r3, r3, #19
 800d93a:	04db      	lsls	r3, r3, #19
 800d93c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	015a      	lsls	r2, r3, #5
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	4413      	add	r3, r2
 800d946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	69ba      	ldr	r2, [r7, #24]
 800d94e:	0151      	lsls	r1, r2, #5
 800d950:	69fa      	ldr	r2, [r7, #28]
 800d952:	440a      	add	r2, r1
 800d954:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d958:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d95c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d960:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	699b      	ldr	r3, [r3, #24]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d126      	bne.n	800d9b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	015a      	lsls	r2, r3, #5
 800d96e:	69fb      	ldr	r3, [r7, #28]
 800d970:	4413      	add	r3, r2
 800d972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d976:	691a      	ldr	r2, [r3, #16]
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d980:	69b9      	ldr	r1, [r7, #24]
 800d982:	0148      	lsls	r0, r1, #5
 800d984:	69f9      	ldr	r1, [r7, #28]
 800d986:	4401      	add	r1, r0
 800d988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d98c:	4313      	orrs	r3, r2
 800d98e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	015a      	lsls	r2, r3, #5
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	4413      	add	r3, r2
 800d998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	69ba      	ldr	r2, [r7, #24]
 800d9a0:	0151      	lsls	r1, r2, #5
 800d9a2:	69fa      	ldr	r2, [r7, #28]
 800d9a4:	440a      	add	r2, r1
 800d9a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9ae:	6113      	str	r3, [r2, #16]
 800d9b0:	e03a      	b.n	800da28 <USB_EPStartXfer+0x3e4>
 800d9b2:	bf00      	nop
 800d9b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	699a      	ldr	r2, [r3, #24]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	1e5a      	subs	r2, r3, #1
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	68db      	ldr	r3, [r3, #12]
 800d9d2:	8afa      	ldrh	r2, [r7, #22]
 800d9d4:	fb03 f202 	mul.w	r2, r3, r2
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e8:	691a      	ldr	r2, [r3, #16]
 800d9ea:	8afb      	ldrh	r3, [r7, #22]
 800d9ec:	04d9      	lsls	r1, r3, #19
 800d9ee:	4b38      	ldr	r3, [pc, #224]	; (800dad0 <USB_EPStartXfer+0x48c>)
 800d9f0:	400b      	ands	r3, r1
 800d9f2:	69b9      	ldr	r1, [r7, #24]
 800d9f4:	0148      	lsls	r0, r1, #5
 800d9f6:	69f9      	ldr	r1, [r7, #28]
 800d9f8:	4401      	add	r1, r0
 800d9fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d9fe:	4313      	orrs	r3, r2
 800da00:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	015a      	lsls	r2, r3, #5
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	4413      	add	r3, r2
 800da0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0e:	691a      	ldr	r2, [r3, #16]
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da18:	69b9      	ldr	r1, [r7, #24]
 800da1a:	0148      	lsls	r0, r1, #5
 800da1c:	69f9      	ldr	r1, [r7, #28]
 800da1e:	4401      	add	r1, r0
 800da20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da24:	4313      	orrs	r3, r2
 800da26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800da28:	79fb      	ldrb	r3, [r7, #7]
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d10d      	bne.n	800da4a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d009      	beq.n	800da4a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	6919      	ldr	r1, [r3, #16]
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	015a      	lsls	r2, r3, #5
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	4413      	add	r3, r2
 800da42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da46:	460a      	mov	r2, r1
 800da48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	791b      	ldrb	r3, [r3, #4]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d128      	bne.n	800daa4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d110      	bne.n	800da84 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	015a      	lsls	r2, r3, #5
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	4413      	add	r3, r2
 800da6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	0151      	lsls	r1, r2, #5
 800da74:	69fa      	ldr	r2, [r7, #28]
 800da76:	440a      	add	r2, r1
 800da78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da80:	6013      	str	r3, [r2, #0]
 800da82:	e00f      	b.n	800daa4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	015a      	lsls	r2, r3, #5
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	4413      	add	r3, r2
 800da8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	0151      	lsls	r1, r2, #5
 800da96:	69fa      	ldr	r2, [r7, #28]
 800da98:	440a      	add	r2, r1
 800da9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800daa2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	015a      	lsls	r2, r3, #5
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	4413      	add	r3, r2
 800daac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	69ba      	ldr	r2, [r7, #24]
 800dab4:	0151      	lsls	r1, r2, #5
 800dab6:	69fa      	ldr	r2, [r7, #28]
 800dab8:	440a      	add	r2, r1
 800daba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dabe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3720      	adds	r7, #32
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	1ff80000 	.word	0x1ff80000

0800dad4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b087      	sub	sp, #28
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	4613      	mov	r3, r2
 800dae0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	785b      	ldrb	r3, [r3, #1]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	f040 80ce 	bne.w	800dc92 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d132      	bne.n	800db64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	015a      	lsls	r2, r3, #5
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	4413      	add	r3, r2
 800db06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	0151      	lsls	r1, r2, #5
 800db10:	697a      	ldr	r2, [r7, #20]
 800db12:	440a      	add	r2, r1
 800db14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800db1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800db20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	015a      	lsls	r2, r3, #5
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	4413      	add	r3, r2
 800db2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	0151      	lsls	r1, r2, #5
 800db34:	697a      	ldr	r2, [r7, #20]
 800db36:	440a      	add	r2, r1
 800db38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	015a      	lsls	r2, r3, #5
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	4413      	add	r3, r2
 800db4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	693a      	ldr	r2, [r7, #16]
 800db52:	0151      	lsls	r1, r2, #5
 800db54:	697a      	ldr	r2, [r7, #20]
 800db56:	440a      	add	r2, r1
 800db58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db5c:	0cdb      	lsrs	r3, r3, #19
 800db5e:	04db      	lsls	r3, r3, #19
 800db60:	6113      	str	r3, [r2, #16]
 800db62:	e04e      	b.n	800dc02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	015a      	lsls	r2, r3, #5
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	4413      	add	r3, r2
 800db6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db70:	691b      	ldr	r3, [r3, #16]
 800db72:	693a      	ldr	r2, [r7, #16]
 800db74:	0151      	lsls	r1, r2, #5
 800db76:	697a      	ldr	r2, [r7, #20]
 800db78:	440a      	add	r2, r1
 800db7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db7e:	0cdb      	lsrs	r3, r3, #19
 800db80:	04db      	lsls	r3, r3, #19
 800db82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	015a      	lsls	r2, r3, #5
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	4413      	add	r3, r2
 800db8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	693a      	ldr	r2, [r7, #16]
 800db94:	0151      	lsls	r1, r2, #5
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	440a      	add	r2, r1
 800db9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dba2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dba6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	699a      	ldr	r2, [r3, #24]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d903      	bls.n	800dbbc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	68da      	ldr	r2, [r3, #12]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	015a      	lsls	r2, r3, #5
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	0151      	lsls	r1, r2, #5
 800dbce:	697a      	ldr	r2, [r7, #20]
 800dbd0:	440a      	add	r2, r1
 800dbd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	015a      	lsls	r2, r3, #5
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbe8:	691a      	ldr	r2, [r3, #16]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	699b      	ldr	r3, [r3, #24]
 800dbee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbf2:	6939      	ldr	r1, [r7, #16]
 800dbf4:	0148      	lsls	r0, r1, #5
 800dbf6:	6979      	ldr	r1, [r7, #20]
 800dbf8:	4401      	add	r1, r0
 800dbfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d11e      	bne.n	800dc46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	695b      	ldr	r3, [r3, #20]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d009      	beq.n	800dc24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	015a      	lsls	r2, r3, #5
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	4413      	add	r3, r2
 800dc18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	695b      	ldr	r3, [r3, #20]
 800dc22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	015a      	lsls	r2, r3, #5
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	0151      	lsls	r1, r2, #5
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	440a      	add	r2, r1
 800dc3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc42:	6013      	str	r3, [r2, #0]
 800dc44:	e097      	b.n	800dd76 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	0151      	lsls	r1, r2, #5
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	440a      	add	r2, r1
 800dc5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	699b      	ldr	r3, [r3, #24]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 8083 	beq.w	800dd76 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f003 030f 	and.w	r3, r3, #15
 800dc80:	2101      	movs	r1, #1
 800dc82:	fa01 f303 	lsl.w	r3, r1, r3
 800dc86:	6979      	ldr	r1, [r7, #20]
 800dc88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	634b      	str	r3, [r1, #52]	; 0x34
 800dc90:	e071      	b.n	800dd76 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	015a      	lsls	r2, r3, #5
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	4413      	add	r3, r2
 800dc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc9e:	691b      	ldr	r3, [r3, #16]
 800dca0:	693a      	ldr	r2, [r7, #16]
 800dca2:	0151      	lsls	r1, r2, #5
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	440a      	add	r2, r1
 800dca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcac:	0cdb      	lsrs	r3, r3, #19
 800dcae:	04db      	lsls	r3, r3, #19
 800dcb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	015a      	lsls	r2, r3, #5
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	4413      	add	r3, r2
 800dcba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	0151      	lsls	r1, r2, #5
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	440a      	add	r2, r1
 800dcc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dcd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dcd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	699b      	ldr	r3, [r3, #24]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	68da      	ldr	r2, [r3, #12]
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	68da      	ldr	r2, [r3, #12]
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	015a      	lsls	r2, r3, #5
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	0151      	lsls	r1, r2, #5
 800dd00:	697a      	ldr	r2, [r7, #20]
 800dd02:	440a      	add	r2, r1
 800dd04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	015a      	lsls	r2, r3, #5
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	4413      	add	r3, r2
 800dd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd1a:	691a      	ldr	r2, [r3, #16]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	69db      	ldr	r3, [r3, #28]
 800dd20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd24:	6939      	ldr	r1, [r7, #16]
 800dd26:	0148      	lsls	r0, r1, #5
 800dd28:	6979      	ldr	r1, [r7, #20]
 800dd2a:	4401      	add	r1, r0
 800dd2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd30:	4313      	orrs	r3, r2
 800dd32:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dd34:	79fb      	ldrb	r3, [r7, #7]
 800dd36:	2b01      	cmp	r3, #1
 800dd38:	d10d      	bne.n	800dd56 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	691b      	ldr	r3, [r3, #16]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d009      	beq.n	800dd56 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	6919      	ldr	r1, [r3, #16]
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	015a      	lsls	r2, r3, #5
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd52:	460a      	mov	r2, r1
 800dd54:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	015a      	lsls	r2, r3, #5
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	693a      	ldr	r2, [r7, #16]
 800dd66:	0151      	lsls	r1, r2, #5
 800dd68:	697a      	ldr	r2, [r7, #20]
 800dd6a:	440a      	add	r2, r1
 800dd6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	371c      	adds	r7, #28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	785b      	ldrb	r3, [r3, #1]
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d14a      	bne.n	800de38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	015a      	lsls	r2, r3, #5
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	4413      	add	r3, r2
 800ddac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddba:	f040 8086 	bne.w	800deca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	7812      	ldrb	r2, [r2, #0]
 800ddd2:	0151      	lsls	r1, r2, #5
 800ddd4:	693a      	ldr	r2, [r7, #16]
 800ddd6:	440a      	add	r2, r1
 800ddd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dddc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800dde0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	015a      	lsls	r2, r3, #5
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	4413      	add	r3, r2
 800ddec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	7812      	ldrb	r2, [r2, #0]
 800ddf6:	0151      	lsls	r1, r2, #5
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	440a      	add	r2, r1
 800ddfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	3301      	adds	r3, #1
 800de0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f242 7210 	movw	r2, #10000	; 0x2710
 800de12:	4293      	cmp	r3, r2
 800de14:	d902      	bls.n	800de1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800de16:	2301      	movs	r3, #1
 800de18:	75fb      	strb	r3, [r7, #23]
          break;
 800de1a:	e056      	b.n	800deca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	015a      	lsls	r2, r3, #5
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	4413      	add	r3, r2
 800de26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de34:	d0e7      	beq.n	800de06 <USB_EPStopXfer+0x82>
 800de36:	e048      	b.n	800deca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	015a      	lsls	r2, r3, #5
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	4413      	add	r3, r2
 800de42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de50:	d13b      	bne.n	800deca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	015a      	lsls	r2, r3, #5
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	4413      	add	r3, r2
 800de5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	7812      	ldrb	r2, [r2, #0]
 800de66:	0151      	lsls	r1, r2, #5
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	440a      	add	r2, r1
 800de6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800de74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	015a      	lsls	r2, r3, #5
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	683a      	ldr	r2, [r7, #0]
 800de88:	7812      	ldrb	r2, [r2, #0]
 800de8a:	0151      	lsls	r1, r2, #5
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	440a      	add	r2, r1
 800de90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3301      	adds	r3, #1
 800de9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f242 7210 	movw	r2, #10000	; 0x2710
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d902      	bls.n	800deb0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	75fb      	strb	r3, [r7, #23]
          break;
 800deae:	e00c      	b.n	800deca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	015a      	lsls	r2, r3, #5
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	4413      	add	r3, r2
 800deba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dec8:	d0e7      	beq.n	800de9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800deca:	7dfb      	ldrb	r3, [r7, #23]
}
 800decc:	4618      	mov	r0, r3
 800dece:	371c      	adds	r7, #28
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ded8:	b480      	push	{r7}
 800deda:	b089      	sub	sp, #36	; 0x24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	4611      	mov	r1, r2
 800dee4:	461a      	mov	r2, r3
 800dee6:	460b      	mov	r3, r1
 800dee8:	71fb      	strb	r3, [r7, #7]
 800deea:	4613      	mov	r3, r2
 800deec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800def6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800defa:	2b00      	cmp	r3, #0
 800defc:	d123      	bne.n	800df46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800defe:	88bb      	ldrh	r3, [r7, #4]
 800df00:	3303      	adds	r3, #3
 800df02:	089b      	lsrs	r3, r3, #2
 800df04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800df06:	2300      	movs	r3, #0
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	e018      	b.n	800df3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df0c:	79fb      	ldrb	r3, [r7, #7]
 800df0e:	031a      	lsls	r2, r3, #12
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	4413      	add	r3, r2
 800df14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df18:	461a      	mov	r2, r3
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	3301      	adds	r3, #1
 800df24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	3301      	adds	r3, #1
 800df2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	3301      	adds	r3, #1
 800df30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	3301      	adds	r3, #1
 800df36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	3301      	adds	r3, #1
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	69ba      	ldr	r2, [r7, #24]
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	429a      	cmp	r2, r3
 800df44:	d3e2      	bcc.n	800df0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800df46:	2300      	movs	r3, #0
}
 800df48:	4618      	mov	r0, r3
 800df4a:	3724      	adds	r7, #36	; 0x24
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr

0800df54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800df54:	b480      	push	{r7}
 800df56:	b08b      	sub	sp, #44	; 0x2c
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	4613      	mov	r3, r2
 800df60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800df6a:	88fb      	ldrh	r3, [r7, #6]
 800df6c:	089b      	lsrs	r3, r3, #2
 800df6e:	b29b      	uxth	r3, r3
 800df70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800df72:	88fb      	ldrh	r3, [r7, #6]
 800df74:	f003 0303 	and.w	r3, r3, #3
 800df78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800df7a:	2300      	movs	r3, #0
 800df7c:	623b      	str	r3, [r7, #32]
 800df7e:	e014      	b.n	800dfaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800df80:	69bb      	ldr	r3, [r7, #24]
 800df82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	601a      	str	r2, [r3, #0]
    pDest++;
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8e:	3301      	adds	r3, #1
 800df90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df94:	3301      	adds	r3, #1
 800df96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	3301      	adds	r3, #1
 800df9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	623b      	str	r3, [r7, #32]
 800dfaa:	6a3a      	ldr	r2, [r7, #32]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d3e6      	bcc.n	800df80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800dfb2:	8bfb      	ldrh	r3, [r7, #30]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d01e      	beq.n	800dff6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	f107 0310 	add.w	r3, r7, #16
 800dfc8:	6812      	ldr	r2, [r2, #0]
 800dfca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	6a3b      	ldr	r3, [r7, #32]
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	00db      	lsls	r3, r3, #3
 800dfd4:	fa22 f303 	lsr.w	r3, r2, r3
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	701a      	strb	r2, [r3, #0]
      i++;
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	623b      	str	r3, [r7, #32]
      pDest++;
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800dfea:	8bfb      	ldrh	r3, [r7, #30]
 800dfec:	3b01      	subs	r3, #1
 800dfee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800dff0:	8bfb      	ldrh	r3, [r7, #30]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1ea      	bne.n	800dfcc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	372c      	adds	r7, #44	; 0x2c
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr

0800e004 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e004:	b480      	push	{r7}
 800e006:	b085      	sub	sp, #20
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	785b      	ldrb	r3, [r3, #1]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d12c      	bne.n	800e07a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	015a      	lsls	r2, r3, #5
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	4413      	add	r3, r2
 800e028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	db12      	blt.n	800e058 <USB_EPSetStall+0x54>
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00f      	beq.n	800e058 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	015a      	lsls	r2, r3, #5
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	4413      	add	r3, r2
 800e040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	0151      	lsls	r1, r2, #5
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	440a      	add	r2, r1
 800e04e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e052:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e056:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	015a      	lsls	r2, r3, #5
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	4413      	add	r3, r2
 800e060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68ba      	ldr	r2, [r7, #8]
 800e068:	0151      	lsls	r1, r2, #5
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	440a      	add	r2, r1
 800e06e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e072:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e076:	6013      	str	r3, [r2, #0]
 800e078:	e02b      	b.n	800e0d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	015a      	lsls	r2, r3, #5
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4413      	add	r3, r2
 800e082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	db12      	blt.n	800e0b2 <USB_EPSetStall+0xae>
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00f      	beq.n	800e0b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	015a      	lsls	r2, r3, #5
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	4413      	add	r3, r2
 800e09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	68ba      	ldr	r2, [r7, #8]
 800e0a2:	0151      	lsls	r1, r2, #5
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	440a      	add	r2, r1
 800e0a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e0b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	0151      	lsls	r1, r2, #5
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	440a      	add	r2, r1
 800e0c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e0d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0d2:	2300      	movs	r3, #0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3714      	adds	r7, #20
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	785b      	ldrb	r3, [r3, #1]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d128      	bne.n	800e14e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	015a      	lsls	r2, r3, #5
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	4413      	add	r3, r2
 800e104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68ba      	ldr	r2, [r7, #8]
 800e10c:	0151      	lsls	r1, r2, #5
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	440a      	add	r2, r1
 800e112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e116:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e11a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	791b      	ldrb	r3, [r3, #4]
 800e120:	2b03      	cmp	r3, #3
 800e122:	d003      	beq.n	800e12c <USB_EPClearStall+0x4c>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	791b      	ldrb	r3, [r3, #4]
 800e128:	2b02      	cmp	r3, #2
 800e12a:	d138      	bne.n	800e19e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	015a      	lsls	r2, r3, #5
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4413      	add	r3, r2
 800e134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68ba      	ldr	r2, [r7, #8]
 800e13c:	0151      	lsls	r1, r2, #5
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	440a      	add	r2, r1
 800e142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	e027      	b.n	800e19e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	015a      	lsls	r2, r3, #5
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	4413      	add	r3, r2
 800e156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	0151      	lsls	r1, r2, #5
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	440a      	add	r2, r1
 800e164:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e168:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e16c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	791b      	ldrb	r3, [r3, #4]
 800e172:	2b03      	cmp	r3, #3
 800e174:	d003      	beq.n	800e17e <USB_EPClearStall+0x9e>
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	791b      	ldrb	r3, [r3, #4]
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d10f      	bne.n	800e19e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	015a      	lsls	r2, r3, #5
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	4413      	add	r3, r2
 800e186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	0151      	lsls	r1, r2, #5
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	440a      	add	r2, r1
 800e194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e19c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3714      	adds	r7, #20
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e1ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1d6:	681a      	ldr	r2, [r3, #0]
 800e1d8:	78fb      	ldrb	r3, [r7, #3]
 800e1da:	011b      	lsls	r3, r3, #4
 800e1dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e1e0:	68f9      	ldr	r1, [r7, #12]
 800e1e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3714      	adds	r7, #20
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	68fa      	ldr	r2, [r7, #12]
 800e20e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e212:	f023 0303 	bic.w	r3, r3, #3
 800e216:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	68fa      	ldr	r2, [r7, #12]
 800e222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e226:	f023 0302 	bic.w	r3, r3, #2
 800e22a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3714      	adds	r7, #20
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e23a:	b480      	push	{r7}
 800e23c:	b085      	sub	sp, #20
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e254:	f023 0303 	bic.w	r3, r3, #3
 800e258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e268:	f043 0302 	orr.w	r3, r3, #2
 800e26c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	699b      	ldr	r3, [r3, #24]
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	4013      	ands	r3, r2
 800e292:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e294:	68fb      	ldr	r3, [r7, #12]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2a2:	b480      	push	{r7}
 800e2a4:	b085      	sub	sp, #20
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2b4:	699b      	ldr	r3, [r3, #24]
 800e2b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2be:	69db      	ldr	r3, [r3, #28]
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	4013      	ands	r3, r2
 800e2c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	0c1b      	lsrs	r3, r3, #16
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3714      	adds	r7, #20
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e8:	699b      	ldr	r3, [r3, #24]
 800e2ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f2:	69db      	ldr	r3, [r3, #28]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	b29b      	uxth	r3, r3
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3714      	adds	r7, #20
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e30a:	b480      	push	{r7}
 800e30c:	b085      	sub	sp, #20
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	460b      	mov	r3, r1
 800e314:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e31a:	78fb      	ldrb	r3, [r7, #3]
 800e31c:	015a      	lsls	r2, r3, #5
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	4413      	add	r3, r2
 800e322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e330:	695b      	ldr	r3, [r3, #20]
 800e332:	68ba      	ldr	r2, [r7, #8]
 800e334:	4013      	ands	r3, r2
 800e336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e338:	68bb      	ldr	r3, [r7, #8]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3714      	adds	r7, #20
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e346:	b480      	push	{r7}
 800e348:	b087      	sub	sp, #28
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	460b      	mov	r3, r1
 800e350:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e368:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e36a:	78fb      	ldrb	r3, [r7, #3]
 800e36c:	f003 030f 	and.w	r3, r3, #15
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	fa22 f303 	lsr.w	r3, r2, r3
 800e376:	01db      	lsls	r3, r3, #7
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	693a      	ldr	r2, [r7, #16]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	015a      	lsls	r2, r3, #5
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	4413      	add	r3, r2
 800e388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	693a      	ldr	r2, [r7, #16]
 800e390:	4013      	ands	r3, r2
 800e392:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e394:	68bb      	ldr	r3, [r7, #8]
}
 800e396:	4618      	mov	r0, r3
 800e398:	371c      	adds	r7, #28
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr

0800e3a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e3a2:	b480      	push	{r7}
 800e3a4:	b083      	sub	sp, #12
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	695b      	ldr	r3, [r3, #20]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	370c      	adds	r7, #12
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e3be:	b480      	push	{r7}
 800e3c0:	b085      	sub	sp, #20
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	68fa      	ldr	r2, [r7, #12]
 800e3d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e3dc:	f023 0307 	bic.w	r3, r3, #7
 800e3e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3714      	adds	r7, #20
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e404:	b480      	push	{r7}
 800e406:	b087      	sub	sp, #28
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	460b      	mov	r3, r1
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	333c      	adds	r3, #60	; 0x3c
 800e41a:	3304      	adds	r3, #4
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	4a26      	ldr	r2, [pc, #152]	; (800e4bc <USB_EP0_OutStart+0xb8>)
 800e424:	4293      	cmp	r3, r2
 800e426:	d90a      	bls.n	800e43e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e434:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e438:	d101      	bne.n	800e43e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e43a:	2300      	movs	r3, #0
 800e43c:	e037      	b.n	800e4ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e444:	461a      	mov	r2, r3
 800e446:	2300      	movs	r3, #0
 800e448:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e450:	691b      	ldr	r3, [r3, #16]
 800e452:	697a      	ldr	r2, [r7, #20]
 800e454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e45c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	697a      	ldr	r2, [r7, #20]
 800e468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e46c:	f043 0318 	orr.w	r3, r3, #24
 800e470:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	697a      	ldr	r2, [r7, #20]
 800e47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e480:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e484:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e486:	7afb      	ldrb	r3, [r7, #11]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d10f      	bne.n	800e4ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e492:	461a      	mov	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e4aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	371c      	adds	r7, #28
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	4f54300a 	.word	0x4f54300a

0800e4c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3301      	adds	r3, #1
 800e4d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	4a13      	ldr	r2, [pc, #76]	; (800e524 <USB_CoreReset+0x64>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d901      	bls.n	800e4de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e4da:	2303      	movs	r3, #3
 800e4dc:	e01b      	b.n	800e516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	691b      	ldr	r3, [r3, #16]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	daf2      	bge.n	800e4cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	f043 0201 	orr.w	r2, r3, #1
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	4a09      	ldr	r2, [pc, #36]	; (800e524 <USB_CoreReset+0x64>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d901      	bls.n	800e508 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e504:	2303      	movs	r3, #3
 800e506:	e006      	b.n	800e516 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	f003 0301 	and.w	r3, r3, #1
 800e510:	2b01      	cmp	r3, #1
 800e512:	d0f0      	beq.n	800e4f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3714      	adds	r7, #20
 800e51a:	46bd      	mov	sp, r7
 800e51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e520:	4770      	bx	lr
 800e522:	bf00      	nop
 800e524:	00030d40 	.word	0x00030d40

0800e528 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800e52c:	4904      	ldr	r1, [pc, #16]	; (800e540 <MX_FATFS_Init+0x18>)
 800e52e:	4805      	ldr	r0, [pc, #20]	; (800e544 <MX_FATFS_Init+0x1c>)
 800e530:	f002 fd76 	bl	8011020 <FATFS_LinkDriver>
 800e534:	4603      	mov	r3, r0
 800e536:	461a      	mov	r2, r3
 800e538:	4b03      	ldr	r3, [pc, #12]	; (800e548 <MX_FATFS_Init+0x20>)
 800e53a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e53c:	bf00      	nop
 800e53e:	bd80      	pop	{r7, pc}
 800e540:	200007c0 	.word	0x200007c0
 800e544:	20000028 	.word	0x20000028
 800e548:	200007bc 	.word	0x200007bc

0800e54c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	4603      	mov	r3, r0
 800e554:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800e556:	4b06      	ldr	r3, [pc, #24]	; (800e570 <USER_initialize+0x24>)
 800e558:	2201      	movs	r2, #1
 800e55a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e55c:	4b04      	ldr	r3, [pc, #16]	; (800e570 <USER_initialize+0x24>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800e562:	4618      	mov	r0, r3
 800e564:	370c      	adds	r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	20000025 	.word	0x20000025

0800e574 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e574:	b480      	push	{r7}
 800e576:	b083      	sub	sp, #12
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800e57e:	4b06      	ldr	r3, [pc, #24]	; (800e598 <USER_status+0x24>)
 800e580:	2201      	movs	r2, #1
 800e582:	701a      	strb	r2, [r3, #0]
    return Stat;
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <USER_status+0x24>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	370c      	adds	r7, #12
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	20000025 	.word	0x20000025

0800e59c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b085      	sub	sp, #20
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	60b9      	str	r1, [r7, #8]
 800e5a4:	607a      	str	r2, [r7, #4]
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800e5ac:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3714      	adds	r7, #20
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b085      	sub	sp, #20
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	607a      	str	r2, [r7, #4]
 800e5c4:	603b      	str	r3, [r7, #0]
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800e5ca:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3714      	adds	r7, #20
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	603a      	str	r2, [r7, #0]
 800e5e2:	71fb      	strb	r3, [r7, #7]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	73fb      	strb	r3, [r7, #15]
    return res;
 800e5ec:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
	...

0800e5fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	460b      	mov	r3, r1
 800e606:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e608:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e60c:	f007 fb22 	bl	8015c54 <USBD_static_malloc>
 800e610:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d109      	bne.n	800e62c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	32b0      	adds	r2, #176	; 0xb0
 800e622:	2100      	movs	r1, #0
 800e624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e628:	2302      	movs	r3, #2
 800e62a:	e0d4      	b.n	800e7d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e62c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800e630:	2100      	movs	r1, #0
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f007 fc88 	bl	8015f48 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	32b0      	adds	r2, #176	; 0xb0
 800e642:	68f9      	ldr	r1, [r7, #12]
 800e644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	32b0      	adds	r2, #176	; 0xb0
 800e652:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	7c1b      	ldrb	r3, [r3, #16]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d138      	bne.n	800e6d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e664:	4b5e      	ldr	r3, [pc, #376]	; (800e7e0 <USBD_CDC_Init+0x1e4>)
 800e666:	7819      	ldrb	r1, [r3, #0]
 800e668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e66c:	2202      	movs	r2, #2
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f007 f97f 	bl	8015972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e674:	4b5a      	ldr	r3, [pc, #360]	; (800e7e0 <USBD_CDC_Init+0x1e4>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	f003 020f 	and.w	r2, r3, #15
 800e67c:	6879      	ldr	r1, [r7, #4]
 800e67e:	4613      	mov	r3, r2
 800e680:	009b      	lsls	r3, r3, #2
 800e682:	4413      	add	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	440b      	add	r3, r1
 800e688:	3324      	adds	r3, #36	; 0x24
 800e68a:	2201      	movs	r2, #1
 800e68c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e68e:	4b55      	ldr	r3, [pc, #340]	; (800e7e4 <USBD_CDC_Init+0x1e8>)
 800e690:	7819      	ldrb	r1, [r3, #0]
 800e692:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e696:	2202      	movs	r2, #2
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f007 f96a 	bl	8015972 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e69e:	4b51      	ldr	r3, [pc, #324]	; (800e7e4 <USBD_CDC_Init+0x1e8>)
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	f003 020f 	and.w	r2, r3, #15
 800e6a6:	6879      	ldr	r1, [r7, #4]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	4413      	add	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	440b      	add	r3, r1
 800e6b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e6ba:	4b4b      	ldr	r3, [pc, #300]	; (800e7e8 <USBD_CDC_Init+0x1ec>)
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	f003 020f 	and.w	r2, r3, #15
 800e6c2:	6879      	ldr	r1, [r7, #4]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4413      	add	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	440b      	add	r3, r1
 800e6ce:	3326      	adds	r3, #38	; 0x26
 800e6d0:	2210      	movs	r2, #16
 800e6d2:	801a      	strh	r2, [r3, #0]
 800e6d4:	e035      	b.n	800e742 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e6d6:	4b42      	ldr	r3, [pc, #264]	; (800e7e0 <USBD_CDC_Init+0x1e4>)
 800e6d8:	7819      	ldrb	r1, [r3, #0]
 800e6da:	2340      	movs	r3, #64	; 0x40
 800e6dc:	2202      	movs	r2, #2
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f007 f947 	bl	8015972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e6e4:	4b3e      	ldr	r3, [pc, #248]	; (800e7e0 <USBD_CDC_Init+0x1e4>)
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	f003 020f 	and.w	r2, r3, #15
 800e6ec:	6879      	ldr	r1, [r7, #4]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	440b      	add	r3, r1
 800e6f8:	3324      	adds	r3, #36	; 0x24
 800e6fa:	2201      	movs	r2, #1
 800e6fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e6fe:	4b39      	ldr	r3, [pc, #228]	; (800e7e4 <USBD_CDC_Init+0x1e8>)
 800e700:	7819      	ldrb	r1, [r3, #0]
 800e702:	2340      	movs	r3, #64	; 0x40
 800e704:	2202      	movs	r2, #2
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f007 f933 	bl	8015972 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e70c:	4b35      	ldr	r3, [pc, #212]	; (800e7e4 <USBD_CDC_Init+0x1e8>)
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	f003 020f 	and.w	r2, r3, #15
 800e714:	6879      	ldr	r1, [r7, #4]
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	440b      	add	r3, r1
 800e720:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e724:	2201      	movs	r2, #1
 800e726:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e728:	4b2f      	ldr	r3, [pc, #188]	; (800e7e8 <USBD_CDC_Init+0x1ec>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	f003 020f 	and.w	r2, r3, #15
 800e730:	6879      	ldr	r1, [r7, #4]
 800e732:	4613      	mov	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	440b      	add	r3, r1
 800e73c:	3326      	adds	r3, #38	; 0x26
 800e73e:	2210      	movs	r2, #16
 800e740:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e742:	4b29      	ldr	r3, [pc, #164]	; (800e7e8 <USBD_CDC_Init+0x1ec>)
 800e744:	7819      	ldrb	r1, [r3, #0]
 800e746:	2308      	movs	r3, #8
 800e748:	2203      	movs	r2, #3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f007 f911 	bl	8015972 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e750:	4b25      	ldr	r3, [pc, #148]	; (800e7e8 <USBD_CDC_Init+0x1ec>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	f003 020f 	and.w	r2, r3, #15
 800e758:	6879      	ldr	r1, [r7, #4]
 800e75a:	4613      	mov	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	440b      	add	r3, r1
 800e764:	3324      	adds	r3, #36	; 0x24
 800e766:	2201      	movs	r2, #1
 800e768:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	33b0      	adds	r3, #176	; 0xb0
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	4413      	add	r3, r2
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2200      	movs	r2, #0
 800e78a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d101      	bne.n	800e7a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e7a0:	2302      	movs	r3, #2
 800e7a2:	e018      	b.n	800e7d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7c1b      	ldrb	r3, [r3, #16]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10a      	bne.n	800e7c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7ac:	4b0d      	ldr	r3, [pc, #52]	; (800e7e4 <USBD_CDC_Init+0x1e8>)
 800e7ae:	7819      	ldrb	r1, [r3, #0]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f007 f9c8 	bl	8015b50 <USBD_LL_PrepareReceive>
 800e7c0:	e008      	b.n	800e7d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e7c2:	4b08      	ldr	r3, [pc, #32]	; (800e7e4 <USBD_CDC_Init+0x1e8>)
 800e7c4:	7819      	ldrb	r1, [r3, #0]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e7cc:	2340      	movs	r3, #64	; 0x40
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f007 f9be 	bl	8015b50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	200000c3 	.word	0x200000c3
 800e7e4:	200000c4 	.word	0x200000c4
 800e7e8:	200000c5 	.word	0x200000c5

0800e7ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e7f8:	4b3a      	ldr	r3, [pc, #232]	; (800e8e4 <USBD_CDC_DeInit+0xf8>)
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f007 f8dd 	bl	80159be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e804:	4b37      	ldr	r3, [pc, #220]	; (800e8e4 <USBD_CDC_DeInit+0xf8>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f003 020f 	and.w	r2, r3, #15
 800e80c:	6879      	ldr	r1, [r7, #4]
 800e80e:	4613      	mov	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4413      	add	r3, r2
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	440b      	add	r3, r1
 800e818:	3324      	adds	r3, #36	; 0x24
 800e81a:	2200      	movs	r2, #0
 800e81c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e81e:	4b32      	ldr	r3, [pc, #200]	; (800e8e8 <USBD_CDC_DeInit+0xfc>)
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	4619      	mov	r1, r3
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f007 f8ca 	bl	80159be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e82a:	4b2f      	ldr	r3, [pc, #188]	; (800e8e8 <USBD_CDC_DeInit+0xfc>)
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	f003 020f 	and.w	r2, r3, #15
 800e832:	6879      	ldr	r1, [r7, #4]
 800e834:	4613      	mov	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	440b      	add	r3, r1
 800e83e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e842:	2200      	movs	r2, #0
 800e844:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e846:	4b29      	ldr	r3, [pc, #164]	; (800e8ec <USBD_CDC_DeInit+0x100>)
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	4619      	mov	r1, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f007 f8b6 	bl	80159be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e852:	4b26      	ldr	r3, [pc, #152]	; (800e8ec <USBD_CDC_DeInit+0x100>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	f003 020f 	and.w	r2, r3, #15
 800e85a:	6879      	ldr	r1, [r7, #4]
 800e85c:	4613      	mov	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	440b      	add	r3, r1
 800e866:	3324      	adds	r3, #36	; 0x24
 800e868:	2200      	movs	r2, #0
 800e86a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e86c:	4b1f      	ldr	r3, [pc, #124]	; (800e8ec <USBD_CDC_DeInit+0x100>)
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	f003 020f 	and.w	r2, r3, #15
 800e874:	6879      	ldr	r1, [r7, #4]
 800e876:	4613      	mov	r3, r2
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	009b      	lsls	r3, r3, #2
 800e87e:	440b      	add	r3, r1
 800e880:	3326      	adds	r3, #38	; 0x26
 800e882:	2200      	movs	r2, #0
 800e884:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	32b0      	adds	r2, #176	; 0xb0
 800e890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d01f      	beq.n	800e8d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	33b0      	adds	r3, #176	; 0xb0
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	4413      	add	r3, r2
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	32b0      	adds	r2, #176	; 0xb0
 800e8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f007 f9d8 	bl	8015c70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	32b0      	adds	r2, #176	; 0xb0
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	200000c3 	.word	0x200000c3
 800e8e8:	200000c4 	.word	0x200000c4
 800e8ec:	200000c5 	.word	0x200000c5

0800e8f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
 800e8f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	32b0      	adds	r2, #176	; 0xb0
 800e904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e908:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e90a:	2300      	movs	r3, #0
 800e90c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e90e:	2300      	movs	r3, #0
 800e910:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d101      	bne.n	800e920 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e91c:	2303      	movs	r3, #3
 800e91e:	e0bf      	b.n	800eaa0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d050      	beq.n	800e9ce <USBD_CDC_Setup+0xde>
 800e92c:	2b20      	cmp	r3, #32
 800e92e:	f040 80af 	bne.w	800ea90 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	88db      	ldrh	r3, [r3, #6]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d03a      	beq.n	800e9b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	b25b      	sxtb	r3, r3
 800e940:	2b00      	cmp	r3, #0
 800e942:	da1b      	bge.n	800e97c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e94a:	687a      	ldr	r2, [r7, #4]
 800e94c:	33b0      	adds	r3, #176	; 0xb0
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	4413      	add	r3, r2
 800e952:	685b      	ldr	r3, [r3, #4]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	683a      	ldr	r2, [r7, #0]
 800e958:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e95a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	88d2      	ldrh	r2, [r2, #6]
 800e960:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	88db      	ldrh	r3, [r3, #6]
 800e966:	2b07      	cmp	r3, #7
 800e968:	bf28      	it	cs
 800e96a:	2307      	movcs	r3, #7
 800e96c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	89fa      	ldrh	r2, [r7, #14]
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f001 fdb3 	bl	80104e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e97a:	e090      	b.n	800ea9e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	785a      	ldrb	r2, [r3, #1]
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	88db      	ldrh	r3, [r3, #6]
 800e98a:	2b3f      	cmp	r3, #63	; 0x3f
 800e98c:	d803      	bhi.n	800e996 <USBD_CDC_Setup+0xa6>
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	88db      	ldrh	r3, [r3, #6]
 800e992:	b2da      	uxtb	r2, r3
 800e994:	e000      	b.n	800e998 <USBD_CDC_Setup+0xa8>
 800e996:	2240      	movs	r2, #64	; 0x40
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e99e:	6939      	ldr	r1, [r7, #16]
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f001 fdc5 	bl	8010538 <USBD_CtlPrepareRx>
      break;
 800e9ae:	e076      	b.n	800ea9e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	33b0      	adds	r3, #176	; 0xb0
 800e9ba:	009b      	lsls	r3, r3, #2
 800e9bc:	4413      	add	r3, r2
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	7850      	ldrb	r0, [r2, #1]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	6839      	ldr	r1, [r7, #0]
 800e9ca:	4798      	blx	r3
      break;
 800e9cc:	e067      	b.n	800ea9e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	785b      	ldrb	r3, [r3, #1]
 800e9d2:	2b0b      	cmp	r3, #11
 800e9d4:	d851      	bhi.n	800ea7a <USBD_CDC_Setup+0x18a>
 800e9d6:	a201      	add	r2, pc, #4	; (adr r2, 800e9dc <USBD_CDC_Setup+0xec>)
 800e9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9dc:	0800ea0d 	.word	0x0800ea0d
 800e9e0:	0800ea89 	.word	0x0800ea89
 800e9e4:	0800ea7b 	.word	0x0800ea7b
 800e9e8:	0800ea7b 	.word	0x0800ea7b
 800e9ec:	0800ea7b 	.word	0x0800ea7b
 800e9f0:	0800ea7b 	.word	0x0800ea7b
 800e9f4:	0800ea7b 	.word	0x0800ea7b
 800e9f8:	0800ea7b 	.word	0x0800ea7b
 800e9fc:	0800ea7b 	.word	0x0800ea7b
 800ea00:	0800ea7b 	.word	0x0800ea7b
 800ea04:	0800ea37 	.word	0x0800ea37
 800ea08:	0800ea61 	.word	0x0800ea61
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d107      	bne.n	800ea28 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ea18:	f107 030a 	add.w	r3, r7, #10
 800ea1c:	2202      	movs	r2, #2
 800ea1e:	4619      	mov	r1, r3
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f001 fd5d 	bl	80104e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea26:	e032      	b.n	800ea8e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f001 fce7 	bl	80103fe <USBD_CtlError>
            ret = USBD_FAIL;
 800ea30:	2303      	movs	r3, #3
 800ea32:	75fb      	strb	r3, [r7, #23]
          break;
 800ea34:	e02b      	b.n	800ea8e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d107      	bne.n	800ea52 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ea42:	f107 030d 	add.w	r3, r7, #13
 800ea46:	2201      	movs	r2, #1
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f001 fd48 	bl	80104e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea50:	e01d      	b.n	800ea8e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f001 fcd2 	bl	80103fe <USBD_CtlError>
            ret = USBD_FAIL;
 800ea5a:	2303      	movs	r3, #3
 800ea5c:	75fb      	strb	r3, [r7, #23]
          break;
 800ea5e:	e016      	b.n	800ea8e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea66:	b2db      	uxtb	r3, r3
 800ea68:	2b03      	cmp	r3, #3
 800ea6a:	d00f      	beq.n	800ea8c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ea6c:	6839      	ldr	r1, [r7, #0]
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f001 fcc5 	bl	80103fe <USBD_CtlError>
            ret = USBD_FAIL;
 800ea74:	2303      	movs	r3, #3
 800ea76:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ea78:	e008      	b.n	800ea8c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f001 fcbe 	bl	80103fe <USBD_CtlError>
          ret = USBD_FAIL;
 800ea82:	2303      	movs	r3, #3
 800ea84:	75fb      	strb	r3, [r7, #23]
          break;
 800ea86:	e002      	b.n	800ea8e <USBD_CDC_Setup+0x19e>
          break;
 800ea88:	bf00      	nop
 800ea8a:	e008      	b.n	800ea9e <USBD_CDC_Setup+0x1ae>
          break;
 800ea8c:	bf00      	nop
      }
      break;
 800ea8e:	e006      	b.n	800ea9e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ea90:	6839      	ldr	r1, [r7, #0]
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f001 fcb3 	bl	80103fe <USBD_CtlError>
      ret = USBD_FAIL;
 800ea98:	2303      	movs	r3, #3
 800ea9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ea9c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ea9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3718      	adds	r7, #24
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}

0800eaa8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	460b      	mov	r3, r1
 800eab2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eaba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	32b0      	adds	r2, #176	; 0xb0
 800eac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d101      	bne.n	800ead2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800eace:	2303      	movs	r3, #3
 800ead0:	e065      	b.n	800eb9e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	32b0      	adds	r2, #176	; 0xb0
 800eadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eae0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eae2:	78fb      	ldrb	r3, [r7, #3]
 800eae4:	f003 020f 	and.w	r2, r3, #15
 800eae8:	6879      	ldr	r1, [r7, #4]
 800eaea:	4613      	mov	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4413      	add	r3, r2
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	440b      	add	r3, r1
 800eaf4:	3318      	adds	r3, #24
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d02f      	beq.n	800eb5c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800eafc:	78fb      	ldrb	r3, [r7, #3]
 800eafe:	f003 020f 	and.w	r2, r3, #15
 800eb02:	6879      	ldr	r1, [r7, #4]
 800eb04:	4613      	mov	r3, r2
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	009b      	lsls	r3, r3, #2
 800eb0c:	440b      	add	r3, r1
 800eb0e:	3318      	adds	r3, #24
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	78fb      	ldrb	r3, [r7, #3]
 800eb14:	f003 010f 	and.w	r1, r3, #15
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	460b      	mov	r3, r1
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	440b      	add	r3, r1
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	4403      	add	r3, r0
 800eb24:	3348      	adds	r3, #72	; 0x48
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	fbb2 f1f3 	udiv	r1, r2, r3
 800eb2c:	fb01 f303 	mul.w	r3, r1, r3
 800eb30:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d112      	bne.n	800eb5c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800eb36:	78fb      	ldrb	r3, [r7, #3]
 800eb38:	f003 020f 	and.w	r2, r3, #15
 800eb3c:	6879      	ldr	r1, [r7, #4]
 800eb3e:	4613      	mov	r3, r2
 800eb40:	009b      	lsls	r3, r3, #2
 800eb42:	4413      	add	r3, r2
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	440b      	add	r3, r1
 800eb48:	3318      	adds	r3, #24
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eb4e:	78f9      	ldrb	r1, [r7, #3]
 800eb50:	2300      	movs	r3, #0
 800eb52:	2200      	movs	r2, #0
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f006 ffda 	bl	8015b0e <USBD_LL_Transmit>
 800eb5a:	e01f      	b.n	800eb9c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	33b0      	adds	r3, #176	; 0xb0
 800eb6e:	009b      	lsls	r3, r3, #2
 800eb70:	4413      	add	r3, r2
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d010      	beq.n	800eb9c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800eb80:	687a      	ldr	r2, [r7, #4]
 800eb82:	33b0      	adds	r3, #176	; 0xb0
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	4413      	add	r3, r2
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	68ba      	ldr	r2, [r7, #8]
 800eb8e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800eb92:	68ba      	ldr	r2, [r7, #8]
 800eb94:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800eb98:	78fa      	ldrb	r2, [r7, #3]
 800eb9a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	460b      	mov	r3, r1
 800ebb0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	32b0      	adds	r2, #176	; 0xb0
 800ebbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	32b0      	adds	r2, #176	; 0xb0
 800ebcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d101      	bne.n	800ebd8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	e01a      	b.n	800ec0e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ebd8:	78fb      	ldrb	r3, [r7, #3]
 800ebda:	4619      	mov	r1, r3
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f006 ffd8 	bl	8015b92 <USBD_LL_GetRxDataSize>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ebf0:	687a      	ldr	r2, [r7, #4]
 800ebf2:	33b0      	adds	r3, #176	; 0xb0
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	4413      	add	r3, r2
 800ebf8:	685b      	ldr	r3, [r3, #4]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ec02:	68fa      	ldr	r2, [r7, #12]
 800ec04:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ec08:	4611      	mov	r1, r2
 800ec0a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}

0800ec16 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ec16:	b580      	push	{r7, lr}
 800ec18:	b084      	sub	sp, #16
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	32b0      	adds	r2, #176	; 0xb0
 800ec28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d101      	bne.n	800ec38 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ec34:	2303      	movs	r3, #3
 800ec36:	e025      	b.n	800ec84 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec3e:	687a      	ldr	r2, [r7, #4]
 800ec40:	33b0      	adds	r3, #176	; 0xb0
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	4413      	add	r3, r2
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d01a      	beq.n	800ec82 <USBD_CDC_EP0_RxReady+0x6c>
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ec52:	2bff      	cmp	r3, #255	; 0xff
 800ec54:	d015      	beq.n	800ec82 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	33b0      	adds	r3, #176	; 0xb0
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4413      	add	r3, r2
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ec6e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ec70:	68fa      	ldr	r2, [r7, #12]
 800ec72:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ec76:	b292      	uxth	r2, r2
 800ec78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	22ff      	movs	r2, #255	; 0xff
 800ec7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ec82:	2300      	movs	r3, #0
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3710      	adds	r7, #16
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b086      	sub	sp, #24
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ec94:	2182      	movs	r1, #130	; 0x82
 800ec96:	4818      	ldr	r0, [pc, #96]	; (800ecf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ec98:	f000 fd4f 	bl	800f73a <USBD_GetEpDesc>
 800ec9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ec9e:	2101      	movs	r1, #1
 800eca0:	4815      	ldr	r0, [pc, #84]	; (800ecf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eca2:	f000 fd4a 	bl	800f73a <USBD_GetEpDesc>
 800eca6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eca8:	2181      	movs	r1, #129	; 0x81
 800ecaa:	4813      	ldr	r0, [pc, #76]	; (800ecf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ecac:	f000 fd45 	bl	800f73a <USBD_GetEpDesc>
 800ecb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	2210      	movs	r2, #16
 800ecbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d006      	beq.n	800ecd2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eccc:	711a      	strb	r2, [r3, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d006      	beq.n	800ece6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ece0:	711a      	strb	r2, [r3, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2243      	movs	r2, #67	; 0x43
 800ecea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ecec:	4b02      	ldr	r3, [pc, #8]	; (800ecf8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3718      	adds	r7, #24
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	20000080 	.word	0x20000080

0800ecfc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ed04:	2182      	movs	r1, #130	; 0x82
 800ed06:	4818      	ldr	r0, [pc, #96]	; (800ed68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ed08:	f000 fd17 	bl	800f73a <USBD_GetEpDesc>
 800ed0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ed0e:	2101      	movs	r1, #1
 800ed10:	4815      	ldr	r0, [pc, #84]	; (800ed68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ed12:	f000 fd12 	bl	800f73a <USBD_GetEpDesc>
 800ed16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ed18:	2181      	movs	r1, #129	; 0x81
 800ed1a:	4813      	ldr	r0, [pc, #76]	; (800ed68 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ed1c:	f000 fd0d 	bl	800f73a <USBD_GetEpDesc>
 800ed20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d002      	beq.n	800ed2e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	2210      	movs	r2, #16
 800ed2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d006      	beq.n	800ed42 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	2200      	movs	r2, #0
 800ed38:	711a      	strb	r2, [r3, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f042 0202 	orr.w	r2, r2, #2
 800ed40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d006      	beq.n	800ed56 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	711a      	strb	r2, [r3, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f042 0202 	orr.w	r2, r2, #2
 800ed54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2243      	movs	r2, #67	; 0x43
 800ed5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ed5c:	4b02      	ldr	r3, [pc, #8]	; (800ed68 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3718      	adds	r7, #24
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
 800ed66:	bf00      	nop
 800ed68:	20000080 	.word	0x20000080

0800ed6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ed74:	2182      	movs	r1, #130	; 0x82
 800ed76:	4818      	ldr	r0, [pc, #96]	; (800edd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed78:	f000 fcdf 	bl	800f73a <USBD_GetEpDesc>
 800ed7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ed7e:	2101      	movs	r1, #1
 800ed80:	4815      	ldr	r0, [pc, #84]	; (800edd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed82:	f000 fcda 	bl	800f73a <USBD_GetEpDesc>
 800ed86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ed88:	2181      	movs	r1, #129	; 0x81
 800ed8a:	4813      	ldr	r0, [pc, #76]	; (800edd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ed8c:	f000 fcd5 	bl	800f73a <USBD_GetEpDesc>
 800ed90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	2210      	movs	r2, #16
 800ed9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d006      	beq.n	800edb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edac:	711a      	strb	r2, [r3, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d006      	beq.n	800edc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2200      	movs	r2, #0
 800edbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edc0:	711a      	strb	r2, [r3, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2243      	movs	r2, #67	; 0x43
 800edca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800edcc:	4b02      	ldr	r3, [pc, #8]	; (800edd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	20000080 	.word	0x20000080

0800eddc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	220a      	movs	r2, #10
 800ede8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800edea:	4b03      	ldr	r3, [pc, #12]	; (800edf8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800edec:	4618      	mov	r0, r3
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	2000003c 	.word	0x2000003c

0800edfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b083      	sub	sp, #12
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d101      	bne.n	800ee10 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ee0c:	2303      	movs	r3, #3
 800ee0e:	e009      	b.n	800ee24 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	33b0      	adds	r3, #176	; 0xb0
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	4413      	add	r3, r2
 800ee1e:	683a      	ldr	r2, [r7, #0]
 800ee20:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ee22:	2300      	movs	r3, #0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b087      	sub	sp, #28
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	32b0      	adds	r2, #176	; 0xb0
 800ee46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee4a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d101      	bne.n	800ee56 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ee52:	2303      	movs	r3, #3
 800ee54:	e008      	b.n	800ee68 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	68ba      	ldr	r2, [r7, #8]
 800ee5a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ee66:	2300      	movs	r3, #0
}
 800ee68:	4618      	mov	r0, r3
 800ee6a:	371c      	adds	r7, #28
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr

0800ee74 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	32b0      	adds	r2, #176	; 0xb0
 800ee88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d101      	bne.n	800ee98 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ee94:	2303      	movs	r3, #3
 800ee96:	e004      	b.n	800eea2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800eea0:	2300      	movs	r3, #0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
	...

0800eeb0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	32b0      	adds	r2, #176	; 0xb0
 800eec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eec6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800eec8:	2301      	movs	r3, #1
 800eeca:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	32b0      	adds	r2, #176	; 0xb0
 800eed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d101      	bne.n	800eee2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800eede:	2303      	movs	r3, #3
 800eee0:	e025      	b.n	800ef2e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d11f      	bne.n	800ef2c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800eef4:	4b10      	ldr	r3, [pc, #64]	; (800ef38 <USBD_CDC_TransmitPacket+0x88>)
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	f003 020f 	and.w	r2, r3, #15
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	4613      	mov	r3, r2
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	4413      	add	r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	4403      	add	r3, r0
 800ef0e:	3318      	adds	r3, #24
 800ef10:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ef12:	4b09      	ldr	r3, [pc, #36]	; (800ef38 <USBD_CDC_TransmitPacket+0x88>)
 800ef14:	7819      	ldrb	r1, [r3, #0]
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f006 fdf3 	bl	8015b0e <USBD_LL_Transmit>

    ret = USBD_OK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ef2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	200000c3 	.word	0x200000c3

0800ef3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	32b0      	adds	r2, #176	; 0xb0
 800ef4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	32b0      	adds	r2, #176	; 0xb0
 800ef5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ef66:	2303      	movs	r3, #3
 800ef68:	e018      	b.n	800ef9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	7c1b      	ldrb	r3, [r3, #16]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d10a      	bne.n	800ef88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef72:	4b0c      	ldr	r3, [pc, #48]	; (800efa4 <USBD_CDC_ReceivePacket+0x68>)
 800ef74:	7819      	ldrb	r1, [r3, #0]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f006 fde5 	bl	8015b50 <USBD_LL_PrepareReceive>
 800ef86:	e008      	b.n	800ef9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ef88:	4b06      	ldr	r3, [pc, #24]	; (800efa4 <USBD_CDC_ReceivePacket+0x68>)
 800ef8a:	7819      	ldrb	r1, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef92:	2340      	movs	r3, #64	; 0x40
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f006 fddb 	bl	8015b50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	200000c4 	.word	0x200000c4

0800efa8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	4613      	mov	r3, r2
 800efb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d101      	bne.n	800efc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800efbc:	2303      	movs	r3, #3
 800efbe:	e01f      	b.n	800f000 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d003      	beq.n	800efe6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	68ba      	ldr	r2, [r7, #8]
 800efe2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2201      	movs	r2, #1
 800efea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	79fa      	ldrb	r2, [r7, #7]
 800eff2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eff4:	68f8      	ldr	r0, [r7, #12]
 800eff6:	f006 fc55 	bl	80158a4 <USBD_LL_Init>
 800effa:	4603      	mov	r3, r0
 800effc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800effe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f012:	2300      	movs	r3, #0
 800f014:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d101      	bne.n	800f020 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f01c:	2303      	movs	r3, #3
 800f01e:	e025      	b.n	800f06c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	32ae      	adds	r2, #174	; 0xae
 800f032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00f      	beq.n	800f05c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	32ae      	adds	r2, #174	; 0xae
 800f046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f04c:	f107 020e 	add.w	r2, r7, #14
 800f050:	4610      	mov	r0, r2
 800f052:	4798      	blx	r3
 800f054:	4602      	mov	r2, r0
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f062:	1c5a      	adds	r2, r3, #1
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f006 fc5d 	bl	801593c <USBD_LL_Start>
 800f082:	4603      	mov	r3, r0
}
 800f084:	4618      	mov	r0, r3
 800f086:	3708      	adds	r7, #8
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f094:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800f096:	4618      	mov	r0, r3
 800f098:	370c      	adds	r7, #12
 800f09a:	46bd      	mov	sp, r7
 800f09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a0:	4770      	bx	lr

0800f0a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b084      	sub	sp, #16
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d009      	beq.n	800f0d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	78fa      	ldrb	r2, [r7, #3]
 800f0c6:	4611      	mov	r1, r2
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	4798      	blx	r3
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b084      	sub	sp, #16
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	78fa      	ldrb	r2, [r7, #3]
 800f0f4:	4611      	mov	r1, r2
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	4798      	blx	r3
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800f100:	2303      	movs	r3, #3
 800f102:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f104:	7bfb      	ldrb	r3, [r7, #15]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3710      	adds	r7, #16
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}

0800f10e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f10e:	b580      	push	{r7, lr}
 800f110:	b084      	sub	sp, #16
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f11e:	6839      	ldr	r1, [r7, #0]
 800f120:	4618      	mov	r0, r3
 800f122:	f001 f932 	bl	801038a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2201      	movs	r2, #1
 800f12a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f134:	461a      	mov	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f142:	f003 031f 	and.w	r3, r3, #31
 800f146:	2b02      	cmp	r3, #2
 800f148:	d01a      	beq.n	800f180 <USBD_LL_SetupStage+0x72>
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d822      	bhi.n	800f194 <USBD_LL_SetupStage+0x86>
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d002      	beq.n	800f158 <USBD_LL_SetupStage+0x4a>
 800f152:	2b01      	cmp	r3, #1
 800f154:	d00a      	beq.n	800f16c <USBD_LL_SetupStage+0x5e>
 800f156:	e01d      	b.n	800f194 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 fb5f 	bl	800f824 <USBD_StdDevReq>
 800f166:	4603      	mov	r3, r0
 800f168:	73fb      	strb	r3, [r7, #15]
      break;
 800f16a:	e020      	b.n	800f1ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f172:	4619      	mov	r1, r3
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fbc7 	bl	800f908 <USBD_StdItfReq>
 800f17a:	4603      	mov	r3, r0
 800f17c:	73fb      	strb	r3, [r7, #15]
      break;
 800f17e:	e016      	b.n	800f1ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f186:	4619      	mov	r1, r3
 800f188:	6878      	ldr	r0, [r7, #4]
 800f18a:	f000 fc29 	bl	800f9e0 <USBD_StdEPReq>
 800f18e:	4603      	mov	r3, r0
 800f190:	73fb      	strb	r3, [r7, #15]
      break;
 800f192:	e00c      	b.n	800f1ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f19a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f006 fc2a 	bl	80159fc <USBD_LL_StallEP>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f1ac:	bf00      	nop
  }

  return ret;
 800f1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800f1ca:	7afb      	ldrb	r3, [r7, #11]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d16e      	bne.n	800f2ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f1d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f1de:	2b03      	cmp	r3, #3
 800f1e0:	f040 8098 	bne.w	800f314 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	689a      	ldr	r2, [r3, #8]
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d913      	bls.n	800f218 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	689a      	ldr	r2, [r3, #8]
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	1ad2      	subs	r2, r2, r3
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	68da      	ldr	r2, [r3, #12]
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	689b      	ldr	r3, [r3, #8]
 800f206:	4293      	cmp	r3, r2
 800f208:	bf28      	it	cs
 800f20a:	4613      	movcs	r3, r2
 800f20c:	461a      	mov	r2, r3
 800f20e:	6879      	ldr	r1, [r7, #4]
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f001 f9ae 	bl	8010572 <USBD_CtlContinueRx>
 800f216:	e07d      	b.n	800f314 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f21e:	f003 031f 	and.w	r3, r3, #31
 800f222:	2b02      	cmp	r3, #2
 800f224:	d014      	beq.n	800f250 <USBD_LL_DataOutStage+0x98>
 800f226:	2b02      	cmp	r3, #2
 800f228:	d81d      	bhi.n	800f266 <USBD_LL_DataOutStage+0xae>
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d002      	beq.n	800f234 <USBD_LL_DataOutStage+0x7c>
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d003      	beq.n	800f23a <USBD_LL_DataOutStage+0x82>
 800f232:	e018      	b.n	800f266 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f234:	2300      	movs	r3, #0
 800f236:	75bb      	strb	r3, [r7, #22]
            break;
 800f238:	e018      	b.n	800f26c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f240:	b2db      	uxtb	r3, r3
 800f242:	4619      	mov	r1, r3
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 fa5e 	bl	800f706 <USBD_CoreFindIF>
 800f24a:	4603      	mov	r3, r0
 800f24c:	75bb      	strb	r3, [r7, #22]
            break;
 800f24e:	e00d      	b.n	800f26c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800f256:	b2db      	uxtb	r3, r3
 800f258:	4619      	mov	r1, r3
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f000 fa60 	bl	800f720 <USBD_CoreFindEP>
 800f260:	4603      	mov	r3, r0
 800f262:	75bb      	strb	r3, [r7, #22]
            break;
 800f264:	e002      	b.n	800f26c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f266:	2300      	movs	r3, #0
 800f268:	75bb      	strb	r3, [r7, #22]
            break;
 800f26a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f26c:	7dbb      	ldrb	r3, [r7, #22]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d119      	bne.n	800f2a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b03      	cmp	r3, #3
 800f27c:	d113      	bne.n	800f2a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f27e:	7dba      	ldrb	r2, [r7, #22]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	32ae      	adds	r2, #174	; 0xae
 800f284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f288:	691b      	ldr	r3, [r3, #16]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d00b      	beq.n	800f2a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f28e:	7dba      	ldrb	r2, [r7, #22]
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f296:	7dba      	ldrb	r2, [r7, #22]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	32ae      	adds	r2, #174	; 0xae
 800f29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a0:	691b      	ldr	r3, [r3, #16]
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f001 f974 	bl	8010594 <USBD_CtlSendStatus>
 800f2ac:	e032      	b.n	800f314 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f2ae:	7afb      	ldrb	r3, [r7, #11]
 800f2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	68f8      	ldr	r0, [r7, #12]
 800f2ba:	f000 fa31 	bl	800f720 <USBD_CoreFindEP>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2c2:	7dbb      	ldrb	r3, [r7, #22]
 800f2c4:	2bff      	cmp	r3, #255	; 0xff
 800f2c6:	d025      	beq.n	800f314 <USBD_LL_DataOutStage+0x15c>
 800f2c8:	7dbb      	ldrb	r3, [r7, #22]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d122      	bne.n	800f314 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2d4:	b2db      	uxtb	r3, r3
 800f2d6:	2b03      	cmp	r3, #3
 800f2d8:	d117      	bne.n	800f30a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f2da:	7dba      	ldrb	r2, [r7, #22]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	32ae      	adds	r2, #174	; 0xae
 800f2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e4:	699b      	ldr	r3, [r3, #24]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00f      	beq.n	800f30a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f2ea:	7dba      	ldrb	r2, [r7, #22]
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f2f2:	7dba      	ldrb	r2, [r7, #22]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	32ae      	adds	r2, #174	; 0xae
 800f2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2fc:	699b      	ldr	r3, [r3, #24]
 800f2fe:	7afa      	ldrb	r2, [r7, #11]
 800f300:	4611      	mov	r1, r2
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	4798      	blx	r3
 800f306:	4603      	mov	r3, r0
 800f308:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f30a:	7dfb      	ldrb	r3, [r7, #23]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d001      	beq.n	800f314 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f310:	7dfb      	ldrb	r3, [r7, #23]
 800f312:	e000      	b.n	800f316 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3718      	adds	r7, #24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}

0800f31e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f31e:	b580      	push	{r7, lr}
 800f320:	b086      	sub	sp, #24
 800f322:	af00      	add	r7, sp, #0
 800f324:	60f8      	str	r0, [r7, #12]
 800f326:	460b      	mov	r3, r1
 800f328:	607a      	str	r2, [r7, #4]
 800f32a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f32c:	7afb      	ldrb	r3, [r7, #11]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d16f      	bne.n	800f412 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	3314      	adds	r3, #20
 800f336:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f33e:	2b02      	cmp	r3, #2
 800f340:	d15a      	bne.n	800f3f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	689a      	ldr	r2, [r3, #8]
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	68db      	ldr	r3, [r3, #12]
 800f34a:	429a      	cmp	r2, r3
 800f34c:	d914      	bls.n	800f378 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	689a      	ldr	r2, [r3, #8]
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	1ad2      	subs	r2, r2, r3
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	461a      	mov	r2, r3
 800f362:	6879      	ldr	r1, [r7, #4]
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f001 f8d6 	bl	8010516 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f36a:	2300      	movs	r3, #0
 800f36c:	2200      	movs	r2, #0
 800f36e:	2100      	movs	r1, #0
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	f006 fbed 	bl	8015b50 <USBD_LL_PrepareReceive>
 800f376:	e03f      	b.n	800f3f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	68da      	ldr	r2, [r3, #12]
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	689b      	ldr	r3, [r3, #8]
 800f380:	429a      	cmp	r2, r3
 800f382:	d11c      	bne.n	800f3be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	685a      	ldr	r2, [r3, #4]
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d316      	bcc.n	800f3be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	685a      	ldr	r2, [r3, #4]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d20f      	bcs.n	800f3be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f39e:	2200      	movs	r2, #0
 800f3a0:	2100      	movs	r1, #0
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f001 f8b7 	bl	8010516 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	2100      	movs	r1, #0
 800f3b6:	68f8      	ldr	r0, [r7, #12]
 800f3b8:	f006 fbca 	bl	8015b50 <USBD_LL_PrepareReceive>
 800f3bc:	e01c      	b.n	800f3f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	2b03      	cmp	r3, #3
 800f3c8:	d10f      	bne.n	800f3ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d009      	beq.n	800f3ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f3ea:	2180      	movs	r1, #128	; 0x80
 800f3ec:	68f8      	ldr	r0, [r7, #12]
 800f3ee:	f006 fb05 	bl	80159fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f3f2:	68f8      	ldr	r0, [r7, #12]
 800f3f4:	f001 f8e1 	bl	80105ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d03a      	beq.n	800f478 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f7ff fe42 	bl	800f08c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f410:	e032      	b.n	800f478 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f412:	7afb      	ldrb	r3, [r7, #11]
 800f414:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	4619      	mov	r1, r3
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f000 f97f 	bl	800f720 <USBD_CoreFindEP>
 800f422:	4603      	mov	r3, r0
 800f424:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f426:	7dfb      	ldrb	r3, [r7, #23]
 800f428:	2bff      	cmp	r3, #255	; 0xff
 800f42a:	d025      	beq.n	800f478 <USBD_LL_DataInStage+0x15a>
 800f42c:	7dfb      	ldrb	r3, [r7, #23]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d122      	bne.n	800f478 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b03      	cmp	r3, #3
 800f43c:	d11c      	bne.n	800f478 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f43e:	7dfa      	ldrb	r2, [r7, #23]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	32ae      	adds	r2, #174	; 0xae
 800f444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f448:	695b      	ldr	r3, [r3, #20]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d014      	beq.n	800f478 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f44e:	7dfa      	ldrb	r2, [r7, #23]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f456:	7dfa      	ldrb	r2, [r7, #23]
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	32ae      	adds	r2, #174	; 0xae
 800f45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f460:	695b      	ldr	r3, [r3, #20]
 800f462:	7afa      	ldrb	r2, [r7, #11]
 800f464:	4611      	mov	r1, r2
 800f466:	68f8      	ldr	r0, [r7, #12]
 800f468:	4798      	blx	r3
 800f46a:	4603      	mov	r3, r0
 800f46c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f46e:	7dbb      	ldrb	r3, [r7, #22]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d001      	beq.n	800f478 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f474:	7dbb      	ldrb	r3, [r7, #22]
 800f476:	e000      	b.n	800f47a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b084      	sub	sp, #16
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f48a:	2300      	movs	r3, #0
 800f48c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2201      	movs	r2, #1
 800f492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d014      	beq.n	800f4e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4c4:	685b      	ldr	r3, [r3, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00e      	beq.n	800f4e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	6852      	ldr	r2, [r2, #4]
 800f4d6:	b2d2      	uxtb	r2, r2
 800f4d8:	4611      	mov	r1, r2
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	4798      	blx	r3
 800f4de:	4603      	mov	r3, r0
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d001      	beq.n	800f4e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f4e4:	2303      	movs	r3, #3
 800f4e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f4e8:	2340      	movs	r3, #64	; 0x40
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f006 fa3f 	bl	8015972 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2240      	movs	r2, #64	; 0x40
 800f500:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f504:	2340      	movs	r3, #64	; 0x40
 800f506:	2200      	movs	r2, #0
 800f508:	2180      	movs	r1, #128	; 0x80
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f006 fa31 	bl	8015972 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2240      	movs	r2, #64	; 0x40
 800f51a:	621a      	str	r2, [r3, #32]

  return ret;
 800f51c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3710      	adds	r7, #16
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}

0800f526 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f526:	b480      	push	{r7}
 800f528:	b083      	sub	sp, #12
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	460b      	mov	r3, r1
 800f530:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	78fa      	ldrb	r2, [r7, #3]
 800f536:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	370c      	adds	r7, #12
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f546:	b480      	push	{r7}
 800f548:	b083      	sub	sp, #12
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f554:	b2da      	uxtb	r2, r3
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	2204      	movs	r2, #4
 800f560:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	370c      	adds	r7, #12
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f572:	b480      	push	{r7}
 800f574:	b083      	sub	sp, #12
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f580:	b2db      	uxtb	r3, r3
 800f582:	2b04      	cmp	r3, #4
 800f584:	d106      	bne.n	800f594 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f58c:	b2da      	uxtb	r2, r3
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	370c      	adds	r7, #12
 800f59a:	46bd      	mov	sp, r7
 800f59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a0:	4770      	bx	lr

0800f5a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b082      	sub	sp, #8
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	2b03      	cmp	r3, #3
 800f5b4:	d110      	bne.n	800f5d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c6:	69db      	ldr	r3, [r3, #28]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d005      	beq.n	800f5d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d2:	69db      	ldr	r3, [r3, #28]
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f5d8:	2300      	movs	r3, #0
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3708      	adds	r7, #8
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b082      	sub	sp, #8
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	32ae      	adds	r2, #174	; 0xae
 800f5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f600:	2303      	movs	r3, #3
 800f602:	e01c      	b.n	800f63e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f60a:	b2db      	uxtb	r3, r3
 800f60c:	2b03      	cmp	r3, #3
 800f60e:	d115      	bne.n	800f63c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	32ae      	adds	r2, #174	; 0xae
 800f61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d00b      	beq.n	800f63c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	32ae      	adds	r2, #174	; 0xae
 800f62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f632:	6a1b      	ldr	r3, [r3, #32]
 800f634:	78fa      	ldrb	r2, [r7, #3]
 800f636:	4611      	mov	r1, r2
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b082      	sub	sp, #8
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	460b      	mov	r3, r1
 800f650:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	32ae      	adds	r2, #174	; 0xae
 800f65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d101      	bne.n	800f668 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f664:	2303      	movs	r3, #3
 800f666:	e01c      	b.n	800f6a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	2b03      	cmp	r3, #3
 800f672:	d115      	bne.n	800f6a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	32ae      	adds	r2, #174	; 0xae
 800f67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f684:	2b00      	cmp	r3, #0
 800f686:	d00b      	beq.n	800f6a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	32ae      	adds	r2, #174	; 0xae
 800f692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f698:	78fa      	ldrb	r2, [r7, #3]
 800f69a:	4611      	mov	r1, r2
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}

0800f6aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f6aa:	b480      	push	{r7}
 800f6ac:	b083      	sub	sp, #12
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f6b2:	2300      	movs	r3, #0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d00e      	beq.n	800f6fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	687a      	ldr	r2, [r7, #4]
 800f6e8:	6852      	ldr	r2, [r2, #4]
 800f6ea:	b2d2      	uxtb	r2, r2
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	4798      	blx	r3
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6fe:	4618      	mov	r0, r3
 800f700:	3710      	adds	r7, #16
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}

0800f706 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f706:	b480      	push	{r7}
 800f708:	b083      	sub	sp, #12
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
 800f70e:	460b      	mov	r3, r1
 800f710:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f712:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f72c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f72e:	4618      	mov	r0, r3
 800f730:	370c      	adds	r7, #12
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b086      	sub	sp, #24
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
 800f742:	460b      	mov	r3, r1
 800f744:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f74e:	2300      	movs	r3, #0
 800f750:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	885b      	ldrh	r3, [r3, #2]
 800f756:	b29a      	uxth	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	429a      	cmp	r2, r3
 800f760:	d920      	bls.n	800f7a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	781b      	ldrb	r3, [r3, #0]
 800f766:	b29b      	uxth	r3, r3
 800f768:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f76a:	e013      	b.n	800f794 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f76c:	f107 030a 	add.w	r3, r7, #10
 800f770:	4619      	mov	r1, r3
 800f772:	6978      	ldr	r0, [r7, #20]
 800f774:	f000 f81b 	bl	800f7ae <USBD_GetNextDesc>
 800f778:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	785b      	ldrb	r3, [r3, #1]
 800f77e:	2b05      	cmp	r3, #5
 800f780:	d108      	bne.n	800f794 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	789b      	ldrb	r3, [r3, #2]
 800f78a:	78fa      	ldrb	r2, [r7, #3]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d008      	beq.n	800f7a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f790:	2300      	movs	r3, #0
 800f792:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	885b      	ldrh	r3, [r3, #2]
 800f798:	b29a      	uxth	r2, r3
 800f79a:	897b      	ldrh	r3, [r7, #10]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d8e5      	bhi.n	800f76c <USBD_GetEpDesc+0x32>
 800f7a0:	e000      	b.n	800f7a4 <USBD_GetEpDesc+0x6a>
          break;
 800f7a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f7a4:	693b      	ldr	r3, [r7, #16]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3718      	adds	r7, #24
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b085      	sub	sp, #20
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	881a      	ldrh	r2, [r3, #0]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	4413      	add	r3, r2
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f7da:	68fb      	ldr	r3, [r7, #12]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3714      	adds	r7, #20
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f806:	8a3b      	ldrh	r3, [r7, #16]
 800f808:	021b      	lsls	r3, r3, #8
 800f80a:	b21a      	sxth	r2, r3
 800f80c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f810:	4313      	orrs	r3, r2
 800f812:	b21b      	sxth	r3, r3
 800f814:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f816:	89fb      	ldrh	r3, [r7, #14]
}
 800f818:	4618      	mov	r0, r3
 800f81a:	371c      	adds	r7, #28
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr

0800f824 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f82e:	2300      	movs	r3, #0
 800f830:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f83a:	2b40      	cmp	r3, #64	; 0x40
 800f83c:	d005      	beq.n	800f84a <USBD_StdDevReq+0x26>
 800f83e:	2b40      	cmp	r3, #64	; 0x40
 800f840:	d857      	bhi.n	800f8f2 <USBD_StdDevReq+0xce>
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00f      	beq.n	800f866 <USBD_StdDevReq+0x42>
 800f846:	2b20      	cmp	r3, #32
 800f848:	d153      	bne.n	800f8f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	32ae      	adds	r2, #174	; 0xae
 800f854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f858:	689b      	ldr	r3, [r3, #8]
 800f85a:	6839      	ldr	r1, [r7, #0]
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	4798      	blx	r3
 800f860:	4603      	mov	r3, r0
 800f862:	73fb      	strb	r3, [r7, #15]
      break;
 800f864:	e04a      	b.n	800f8fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	785b      	ldrb	r3, [r3, #1]
 800f86a:	2b09      	cmp	r3, #9
 800f86c:	d83b      	bhi.n	800f8e6 <USBD_StdDevReq+0xc2>
 800f86e:	a201      	add	r2, pc, #4	; (adr r2, 800f874 <USBD_StdDevReq+0x50>)
 800f870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f874:	0800f8c9 	.word	0x0800f8c9
 800f878:	0800f8dd 	.word	0x0800f8dd
 800f87c:	0800f8e7 	.word	0x0800f8e7
 800f880:	0800f8d3 	.word	0x0800f8d3
 800f884:	0800f8e7 	.word	0x0800f8e7
 800f888:	0800f8a7 	.word	0x0800f8a7
 800f88c:	0800f89d 	.word	0x0800f89d
 800f890:	0800f8e7 	.word	0x0800f8e7
 800f894:	0800f8bf 	.word	0x0800f8bf
 800f898:	0800f8b1 	.word	0x0800f8b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f89c:	6839      	ldr	r1, [r7, #0]
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fa3c 	bl	800fd1c <USBD_GetDescriptor>
          break;
 800f8a4:	e024      	b.n	800f8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f8a6:	6839      	ldr	r1, [r7, #0]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fbcb 	bl	8010044 <USBD_SetAddress>
          break;
 800f8ae:	e01f      	b.n	800f8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f8b0:	6839      	ldr	r1, [r7, #0]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fc0a 	bl	80100cc <USBD_SetConfig>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	73fb      	strb	r3, [r7, #15]
          break;
 800f8bc:	e018      	b.n	800f8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f8be:	6839      	ldr	r1, [r7, #0]
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f000 fcad 	bl	8010220 <USBD_GetConfig>
          break;
 800f8c6:	e013      	b.n	800f8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 fcde 	bl	801028c <USBD_GetStatus>
          break;
 800f8d0:	e00e      	b.n	800f8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 fd0d 	bl	80102f4 <USBD_SetFeature>
          break;
 800f8da:	e009      	b.n	800f8f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f8dc:	6839      	ldr	r1, [r7, #0]
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f000 fd31 	bl	8010346 <USBD_ClrFeature>
          break;
 800f8e4:	e004      	b.n	800f8f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f8e6:	6839      	ldr	r1, [r7, #0]
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fd88 	bl	80103fe <USBD_CtlError>
          break;
 800f8ee:	bf00      	nop
      }
      break;
 800f8f0:	e004      	b.n	800f8fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f8f2:	6839      	ldr	r1, [r7, #0]
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 fd82 	bl	80103fe <USBD_CtlError>
      break;
 800f8fa:	bf00      	nop
  }

  return ret;
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop

0800f908 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f912:	2300      	movs	r3, #0
 800f914:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f91e:	2b40      	cmp	r3, #64	; 0x40
 800f920:	d005      	beq.n	800f92e <USBD_StdItfReq+0x26>
 800f922:	2b40      	cmp	r3, #64	; 0x40
 800f924:	d852      	bhi.n	800f9cc <USBD_StdItfReq+0xc4>
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <USBD_StdItfReq+0x26>
 800f92a:	2b20      	cmp	r3, #32
 800f92c:	d14e      	bne.n	800f9cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f934:	b2db      	uxtb	r3, r3
 800f936:	3b01      	subs	r3, #1
 800f938:	2b02      	cmp	r3, #2
 800f93a:	d840      	bhi.n	800f9be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	889b      	ldrh	r3, [r3, #4]
 800f940:	b2db      	uxtb	r3, r3
 800f942:	2b01      	cmp	r3, #1
 800f944:	d836      	bhi.n	800f9b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	889b      	ldrh	r3, [r3, #4]
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	4619      	mov	r1, r3
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f7ff fed9 	bl	800f706 <USBD_CoreFindIF>
 800f954:	4603      	mov	r3, r0
 800f956:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f958:	7bbb      	ldrb	r3, [r7, #14]
 800f95a:	2bff      	cmp	r3, #255	; 0xff
 800f95c:	d01d      	beq.n	800f99a <USBD_StdItfReq+0x92>
 800f95e:	7bbb      	ldrb	r3, [r7, #14]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d11a      	bne.n	800f99a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f964:	7bba      	ldrb	r2, [r7, #14]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	32ae      	adds	r2, #174	; 0xae
 800f96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f96e:	689b      	ldr	r3, [r3, #8]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00f      	beq.n	800f994 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f974:	7bba      	ldrb	r2, [r7, #14]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f97c:	7bba      	ldrb	r2, [r7, #14]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	32ae      	adds	r2, #174	; 0xae
 800f982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f986:	689b      	ldr	r3, [r3, #8]
 800f988:	6839      	ldr	r1, [r7, #0]
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	4798      	blx	r3
 800f98e:	4603      	mov	r3, r0
 800f990:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f992:	e004      	b.n	800f99e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f994:	2303      	movs	r3, #3
 800f996:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f998:	e001      	b.n	800f99e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f99a:	2303      	movs	r3, #3
 800f99c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	88db      	ldrh	r3, [r3, #6]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d110      	bne.n	800f9c8 <USBD_StdItfReq+0xc0>
 800f9a6:	7bfb      	ldrb	r3, [r7, #15]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10d      	bne.n	800f9c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f000 fdf1 	bl	8010594 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f9b2:	e009      	b.n	800f9c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f9b4:	6839      	ldr	r1, [r7, #0]
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f000 fd21 	bl	80103fe <USBD_CtlError>
          break;
 800f9bc:	e004      	b.n	800f9c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f9be:	6839      	ldr	r1, [r7, #0]
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f000 fd1c 	bl	80103fe <USBD_CtlError>
          break;
 800f9c6:	e000      	b.n	800f9ca <USBD_StdItfReq+0xc2>
          break;
 800f9c8:	bf00      	nop
      }
      break;
 800f9ca:	e004      	b.n	800f9d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 fd15 	bl	80103fe <USBD_CtlError>
      break;
 800f9d4:	bf00      	nop
  }

  return ret;
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	889b      	ldrh	r3, [r3, #4]
 800f9f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f9fc:	2b40      	cmp	r3, #64	; 0x40
 800f9fe:	d007      	beq.n	800fa10 <USBD_StdEPReq+0x30>
 800fa00:	2b40      	cmp	r3, #64	; 0x40
 800fa02:	f200 817f 	bhi.w	800fd04 <USBD_StdEPReq+0x324>
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d02a      	beq.n	800fa60 <USBD_StdEPReq+0x80>
 800fa0a:	2b20      	cmp	r3, #32
 800fa0c:	f040 817a 	bne.w	800fd04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800fa10:	7bbb      	ldrb	r3, [r7, #14]
 800fa12:	4619      	mov	r1, r3
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f7ff fe83 	bl	800f720 <USBD_CoreFindEP>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fa1e:	7b7b      	ldrb	r3, [r7, #13]
 800fa20:	2bff      	cmp	r3, #255	; 0xff
 800fa22:	f000 8174 	beq.w	800fd0e <USBD_StdEPReq+0x32e>
 800fa26:	7b7b      	ldrb	r3, [r7, #13]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f040 8170 	bne.w	800fd0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800fa2e:	7b7a      	ldrb	r2, [r7, #13]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800fa36:	7b7a      	ldrb	r2, [r7, #13]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	32ae      	adds	r2, #174	; 0xae
 800fa3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa40:	689b      	ldr	r3, [r3, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 8163 	beq.w	800fd0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800fa48:	7b7a      	ldrb	r2, [r7, #13]
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	32ae      	adds	r2, #174	; 0xae
 800fa4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa52:	689b      	ldr	r3, [r3, #8]
 800fa54:	6839      	ldr	r1, [r7, #0]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	4798      	blx	r3
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800fa5e:	e156      	b.n	800fd0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	785b      	ldrb	r3, [r3, #1]
 800fa64:	2b03      	cmp	r3, #3
 800fa66:	d008      	beq.n	800fa7a <USBD_StdEPReq+0x9a>
 800fa68:	2b03      	cmp	r3, #3
 800fa6a:	f300 8145 	bgt.w	800fcf8 <USBD_StdEPReq+0x318>
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f000 809b 	beq.w	800fbaa <USBD_StdEPReq+0x1ca>
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d03c      	beq.n	800faf2 <USBD_StdEPReq+0x112>
 800fa78:	e13e      	b.n	800fcf8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	2b02      	cmp	r3, #2
 800fa84:	d002      	beq.n	800fa8c <USBD_StdEPReq+0xac>
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	d016      	beq.n	800fab8 <USBD_StdEPReq+0xd8>
 800fa8a:	e02c      	b.n	800fae6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa8c:	7bbb      	ldrb	r3, [r7, #14]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00d      	beq.n	800faae <USBD_StdEPReq+0xce>
 800fa92:	7bbb      	ldrb	r3, [r7, #14]
 800fa94:	2b80      	cmp	r3, #128	; 0x80
 800fa96:	d00a      	beq.n	800faae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa98:	7bbb      	ldrb	r3, [r7, #14]
 800fa9a:	4619      	mov	r1, r3
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f005 ffad 	bl	80159fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800faa2:	2180      	movs	r1, #128	; 0x80
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f005 ffa9 	bl	80159fc <USBD_LL_StallEP>
 800faaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800faac:	e020      	b.n	800faf0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800faae:	6839      	ldr	r1, [r7, #0]
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f000 fca4 	bl	80103fe <USBD_CtlError>
              break;
 800fab6:	e01b      	b.n	800faf0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	885b      	ldrh	r3, [r3, #2]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d10e      	bne.n	800fade <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fac0:	7bbb      	ldrb	r3, [r7, #14]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00b      	beq.n	800fade <USBD_StdEPReq+0xfe>
 800fac6:	7bbb      	ldrb	r3, [r7, #14]
 800fac8:	2b80      	cmp	r3, #128	; 0x80
 800faca:	d008      	beq.n	800fade <USBD_StdEPReq+0xfe>
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	88db      	ldrh	r3, [r3, #6]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d104      	bne.n	800fade <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fad4:	7bbb      	ldrb	r3, [r7, #14]
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f005 ff8f 	bl	80159fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 fd58 	bl	8010594 <USBD_CtlSendStatus>

              break;
 800fae4:	e004      	b.n	800faf0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800fae6:	6839      	ldr	r1, [r7, #0]
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f000 fc88 	bl	80103fe <USBD_CtlError>
              break;
 800faee:	bf00      	nop
          }
          break;
 800faf0:	e107      	b.n	800fd02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d002      	beq.n	800fb04 <USBD_StdEPReq+0x124>
 800fafe:	2b03      	cmp	r3, #3
 800fb00:	d016      	beq.n	800fb30 <USBD_StdEPReq+0x150>
 800fb02:	e04b      	b.n	800fb9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb04:	7bbb      	ldrb	r3, [r7, #14]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00d      	beq.n	800fb26 <USBD_StdEPReq+0x146>
 800fb0a:	7bbb      	ldrb	r3, [r7, #14]
 800fb0c:	2b80      	cmp	r3, #128	; 0x80
 800fb0e:	d00a      	beq.n	800fb26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fb10:	7bbb      	ldrb	r3, [r7, #14]
 800fb12:	4619      	mov	r1, r3
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f005 ff71 	bl	80159fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb1a:	2180      	movs	r1, #128	; 0x80
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f005 ff6d 	bl	80159fc <USBD_LL_StallEP>
 800fb22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fb24:	e040      	b.n	800fba8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 fc68 	bl	80103fe <USBD_CtlError>
              break;
 800fb2e:	e03b      	b.n	800fba8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	885b      	ldrh	r3, [r3, #2]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d136      	bne.n	800fba6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fb38:	7bbb      	ldrb	r3, [r7, #14]
 800fb3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d004      	beq.n	800fb4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fb42:	7bbb      	ldrb	r3, [r7, #14]
 800fb44:	4619      	mov	r1, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f005 ff77 	bl	8015a3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 fd21 	bl	8010594 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800fb52:	7bbb      	ldrb	r3, [r7, #14]
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f7ff fde2 	bl	800f720 <USBD_CoreFindEP>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fb60:	7b7b      	ldrb	r3, [r7, #13]
 800fb62:	2bff      	cmp	r3, #255	; 0xff
 800fb64:	d01f      	beq.n	800fba6 <USBD_StdEPReq+0x1c6>
 800fb66:	7b7b      	ldrb	r3, [r7, #13]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d11c      	bne.n	800fba6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800fb6c:	7b7a      	ldrb	r2, [r7, #13]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800fb74:	7b7a      	ldrb	r2, [r7, #13]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	32ae      	adds	r2, #174	; 0xae
 800fb7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d010      	beq.n	800fba6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800fb84:	7b7a      	ldrb	r2, [r7, #13]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	32ae      	adds	r2, #174	; 0xae
 800fb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	6839      	ldr	r1, [r7, #0]
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	4798      	blx	r3
 800fb96:	4603      	mov	r3, r0
 800fb98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800fb9a:	e004      	b.n	800fba6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800fb9c:	6839      	ldr	r1, [r7, #0]
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fc2d 	bl	80103fe <USBD_CtlError>
              break;
 800fba4:	e000      	b.n	800fba8 <USBD_StdEPReq+0x1c8>
              break;
 800fba6:	bf00      	nop
          }
          break;
 800fba8:	e0ab      	b.n	800fd02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbb0:	b2db      	uxtb	r3, r3
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	d002      	beq.n	800fbbc <USBD_StdEPReq+0x1dc>
 800fbb6:	2b03      	cmp	r3, #3
 800fbb8:	d032      	beq.n	800fc20 <USBD_StdEPReq+0x240>
 800fbba:	e097      	b.n	800fcec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fbbc:	7bbb      	ldrb	r3, [r7, #14]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d007      	beq.n	800fbd2 <USBD_StdEPReq+0x1f2>
 800fbc2:	7bbb      	ldrb	r3, [r7, #14]
 800fbc4:	2b80      	cmp	r3, #128	; 0x80
 800fbc6:	d004      	beq.n	800fbd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fc17 	bl	80103fe <USBD_CtlError>
                break;
 800fbd0:	e091      	b.n	800fcf6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	da0b      	bge.n	800fbf2 <USBD_StdEPReq+0x212>
 800fbda:	7bbb      	ldrb	r3, [r7, #14]
 800fbdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	4413      	add	r3, r2
 800fbe6:	009b      	lsls	r3, r3, #2
 800fbe8:	3310      	adds	r3, #16
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	4413      	add	r3, r2
 800fbee:	3304      	adds	r3, #4
 800fbf0:	e00b      	b.n	800fc0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fbf2:	7bbb      	ldrb	r3, [r7, #14]
 800fbf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbf8:	4613      	mov	r3, r2
 800fbfa:	009b      	lsls	r3, r3, #2
 800fbfc:	4413      	add	r3, r2
 800fbfe:	009b      	lsls	r3, r3, #2
 800fc00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	4413      	add	r3, r2
 800fc08:	3304      	adds	r3, #4
 800fc0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	2202      	movs	r2, #2
 800fc16:	4619      	mov	r1, r3
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f000 fc61 	bl	80104e0 <USBD_CtlSendData>
              break;
 800fc1e:	e06a      	b.n	800fcf6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fc20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	da11      	bge.n	800fc4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fc28:	7bbb      	ldrb	r3, [r7, #14]
 800fc2a:	f003 020f 	and.w	r2, r3, #15
 800fc2e:	6879      	ldr	r1, [r7, #4]
 800fc30:	4613      	mov	r3, r2
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	4413      	add	r3, r2
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	440b      	add	r3, r1
 800fc3a:	3324      	adds	r3, #36	; 0x24
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d117      	bne.n	800fc72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fc42:	6839      	ldr	r1, [r7, #0]
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 fbda 	bl	80103fe <USBD_CtlError>
                  break;
 800fc4a:	e054      	b.n	800fcf6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc4c:	7bbb      	ldrb	r3, [r7, #14]
 800fc4e:	f003 020f 	and.w	r2, r3, #15
 800fc52:	6879      	ldr	r1, [r7, #4]
 800fc54:	4613      	mov	r3, r2
 800fc56:	009b      	lsls	r3, r3, #2
 800fc58:	4413      	add	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	440b      	add	r3, r1
 800fc5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fc62:	881b      	ldrh	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d104      	bne.n	800fc72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800fc68:	6839      	ldr	r1, [r7, #0]
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fbc7 	bl	80103fe <USBD_CtlError>
                  break;
 800fc70:	e041      	b.n	800fcf6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	da0b      	bge.n	800fc92 <USBD_StdEPReq+0x2b2>
 800fc7a:	7bbb      	ldrb	r3, [r7, #14]
 800fc7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fc80:	4613      	mov	r3, r2
 800fc82:	009b      	lsls	r3, r3, #2
 800fc84:	4413      	add	r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	3310      	adds	r3, #16
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	4413      	add	r3, r2
 800fc8e:	3304      	adds	r3, #4
 800fc90:	e00b      	b.n	800fcaa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fc92:	7bbb      	ldrb	r3, [r7, #14]
 800fc94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc98:	4613      	mov	r3, r2
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	4413      	add	r3, r2
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	4413      	add	r3, r2
 800fca8:	3304      	adds	r3, #4
 800fcaa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fcac:	7bbb      	ldrb	r3, [r7, #14]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d002      	beq.n	800fcb8 <USBD_StdEPReq+0x2d8>
 800fcb2:	7bbb      	ldrb	r3, [r7, #14]
 800fcb4:	2b80      	cmp	r3, #128	; 0x80
 800fcb6:	d103      	bne.n	800fcc0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	601a      	str	r2, [r3, #0]
 800fcbe:	e00e      	b.n	800fcde <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fcc0:	7bbb      	ldrb	r3, [r7, #14]
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f005 fed7 	bl	8015a78 <USBD_LL_IsStallEP>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d003      	beq.n	800fcd8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	2201      	movs	r2, #1
 800fcd4:	601a      	str	r2, [r3, #0]
 800fcd6:	e002      	b.n	800fcde <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2202      	movs	r2, #2
 800fce2:	4619      	mov	r1, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 fbfb 	bl	80104e0 <USBD_CtlSendData>
              break;
 800fcea:	e004      	b.n	800fcf6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fcec:	6839      	ldr	r1, [r7, #0]
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f000 fb85 	bl	80103fe <USBD_CtlError>
              break;
 800fcf4:	bf00      	nop
          }
          break;
 800fcf6:	e004      	b.n	800fd02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fb7f 	bl	80103fe <USBD_CtlError>
          break;
 800fd00:	bf00      	nop
      }
      break;
 800fd02:	e005      	b.n	800fd10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fb79 	bl	80103fe <USBD_CtlError>
      break;
 800fd0c:	e000      	b.n	800fd10 <USBD_StdEPReq+0x330>
      break;
 800fd0e:	bf00      	nop
  }

  return ret;
 800fd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
	...

0800fd1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd26:	2300      	movs	r3, #0
 800fd28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	885b      	ldrh	r3, [r3, #2]
 800fd36:	0a1b      	lsrs	r3, r3, #8
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	3b01      	subs	r3, #1
 800fd3c:	2b0e      	cmp	r3, #14
 800fd3e:	f200 8152 	bhi.w	800ffe6 <USBD_GetDescriptor+0x2ca>
 800fd42:	a201      	add	r2, pc, #4	; (adr r2, 800fd48 <USBD_GetDescriptor+0x2c>)
 800fd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd48:	0800fdb9 	.word	0x0800fdb9
 800fd4c:	0800fdd1 	.word	0x0800fdd1
 800fd50:	0800fe11 	.word	0x0800fe11
 800fd54:	0800ffe7 	.word	0x0800ffe7
 800fd58:	0800ffe7 	.word	0x0800ffe7
 800fd5c:	0800ff87 	.word	0x0800ff87
 800fd60:	0800ffb3 	.word	0x0800ffb3
 800fd64:	0800ffe7 	.word	0x0800ffe7
 800fd68:	0800ffe7 	.word	0x0800ffe7
 800fd6c:	0800ffe7 	.word	0x0800ffe7
 800fd70:	0800ffe7 	.word	0x0800ffe7
 800fd74:	0800ffe7 	.word	0x0800ffe7
 800fd78:	0800ffe7 	.word	0x0800ffe7
 800fd7c:	0800ffe7 	.word	0x0800ffe7
 800fd80:	0800fd85 	.word	0x0800fd85
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd8a:	69db      	ldr	r3, [r3, #28]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d00b      	beq.n	800fda8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd96:	69db      	ldr	r3, [r3, #28]
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	7c12      	ldrb	r2, [r2, #16]
 800fd9c:	f107 0108 	add.w	r1, r7, #8
 800fda0:	4610      	mov	r0, r2
 800fda2:	4798      	blx	r3
 800fda4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fda6:	e126      	b.n	800fff6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fda8:	6839      	ldr	r1, [r7, #0]
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f000 fb27 	bl	80103fe <USBD_CtlError>
        err++;
 800fdb0:	7afb      	ldrb	r3, [r7, #11]
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	72fb      	strb	r3, [r7, #11]
      break;
 800fdb6:	e11e      	b.n	800fff6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	7c12      	ldrb	r2, [r2, #16]
 800fdc4:	f107 0108 	add.w	r1, r7, #8
 800fdc8:	4610      	mov	r0, r2
 800fdca:	4798      	blx	r3
 800fdcc:	60f8      	str	r0, [r7, #12]
      break;
 800fdce:	e112      	b.n	800fff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	7c1b      	ldrb	r3, [r3, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10d      	bne.n	800fdf4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde0:	f107 0208 	add.w	r2, r7, #8
 800fde4:	4610      	mov	r0, r2
 800fde6:	4798      	blx	r3
 800fde8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	3301      	adds	r3, #1
 800fdee:	2202      	movs	r2, #2
 800fdf0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fdf2:	e100      	b.n	800fff6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdfc:	f107 0208 	add.w	r2, r7, #8
 800fe00:	4610      	mov	r0, r2
 800fe02:	4798      	blx	r3
 800fe04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	2202      	movs	r2, #2
 800fe0c:	701a      	strb	r2, [r3, #0]
      break;
 800fe0e:	e0f2      	b.n	800fff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	885b      	ldrh	r3, [r3, #2]
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b05      	cmp	r3, #5
 800fe18:	f200 80ac 	bhi.w	800ff74 <USBD_GetDescriptor+0x258>
 800fe1c:	a201      	add	r2, pc, #4	; (adr r2, 800fe24 <USBD_GetDescriptor+0x108>)
 800fe1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe22:	bf00      	nop
 800fe24:	0800fe3d 	.word	0x0800fe3d
 800fe28:	0800fe71 	.word	0x0800fe71
 800fe2c:	0800fea5 	.word	0x0800fea5
 800fe30:	0800fed9 	.word	0x0800fed9
 800fe34:	0800ff0d 	.word	0x0800ff0d
 800fe38:	0800ff41 	.word	0x0800ff41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00b      	beq.n	800fe60 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	7c12      	ldrb	r2, [r2, #16]
 800fe54:	f107 0108 	add.w	r1, r7, #8
 800fe58:	4610      	mov	r0, r2
 800fe5a:	4798      	blx	r3
 800fe5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe5e:	e091      	b.n	800ff84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe60:	6839      	ldr	r1, [r7, #0]
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f000 facb 	bl	80103fe <USBD_CtlError>
            err++;
 800fe68:	7afb      	ldrb	r3, [r7, #11]
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	72fb      	strb	r3, [r7, #11]
          break;
 800fe6e:	e089      	b.n	800ff84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d00b      	beq.n	800fe94 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fe82:	689b      	ldr	r3, [r3, #8]
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	7c12      	ldrb	r2, [r2, #16]
 800fe88:	f107 0108 	add.w	r1, r7, #8
 800fe8c:	4610      	mov	r0, r2
 800fe8e:	4798      	blx	r3
 800fe90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe92:	e077      	b.n	800ff84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe94:	6839      	ldr	r1, [r7, #0]
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 fab1 	bl	80103fe <USBD_CtlError>
            err++;
 800fe9c:	7afb      	ldrb	r3, [r7, #11]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	72fb      	strb	r3, [r7, #11]
          break;
 800fea2:	e06f      	b.n	800ff84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d00b      	beq.n	800fec8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	7c12      	ldrb	r2, [r2, #16]
 800febc:	f107 0108 	add.w	r1, r7, #8
 800fec0:	4610      	mov	r0, r2
 800fec2:	4798      	blx	r3
 800fec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fec6:	e05d      	b.n	800ff84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fec8:	6839      	ldr	r1, [r7, #0]
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f000 fa97 	bl	80103fe <USBD_CtlError>
            err++;
 800fed0:	7afb      	ldrb	r3, [r7, #11]
 800fed2:	3301      	adds	r3, #1
 800fed4:	72fb      	strb	r3, [r7, #11]
          break;
 800fed6:	e055      	b.n	800ff84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00b      	beq.n	800fefc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800feea:	691b      	ldr	r3, [r3, #16]
 800feec:	687a      	ldr	r2, [r7, #4]
 800feee:	7c12      	ldrb	r2, [r2, #16]
 800fef0:	f107 0108 	add.w	r1, r7, #8
 800fef4:	4610      	mov	r0, r2
 800fef6:	4798      	blx	r3
 800fef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fefa:	e043      	b.n	800ff84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fefc:	6839      	ldr	r1, [r7, #0]
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fa7d 	bl	80103fe <USBD_CtlError>
            err++;
 800ff04:	7afb      	ldrb	r3, [r7, #11]
 800ff06:	3301      	adds	r3, #1
 800ff08:	72fb      	strb	r3, [r7, #11]
          break;
 800ff0a:	e03b      	b.n	800ff84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff12:	695b      	ldr	r3, [r3, #20]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00b      	beq.n	800ff30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff1e:	695b      	ldr	r3, [r3, #20]
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	7c12      	ldrb	r2, [r2, #16]
 800ff24:	f107 0108 	add.w	r1, r7, #8
 800ff28:	4610      	mov	r0, r2
 800ff2a:	4798      	blx	r3
 800ff2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff2e:	e029      	b.n	800ff84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff30:	6839      	ldr	r1, [r7, #0]
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 fa63 	bl	80103fe <USBD_CtlError>
            err++;
 800ff38:	7afb      	ldrb	r3, [r7, #11]
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ff3e:	e021      	b.n	800ff84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d00b      	beq.n	800ff64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff52:	699b      	ldr	r3, [r3, #24]
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	7c12      	ldrb	r2, [r2, #16]
 800ff58:	f107 0108 	add.w	r1, r7, #8
 800ff5c:	4610      	mov	r0, r2
 800ff5e:	4798      	blx	r3
 800ff60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff62:	e00f      	b.n	800ff84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff64:	6839      	ldr	r1, [r7, #0]
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 fa49 	bl	80103fe <USBD_CtlError>
            err++;
 800ff6c:	7afb      	ldrb	r3, [r7, #11]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	72fb      	strb	r3, [r7, #11]
          break;
 800ff72:	e007      	b.n	800ff84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ff74:	6839      	ldr	r1, [r7, #0]
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 fa41 	bl	80103fe <USBD_CtlError>
          err++;
 800ff7c:	7afb      	ldrb	r3, [r7, #11]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ff82:	bf00      	nop
      }
      break;
 800ff84:	e037      	b.n	800fff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	7c1b      	ldrb	r3, [r3, #16]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d109      	bne.n	800ffa2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff96:	f107 0208 	add.w	r2, r7, #8
 800ff9a:	4610      	mov	r0, r2
 800ff9c:	4798      	blx	r3
 800ff9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffa0:	e029      	b.n	800fff6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ffa2:	6839      	ldr	r1, [r7, #0]
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f000 fa2a 	bl	80103fe <USBD_CtlError>
        err++;
 800ffaa:	7afb      	ldrb	r3, [r7, #11]
 800ffac:	3301      	adds	r3, #1
 800ffae:	72fb      	strb	r3, [r7, #11]
      break;
 800ffb0:	e021      	b.n	800fff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	7c1b      	ldrb	r3, [r3, #16]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d10d      	bne.n	800ffd6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ffc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc2:	f107 0208 	add.w	r2, r7, #8
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	4798      	blx	r3
 800ffca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	2207      	movs	r2, #7
 800ffd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffd4:	e00f      	b.n	800fff6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ffd6:	6839      	ldr	r1, [r7, #0]
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fa10 	bl	80103fe <USBD_CtlError>
        err++;
 800ffde:	7afb      	ldrb	r3, [r7, #11]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	72fb      	strb	r3, [r7, #11]
      break;
 800ffe4:	e007      	b.n	800fff6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ffe6:	6839      	ldr	r1, [r7, #0]
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f000 fa08 	bl	80103fe <USBD_CtlError>
      err++;
 800ffee:	7afb      	ldrb	r3, [r7, #11]
 800fff0:	3301      	adds	r3, #1
 800fff2:	72fb      	strb	r3, [r7, #11]
      break;
 800fff4:	bf00      	nop
  }

  if (err != 0U)
 800fff6:	7afb      	ldrb	r3, [r7, #11]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d11e      	bne.n	801003a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	88db      	ldrh	r3, [r3, #6]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d016      	beq.n	8010032 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010004:	893b      	ldrh	r3, [r7, #8]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00e      	beq.n	8010028 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	88da      	ldrh	r2, [r3, #6]
 801000e:	893b      	ldrh	r3, [r7, #8]
 8010010:	4293      	cmp	r3, r2
 8010012:	bf28      	it	cs
 8010014:	4613      	movcs	r3, r2
 8010016:	b29b      	uxth	r3, r3
 8010018:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801001a:	893b      	ldrh	r3, [r7, #8]
 801001c:	461a      	mov	r2, r3
 801001e:	68f9      	ldr	r1, [r7, #12]
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fa5d 	bl	80104e0 <USBD_CtlSendData>
 8010026:	e009      	b.n	801003c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010028:	6839      	ldr	r1, [r7, #0]
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f9e7 	bl	80103fe <USBD_CtlError>
 8010030:	e004      	b.n	801003c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f000 faae 	bl	8010594 <USBD_CtlSendStatus>
 8010038:	e000      	b.n	801003c <USBD_GetDescriptor+0x320>
    return;
 801003a:	bf00      	nop
  }
}
 801003c:	3710      	adds	r7, #16
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop

08010044 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b084      	sub	sp, #16
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	889b      	ldrh	r3, [r3, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d131      	bne.n	80100ba <USBD_SetAddress+0x76>
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	88db      	ldrh	r3, [r3, #6]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d12d      	bne.n	80100ba <USBD_SetAddress+0x76>
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	885b      	ldrh	r3, [r3, #2]
 8010062:	2b7f      	cmp	r3, #127	; 0x7f
 8010064:	d829      	bhi.n	80100ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	885b      	ldrh	r3, [r3, #2]
 801006a:	b2db      	uxtb	r3, r3
 801006c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010070:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010078:	b2db      	uxtb	r3, r3
 801007a:	2b03      	cmp	r3, #3
 801007c:	d104      	bne.n	8010088 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f9bc 	bl	80103fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010086:	e01d      	b.n	80100c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	7bfa      	ldrb	r2, [r7, #15]
 801008c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010090:	7bfb      	ldrb	r3, [r7, #15]
 8010092:	4619      	mov	r1, r3
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f005 fd1b 	bl	8015ad0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fa7a 	bl	8010594 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80100a0:	7bfb      	ldrb	r3, [r7, #15]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d004      	beq.n	80100b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2202      	movs	r2, #2
 80100aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100ae:	e009      	b.n	80100c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2201      	movs	r2, #1
 80100b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100b8:	e004      	b.n	80100c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80100ba:	6839      	ldr	r1, [r7, #0]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f000 f99e 	bl	80103fe <USBD_CtlError>
  }
}
 80100c2:	bf00      	nop
 80100c4:	bf00      	nop
 80100c6:	3710      	adds	r7, #16
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80100d6:	2300      	movs	r3, #0
 80100d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	885b      	ldrh	r3, [r3, #2]
 80100de:	b2da      	uxtb	r2, r3
 80100e0:	4b4e      	ldr	r3, [pc, #312]	; (801021c <USBD_SetConfig+0x150>)
 80100e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80100e4:	4b4d      	ldr	r3, [pc, #308]	; (801021c <USBD_SetConfig+0x150>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d905      	bls.n	80100f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80100ec:	6839      	ldr	r1, [r7, #0]
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 f985 	bl	80103fe <USBD_CtlError>
    return USBD_FAIL;
 80100f4:	2303      	movs	r3, #3
 80100f6:	e08c      	b.n	8010212 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100fe:	b2db      	uxtb	r3, r3
 8010100:	2b02      	cmp	r3, #2
 8010102:	d002      	beq.n	801010a <USBD_SetConfig+0x3e>
 8010104:	2b03      	cmp	r3, #3
 8010106:	d029      	beq.n	801015c <USBD_SetConfig+0x90>
 8010108:	e075      	b.n	80101f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801010a:	4b44      	ldr	r3, [pc, #272]	; (801021c <USBD_SetConfig+0x150>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d020      	beq.n	8010154 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010112:	4b42      	ldr	r3, [pc, #264]	; (801021c <USBD_SetConfig+0x150>)
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	461a      	mov	r2, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801011c:	4b3f      	ldr	r3, [pc, #252]	; (801021c <USBD_SetConfig+0x150>)
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	4619      	mov	r1, r3
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f7fe ffbd 	bl	800f0a2 <USBD_SetClassConfig>
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801012c:	7bfb      	ldrb	r3, [r7, #15]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d008      	beq.n	8010144 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010132:	6839      	ldr	r1, [r7, #0]
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f000 f962 	bl	80103fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2202      	movs	r2, #2
 801013e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010142:	e065      	b.n	8010210 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 fa25 	bl	8010594 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2203      	movs	r2, #3
 801014e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010152:	e05d      	b.n	8010210 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fa1d 	bl	8010594 <USBD_CtlSendStatus>
      break;
 801015a:	e059      	b.n	8010210 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801015c:	4b2f      	ldr	r3, [pc, #188]	; (801021c <USBD_SetConfig+0x150>)
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d112      	bne.n	801018a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2202      	movs	r2, #2
 8010168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801016c:	4b2b      	ldr	r3, [pc, #172]	; (801021c <USBD_SetConfig+0x150>)
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	461a      	mov	r2, r3
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010176:	4b29      	ldr	r3, [pc, #164]	; (801021c <USBD_SetConfig+0x150>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	4619      	mov	r1, r3
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7fe ffac 	bl	800f0da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fa06 	bl	8010594 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010188:	e042      	b.n	8010210 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801018a:	4b24      	ldr	r3, [pc, #144]	; (801021c <USBD_SetConfig+0x150>)
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	461a      	mov	r2, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	429a      	cmp	r2, r3
 8010196:	d02a      	beq.n	80101ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	b2db      	uxtb	r3, r3
 801019e:	4619      	mov	r1, r3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7fe ff9a 	bl	800f0da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80101a6:	4b1d      	ldr	r3, [pc, #116]	; (801021c <USBD_SetConfig+0x150>)
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	461a      	mov	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80101b0:	4b1a      	ldr	r3, [pc, #104]	; (801021c <USBD_SetConfig+0x150>)
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	4619      	mov	r1, r3
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f7fe ff73 	bl	800f0a2 <USBD_SetClassConfig>
 80101bc:	4603      	mov	r3, r0
 80101be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80101c0:	7bfb      	ldrb	r3, [r7, #15]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00f      	beq.n	80101e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80101c6:	6839      	ldr	r1, [r7, #0]
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f918 	bl	80103fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7fe ff7f 	bl	800f0da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2202      	movs	r2, #2
 80101e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80101e4:	e014      	b.n	8010210 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 f9d4 	bl	8010594 <USBD_CtlSendStatus>
      break;
 80101ec:	e010      	b.n	8010210 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 f9d0 	bl	8010594 <USBD_CtlSendStatus>
      break;
 80101f4:	e00c      	b.n	8010210 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80101f6:	6839      	ldr	r1, [r7, #0]
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 f900 	bl	80103fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101fe:	4b07      	ldr	r3, [pc, #28]	; (801021c <USBD_SetConfig+0x150>)
 8010200:	781b      	ldrb	r3, [r3, #0]
 8010202:	4619      	mov	r1, r3
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7fe ff68 	bl	800f0da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801020a:	2303      	movs	r3, #3
 801020c:	73fb      	strb	r3, [r7, #15]
      break;
 801020e:	bf00      	nop
  }

  return ret;
 8010210:	7bfb      	ldrb	r3, [r7, #15]
}
 8010212:	4618      	mov	r0, r3
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	200009f8 	.word	0x200009f8

08010220 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	88db      	ldrh	r3, [r3, #6]
 801022e:	2b01      	cmp	r3, #1
 8010230:	d004      	beq.n	801023c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010232:	6839      	ldr	r1, [r7, #0]
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 f8e2 	bl	80103fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801023a:	e023      	b.n	8010284 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010242:	b2db      	uxtb	r3, r3
 8010244:	2b02      	cmp	r3, #2
 8010246:	dc02      	bgt.n	801024e <USBD_GetConfig+0x2e>
 8010248:	2b00      	cmp	r3, #0
 801024a:	dc03      	bgt.n	8010254 <USBD_GetConfig+0x34>
 801024c:	e015      	b.n	801027a <USBD_GetConfig+0x5a>
 801024e:	2b03      	cmp	r3, #3
 8010250:	d00b      	beq.n	801026a <USBD_GetConfig+0x4a>
 8010252:	e012      	b.n	801027a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2200      	movs	r2, #0
 8010258:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	3308      	adds	r3, #8
 801025e:	2201      	movs	r2, #1
 8010260:	4619      	mov	r1, r3
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 f93c 	bl	80104e0 <USBD_CtlSendData>
        break;
 8010268:	e00c      	b.n	8010284 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	3304      	adds	r3, #4
 801026e:	2201      	movs	r2, #1
 8010270:	4619      	mov	r1, r3
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f934 	bl	80104e0 <USBD_CtlSendData>
        break;
 8010278:	e004      	b.n	8010284 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 f8be 	bl	80103fe <USBD_CtlError>
        break;
 8010282:	bf00      	nop
}
 8010284:	bf00      	nop
 8010286:	3708      	adds	r7, #8
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801029c:	b2db      	uxtb	r3, r3
 801029e:	3b01      	subs	r3, #1
 80102a0:	2b02      	cmp	r3, #2
 80102a2:	d81e      	bhi.n	80102e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	88db      	ldrh	r3, [r3, #6]
 80102a8:	2b02      	cmp	r3, #2
 80102aa:	d004      	beq.n	80102b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80102ac:	6839      	ldr	r1, [r7, #0]
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f8a5 	bl	80103fe <USBD_CtlError>
        break;
 80102b4:	e01a      	b.n	80102ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2201      	movs	r2, #1
 80102ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d005      	beq.n	80102d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	f043 0202 	orr.w	r2, r3, #2
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	330c      	adds	r3, #12
 80102d6:	2202      	movs	r2, #2
 80102d8:	4619      	mov	r1, r3
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f000 f900 	bl	80104e0 <USBD_CtlSendData>
      break;
 80102e0:	e004      	b.n	80102ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80102e2:	6839      	ldr	r1, [r7, #0]
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 f88a 	bl	80103fe <USBD_CtlError>
      break;
 80102ea:	bf00      	nop
  }
}
 80102ec:	bf00      	nop
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}

080102f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	885b      	ldrh	r3, [r3, #2]
 8010302:	2b01      	cmp	r3, #1
 8010304:	d107      	bne.n	8010316 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2201      	movs	r2, #1
 801030a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 f940 	bl	8010594 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010314:	e013      	b.n	801033e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010316:	683b      	ldr	r3, [r7, #0]
 8010318:	885b      	ldrh	r3, [r3, #2]
 801031a:	2b02      	cmp	r3, #2
 801031c:	d10b      	bne.n	8010336 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	889b      	ldrh	r3, [r3, #4]
 8010322:	0a1b      	lsrs	r3, r3, #8
 8010324:	b29b      	uxth	r3, r3
 8010326:	b2da      	uxtb	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 f930 	bl	8010594 <USBD_CtlSendStatus>
}
 8010334:	e003      	b.n	801033e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 f860 	bl	80103fe <USBD_CtlError>
}
 801033e:	bf00      	nop
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b082      	sub	sp, #8
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
 801034e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010356:	b2db      	uxtb	r3, r3
 8010358:	3b01      	subs	r3, #1
 801035a:	2b02      	cmp	r3, #2
 801035c:	d80b      	bhi.n	8010376 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	885b      	ldrh	r3, [r3, #2]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d10c      	bne.n	8010380 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2200      	movs	r2, #0
 801036a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 f910 	bl	8010594 <USBD_CtlSendStatus>
      }
      break;
 8010374:	e004      	b.n	8010380 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010376:	6839      	ldr	r1, [r7, #0]
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 f840 	bl	80103fe <USBD_CtlError>
      break;
 801037e:	e000      	b.n	8010382 <USBD_ClrFeature+0x3c>
      break;
 8010380:	bf00      	nop
  }
}
 8010382:	bf00      	nop
 8010384:	3708      	adds	r7, #8
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}

0801038a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801038a:	b580      	push	{r7, lr}
 801038c:	b084      	sub	sp, #16
 801038e:	af00      	add	r7, sp, #0
 8010390:	6078      	str	r0, [r7, #4]
 8010392:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	781a      	ldrb	r2, [r3, #0]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	3301      	adds	r3, #1
 80103a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	781a      	ldrb	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	3301      	adds	r3, #1
 80103b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f7ff fa17 	bl	800f7e8 <SWAPBYTE>
 80103ba:	4603      	mov	r3, r0
 80103bc:	461a      	mov	r2, r3
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	3301      	adds	r3, #1
 80103c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	3301      	adds	r3, #1
 80103cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80103ce:	68f8      	ldr	r0, [r7, #12]
 80103d0:	f7ff fa0a 	bl	800f7e8 <SWAPBYTE>
 80103d4:	4603      	mov	r3, r0
 80103d6:	461a      	mov	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	3301      	adds	r3, #1
 80103e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	3301      	adds	r3, #1
 80103e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f7ff f9fd 	bl	800f7e8 <SWAPBYTE>
 80103ee:	4603      	mov	r3, r0
 80103f0:	461a      	mov	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	80da      	strh	r2, [r3, #6]
}
 80103f6:	bf00      	nop
 80103f8:	3710      	adds	r7, #16
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}

080103fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103fe:	b580      	push	{r7, lr}
 8010400:	b082      	sub	sp, #8
 8010402:	af00      	add	r7, sp, #0
 8010404:	6078      	str	r0, [r7, #4]
 8010406:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010408:	2180      	movs	r1, #128	; 0x80
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f005 faf6 	bl	80159fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010410:	2100      	movs	r1, #0
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f005 faf2 	bl	80159fc <USBD_LL_StallEP>
}
 8010418:	bf00      	nop
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b086      	sub	sp, #24
 8010424:	af00      	add	r7, sp, #0
 8010426:	60f8      	str	r0, [r7, #12]
 8010428:	60b9      	str	r1, [r7, #8]
 801042a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801042c:	2300      	movs	r3, #0
 801042e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d036      	beq.n	80104a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801043a:	6938      	ldr	r0, [r7, #16]
 801043c:	f000 f836 	bl	80104ac <USBD_GetLen>
 8010440:	4603      	mov	r3, r0
 8010442:	3301      	adds	r3, #1
 8010444:	b29b      	uxth	r3, r3
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	b29a      	uxth	r2, r3
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801044e:	7dfb      	ldrb	r3, [r7, #23]
 8010450:	68ba      	ldr	r2, [r7, #8]
 8010452:	4413      	add	r3, r2
 8010454:	687a      	ldr	r2, [r7, #4]
 8010456:	7812      	ldrb	r2, [r2, #0]
 8010458:	701a      	strb	r2, [r3, #0]
  idx++;
 801045a:	7dfb      	ldrb	r3, [r7, #23]
 801045c:	3301      	adds	r3, #1
 801045e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010460:	7dfb      	ldrb	r3, [r7, #23]
 8010462:	68ba      	ldr	r2, [r7, #8]
 8010464:	4413      	add	r3, r2
 8010466:	2203      	movs	r2, #3
 8010468:	701a      	strb	r2, [r3, #0]
  idx++;
 801046a:	7dfb      	ldrb	r3, [r7, #23]
 801046c:	3301      	adds	r3, #1
 801046e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010470:	e013      	b.n	801049a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	4413      	add	r3, r2
 8010478:	693a      	ldr	r2, [r7, #16]
 801047a:	7812      	ldrb	r2, [r2, #0]
 801047c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	3301      	adds	r3, #1
 8010482:	613b      	str	r3, [r7, #16]
    idx++;
 8010484:	7dfb      	ldrb	r3, [r7, #23]
 8010486:	3301      	adds	r3, #1
 8010488:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801048a:	7dfb      	ldrb	r3, [r7, #23]
 801048c:	68ba      	ldr	r2, [r7, #8]
 801048e:	4413      	add	r3, r2
 8010490:	2200      	movs	r2, #0
 8010492:	701a      	strb	r2, [r3, #0]
    idx++;
 8010494:	7dfb      	ldrb	r3, [r7, #23]
 8010496:	3301      	adds	r3, #1
 8010498:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1e7      	bne.n	8010472 <USBD_GetString+0x52>
 80104a2:	e000      	b.n	80104a6 <USBD_GetString+0x86>
    return;
 80104a4:	bf00      	nop
  }
}
 80104a6:	3718      	adds	r7, #24
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b085      	sub	sp, #20
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80104b4:	2300      	movs	r3, #0
 80104b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80104bc:	e005      	b.n	80104ca <USBD_GetLen+0x1e>
  {
    len++;
 80104be:	7bfb      	ldrb	r3, [r7, #15]
 80104c0:	3301      	adds	r3, #1
 80104c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	3301      	adds	r3, #1
 80104c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80104ca:	68bb      	ldr	r3, [r7, #8]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1f5      	bne.n	80104be <USBD_GetLen+0x12>
  }

  return len;
 80104d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3714      	adds	r7, #20
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b084      	sub	sp, #16
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2202      	movs	r2, #2
 80104f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	687a      	ldr	r2, [r7, #4]
 80104fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	68ba      	ldr	r2, [r7, #8]
 8010504:	2100      	movs	r1, #0
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f005 fb01 	bl	8015b0e <USBD_LL_Transmit>

  return USBD_OK;
 801050c:	2300      	movs	r3, #0
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b084      	sub	sp, #16
 801051a:	af00      	add	r7, sp, #0
 801051c:	60f8      	str	r0, [r7, #12]
 801051e:	60b9      	str	r1, [r7, #8]
 8010520:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	2100      	movs	r1, #0
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f005 faf0 	bl	8015b0e <USBD_LL_Transmit>

  return USBD_OK;
 801052e:	2300      	movs	r3, #0
}
 8010530:	4618      	mov	r0, r3
 8010532:	3710      	adds	r7, #16
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2203      	movs	r2, #3
 8010548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	68ba      	ldr	r2, [r7, #8]
 8010560:	2100      	movs	r1, #0
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f005 faf4 	bl	8015b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010568:	2300      	movs	r3, #0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b084      	sub	sp, #16
 8010576:	af00      	add	r7, sp, #0
 8010578:	60f8      	str	r0, [r7, #12]
 801057a:	60b9      	str	r1, [r7, #8]
 801057c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	68ba      	ldr	r2, [r7, #8]
 8010582:	2100      	movs	r1, #0
 8010584:	68f8      	ldr	r0, [r7, #12]
 8010586:	f005 fae3 	bl	8015b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801058a:	2300      	movs	r3, #0
}
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2204      	movs	r2, #4
 80105a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80105a4:	2300      	movs	r3, #0
 80105a6:	2200      	movs	r2, #0
 80105a8:	2100      	movs	r1, #0
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f005 faaf 	bl	8015b0e <USBD_LL_Transmit>

  return USBD_OK;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b082      	sub	sp, #8
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2205      	movs	r2, #5
 80105c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80105ca:	2300      	movs	r3, #0
 80105cc:	2200      	movs	r2, #0
 80105ce:	2100      	movs	r1, #0
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	f005 fabd 	bl	8015b50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3708      	adds	r7, #8
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	4603      	mov	r3, r0
 80105e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80105ea:	79fb      	ldrb	r3, [r7, #7]
 80105ec:	4a08      	ldr	r2, [pc, #32]	; (8010610 <disk_status+0x30>)
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	4413      	add	r3, r2
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	685b      	ldr	r3, [r3, #4]
 80105f6:	79fa      	ldrb	r2, [r7, #7]
 80105f8:	4905      	ldr	r1, [pc, #20]	; (8010610 <disk_status+0x30>)
 80105fa:	440a      	add	r2, r1
 80105fc:	7a12      	ldrb	r2, [r2, #8]
 80105fe:	4610      	mov	r0, r2
 8010600:	4798      	blx	r3
 8010602:	4603      	mov	r3, r0
 8010604:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010606:	7bfb      	ldrb	r3, [r7, #15]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	20000a24 	.word	0x20000a24

08010614 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	4603      	mov	r3, r0
 801061c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801061e:	2300      	movs	r3, #0
 8010620:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010622:	79fb      	ldrb	r3, [r7, #7]
 8010624:	4a0d      	ldr	r2, [pc, #52]	; (801065c <disk_initialize+0x48>)
 8010626:	5cd3      	ldrb	r3, [r2, r3]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d111      	bne.n	8010650 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801062c:	79fb      	ldrb	r3, [r7, #7]
 801062e:	4a0b      	ldr	r2, [pc, #44]	; (801065c <disk_initialize+0x48>)
 8010630:	2101      	movs	r1, #1
 8010632:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010634:	79fb      	ldrb	r3, [r7, #7]
 8010636:	4a09      	ldr	r2, [pc, #36]	; (801065c <disk_initialize+0x48>)
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	4413      	add	r3, r2
 801063c:	685b      	ldr	r3, [r3, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	79fa      	ldrb	r2, [r7, #7]
 8010642:	4906      	ldr	r1, [pc, #24]	; (801065c <disk_initialize+0x48>)
 8010644:	440a      	add	r2, r1
 8010646:	7a12      	ldrb	r2, [r2, #8]
 8010648:	4610      	mov	r0, r2
 801064a:	4798      	blx	r3
 801064c:	4603      	mov	r3, r0
 801064e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010650:	7bfb      	ldrb	r3, [r7, #15]
}
 8010652:	4618      	mov	r0, r3
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	20000a24 	.word	0x20000a24

08010660 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010660:	b590      	push	{r4, r7, lr}
 8010662:	b087      	sub	sp, #28
 8010664:	af00      	add	r7, sp, #0
 8010666:	60b9      	str	r1, [r7, #8]
 8010668:	607a      	str	r2, [r7, #4]
 801066a:	603b      	str	r3, [r7, #0]
 801066c:	4603      	mov	r3, r0
 801066e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010670:	7bfb      	ldrb	r3, [r7, #15]
 8010672:	4a0a      	ldr	r2, [pc, #40]	; (801069c <disk_read+0x3c>)
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	4413      	add	r3, r2
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	689c      	ldr	r4, [r3, #8]
 801067c:	7bfb      	ldrb	r3, [r7, #15]
 801067e:	4a07      	ldr	r2, [pc, #28]	; (801069c <disk_read+0x3c>)
 8010680:	4413      	add	r3, r2
 8010682:	7a18      	ldrb	r0, [r3, #8]
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	68b9      	ldr	r1, [r7, #8]
 801068a:	47a0      	blx	r4
 801068c:	4603      	mov	r3, r0
 801068e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010690:	7dfb      	ldrb	r3, [r7, #23]
}
 8010692:	4618      	mov	r0, r3
 8010694:	371c      	adds	r7, #28
 8010696:	46bd      	mov	sp, r7
 8010698:	bd90      	pop	{r4, r7, pc}
 801069a:	bf00      	nop
 801069c:	20000a24 	.word	0x20000a24

080106a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80106a0:	b590      	push	{r4, r7, lr}
 80106a2:	b087      	sub	sp, #28
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60b9      	str	r1, [r7, #8]
 80106a8:	607a      	str	r2, [r7, #4]
 80106aa:	603b      	str	r3, [r7, #0]
 80106ac:	4603      	mov	r3, r0
 80106ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
 80106b2:	4a0a      	ldr	r2, [pc, #40]	; (80106dc <disk_write+0x3c>)
 80106b4:	009b      	lsls	r3, r3, #2
 80106b6:	4413      	add	r3, r2
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	68dc      	ldr	r4, [r3, #12]
 80106bc:	7bfb      	ldrb	r3, [r7, #15]
 80106be:	4a07      	ldr	r2, [pc, #28]	; (80106dc <disk_write+0x3c>)
 80106c0:	4413      	add	r3, r2
 80106c2:	7a18      	ldrb	r0, [r3, #8]
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	68b9      	ldr	r1, [r7, #8]
 80106ca:	47a0      	blx	r4
 80106cc:	4603      	mov	r3, r0
 80106ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80106d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	371c      	adds	r7, #28
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd90      	pop	{r4, r7, pc}
 80106da:	bf00      	nop
 80106dc:	20000a24 	.word	0x20000a24

080106e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3301      	adds	r3, #1
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80106f0:	89fb      	ldrh	r3, [r7, #14]
 80106f2:	021b      	lsls	r3, r3, #8
 80106f4:	b21a      	sxth	r2, r3
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	b21b      	sxth	r3, r3
 80106fc:	4313      	orrs	r3, r2
 80106fe:	b21b      	sxth	r3, r3
 8010700:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010702:	89fb      	ldrh	r3, [r7, #14]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3714      	adds	r7, #20
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010710:	b480      	push	{r7}
 8010712:	b085      	sub	sp, #20
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	3303      	adds	r3, #3
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	021b      	lsls	r3, r3, #8
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	3202      	adds	r2, #2
 8010728:	7812      	ldrb	r2, [r2, #0]
 801072a:	4313      	orrs	r3, r2
 801072c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	021b      	lsls	r3, r3, #8
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	3201      	adds	r2, #1
 8010736:	7812      	ldrb	r2, [r2, #0]
 8010738:	4313      	orrs	r3, r2
 801073a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	021b      	lsls	r3, r3, #8
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	7812      	ldrb	r2, [r2, #0]
 8010744:	4313      	orrs	r3, r2
 8010746:	60fb      	str	r3, [r7, #12]
	return rv;
 8010748:	68fb      	ldr	r3, [r7, #12]
}
 801074a:	4618      	mov	r0, r3
 801074c:	3714      	adds	r7, #20
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b082      	sub	sp, #8
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d009      	beq.n	8010778 <lock_fs+0x22>
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	4618      	mov	r0, r3
 801076a:	f000 fc8f 	bl	801108c <ff_req_grant>
 801076e:	4603      	mov	r3, r0
 8010770:	2b00      	cmp	r3, #0
 8010772:	d001      	beq.n	8010778 <lock_fs+0x22>
 8010774:	2301      	movs	r3, #1
 8010776:	e000      	b.n	801077a <lock_fs+0x24>
 8010778:	2300      	movs	r3, #0
}
 801077a:	4618      	mov	r0, r3
 801077c:	3708      	adds	r7, #8
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}

08010782 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010782:	b580      	push	{r7, lr}
 8010784:	b082      	sub	sp, #8
 8010786:	af00      	add	r7, sp, #0
 8010788:	6078      	str	r0, [r7, #4]
 801078a:	460b      	mov	r3, r1
 801078c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00d      	beq.n	80107b0 <unlock_fs+0x2e>
 8010794:	78fb      	ldrb	r3, [r7, #3]
 8010796:	2b0c      	cmp	r3, #12
 8010798:	d00a      	beq.n	80107b0 <unlock_fs+0x2e>
 801079a:	78fb      	ldrb	r3, [r7, #3]
 801079c:	2b0b      	cmp	r3, #11
 801079e:	d007      	beq.n	80107b0 <unlock_fs+0x2e>
 80107a0:	78fb      	ldrb	r3, [r7, #3]
 80107a2:	2b0f      	cmp	r3, #15
 80107a4:	d004      	beq.n	80107b0 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f000 fc83 	bl	80110b6 <ff_rel_grant>
	}
}
 80107b0:	bf00      	nop
 80107b2:	3708      	adds	r7, #8
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b085      	sub	sp, #20
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80107c0:	2300      	movs	r3, #0
 80107c2:	60fb      	str	r3, [r7, #12]
 80107c4:	e010      	b.n	80107e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80107c6:	4a0d      	ldr	r2, [pc, #52]	; (80107fc <clear_lock+0x44>)
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	011b      	lsls	r3, r3, #4
 80107cc:	4413      	add	r3, r2
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d105      	bne.n	80107e2 <clear_lock+0x2a>
 80107d6:	4a09      	ldr	r2, [pc, #36]	; (80107fc <clear_lock+0x44>)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	011b      	lsls	r3, r3, #4
 80107dc:	4413      	add	r3, r2
 80107de:	2200      	movs	r2, #0
 80107e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	3301      	adds	r3, #1
 80107e6:	60fb      	str	r3, [r7, #12]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d9eb      	bls.n	80107c6 <clear_lock+0xe>
	}
}
 80107ee:	bf00      	nop
 80107f0:	bf00      	nop
 80107f2:	3714      	adds	r7, #20
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	20000a04 	.word	0x20000a04

08010800 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010808:	2300      	movs	r3, #0
 801080a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	78db      	ldrb	r3, [r3, #3]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d034      	beq.n	801087e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010818:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	7858      	ldrb	r0, [r3, #1]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010824:	2301      	movs	r3, #1
 8010826:	697a      	ldr	r2, [r7, #20]
 8010828:	f7ff ff3a 	bl	80106a0 <disk_write>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	d002      	beq.n	8010838 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010832:	2301      	movs	r3, #1
 8010834:	73fb      	strb	r3, [r7, #15]
 8010836:	e022      	b.n	801087e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2200      	movs	r2, #0
 801083c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010842:	697a      	ldr	r2, [r7, #20]
 8010844:	1ad2      	subs	r2, r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	429a      	cmp	r2, r3
 801084c:	d217      	bcs.n	801087e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	789b      	ldrb	r3, [r3, #2]
 8010852:	613b      	str	r3, [r7, #16]
 8010854:	e010      	b.n	8010878 <sync_window+0x78>
					wsect += fs->fsize;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	69db      	ldr	r3, [r3, #28]
 801085a:	697a      	ldr	r2, [r7, #20]
 801085c:	4413      	add	r3, r2
 801085e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	7858      	ldrb	r0, [r3, #1]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801086a:	2301      	movs	r3, #1
 801086c:	697a      	ldr	r2, [r7, #20]
 801086e:	f7ff ff17 	bl	80106a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	3b01      	subs	r3, #1
 8010876:	613b      	str	r3, [r7, #16]
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	2b01      	cmp	r3, #1
 801087c:	d8eb      	bhi.n	8010856 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010880:	4618      	mov	r0, r3
 8010882:	3718      	adds	r7, #24
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010892:	2300      	movs	r3, #0
 8010894:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	d01b      	beq.n	80108d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f7ff ffad 	bl	8010800 <sync_window>
 80108a6:	4603      	mov	r3, r0
 80108a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80108aa:	7bfb      	ldrb	r3, [r7, #15]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d113      	bne.n	80108d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	7858      	ldrb	r0, [r3, #1]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80108ba:	2301      	movs	r3, #1
 80108bc:	683a      	ldr	r2, [r7, #0]
 80108be:	f7ff fecf 	bl	8010660 <disk_read>
 80108c2:	4603      	mov	r3, r0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d004      	beq.n	80108d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80108c8:	f04f 33ff 	mov.w	r3, #4294967295
 80108cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80108ce:	2301      	movs	r3, #1
 80108d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	683a      	ldr	r2, [r7, #0]
 80108d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80108d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3710      	adds	r7, #16
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80108e2:	b480      	push	{r7}
 80108e4:	b087      	sub	sp, #28
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80108ea:	f04f 33ff 	mov.w	r3, #4294967295
 80108ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d031      	beq.n	801095c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	617b      	str	r3, [r7, #20]
 80108fe:	e002      	b.n	8010906 <get_ldnumber+0x24>
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	3301      	adds	r3, #1
 8010904:	617b      	str	r3, [r7, #20]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	2b20      	cmp	r3, #32
 801090c:	d903      	bls.n	8010916 <get_ldnumber+0x34>
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	2b3a      	cmp	r3, #58	; 0x3a
 8010914:	d1f4      	bne.n	8010900 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	2b3a      	cmp	r3, #58	; 0x3a
 801091c:	d11c      	bne.n	8010958 <get_ldnumber+0x76>
			tp = *path;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	1c5a      	adds	r2, r3, #1
 8010928:	60fa      	str	r2, [r7, #12]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	3b30      	subs	r3, #48	; 0x30
 801092e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	2b09      	cmp	r3, #9
 8010934:	d80e      	bhi.n	8010954 <get_ldnumber+0x72>
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	429a      	cmp	r2, r3
 801093c:	d10a      	bne.n	8010954 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801093e:	68bb      	ldr	r3, [r7, #8]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d107      	bne.n	8010954 <get_ldnumber+0x72>
					vol = (int)i;
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	3301      	adds	r3, #1
 801094c:	617b      	str	r3, [r7, #20]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	697a      	ldr	r2, [r7, #20]
 8010952:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	e002      	b.n	801095e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010958:	2300      	movs	r3, #0
 801095a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801095c:	693b      	ldr	r3, [r7, #16]
}
 801095e:	4618      	mov	r0, r3
 8010960:	371c      	adds	r7, #28
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
	...

0801096c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	70da      	strb	r2, [r3, #3]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f04f 32ff 	mov.w	r2, #4294967295
 8010982:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010984:	6839      	ldr	r1, [r7, #0]
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f7ff ff7e 	bl	8010888 <move_window>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d001      	beq.n	8010996 <check_fs+0x2a>
 8010992:	2304      	movs	r3, #4
 8010994:	e038      	b.n	8010a08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	3334      	adds	r3, #52	; 0x34
 801099a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801099e:	4618      	mov	r0, r3
 80109a0:	f7ff fe9e 	bl	80106e0 <ld_word>
 80109a4:	4603      	mov	r3, r0
 80109a6:	461a      	mov	r2, r3
 80109a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d001      	beq.n	80109b4 <check_fs+0x48>
 80109b0:	2303      	movs	r3, #3
 80109b2:	e029      	b.n	8010a08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80109ba:	2be9      	cmp	r3, #233	; 0xe9
 80109bc:	d009      	beq.n	80109d2 <check_fs+0x66>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80109c4:	2beb      	cmp	r3, #235	; 0xeb
 80109c6:	d11e      	bne.n	8010a06 <check_fs+0x9a>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80109ce:	2b90      	cmp	r3, #144	; 0x90
 80109d0:	d119      	bne.n	8010a06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	3334      	adds	r3, #52	; 0x34
 80109d6:	3336      	adds	r3, #54	; 0x36
 80109d8:	4618      	mov	r0, r3
 80109da:	f7ff fe99 	bl	8010710 <ld_dword>
 80109de:	4603      	mov	r3, r0
 80109e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80109e4:	4a0a      	ldr	r2, [pc, #40]	; (8010a10 <check_fs+0xa4>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d101      	bne.n	80109ee <check_fs+0x82>
 80109ea:	2300      	movs	r3, #0
 80109ec:	e00c      	b.n	8010a08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	3334      	adds	r3, #52	; 0x34
 80109f2:	3352      	adds	r3, #82	; 0x52
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7ff fe8b 	bl	8010710 <ld_dword>
 80109fa:	4603      	mov	r3, r0
 80109fc:	4a05      	ldr	r2, [pc, #20]	; (8010a14 <check_fs+0xa8>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d101      	bne.n	8010a06 <check_fs+0x9a>
 8010a02:	2300      	movs	r3, #0
 8010a04:	e000      	b.n	8010a08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010a06:	2302      	movs	r3, #2
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	00544146 	.word	0x00544146
 8010a14:	33544146 	.word	0x33544146

08010a18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b096      	sub	sp, #88	; 0x58
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	60b9      	str	r1, [r7, #8]
 8010a22:	4613      	mov	r3, r2
 8010a24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f7ff ff58 	bl	80108e2 <get_ldnumber>
 8010a32:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	da01      	bge.n	8010a3e <find_volume+0x26>
 8010a3a:	230b      	movs	r3, #11
 8010a3c:	e235      	b.n	8010eaa <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010a3e:	4aa5      	ldr	r2, [pc, #660]	; (8010cd4 <find_volume+0x2bc>)
 8010a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d101      	bne.n	8010a52 <find_volume+0x3a>
 8010a4e:	230c      	movs	r3, #12
 8010a50:	e22b      	b.n	8010eaa <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010a52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a54:	f7ff fe7f 	bl	8010756 <lock_fs>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d101      	bne.n	8010a62 <find_volume+0x4a>
 8010a5e:	230f      	movs	r3, #15
 8010a60:	e223      	b.n	8010eaa <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010a68:	79fb      	ldrb	r3, [r7, #7]
 8010a6a:	f023 0301 	bic.w	r3, r3, #1
 8010a6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d01a      	beq.n	8010aae <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7a:	785b      	ldrb	r3, [r3, #1]
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7ff fdaf 	bl	80105e0 <disk_status>
 8010a82:	4603      	mov	r3, r0
 8010a84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010a88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a8c:	f003 0301 	and.w	r3, r3, #1
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10c      	bne.n	8010aae <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010a94:	79fb      	ldrb	r3, [r7, #7]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d007      	beq.n	8010aaa <find_volume+0x92>
 8010a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a9e:	f003 0304 	and.w	r3, r3, #4
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010aa6:	230a      	movs	r3, #10
 8010aa8:	e1ff      	b.n	8010eaa <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010aaa:	2300      	movs	r3, #0
 8010aac:	e1fd      	b.n	8010eaa <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab6:	b2da      	uxtb	r2, r3
 8010ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	785b      	ldrb	r3, [r3, #1]
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7ff fda7 	bl	8010614 <disk_initialize>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010acc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ad0:	f003 0301 	and.w	r3, r3, #1
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d001      	beq.n	8010adc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010ad8:	2303      	movs	r3, #3
 8010ada:	e1e6      	b.n	8010eaa <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010adc:	79fb      	ldrb	r3, [r7, #7]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d007      	beq.n	8010af2 <find_volume+0xda>
 8010ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ae6:	f003 0304 	and.w	r3, r3, #4
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d001      	beq.n	8010af2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010aee:	230a      	movs	r3, #10
 8010af0:	e1db      	b.n	8010eaa <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010af2:	2300      	movs	r3, #0
 8010af4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010af6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010af8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010afa:	f7ff ff37 	bl	801096c <check_fs>
 8010afe:	4603      	mov	r3, r0
 8010b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010b04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b08:	2b02      	cmp	r3, #2
 8010b0a:	d149      	bne.n	8010ba0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	643b      	str	r3, [r7, #64]	; 0x40
 8010b10:	e01e      	b.n	8010b50 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b1a:	011b      	lsls	r3, r3, #4
 8010b1c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010b20:	4413      	add	r3, r2
 8010b22:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b26:	3304      	adds	r3, #4
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d006      	beq.n	8010b3c <find_volume+0x124>
 8010b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b30:	3308      	adds	r3, #8
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ff fdec 	bl	8010710 <ld_dword>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	e000      	b.n	8010b3e <find_volume+0x126>
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	3358      	adds	r3, #88	; 0x58
 8010b44:	443b      	add	r3, r7
 8010b46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	643b      	str	r3, [r7, #64]	; 0x40
 8010b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b52:	2b03      	cmp	r3, #3
 8010b54:	d9dd      	bls.n	8010b12 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010b56:	2300      	movs	r3, #0
 8010b58:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <find_volume+0x14e>
 8010b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b62:	3b01      	subs	r3, #1
 8010b64:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	3358      	adds	r3, #88	; 0x58
 8010b6c:	443b      	add	r3, r7
 8010b6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010b72:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d005      	beq.n	8010b86 <find_volume+0x16e>
 8010b7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010b7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b7e:	f7ff fef5 	bl	801096c <check_fs>
 8010b82:	4603      	mov	r3, r0
 8010b84:	e000      	b.n	8010b88 <find_volume+0x170>
 8010b86:	2303      	movs	r3, #3
 8010b88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010b8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d905      	bls.n	8010ba0 <find_volume+0x188>
 8010b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b96:	3301      	adds	r3, #1
 8010b98:	643b      	str	r3, [r7, #64]	; 0x40
 8010b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b9c:	2b03      	cmp	r3, #3
 8010b9e:	d9e2      	bls.n	8010b66 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010ba0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ba4:	2b04      	cmp	r3, #4
 8010ba6:	d101      	bne.n	8010bac <find_volume+0x194>
 8010ba8:	2301      	movs	r3, #1
 8010baa:	e17e      	b.n	8010eaa <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010bac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d901      	bls.n	8010bb8 <find_volume+0x1a0>
 8010bb4:	230d      	movs	r3, #13
 8010bb6:	e178      	b.n	8010eaa <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bba:	3334      	adds	r3, #52	; 0x34
 8010bbc:	330b      	adds	r3, #11
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7ff fd8e 	bl	80106e0 <ld_word>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bca:	d001      	beq.n	8010bd0 <find_volume+0x1b8>
 8010bcc:	230d      	movs	r3, #13
 8010bce:	e16c      	b.n	8010eaa <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd2:	3334      	adds	r3, #52	; 0x34
 8010bd4:	3316      	adds	r3, #22
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7ff fd82 	bl	80106e0 <ld_word>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d106      	bne.n	8010bf4 <find_volume+0x1dc>
 8010be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be8:	3334      	adds	r3, #52	; 0x34
 8010bea:	3324      	adds	r3, #36	; 0x24
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7ff fd8f 	bl	8010710 <ld_dword>
 8010bf2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010bf8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bfc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c06:	789b      	ldrb	r3, [r3, #2]
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d005      	beq.n	8010c18 <find_volume+0x200>
 8010c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0e:	789b      	ldrb	r3, [r3, #2]
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	d001      	beq.n	8010c18 <find_volume+0x200>
 8010c14:	230d      	movs	r3, #13
 8010c16:	e148      	b.n	8010eaa <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1a:	789b      	ldrb	r3, [r3, #2]
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c20:	fb02 f303 	mul.w	r3, r2, r3
 8010c24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c34:	895b      	ldrh	r3, [r3, #10]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d008      	beq.n	8010c4c <find_volume+0x234>
 8010c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3c:	895b      	ldrh	r3, [r3, #10]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c42:	895b      	ldrh	r3, [r3, #10]
 8010c44:	3b01      	subs	r3, #1
 8010c46:	4013      	ands	r3, r2
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d001      	beq.n	8010c50 <find_volume+0x238>
 8010c4c:	230d      	movs	r3, #13
 8010c4e:	e12c      	b.n	8010eaa <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c52:	3334      	adds	r3, #52	; 0x34
 8010c54:	3311      	adds	r3, #17
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7ff fd42 	bl	80106e0 <ld_word>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	461a      	mov	r2, r3
 8010c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c66:	891b      	ldrh	r3, [r3, #8]
 8010c68:	f003 030f 	and.w	r3, r3, #15
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d001      	beq.n	8010c76 <find_volume+0x25e>
 8010c72:	230d      	movs	r3, #13
 8010c74:	e119      	b.n	8010eaa <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c78:	3334      	adds	r3, #52	; 0x34
 8010c7a:	3313      	adds	r3, #19
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7ff fd2f 	bl	80106e0 <ld_word>
 8010c82:	4603      	mov	r3, r0
 8010c84:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d106      	bne.n	8010c9a <find_volume+0x282>
 8010c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8e:	3334      	adds	r3, #52	; 0x34
 8010c90:	3320      	adds	r3, #32
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7ff fd3c 	bl	8010710 <ld_dword>
 8010c98:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9c:	3334      	adds	r3, #52	; 0x34
 8010c9e:	330e      	adds	r3, #14
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7ff fd1d 	bl	80106e0 <ld_word>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010caa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <find_volume+0x29c>
 8010cb0:	230d      	movs	r3, #13
 8010cb2:	e0fa      	b.n	8010eaa <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010cb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb8:	4413      	add	r3, r2
 8010cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cbc:	8912      	ldrh	r2, [r2, #8]
 8010cbe:	0912      	lsrs	r2, r2, #4
 8010cc0:	b292      	uxth	r2, r2
 8010cc2:	4413      	add	r3, r2
 8010cc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010cc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d204      	bcs.n	8010cd8 <find_volume+0x2c0>
 8010cce:	230d      	movs	r3, #13
 8010cd0:	e0eb      	b.n	8010eaa <find_volume+0x492>
 8010cd2:	bf00      	nop
 8010cd4:	200009fc 	.word	0x200009fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cdc:	1ad3      	subs	r3, r2, r3
 8010cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ce0:	8952      	ldrh	r2, [r2, #10]
 8010ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ce6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d101      	bne.n	8010cf2 <find_volume+0x2da>
 8010cee:	230d      	movs	r3, #13
 8010cf0:	e0db      	b.n	8010eaa <find_volume+0x492>
		fmt = FS_FAT32;
 8010cf2:	2303      	movs	r3, #3
 8010cf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cfa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d802      	bhi.n	8010d08 <find_volume+0x2f0>
 8010d02:	2302      	movs	r3, #2
 8010d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010d0e:	4293      	cmp	r3, r2
 8010d10:	d802      	bhi.n	8010d18 <find_volume+0x300>
 8010d12:	2301      	movs	r3, #1
 8010d14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	1c9a      	adds	r2, r3, #2
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d24:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010d26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d2a:	441a      	add	r2, r3
 8010d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010d30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d34:	441a      	add	r2, r3
 8010d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d38:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010d3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d3e:	2b03      	cmp	r3, #3
 8010d40:	d11e      	bne.n	8010d80 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d44:	3334      	adds	r3, #52	; 0x34
 8010d46:	332a      	adds	r3, #42	; 0x2a
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff fcc9 	bl	80106e0 <ld_word>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d001      	beq.n	8010d58 <find_volume+0x340>
 8010d54:	230d      	movs	r3, #13
 8010d56:	e0a8      	b.n	8010eaa <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d5a:	891b      	ldrh	r3, [r3, #8]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d001      	beq.n	8010d64 <find_volume+0x34c>
 8010d60:	230d      	movs	r3, #13
 8010d62:	e0a2      	b.n	8010eaa <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d66:	3334      	adds	r3, #52	; 0x34
 8010d68:	332c      	adds	r3, #44	; 0x2c
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7ff fcd0 	bl	8010710 <ld_dword>
 8010d70:	4602      	mov	r2, r0
 8010d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d74:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d78:	699b      	ldr	r3, [r3, #24]
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8010d7e:	e01f      	b.n	8010dc0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d82:	891b      	ldrh	r3, [r3, #8]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d101      	bne.n	8010d8c <find_volume+0x374>
 8010d88:	230d      	movs	r3, #13
 8010d8a:	e08e      	b.n	8010eaa <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d92:	441a      	add	r2, r3
 8010d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d96:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d9c:	2b02      	cmp	r3, #2
 8010d9e:	d103      	bne.n	8010da8 <find_volume+0x390>
 8010da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da2:	699b      	ldr	r3, [r3, #24]
 8010da4:	005b      	lsls	r3, r3, #1
 8010da6:	e00a      	b.n	8010dbe <find_volume+0x3a6>
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	699a      	ldr	r2, [r3, #24]
 8010dac:	4613      	mov	r3, r2
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	4413      	add	r3, r2
 8010db2:	085a      	lsrs	r2, r3, #1
 8010db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db6:	699b      	ldr	r3, [r3, #24]
 8010db8:	f003 0301 	and.w	r3, r3, #1
 8010dbc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010dbe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc2:	69da      	ldr	r2, [r3, #28]
 8010dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dc6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010dca:	0a5b      	lsrs	r3, r3, #9
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d201      	bcs.n	8010dd4 <find_volume+0x3bc>
 8010dd0:	230d      	movs	r3, #13
 8010dd2:	e06a      	b.n	8010eaa <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8010dda:	615a      	str	r2, [r3, #20]
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dde:	695a      	ldr	r2, [r3, #20]
 8010de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de6:	2280      	movs	r2, #128	; 0x80
 8010de8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010dea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dee:	2b03      	cmp	r3, #3
 8010df0:	d149      	bne.n	8010e86 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df4:	3334      	adds	r3, #52	; 0x34
 8010df6:	3330      	adds	r3, #48	; 0x30
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f7ff fc71 	bl	80106e0 <ld_word>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d140      	bne.n	8010e86 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e06:	3301      	adds	r3, #1
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e0c:	f7ff fd3c 	bl	8010888 <move_window>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d137      	bne.n	8010e86 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e18:	2200      	movs	r2, #0
 8010e1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1e:	3334      	adds	r3, #52	; 0x34
 8010e20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff fc5b 	bl	80106e0 <ld_word>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d127      	bne.n	8010e86 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e38:	3334      	adds	r3, #52	; 0x34
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7ff fc68 	bl	8010710 <ld_dword>
 8010e40:	4603      	mov	r3, r0
 8010e42:	4a1c      	ldr	r2, [pc, #112]	; (8010eb4 <find_volume+0x49c>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d11e      	bne.n	8010e86 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	3334      	adds	r3, #52	; 0x34
 8010e4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7ff fc5d 	bl	8010710 <ld_dword>
 8010e56:	4603      	mov	r3, r0
 8010e58:	4a17      	ldr	r2, [pc, #92]	; (8010eb8 <find_volume+0x4a0>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d113      	bne.n	8010e86 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e60:	3334      	adds	r3, #52	; 0x34
 8010e62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7ff fc52 	bl	8010710 <ld_dword>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e70:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	3334      	adds	r3, #52	; 0x34
 8010e76:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7ff fc48 	bl	8010710 <ld_dword>
 8010e80:	4602      	mov	r2, r0
 8010e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e84:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010e8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e8e:	4b0b      	ldr	r3, [pc, #44]	; (8010ebc <find_volume+0x4a4>)
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	3301      	adds	r3, #1
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	4b09      	ldr	r3, [pc, #36]	; (8010ebc <find_volume+0x4a4>)
 8010e98:	801a      	strh	r2, [r3, #0]
 8010e9a:	4b08      	ldr	r3, [pc, #32]	; (8010ebc <find_volume+0x4a4>)
 8010e9c:	881a      	ldrh	r2, [r3, #0]
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010ea2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ea4:	f7ff fc88 	bl	80107b8 <clear_lock>
#endif
	return FR_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3758      	adds	r7, #88	; 0x58
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	41615252 	.word	0x41615252
 8010eb8:	61417272 	.word	0x61417272
 8010ebc:	20000a00 	.word	0x20000a00

08010ec0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b088      	sub	sp, #32
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010ed2:	f107 0310 	add.w	r3, r7, #16
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff fd03 	bl	80108e2 <get_ldnumber>
 8010edc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	da01      	bge.n	8010ee8 <f_mount+0x28>
 8010ee4:	230b      	movs	r3, #11
 8010ee6:	e048      	b.n	8010f7a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010ee8:	4a26      	ldr	r2, [pc, #152]	; (8010f84 <f_mount+0xc4>)
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ef0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d00f      	beq.n	8010f18 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010ef8:	69b8      	ldr	r0, [r7, #24]
 8010efa:	f7ff fc5d 	bl	80107b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010efe:	69bb      	ldr	r3, [r7, #24]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f000 f8b6 	bl	8011074 <ff_del_syncobj>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d101      	bne.n	8010f12 <f_mount+0x52>
 8010f0e:	2302      	movs	r3, #2
 8010f10:	e033      	b.n	8010f7a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	2200      	movs	r2, #0
 8010f16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00f      	beq.n	8010f3e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	2200      	movs	r2, #0
 8010f22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	b2da      	uxtb	r2, r3
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	330c      	adds	r3, #12
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4610      	mov	r0, r2
 8010f30:	f000 f885 	bl	801103e <ff_cre_syncobj>
 8010f34:	4603      	mov	r3, r0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d101      	bne.n	8010f3e <f_mount+0x7e>
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	e01d      	b.n	8010f7a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010f3e:	68fa      	ldr	r2, [r7, #12]
 8010f40:	4910      	ldr	r1, [pc, #64]	; (8010f84 <f_mount+0xc4>)
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d002      	beq.n	8010f54 <f_mount+0x94>
 8010f4e:	79fb      	ldrb	r3, [r7, #7]
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d001      	beq.n	8010f58 <f_mount+0x98>
 8010f54:	2300      	movs	r3, #0
 8010f56:	e010      	b.n	8010f7a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010f58:	f107 010c 	add.w	r1, r7, #12
 8010f5c:	f107 0308 	add.w	r3, r7, #8
 8010f60:	2200      	movs	r2, #0
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff fd58 	bl	8010a18 <find_volume>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	7dfa      	ldrb	r2, [r7, #23]
 8010f70:	4611      	mov	r1, r2
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7ff fc05 	bl	8010782 <unlock_fs>
 8010f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3720      	adds	r7, #32
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	200009fc 	.word	0x200009fc

08010f88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b087      	sub	sp, #28
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	4613      	mov	r3, r2
 8010f94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010f96:	2301      	movs	r3, #1
 8010f98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010f9e:	4b1f      	ldr	r3, [pc, #124]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fa0:	7a5b      	ldrb	r3, [r3, #9]
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d131      	bne.n	801100c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010fa8:	4b1c      	ldr	r3, [pc, #112]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010faa:	7a5b      	ldrb	r3, [r3, #9]
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	461a      	mov	r2, r3
 8010fb0:	4b1a      	ldr	r3, [pc, #104]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fb2:	2100      	movs	r1, #0
 8010fb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010fb6:	4b19      	ldr	r3, [pc, #100]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fb8:	7a5b      	ldrb	r3, [r3, #9]
 8010fba:	b2db      	uxtb	r3, r3
 8010fbc:	4a17      	ldr	r2, [pc, #92]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4413      	add	r3, r2
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010fc6:	4b15      	ldr	r3, [pc, #84]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fc8:	7a5b      	ldrb	r3, [r3, #9]
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	461a      	mov	r2, r3
 8010fce:	4b13      	ldr	r3, [pc, #76]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fd0:	4413      	add	r3, r2
 8010fd2:	79fa      	ldrb	r2, [r7, #7]
 8010fd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010fd6:	4b11      	ldr	r3, [pc, #68]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fd8:	7a5b      	ldrb	r3, [r3, #9]
 8010fda:	b2db      	uxtb	r3, r3
 8010fdc:	1c5a      	adds	r2, r3, #1
 8010fde:	b2d1      	uxtb	r1, r2
 8010fe0:	4a0e      	ldr	r2, [pc, #56]	; (801101c <FATFS_LinkDriverEx+0x94>)
 8010fe2:	7251      	strb	r1, [r2, #9]
 8010fe4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010fe6:	7dbb      	ldrb	r3, [r7, #22]
 8010fe8:	3330      	adds	r3, #48	; 0x30
 8010fea:	b2da      	uxtb	r2, r3
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	3301      	adds	r3, #1
 8010ff4:	223a      	movs	r2, #58	; 0x3a
 8010ff6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	3302      	adds	r3, #2
 8010ffc:	222f      	movs	r2, #47	; 0x2f
 8010ffe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	3303      	adds	r3, #3
 8011004:	2200      	movs	r2, #0
 8011006:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011008:	2300      	movs	r3, #0
 801100a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801100c:	7dfb      	ldrb	r3, [r7, #23]
}
 801100e:	4618      	mov	r0, r3
 8011010:	371c      	adds	r7, #28
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	20000a24 	.word	0x20000a24

08011020 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801102a:	2200      	movs	r2, #0
 801102c:	6839      	ldr	r1, [r7, #0]
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7ff ffaa 	bl	8010f88 <FATFS_LinkDriverEx>
 8011034:	4603      	mov	r3, r0
}
 8011036:	4618      	mov	r0, r3
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}

0801103e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	4603      	mov	r3, r0
 8011046:	6039      	str	r1, [r7, #0]
 8011048:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 801104a:	2200      	movs	r2, #0
 801104c:	2101      	movs	r1, #1
 801104e:	2001      	movs	r0, #1
 8011050:	f000 fb20 	bl	8011694 <osSemaphoreNew>
 8011054:	4602      	mov	r2, r0
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	bf14      	ite	ne
 8011062:	2301      	movne	r3, #1
 8011064:	2300      	moveq	r3, #0
 8011066:	b2db      	uxtb	r3, r3
 8011068:	60fb      	str	r3, [r7, #12]

    return ret;
 801106a:	68fb      	ldr	r3, [r7, #12]
}
 801106c:	4618      	mov	r0, r3
 801106e:	3710      	adds	r7, #16
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 fc29 	bl	80118d4 <osSemaphoreDelete>
#endif
    return 1;
 8011082:	2301      	movs	r3, #1
}
 8011084:	4618      	mov	r0, r3
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011098:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fb83 	bl	80117a8 <osSemaphoreAcquire>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d101      	bne.n	80110ac <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80110a8:	2301      	movs	r3, #1
 80110aa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80110ac:	68fb      	ldr	r3, [r7, #12]
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3710      	adds	r7, #16
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}

080110b6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80110b6:	b580      	push	{r7, lr}
 80110b8:	b082      	sub	sp, #8
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80110be:	6878      	ldr	r0, [r7, #4]
 80110c0:	f000 fbc4 	bl	801184c <osSemaphoreRelease>
#endif
}
 80110c4:	bf00      	nop
 80110c6:	3708      	adds	r7, #8
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}

080110cc <__NVIC_SetPriority>:
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	4603      	mov	r3, r0
 80110d4:	6039      	str	r1, [r7, #0]
 80110d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80110d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	db0a      	blt.n	80110f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	b2da      	uxtb	r2, r3
 80110e4:	490c      	ldr	r1, [pc, #48]	; (8011118 <__NVIC_SetPriority+0x4c>)
 80110e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80110ea:	0112      	lsls	r2, r2, #4
 80110ec:	b2d2      	uxtb	r2, r2
 80110ee:	440b      	add	r3, r1
 80110f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80110f4:	e00a      	b.n	801110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	b2da      	uxtb	r2, r3
 80110fa:	4908      	ldr	r1, [pc, #32]	; (801111c <__NVIC_SetPriority+0x50>)
 80110fc:	79fb      	ldrb	r3, [r7, #7]
 80110fe:	f003 030f 	and.w	r3, r3, #15
 8011102:	3b04      	subs	r3, #4
 8011104:	0112      	lsls	r2, r2, #4
 8011106:	b2d2      	uxtb	r2, r2
 8011108:	440b      	add	r3, r1
 801110a:	761a      	strb	r2, [r3, #24]
}
 801110c:	bf00      	nop
 801110e:	370c      	adds	r7, #12
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr
 8011118:	e000e100 	.word	0xe000e100
 801111c:	e000ed00 	.word	0xe000ed00

08011120 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011120:	b580      	push	{r7, lr}
 8011122:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011124:	4b05      	ldr	r3, [pc, #20]	; (801113c <SysTick_Handler+0x1c>)
 8011126:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011128:	f002 fdc2 	bl	8013cb0 <xTaskGetSchedulerState>
 801112c:	4603      	mov	r3, r0
 801112e:	2b01      	cmp	r3, #1
 8011130:	d001      	beq.n	8011136 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011132:	f003 fd99 	bl	8014c68 <xPortSysTickHandler>
  }
}
 8011136:	bf00      	nop
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	e000e010 	.word	0xe000e010

08011140 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011140:	b580      	push	{r7, lr}
 8011142:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011144:	2100      	movs	r1, #0
 8011146:	f06f 0004 	mvn.w	r0, #4
 801114a:	f7ff ffbf 	bl	80110cc <__NVIC_SetPriority>
#endif
}
 801114e:	bf00      	nop
 8011150:	bd80      	pop	{r7, pc}
	...

08011154 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801115a:	f3ef 8305 	mrs	r3, IPSR
 801115e:	603b      	str	r3, [r7, #0]
  return(result);
 8011160:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011162:	2b00      	cmp	r3, #0
 8011164:	d003      	beq.n	801116e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011166:	f06f 0305 	mvn.w	r3, #5
 801116a:	607b      	str	r3, [r7, #4]
 801116c:	e00c      	b.n	8011188 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801116e:	4b0a      	ldr	r3, [pc, #40]	; (8011198 <osKernelInitialize+0x44>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d105      	bne.n	8011182 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011176:	4b08      	ldr	r3, [pc, #32]	; (8011198 <osKernelInitialize+0x44>)
 8011178:	2201      	movs	r2, #1
 801117a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801117c:	2300      	movs	r3, #0
 801117e:	607b      	str	r3, [r7, #4]
 8011180:	e002      	b.n	8011188 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011182:	f04f 33ff 	mov.w	r3, #4294967295
 8011186:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011188:	687b      	ldr	r3, [r7, #4]
}
 801118a:	4618      	mov	r0, r3
 801118c:	370c      	adds	r7, #12
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop
 8011198:	20000a30 	.word	0x20000a30

0801119c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111a2:	f3ef 8305 	mrs	r3, IPSR
 80111a6:	603b      	str	r3, [r7, #0]
  return(result);
 80111a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d003      	beq.n	80111b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80111ae:	f06f 0305 	mvn.w	r3, #5
 80111b2:	607b      	str	r3, [r7, #4]
 80111b4:	e010      	b.n	80111d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80111b6:	4b0b      	ldr	r3, [pc, #44]	; (80111e4 <osKernelStart+0x48>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d109      	bne.n	80111d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80111be:	f7ff ffbf 	bl	8011140 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80111c2:	4b08      	ldr	r3, [pc, #32]	; (80111e4 <osKernelStart+0x48>)
 80111c4:	2202      	movs	r2, #2
 80111c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80111c8:	f002 f878 	bl	80132bc <vTaskStartScheduler>
      stat = osOK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	607b      	str	r3, [r7, #4]
 80111d0:	e002      	b.n	80111d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80111d2:	f04f 33ff 	mov.w	r3, #4294967295
 80111d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80111d8:	687b      	ldr	r3, [r7, #4]
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	20000a30 	.word	0x20000a30

080111e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b08e      	sub	sp, #56	; 0x38
 80111ec:	af04      	add	r7, sp, #16
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80111f4:	2300      	movs	r3, #0
 80111f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111f8:	f3ef 8305 	mrs	r3, IPSR
 80111fc:	617b      	str	r3, [r7, #20]
  return(result);
 80111fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011200:	2b00      	cmp	r3, #0
 8011202:	d17e      	bne.n	8011302 <osThreadNew+0x11a>
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d07b      	beq.n	8011302 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801120a:	2380      	movs	r3, #128	; 0x80
 801120c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801120e:	2318      	movs	r3, #24
 8011210:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011212:	2300      	movs	r3, #0
 8011214:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011216:	f04f 33ff 	mov.w	r3, #4294967295
 801121a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d045      	beq.n	80112ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d002      	beq.n	8011230 <osThreadNew+0x48>
        name = attr->name;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	699b      	ldr	r3, [r3, #24]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	699b      	ldr	r3, [r3, #24]
 801123c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d008      	beq.n	8011256 <osThreadNew+0x6e>
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	2b38      	cmp	r3, #56	; 0x38
 8011248:	d805      	bhi.n	8011256 <osThreadNew+0x6e>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	f003 0301 	and.w	r3, r3, #1
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <osThreadNew+0x72>
        return (NULL);
 8011256:	2300      	movs	r3, #0
 8011258:	e054      	b.n	8011304 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	695b      	ldr	r3, [r3, #20]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d003      	beq.n	801126a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	695b      	ldr	r3, [r3, #20]
 8011266:	089b      	lsrs	r3, r3, #2
 8011268:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	689b      	ldr	r3, [r3, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d00e      	beq.n	8011290 <osThreadNew+0xa8>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	2bbb      	cmp	r3, #187	; 0xbb
 8011278:	d90a      	bls.n	8011290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801127e:	2b00      	cmp	r3, #0
 8011280:	d006      	beq.n	8011290 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	695b      	ldr	r3, [r3, #20]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d002      	beq.n	8011290 <osThreadNew+0xa8>
        mem = 1;
 801128a:	2301      	movs	r3, #1
 801128c:	61bb      	str	r3, [r7, #24]
 801128e:	e010      	b.n	80112b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	689b      	ldr	r3, [r3, #8]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10c      	bne.n	80112b2 <osThreadNew+0xca>
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d108      	bne.n	80112b2 <osThreadNew+0xca>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	691b      	ldr	r3, [r3, #16]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d104      	bne.n	80112b2 <osThreadNew+0xca>
          mem = 0;
 80112a8:	2300      	movs	r3, #0
 80112aa:	61bb      	str	r3, [r7, #24]
 80112ac:	e001      	b.n	80112b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80112ae:	2300      	movs	r3, #0
 80112b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d110      	bne.n	80112da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80112bc:	687a      	ldr	r2, [r7, #4]
 80112be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80112c0:	9202      	str	r2, [sp, #8]
 80112c2:	9301      	str	r3, [sp, #4]
 80112c4:	69fb      	ldr	r3, [r7, #28]
 80112c6:	9300      	str	r3, [sp, #0]
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	6a3a      	ldr	r2, [r7, #32]
 80112cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112ce:	68f8      	ldr	r0, [r7, #12]
 80112d0:	f001 fe08 	bl	8012ee4 <xTaskCreateStatic>
 80112d4:	4603      	mov	r3, r0
 80112d6:	613b      	str	r3, [r7, #16]
 80112d8:	e013      	b.n	8011302 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d110      	bne.n	8011302 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80112e0:	6a3b      	ldr	r3, [r7, #32]
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	f107 0310 	add.w	r3, r7, #16
 80112e8:	9301      	str	r3, [sp, #4]
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	9300      	str	r3, [sp, #0]
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f001 fe53 	bl	8012f9e <xTaskCreate>
 80112f8:	4603      	mov	r3, r0
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d001      	beq.n	8011302 <osThreadNew+0x11a>
            hTask = NULL;
 80112fe:	2300      	movs	r3, #0
 8011300:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011302:	693b      	ldr	r3, [r7, #16]
}
 8011304:	4618      	mov	r0, r3
 8011306:	3728      	adds	r7, #40	; 0x28
 8011308:	46bd      	mov	sp, r7
 801130a:	bd80      	pop	{r7, pc}

0801130c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801130c:	b580      	push	{r7, lr}
 801130e:	b084      	sub	sp, #16
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011314:	f3ef 8305 	mrs	r3, IPSR
 8011318:	60bb      	str	r3, [r7, #8]
  return(result);
 801131a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801131c:	2b00      	cmp	r3, #0
 801131e:	d003      	beq.n	8011328 <osDelay+0x1c>
    stat = osErrorISR;
 8011320:	f06f 0305 	mvn.w	r3, #5
 8011324:	60fb      	str	r3, [r7, #12]
 8011326:	e007      	b.n	8011338 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011328:	2300      	movs	r3, #0
 801132a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d002      	beq.n	8011338 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f001 ff8e 	bl	8013254 <vTaskDelay>
    }
  }

  return (stat);
 8011338:	68fb      	ldr	r3, [r7, #12]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3710      	adds	r7, #16
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8011342:	b580      	push	{r7, lr}
 8011344:	b084      	sub	sp, #16
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f003 fa8e 	bl	801486c <pvTimerGetTimerID>
 8011350:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d005      	beq.n	8011364 <TimerCallback+0x22>
    callb->func (callb->arg);
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	6852      	ldr	r2, [r2, #4]
 8011360:	4610      	mov	r0, r2
 8011362:	4798      	blx	r3
  }
}
 8011364:	bf00      	nop
 8011366:	3710      	adds	r7, #16
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}

0801136c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 801136c:	b580      	push	{r7, lr}
 801136e:	b08c      	sub	sp, #48	; 0x30
 8011370:	af02      	add	r7, sp, #8
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	607a      	str	r2, [r7, #4]
 8011376:	603b      	str	r3, [r7, #0]
 8011378:	460b      	mov	r3, r1
 801137a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 801137c:	2300      	movs	r3, #0
 801137e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011380:	f3ef 8305 	mrs	r3, IPSR
 8011384:	613b      	str	r3, [r7, #16]
  return(result);
 8011386:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8011388:	2b00      	cmp	r3, #0
 801138a:	d163      	bne.n	8011454 <osTimerNew+0xe8>
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d060      	beq.n	8011454 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8011392:	2008      	movs	r0, #8
 8011394:	f003 fcf8 	bl	8014d88 <pvPortMalloc>
 8011398:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 801139a:	697b      	ldr	r3, [r7, #20]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d059      	beq.n	8011454 <osTimerNew+0xe8>
      callb->func = func;
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80113ac:	7afb      	ldrb	r3, [r7, #11]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d102      	bne.n	80113b8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80113b2:	2300      	movs	r3, #0
 80113b4:	61fb      	str	r3, [r7, #28]
 80113b6:	e001      	b.n	80113bc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80113b8:	2301      	movs	r3, #1
 80113ba:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80113bc:	f04f 33ff 	mov.w	r3, #4294967295
 80113c0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80113c2:	2300      	movs	r3, #0
 80113c4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d01c      	beq.n	8011406 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d002      	beq.n	80113da <osTimerNew+0x6e>
          name = attr->name;
 80113d4:	683b      	ldr	r3, [r7, #0]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d006      	beq.n	80113f0 <osTimerNew+0x84>
 80113e2:	683b      	ldr	r3, [r7, #0]
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	2b2b      	cmp	r3, #43	; 0x2b
 80113e8:	d902      	bls.n	80113f0 <osTimerNew+0x84>
          mem = 1;
 80113ea:	2301      	movs	r3, #1
 80113ec:	61bb      	str	r3, [r7, #24]
 80113ee:	e00c      	b.n	801140a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d108      	bne.n	801140a <osTimerNew+0x9e>
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d104      	bne.n	801140a <osTimerNew+0x9e>
            mem = 0;
 8011400:	2300      	movs	r3, #0
 8011402:	61bb      	str	r3, [r7, #24]
 8011404:	e001      	b.n	801140a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8011406:	2300      	movs	r3, #0
 8011408:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d10c      	bne.n	801142a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	9301      	str	r3, [sp, #4]
 8011416:	4b12      	ldr	r3, [pc, #72]	; (8011460 <osTimerNew+0xf4>)
 8011418:	9300      	str	r3, [sp, #0]
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	69fa      	ldr	r2, [r7, #28]
 801141e:	2101      	movs	r1, #1
 8011420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011422:	f002 fea4 	bl	801416e <xTimerCreateStatic>
 8011426:	6238      	str	r0, [r7, #32]
 8011428:	e00b      	b.n	8011442 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d108      	bne.n	8011442 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8011430:	4b0b      	ldr	r3, [pc, #44]	; (8011460 <osTimerNew+0xf4>)
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	69fa      	ldr	r2, [r7, #28]
 8011438:	2101      	movs	r1, #1
 801143a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801143c:	f002 fe76 	bl	801412c <xTimerCreate>
 8011440:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8011442:	6a3b      	ldr	r3, [r7, #32]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d105      	bne.n	8011454 <osTimerNew+0xe8>
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d002      	beq.n	8011454 <osTimerNew+0xe8>
        vPortFree (callb);
 801144e:	6978      	ldr	r0, [r7, #20]
 8011450:	f003 fd66 	bl	8014f20 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8011454:	6a3b      	ldr	r3, [r7, #32]
}
 8011456:	4618      	mov	r0, r3
 8011458:	3728      	adds	r7, #40	; 0x28
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	08011343 	.word	0x08011343

08011464 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8011464:	b580      	push	{r7, lr}
 8011466:	b088      	sub	sp, #32
 8011468:	af02      	add	r7, sp, #8
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011472:	f3ef 8305 	mrs	r3, IPSR
 8011476:	60fb      	str	r3, [r7, #12]
  return(result);
 8011478:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801147a:	2b00      	cmp	r3, #0
 801147c:	d003      	beq.n	8011486 <osTimerStart+0x22>
    stat = osErrorISR;
 801147e:	f06f 0305 	mvn.w	r3, #5
 8011482:	617b      	str	r3, [r7, #20]
 8011484:	e017      	b.n	80114b6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d103      	bne.n	8011494 <osTimerStart+0x30>
    stat = osErrorParameter;
 801148c:	f06f 0303 	mvn.w	r3, #3
 8011490:	617b      	str	r3, [r7, #20]
 8011492:	e010      	b.n	80114b6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8011494:	2300      	movs	r3, #0
 8011496:	9300      	str	r3, [sp, #0]
 8011498:	2300      	movs	r3, #0
 801149a:	683a      	ldr	r2, [r7, #0]
 801149c:	2104      	movs	r1, #4
 801149e:	6938      	ldr	r0, [r7, #16]
 80114a0:	f002 fede 	bl	8014260 <xTimerGenericCommand>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b01      	cmp	r3, #1
 80114a8:	d102      	bne.n	80114b0 <osTimerStart+0x4c>
      stat = osOK;
 80114aa:	2300      	movs	r3, #0
 80114ac:	617b      	str	r3, [r7, #20]
 80114ae:	e002      	b.n	80114b6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80114b0:	f06f 0302 	mvn.w	r3, #2
 80114b4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80114b6:	697b      	ldr	r3, [r7, #20]
}
 80114b8:	4618      	mov	r0, r3
 80114ba:	3718      	adds	r7, #24
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}

080114c0 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b086      	sub	sp, #24
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80114c8:	2300      	movs	r3, #0
 80114ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80114cc:	f3ef 8305 	mrs	r3, IPSR
 80114d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80114d2:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d12d      	bne.n	8011534 <osEventFlagsNew+0x74>
    mem = -1;
 80114d8:	f04f 33ff 	mov.w	r3, #4294967295
 80114dc:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d015      	beq.n	8011510 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d006      	beq.n	80114fa <osEventFlagsNew+0x3a>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	2b1f      	cmp	r3, #31
 80114f2:	d902      	bls.n	80114fa <osEventFlagsNew+0x3a>
        mem = 1;
 80114f4:	2301      	movs	r3, #1
 80114f6:	613b      	str	r3, [r7, #16]
 80114f8:	e00c      	b.n	8011514 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d108      	bne.n	8011514 <osEventFlagsNew+0x54>
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d104      	bne.n	8011514 <osEventFlagsNew+0x54>
          mem = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	613b      	str	r3, [r7, #16]
 801150e:	e001      	b.n	8011514 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8011510:	2300      	movs	r3, #0
 8011512:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	2b01      	cmp	r3, #1
 8011518:	d106      	bne.n	8011528 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	4618      	mov	r0, r3
 8011520:	f000 fa30 	bl	8011984 <xEventGroupCreateStatic>
 8011524:	6178      	str	r0, [r7, #20]
 8011526:	e005      	b.n	8011534 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d102      	bne.n	8011534 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801152e:	f000 fa60 	bl	80119f2 <xEventGroupCreate>
 8011532:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8011534:	697b      	ldr	r3, [r7, #20]
}
 8011536:	4618      	mov	r0, r3
 8011538:	3718      	adds	r7, #24
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
	...

08011540 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8011540:	b580      	push	{r7, lr}
 8011542:	b086      	sub	sp, #24
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d004      	beq.n	801155e <osEventFlagsSet+0x1e>
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801155a:	2b00      	cmp	r3, #0
 801155c:	d003      	beq.n	8011566 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801155e:	f06f 0303 	mvn.w	r3, #3
 8011562:	617b      	str	r3, [r7, #20]
 8011564:	e028      	b.n	80115b8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011566:	f3ef 8305 	mrs	r3, IPSR
 801156a:	60fb      	str	r3, [r7, #12]
  return(result);
 801156c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801156e:	2b00      	cmp	r3, #0
 8011570:	d01d      	beq.n	80115ae <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8011572:	2300      	movs	r3, #0
 8011574:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011576:	f107 0308 	add.w	r3, r7, #8
 801157a:	461a      	mov	r2, r3
 801157c:	6839      	ldr	r1, [r7, #0]
 801157e:	6938      	ldr	r0, [r7, #16]
 8011580:	f000 fbda 	bl	8011d38 <xEventGroupSetBitsFromISR>
 8011584:	4603      	mov	r3, r0
 8011586:	2b00      	cmp	r3, #0
 8011588:	d103      	bne.n	8011592 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801158a:	f06f 0302 	mvn.w	r3, #2
 801158e:	617b      	str	r3, [r7, #20]
 8011590:	e012      	b.n	80115b8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011596:	68bb      	ldr	r3, [r7, #8]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00d      	beq.n	80115b8 <osEventFlagsSet+0x78>
 801159c:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <osEventFlagsSet+0x84>)
 801159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	e004      	b.n	80115b8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80115ae:	6839      	ldr	r1, [r7, #0]
 80115b0:	6938      	ldr	r0, [r7, #16]
 80115b2:	f000 fb07 	bl	8011bc4 <xEventGroupSetBits>
 80115b6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80115b8:	697b      	ldr	r3, [r7, #20]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3718      	adds	r7, #24
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	e000ed04 	.word	0xe000ed04

080115c8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08c      	sub	sp, #48	; 0x30
 80115cc:	af02      	add	r7, sp, #8
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	60b9      	str	r1, [r7, #8]
 80115d2:	607a      	str	r2, [r7, #4]
 80115d4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d004      	beq.n	80115ea <osEventFlagsWait+0x22>
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d003      	beq.n	80115f2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80115ea:	f06f 0303 	mvn.w	r3, #3
 80115ee:	61fb      	str	r3, [r7, #28]
 80115f0:	e04b      	b.n	801168a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115f2:	f3ef 8305 	mrs	r3, IPSR
 80115f6:	617b      	str	r3, [r7, #20]
  return(result);
 80115f8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d003      	beq.n	8011606 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80115fe:	f06f 0305 	mvn.w	r3, #5
 8011602:	61fb      	str	r3, [r7, #28]
 8011604:	e041      	b.n	801168a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f003 0301 	and.w	r3, r3, #1
 801160c:	2b00      	cmp	r3, #0
 801160e:	d002      	beq.n	8011616 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8011610:	2301      	movs	r3, #1
 8011612:	627b      	str	r3, [r7, #36]	; 0x24
 8011614:	e001      	b.n	801161a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8011616:	2300      	movs	r3, #0
 8011618:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f003 0302 	and.w	r3, r3, #2
 8011620:	2b00      	cmp	r3, #0
 8011622:	d002      	beq.n	801162a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8011624:	2300      	movs	r3, #0
 8011626:	623b      	str	r3, [r7, #32]
 8011628:	e001      	b.n	801162e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801162a:	2301      	movs	r3, #1
 801162c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011634:	6a3a      	ldr	r2, [r7, #32]
 8011636:	68b9      	ldr	r1, [r7, #8]
 8011638:	69b8      	ldr	r0, [r7, #24]
 801163a:	f000 f9f5 	bl	8011a28 <xEventGroupWaitBits>
 801163e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	f003 0301 	and.w	r3, r3, #1
 8011646:	2b00      	cmp	r3, #0
 8011648:	d010      	beq.n	801166c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801164a:	68ba      	ldr	r2, [r7, #8]
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	4013      	ands	r3, r2
 8011650:	68ba      	ldr	r2, [r7, #8]
 8011652:	429a      	cmp	r2, r3
 8011654:	d019      	beq.n	801168a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d003      	beq.n	8011664 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 801165c:	f06f 0301 	mvn.w	r3, #1
 8011660:	61fb      	str	r3, [r7, #28]
 8011662:	e012      	b.n	801168a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011664:	f06f 0302 	mvn.w	r3, #2
 8011668:	61fb      	str	r3, [r7, #28]
 801166a:	e00e      	b.n	801168a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	4013      	ands	r3, r2
 8011672:	2b00      	cmp	r3, #0
 8011674:	d109      	bne.n	801168a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d003      	beq.n	8011684 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 801167c:	f06f 0301 	mvn.w	r3, #1
 8011680:	61fb      	str	r3, [r7, #28]
 8011682:	e002      	b.n	801168a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011684:	f06f 0302 	mvn.w	r3, #2
 8011688:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801168a:	69fb      	ldr	r3, [r7, #28]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3728      	adds	r7, #40	; 0x28
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011694:	b580      	push	{r7, lr}
 8011696:	b08a      	sub	sp, #40	; 0x28
 8011698:	af02      	add	r7, sp, #8
 801169a:	60f8      	str	r0, [r7, #12]
 801169c:	60b9      	str	r1, [r7, #8]
 801169e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80116a0:	2300      	movs	r3, #0
 80116a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116a4:	f3ef 8305 	mrs	r3, IPSR
 80116a8:	613b      	str	r3, [r7, #16]
  return(result);
 80116aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d175      	bne.n	801179c <osSemaphoreNew+0x108>
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d072      	beq.n	801179c <osSemaphoreNew+0x108>
 80116b6:	68ba      	ldr	r2, [r7, #8]
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d86e      	bhi.n	801179c <osSemaphoreNew+0x108>
    mem = -1;
 80116be:	f04f 33ff 	mov.w	r3, #4294967295
 80116c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d015      	beq.n	80116f6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d006      	beq.n	80116e0 <osSemaphoreNew+0x4c>
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	68db      	ldr	r3, [r3, #12]
 80116d6:	2b4f      	cmp	r3, #79	; 0x4f
 80116d8:	d902      	bls.n	80116e0 <osSemaphoreNew+0x4c>
        mem = 1;
 80116da:	2301      	movs	r3, #1
 80116dc:	61bb      	str	r3, [r7, #24]
 80116de:	e00c      	b.n	80116fa <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	689b      	ldr	r3, [r3, #8]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d108      	bne.n	80116fa <osSemaphoreNew+0x66>
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d104      	bne.n	80116fa <osSemaphoreNew+0x66>
          mem = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	61bb      	str	r3, [r7, #24]
 80116f4:	e001      	b.n	80116fa <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011700:	d04c      	beq.n	801179c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2b01      	cmp	r3, #1
 8011706:	d128      	bne.n	801175a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	2b01      	cmp	r3, #1
 801170c:	d10a      	bne.n	8011724 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	2203      	movs	r2, #3
 8011714:	9200      	str	r2, [sp, #0]
 8011716:	2200      	movs	r2, #0
 8011718:	2100      	movs	r1, #0
 801171a:	2001      	movs	r0, #1
 801171c:	f000 fc3c 	bl	8011f98 <xQueueGenericCreateStatic>
 8011720:	61f8      	str	r0, [r7, #28]
 8011722:	e005      	b.n	8011730 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011724:	2203      	movs	r2, #3
 8011726:	2100      	movs	r1, #0
 8011728:	2001      	movs	r0, #1
 801172a:	f000 fcad 	bl	8012088 <xQueueGenericCreate>
 801172e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d022      	beq.n	801177c <osSemaphoreNew+0xe8>
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d01f      	beq.n	801177c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801173c:	2300      	movs	r3, #0
 801173e:	2200      	movs	r2, #0
 8011740:	2100      	movs	r1, #0
 8011742:	69f8      	ldr	r0, [r7, #28]
 8011744:	f000 fd68 	bl	8012218 <xQueueGenericSend>
 8011748:	4603      	mov	r3, r0
 801174a:	2b01      	cmp	r3, #1
 801174c:	d016      	beq.n	801177c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801174e:	69f8      	ldr	r0, [r7, #28]
 8011750:	f001 f9f4 	bl	8012b3c <vQueueDelete>
            hSemaphore = NULL;
 8011754:	2300      	movs	r3, #0
 8011756:	61fb      	str	r3, [r7, #28]
 8011758:	e010      	b.n	801177c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	2b01      	cmp	r3, #1
 801175e:	d108      	bne.n	8011772 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	461a      	mov	r2, r3
 8011766:	68b9      	ldr	r1, [r7, #8]
 8011768:	68f8      	ldr	r0, [r7, #12]
 801176a:	f000 fcea 	bl	8012142 <xQueueCreateCountingSemaphoreStatic>
 801176e:	61f8      	str	r0, [r7, #28]
 8011770:	e004      	b.n	801177c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011772:	68b9      	ldr	r1, [r7, #8]
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f000 fd1b 	bl	80121b0 <xQueueCreateCountingSemaphore>
 801177a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00c      	beq.n	801179c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d003      	beq.n	8011790 <osSemaphoreNew+0xfc>
          name = attr->name;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	617b      	str	r3, [r7, #20]
 801178e:	e001      	b.n	8011794 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011790:	2300      	movs	r3, #0
 8011792:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011794:	6979      	ldr	r1, [r7, #20]
 8011796:	69f8      	ldr	r0, [r7, #28]
 8011798:	f001 fb1c 	bl	8012dd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801179c:	69fb      	ldr	r3, [r7, #28]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3720      	adds	r7, #32
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
	...

080117a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b086      	sub	sp, #24
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80117b6:	2300      	movs	r3, #0
 80117b8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d103      	bne.n	80117c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80117c0:	f06f 0303 	mvn.w	r3, #3
 80117c4:	617b      	str	r3, [r7, #20]
 80117c6:	e039      	b.n	801183c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80117c8:	f3ef 8305 	mrs	r3, IPSR
 80117cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80117ce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d022      	beq.n	801181a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d003      	beq.n	80117e2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80117da:	f06f 0303 	mvn.w	r3, #3
 80117de:	617b      	str	r3, [r7, #20]
 80117e0:	e02c      	b.n	801183c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80117e2:	2300      	movs	r3, #0
 80117e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80117e6:	f107 0308 	add.w	r3, r7, #8
 80117ea:	461a      	mov	r2, r3
 80117ec:	2100      	movs	r1, #0
 80117ee:	6938      	ldr	r0, [r7, #16]
 80117f0:	f001 f924 	bl	8012a3c <xQueueReceiveFromISR>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d003      	beq.n	8011802 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80117fa:	f06f 0302 	mvn.w	r3, #2
 80117fe:	617b      	str	r3, [r7, #20]
 8011800:	e01c      	b.n	801183c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d019      	beq.n	801183c <osSemaphoreAcquire+0x94>
 8011808:	4b0f      	ldr	r3, [pc, #60]	; (8011848 <osSemaphoreAcquire+0xa0>)
 801180a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801180e:	601a      	str	r2, [r3, #0]
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	f3bf 8f6f 	isb	sy
 8011818:	e010      	b.n	801183c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801181a:	6839      	ldr	r1, [r7, #0]
 801181c:	6938      	ldr	r0, [r7, #16]
 801181e:	f001 f801 	bl	8012824 <xQueueSemaphoreTake>
 8011822:	4603      	mov	r3, r0
 8011824:	2b01      	cmp	r3, #1
 8011826:	d009      	beq.n	801183c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d003      	beq.n	8011836 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801182e:	f06f 0301 	mvn.w	r3, #1
 8011832:	617b      	str	r3, [r7, #20]
 8011834:	e002      	b.n	801183c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011836:	f06f 0302 	mvn.w	r3, #2
 801183a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 801183c:	697b      	ldr	r3, [r7, #20]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3718      	adds	r7, #24
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	e000ed04 	.word	0xe000ed04

0801184c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801184c:	b580      	push	{r7, lr}
 801184e:	b086      	sub	sp, #24
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011858:	2300      	movs	r3, #0
 801185a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d103      	bne.n	801186a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011862:	f06f 0303 	mvn.w	r3, #3
 8011866:	617b      	str	r3, [r7, #20]
 8011868:	e02c      	b.n	80118c4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801186a:	f3ef 8305 	mrs	r3, IPSR
 801186e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011870:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011872:	2b00      	cmp	r3, #0
 8011874:	d01a      	beq.n	80118ac <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011876:	2300      	movs	r3, #0
 8011878:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801187a:	f107 0308 	add.w	r3, r7, #8
 801187e:	4619      	mov	r1, r3
 8011880:	6938      	ldr	r0, [r7, #16]
 8011882:	f000 fe62 	bl	801254a <xQueueGiveFromISR>
 8011886:	4603      	mov	r3, r0
 8011888:	2b01      	cmp	r3, #1
 801188a:	d003      	beq.n	8011894 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801188c:	f06f 0302 	mvn.w	r3, #2
 8011890:	617b      	str	r3, [r7, #20]
 8011892:	e017      	b.n	80118c4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d014      	beq.n	80118c4 <osSemaphoreRelease+0x78>
 801189a:	4b0d      	ldr	r3, [pc, #52]	; (80118d0 <osSemaphoreRelease+0x84>)
 801189c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118a0:	601a      	str	r2, [r3, #0]
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	e00b      	b.n	80118c4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80118ac:	2300      	movs	r3, #0
 80118ae:	2200      	movs	r2, #0
 80118b0:	2100      	movs	r1, #0
 80118b2:	6938      	ldr	r0, [r7, #16]
 80118b4:	f000 fcb0 	bl	8012218 <xQueueGenericSend>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b01      	cmp	r3, #1
 80118bc:	d002      	beq.n	80118c4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80118be:	f06f 0302 	mvn.w	r3, #2
 80118c2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80118c4:	697b      	ldr	r3, [r7, #20]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3718      	adds	r7, #24
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}
 80118ce:	bf00      	nop
 80118d0:	e000ed04 	.word	0xe000ed04

080118d4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b086      	sub	sp, #24
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80118e0:	f3ef 8305 	mrs	r3, IPSR
 80118e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80118e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d003      	beq.n	80118f4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80118ec:	f06f 0305 	mvn.w	r3, #5
 80118f0:	617b      	str	r3, [r7, #20]
 80118f2:	e00e      	b.n	8011912 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d103      	bne.n	8011902 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80118fa:	f06f 0303 	mvn.w	r3, #3
 80118fe:	617b      	str	r3, [r7, #20]
 8011900:	e007      	b.n	8011912 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011902:	6938      	ldr	r0, [r7, #16]
 8011904:	f001 fa90 	bl	8012e28 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011908:	2300      	movs	r3, #0
 801190a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 801190c:	6938      	ldr	r0, [r7, #16]
 801190e:	f001 f915 	bl	8012b3c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8011912:	697b      	ldr	r3, [r7, #20]
}
 8011914:	4618      	mov	r0, r3
 8011916:	3718      	adds	r7, #24
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801191c:	b480      	push	{r7}
 801191e:	b085      	sub	sp, #20
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	4a07      	ldr	r2, [pc, #28]	; (8011948 <vApplicationGetIdleTaskMemory+0x2c>)
 801192c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	4a06      	ldr	r2, [pc, #24]	; (801194c <vApplicationGetIdleTaskMemory+0x30>)
 8011932:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2280      	movs	r2, #128	; 0x80
 8011938:	601a      	str	r2, [r3, #0]
}
 801193a:	bf00      	nop
 801193c:	3714      	adds	r7, #20
 801193e:	46bd      	mov	sp, r7
 8011940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011944:	4770      	bx	lr
 8011946:	bf00      	nop
 8011948:	20000a34 	.word	0x20000a34
 801194c:	20000af0 	.word	0x20000af0

08011950 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011950:	b480      	push	{r7}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	4a07      	ldr	r2, [pc, #28]	; (801197c <vApplicationGetTimerTaskMemory+0x2c>)
 8011960:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	4a06      	ldr	r2, [pc, #24]	; (8011980 <vApplicationGetTimerTaskMemory+0x30>)
 8011966:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801196e:	601a      	str	r2, [r3, #0]
}
 8011970:	bf00      	nop
 8011972:	3714      	adds	r7, #20
 8011974:	46bd      	mov	sp, r7
 8011976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197a:	4770      	bx	lr
 801197c:	20000cf0 	.word	0x20000cf0
 8011980:	20000dac 	.word	0x20000dac

08011984 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011984:	b580      	push	{r7, lr}
 8011986:	b086      	sub	sp, #24
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d10a      	bne.n	80119a8 <xEventGroupCreateStatic+0x24>
	__asm volatile
 8011992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011996:	f383 8811 	msr	BASEPRI, r3
 801199a:	f3bf 8f6f 	isb	sy
 801199e:	f3bf 8f4f 	dsb	sy
 80119a2:	613b      	str	r3, [r7, #16]
}
 80119a4:	bf00      	nop
 80119a6:	e7fe      	b.n	80119a6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80119a8:	2320      	movs	r3, #32
 80119aa:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	2b20      	cmp	r3, #32
 80119b0:	d00a      	beq.n	80119c8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80119b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b6:	f383 8811 	msr	BASEPRI, r3
 80119ba:	f3bf 8f6f 	isb	sy
 80119be:	f3bf 8f4f 	dsb	sy
 80119c2:	60fb      	str	r3, [r7, #12]
}
 80119c4:	bf00      	nop
 80119c6:	e7fe      	b.n	80119c6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d00a      	beq.n	80119e8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	2200      	movs	r2, #0
 80119d6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	3304      	adds	r3, #4
 80119dc:	4618      	mov	r0, r3
 80119de:	f000 f9bf 	bl	8011d60 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	2201      	movs	r2, #1
 80119e6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80119e8:	697b      	ldr	r3, [r7, #20]
	}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3718      	adds	r7, #24
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}

080119f2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80119f8:	2020      	movs	r0, #32
 80119fa:	f003 f9c5 	bl	8014d88 <pvPortMalloc>
 80119fe:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d00a      	beq.n	8011a1c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	3304      	adds	r3, #4
 8011a10:	4618      	mov	r0, r3
 8011a12:	f000 f9a5 	bl	8011d60 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011a1c:	687b      	ldr	r3, [r7, #4]
	}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3708      	adds	r7, #8
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
	...

08011a28 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b090      	sub	sp, #64	; 0x40
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
 8011a34:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d10a      	bne.n	8011a5e <xEventGroupWaitBits+0x36>
	__asm volatile
 8011a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a4c:	f383 8811 	msr	BASEPRI, r3
 8011a50:	f3bf 8f6f 	isb	sy
 8011a54:	f3bf 8f4f 	dsb	sy
 8011a58:	623b      	str	r3, [r7, #32]
}
 8011a5a:	bf00      	nop
 8011a5c:	e7fe      	b.n	8011a5c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d00a      	beq.n	8011a7e <xEventGroupWaitBits+0x56>
	__asm volatile
 8011a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6c:	f383 8811 	msr	BASEPRI, r3
 8011a70:	f3bf 8f6f 	isb	sy
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	61fb      	str	r3, [r7, #28]
}
 8011a7a:	bf00      	nop
 8011a7c:	e7fe      	b.n	8011a7c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d10a      	bne.n	8011a9a <xEventGroupWaitBits+0x72>
	__asm volatile
 8011a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a88:	f383 8811 	msr	BASEPRI, r3
 8011a8c:	f3bf 8f6f 	isb	sy
 8011a90:	f3bf 8f4f 	dsb	sy
 8011a94:	61bb      	str	r3, [r7, #24]
}
 8011a96:	bf00      	nop
 8011a98:	e7fe      	b.n	8011a98 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a9a:	f002 f909 	bl	8013cb0 <xTaskGetSchedulerState>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d102      	bne.n	8011aaa <xEventGroupWaitBits+0x82>
 8011aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d101      	bne.n	8011aae <xEventGroupWaitBits+0x86>
 8011aaa:	2301      	movs	r3, #1
 8011aac:	e000      	b.n	8011ab0 <xEventGroupWaitBits+0x88>
 8011aae:	2300      	movs	r3, #0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d10a      	bne.n	8011aca <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab8:	f383 8811 	msr	BASEPRI, r3
 8011abc:	f3bf 8f6f 	isb	sy
 8011ac0:	f3bf 8f4f 	dsb	sy
 8011ac4:	617b      	str	r3, [r7, #20]
}
 8011ac6:	bf00      	nop
 8011ac8:	e7fe      	b.n	8011ac8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011aca:	f001 fc67 	bl	801339c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011ad4:	683a      	ldr	r2, [r7, #0]
 8011ad6:	68b9      	ldr	r1, [r7, #8]
 8011ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ada:	f000 f90b 	bl	8011cf4 <prvTestWaitCondition>
 8011ade:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00e      	beq.n	8011b04 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011aea:	2300      	movs	r3, #0
 8011aec:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d028      	beq.n	8011b46 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	43db      	mvns	r3, r3
 8011afc:	401a      	ands	r2, r3
 8011afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b00:	601a      	str	r2, [r3, #0]
 8011b02:	e020      	b.n	8011b46 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d104      	bne.n	8011b14 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011b0e:	2301      	movs	r3, #1
 8011b10:	633b      	str	r3, [r7, #48]	; 0x30
 8011b12:	e018      	b.n	8011b46 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d003      	beq.n	8011b22 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011b20:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d003      	beq.n	8011b30 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011b2e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b32:	1d18      	adds	r0, r3, #4
 8011b34:	68ba      	ldr	r2, [r7, #8]
 8011b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b38:	4313      	orrs	r3, r2
 8011b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	f001 fe2b 	bl	8013798 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011b42:	2300      	movs	r3, #0
 8011b44:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011b46:	f001 fc37 	bl	80133b8 <xTaskResumeAll>
 8011b4a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d031      	beq.n	8011bb6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d107      	bne.n	8011b68 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011b58:	4b19      	ldr	r3, [pc, #100]	; (8011bc0 <xEventGroupWaitBits+0x198>)
 8011b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b5e:	601a      	str	r2, [r3, #0]
 8011b60:	f3bf 8f4f 	dsb	sy
 8011b64:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011b68:	f002 fa18 	bl	8013f9c <uxTaskResetEventItemValue>
 8011b6c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d11a      	bne.n	8011bae <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011b78:	f002 ffe4 	bl	8014b44 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011b82:	683a      	ldr	r2, [r7, #0]
 8011b84:	68b9      	ldr	r1, [r7, #8]
 8011b86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011b88:	f000 f8b4 	bl	8011cf4 <prvTestWaitCondition>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d009      	beq.n	8011ba6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d006      	beq.n	8011ba6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	43db      	mvns	r3, r3
 8011ba0:	401a      	ands	r2, r3
 8011ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011baa:	f002 fffb 	bl	8014ba4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3740      	adds	r7, #64	; 0x40
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	e000ed04 	.word	0xe000ed04

08011bc4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b08e      	sub	sp, #56	; 0x38
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d10a      	bne.n	8011bf6 <xEventGroupSetBits+0x32>
	__asm volatile
 8011be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be4:	f383 8811 	msr	BASEPRI, r3
 8011be8:	f3bf 8f6f 	isb	sy
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	613b      	str	r3, [r7, #16]
}
 8011bf2:	bf00      	nop
 8011bf4:	e7fe      	b.n	8011bf4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00a      	beq.n	8011c16 <xEventGroupSetBits+0x52>
	__asm volatile
 8011c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c04:	f383 8811 	msr	BASEPRI, r3
 8011c08:	f3bf 8f6f 	isb	sy
 8011c0c:	f3bf 8f4f 	dsb	sy
 8011c10:	60fb      	str	r3, [r7, #12]
}
 8011c12:	bf00      	nop
 8011c14:	e7fe      	b.n	8011c14 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c18:	3304      	adds	r3, #4
 8011c1a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1e:	3308      	adds	r3, #8
 8011c20:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011c22:	f001 fbbb 	bl	801339c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c2e:	681a      	ldr	r2, [r3, #0]
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	431a      	orrs	r2, r3
 8011c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c36:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011c38:	e03c      	b.n	8011cb4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011c46:	2300      	movs	r3, #0
 8011c48:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011c50:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011c58:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d108      	bne.n	8011c76 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c66:	681a      	ldr	r2, [r3, #0]
 8011c68:	69bb      	ldr	r3, [r7, #24]
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d00b      	beq.n	8011c88 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011c70:	2301      	movs	r3, #1
 8011c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c74:	e008      	b.n	8011c88 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	69bb      	ldr	r3, [r7, #24]
 8011c7c:	4013      	ands	r3, r2
 8011c7e:	69ba      	ldr	r2, [r7, #24]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d101      	bne.n	8011c88 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011c84:	2301      	movs	r3, #1
 8011c86:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d010      	beq.n	8011cb0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d003      	beq.n	8011ca0 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011ca8:	4619      	mov	r1, r3
 8011caa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011cac:	f001 fe40 	bl	8013930 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cb6:	6a3b      	ldr	r3, [r7, #32]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d1be      	bne.n	8011c3a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc2:	43db      	mvns	r3, r3
 8011cc4:	401a      	ands	r2, r3
 8011cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011cca:	f001 fb75 	bl	80133b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd0:	681b      	ldr	r3, [r3, #0]
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3738      	adds	r7, #56	; 0x38
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b082      	sub	sp, #8
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	6078      	str	r0, [r7, #4]
 8011ce2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011ce4:	6839      	ldr	r1, [r7, #0]
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7ff ff6c 	bl	8011bc4 <xEventGroupSetBits>
}
 8011cec:	bf00      	nop
 8011cee:	3708      	adds	r7, #8
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b087      	sub	sp, #28
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011d00:	2300      	movs	r3, #0
 8011d02:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d107      	bne.n	8011d1a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011d0a:	68fa      	ldr	r2, [r7, #12]
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	4013      	ands	r3, r2
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d00a      	beq.n	8011d2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011d14:	2301      	movs	r3, #1
 8011d16:	617b      	str	r3, [r7, #20]
 8011d18:	e007      	b.n	8011d2a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011d1a:	68fa      	ldr	r2, [r7, #12]
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	4013      	ands	r3, r2
 8011d20:	68ba      	ldr	r2, [r7, #8]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d101      	bne.n	8011d2a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011d26:	2301      	movs	r3, #1
 8011d28:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011d2a:	697b      	ldr	r3, [r7, #20]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	371c      	adds	r7, #28
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b086      	sub	sp, #24
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	68ba      	ldr	r2, [r7, #8]
 8011d48:	68f9      	ldr	r1, [r7, #12]
 8011d4a:	4804      	ldr	r0, [pc, #16]	; (8011d5c <xEventGroupSetBitsFromISR+0x24>)
 8011d4c:	f002 fdae 	bl	80148ac <xTimerPendFunctionCallFromISR>
 8011d50:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011d52:	697b      	ldr	r3, [r7, #20]
	}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3718      	adds	r7, #24
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	08011cdb 	.word	0x08011cdb

08011d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	f103 0208 	add.w	r2, r3, #8
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	f04f 32ff 	mov.w	r2, #4294967295
 8011d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f103 0208 	add.w	r2, r3, #8
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f103 0208 	add.w	r2, r3, #8
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2200      	movs	r2, #0
 8011d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011d94:	bf00      	nop
 8011d96:	370c      	adds	r7, #12
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr

08011da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011da0:	b480      	push	{r7}
 8011da2:	b083      	sub	sp, #12
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	2200      	movs	r2, #0
 8011dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011dae:	bf00      	nop
 8011db0:	370c      	adds	r7, #12
 8011db2:	46bd      	mov	sp, r7
 8011db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db8:	4770      	bx	lr

08011dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011dba:	b480      	push	{r7}
 8011dbc:	b085      	sub	sp, #20
 8011dbe:	af00      	add	r7, sp, #0
 8011dc0:	6078      	str	r0, [r7, #4]
 8011dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	689a      	ldr	r2, [r3, #8]
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	683a      	ldr	r2, [r7, #0]
 8011dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	683a      	ldr	r2, [r7, #0]
 8011de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	1c5a      	adds	r2, r3, #1
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	601a      	str	r2, [r3, #0]
}
 8011df6:	bf00      	nop
 8011df8:	3714      	adds	r7, #20
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr

08011e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e02:	b480      	push	{r7}
 8011e04:	b085      	sub	sp, #20
 8011e06:	af00      	add	r7, sp, #0
 8011e08:	6078      	str	r0, [r7, #4]
 8011e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e18:	d103      	bne.n	8011e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	691b      	ldr	r3, [r3, #16]
 8011e1e:	60fb      	str	r3, [r7, #12]
 8011e20:	e00c      	b.n	8011e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	3308      	adds	r3, #8
 8011e26:	60fb      	str	r3, [r7, #12]
 8011e28:	e002      	b.n	8011e30 <vListInsert+0x2e>
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	68ba      	ldr	r2, [r7, #8]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d2f6      	bcs.n	8011e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	685a      	ldr	r2, [r3, #4]
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	683a      	ldr	r2, [r7, #0]
 8011e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	68fa      	ldr	r2, [r7, #12]
 8011e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	601a      	str	r2, [r3, #0]
}
 8011e68:	bf00      	nop
 8011e6a:	3714      	adds	r7, #20
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e72:	4770      	bx	lr

08011e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011e74:	b480      	push	{r7}
 8011e76:	b085      	sub	sp, #20
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	691b      	ldr	r3, [r3, #16]
 8011e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	6892      	ldr	r2, [r2, #8]
 8011e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	689b      	ldr	r3, [r3, #8]
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	6852      	ldr	r2, [r2, #4]
 8011e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d103      	bne.n	8011ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	689a      	ldr	r2, [r3, #8]
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2200      	movs	r2, #0
 8011eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	1e5a      	subs	r2, r3, #1
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
}
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	3714      	adds	r7, #20
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec6:	4770      	bx	lr

08011ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d10a      	bne.n	8011ef2 <xQueueGenericReset+0x2a>
	__asm volatile
 8011edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee0:	f383 8811 	msr	BASEPRI, r3
 8011ee4:	f3bf 8f6f 	isb	sy
 8011ee8:	f3bf 8f4f 	dsb	sy
 8011eec:	60bb      	str	r3, [r7, #8]
}
 8011eee:	bf00      	nop
 8011ef0:	e7fe      	b.n	8011ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011ef2:	f002 fe27 	bl	8014b44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011efe:	68f9      	ldr	r1, [r7, #12]
 8011f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f02:	fb01 f303 	mul.w	r3, r1, r3
 8011f06:	441a      	add	r2, r3
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f22:	3b01      	subs	r3, #1
 8011f24:	68f9      	ldr	r1, [r7, #12]
 8011f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011f28:	fb01 f303 	mul.w	r3, r1, r3
 8011f2c:	441a      	add	r2, r3
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	22ff      	movs	r2, #255	; 0xff
 8011f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	22ff      	movs	r2, #255	; 0xff
 8011f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d114      	bne.n	8011f72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	691b      	ldr	r3, [r3, #16]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d01a      	beq.n	8011f86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	3310      	adds	r3, #16
 8011f54:	4618      	mov	r0, r3
 8011f56:	f001 fc87 	bl	8013868 <xTaskRemoveFromEventList>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d012      	beq.n	8011f86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011f60:	4b0c      	ldr	r3, [pc, #48]	; (8011f94 <xQueueGenericReset+0xcc>)
 8011f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f66:	601a      	str	r2, [r3, #0]
 8011f68:	f3bf 8f4f 	dsb	sy
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	e009      	b.n	8011f86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	3310      	adds	r3, #16
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff fef2 	bl	8011d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	3324      	adds	r3, #36	; 0x24
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7ff feed 	bl	8011d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011f86:	f002 fe0d 	bl	8014ba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011f8a:	2301      	movs	r3, #1
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3710      	adds	r7, #16
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	e000ed04 	.word	0xe000ed04

08011f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b08e      	sub	sp, #56	; 0x38
 8011f9c:	af02      	add	r7, sp, #8
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
 8011fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d10a      	bne.n	8011fc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb0:	f383 8811 	msr	BASEPRI, r3
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011fbe:	bf00      	nop
 8011fc0:	e7fe      	b.n	8011fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10a      	bne.n	8011fde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fcc:	f383 8811 	msr	BASEPRI, r3
 8011fd0:	f3bf 8f6f 	isb	sy
 8011fd4:	f3bf 8f4f 	dsb	sy
 8011fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011fda:	bf00      	nop
 8011fdc:	e7fe      	b.n	8011fdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d002      	beq.n	8011fea <xQueueGenericCreateStatic+0x52>
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d001      	beq.n	8011fee <xQueueGenericCreateStatic+0x56>
 8011fea:	2301      	movs	r3, #1
 8011fec:	e000      	b.n	8011ff0 <xQueueGenericCreateStatic+0x58>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d10a      	bne.n	801200a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
 8012004:	623b      	str	r3, [r7, #32]
}
 8012006:	bf00      	nop
 8012008:	e7fe      	b.n	8012008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d102      	bne.n	8012016 <xQueueGenericCreateStatic+0x7e>
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <xQueueGenericCreateStatic+0x82>
 8012016:	2301      	movs	r3, #1
 8012018:	e000      	b.n	801201c <xQueueGenericCreateStatic+0x84>
 801201a:	2300      	movs	r3, #0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10a      	bne.n	8012036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	61fb      	str	r3, [r7, #28]
}
 8012032:	bf00      	nop
 8012034:	e7fe      	b.n	8012034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012036:	2350      	movs	r3, #80	; 0x50
 8012038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2b50      	cmp	r3, #80	; 0x50
 801203e:	d00a      	beq.n	8012056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012044:	f383 8811 	msr	BASEPRI, r3
 8012048:	f3bf 8f6f 	isb	sy
 801204c:	f3bf 8f4f 	dsb	sy
 8012050:	61bb      	str	r3, [r7, #24]
}
 8012052:	bf00      	nop
 8012054:	e7fe      	b.n	8012054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00d      	beq.n	801207e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012064:	2201      	movs	r2, #1
 8012066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801206a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012070:	9300      	str	r3, [sp, #0]
 8012072:	4613      	mov	r3, r2
 8012074:	687a      	ldr	r2, [r7, #4]
 8012076:	68b9      	ldr	r1, [r7, #8]
 8012078:	68f8      	ldr	r0, [r7, #12]
 801207a:	f000 f83f 	bl	80120fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012080:	4618      	mov	r0, r3
 8012082:	3730      	adds	r7, #48	; 0x30
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012088:	b580      	push	{r7, lr}
 801208a:	b08a      	sub	sp, #40	; 0x28
 801208c:	af02      	add	r7, sp, #8
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	4613      	mov	r3, r2
 8012094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10a      	bne.n	80120b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 801209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a0:	f383 8811 	msr	BASEPRI, r3
 80120a4:	f3bf 8f6f 	isb	sy
 80120a8:	f3bf 8f4f 	dsb	sy
 80120ac:	613b      	str	r3, [r7, #16]
}
 80120ae:	bf00      	nop
 80120b0:	e7fe      	b.n	80120b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	68ba      	ldr	r2, [r7, #8]
 80120b6:	fb02 f303 	mul.w	r3, r2, r3
 80120ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	3350      	adds	r3, #80	; 0x50
 80120c0:	4618      	mov	r0, r3
 80120c2:	f002 fe61 	bl	8014d88 <pvPortMalloc>
 80120c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80120c8:	69bb      	ldr	r3, [r7, #24]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d011      	beq.n	80120f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80120ce:	69bb      	ldr	r3, [r7, #24]
 80120d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	3350      	adds	r3, #80	; 0x50
 80120d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	2200      	movs	r2, #0
 80120dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120e0:	79fa      	ldrb	r2, [r7, #7]
 80120e2:	69bb      	ldr	r3, [r7, #24]
 80120e4:	9300      	str	r3, [sp, #0]
 80120e6:	4613      	mov	r3, r2
 80120e8:	697a      	ldr	r2, [r7, #20]
 80120ea:	68b9      	ldr	r1, [r7, #8]
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f000 f805 	bl	80120fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80120f2:	69bb      	ldr	r3, [r7, #24]
	}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3720      	adds	r7, #32
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}

080120fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	60b9      	str	r1, [r7, #8]
 8012106:	607a      	str	r2, [r7, #4]
 8012108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d103      	bne.n	8012118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012110:	69bb      	ldr	r3, [r7, #24]
 8012112:	69ba      	ldr	r2, [r7, #24]
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	e002      	b.n	801211e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801211e:	69bb      	ldr	r3, [r7, #24]
 8012120:	68fa      	ldr	r2, [r7, #12]
 8012122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012124:	69bb      	ldr	r3, [r7, #24]
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801212a:	2101      	movs	r1, #1
 801212c:	69b8      	ldr	r0, [r7, #24]
 801212e:	f7ff fecb 	bl	8011ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	78fa      	ldrb	r2, [r7, #3]
 8012136:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801213a:	bf00      	nop
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}

08012142 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012142:	b580      	push	{r7, lr}
 8012144:	b08a      	sub	sp, #40	; 0x28
 8012146:	af02      	add	r7, sp, #8
 8012148:	60f8      	str	r0, [r7, #12]
 801214a:	60b9      	str	r1, [r7, #8]
 801214c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10a      	bne.n	801216a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012158:	f383 8811 	msr	BASEPRI, r3
 801215c:	f3bf 8f6f 	isb	sy
 8012160:	f3bf 8f4f 	dsb	sy
 8012164:	61bb      	str	r3, [r7, #24]
}
 8012166:	bf00      	nop
 8012168:	e7fe      	b.n	8012168 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	429a      	cmp	r2, r3
 8012170:	d90a      	bls.n	8012188 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	617b      	str	r3, [r7, #20]
}
 8012184:	bf00      	nop
 8012186:	e7fe      	b.n	8012186 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012188:	2302      	movs	r3, #2
 801218a:	9300      	str	r3, [sp, #0]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	2100      	movs	r1, #0
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f7ff ff00 	bl	8011f98 <xQueueGenericCreateStatic>
 8012198:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d002      	beq.n	80121a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80121a0:	69fb      	ldr	r3, [r7, #28]
 80121a2:	68ba      	ldr	r2, [r7, #8]
 80121a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80121a6:	69fb      	ldr	r3, [r7, #28]
	}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3720      	adds	r7, #32
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b086      	sub	sp, #24
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d10a      	bne.n	80121d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80121c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c4:	f383 8811 	msr	BASEPRI, r3
 80121c8:	f3bf 8f6f 	isb	sy
 80121cc:	f3bf 8f4f 	dsb	sy
 80121d0:	613b      	str	r3, [r7, #16]
}
 80121d2:	bf00      	nop
 80121d4:	e7fe      	b.n	80121d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80121d6:	683a      	ldr	r2, [r7, #0]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d90a      	bls.n	80121f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80121de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121e2:	f383 8811 	msr	BASEPRI, r3
 80121e6:	f3bf 8f6f 	isb	sy
 80121ea:	f3bf 8f4f 	dsb	sy
 80121ee:	60fb      	str	r3, [r7, #12]
}
 80121f0:	bf00      	nop
 80121f2:	e7fe      	b.n	80121f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80121f4:	2202      	movs	r2, #2
 80121f6:	2100      	movs	r1, #0
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f7ff ff45 	bl	8012088 <xQueueGenericCreate>
 80121fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	683a      	ldr	r2, [r7, #0]
 801220a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801220c:	697b      	ldr	r3, [r7, #20]
	}
 801220e:	4618      	mov	r0, r3
 8012210:	3718      	adds	r7, #24
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
	...

08012218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b08e      	sub	sp, #56	; 0x38
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	60b9      	str	r1, [r7, #8]
 8012222:	607a      	str	r2, [r7, #4]
 8012224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012226:	2300      	movs	r3, #0
 8012228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012230:	2b00      	cmp	r3, #0
 8012232:	d10a      	bne.n	801224a <xQueueGenericSend+0x32>
	__asm volatile
 8012234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012238:	f383 8811 	msr	BASEPRI, r3
 801223c:	f3bf 8f6f 	isb	sy
 8012240:	f3bf 8f4f 	dsb	sy
 8012244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012246:	bf00      	nop
 8012248:	e7fe      	b.n	8012248 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d103      	bne.n	8012258 <xQueueGenericSend+0x40>
 8012250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012254:	2b00      	cmp	r3, #0
 8012256:	d101      	bne.n	801225c <xQueueGenericSend+0x44>
 8012258:	2301      	movs	r3, #1
 801225a:	e000      	b.n	801225e <xQueueGenericSend+0x46>
 801225c:	2300      	movs	r3, #0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d10a      	bne.n	8012278 <xQueueGenericSend+0x60>
	__asm volatile
 8012262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012266:	f383 8811 	msr	BASEPRI, r3
 801226a:	f3bf 8f6f 	isb	sy
 801226e:	f3bf 8f4f 	dsb	sy
 8012272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012274:	bf00      	nop
 8012276:	e7fe      	b.n	8012276 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	2b02      	cmp	r3, #2
 801227c:	d103      	bne.n	8012286 <xQueueGenericSend+0x6e>
 801227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012282:	2b01      	cmp	r3, #1
 8012284:	d101      	bne.n	801228a <xQueueGenericSend+0x72>
 8012286:	2301      	movs	r3, #1
 8012288:	e000      	b.n	801228c <xQueueGenericSend+0x74>
 801228a:	2300      	movs	r3, #0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d10a      	bne.n	80122a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8012290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012294:	f383 8811 	msr	BASEPRI, r3
 8012298:	f3bf 8f6f 	isb	sy
 801229c:	f3bf 8f4f 	dsb	sy
 80122a0:	623b      	str	r3, [r7, #32]
}
 80122a2:	bf00      	nop
 80122a4:	e7fe      	b.n	80122a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122a6:	f001 fd03 	bl	8013cb0 <xTaskGetSchedulerState>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d102      	bne.n	80122b6 <xQueueGenericSend+0x9e>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d101      	bne.n	80122ba <xQueueGenericSend+0xa2>
 80122b6:	2301      	movs	r3, #1
 80122b8:	e000      	b.n	80122bc <xQueueGenericSend+0xa4>
 80122ba:	2300      	movs	r3, #0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d10a      	bne.n	80122d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80122c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c4:	f383 8811 	msr	BASEPRI, r3
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	f3bf 8f4f 	dsb	sy
 80122d0:	61fb      	str	r3, [r7, #28]
}
 80122d2:	bf00      	nop
 80122d4:	e7fe      	b.n	80122d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80122d6:	f002 fc35 	bl	8014b44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122e2:	429a      	cmp	r2, r3
 80122e4:	d302      	bcc.n	80122ec <xQueueGenericSend+0xd4>
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	2b02      	cmp	r3, #2
 80122ea:	d129      	bne.n	8012340 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80122ec:	683a      	ldr	r2, [r7, #0]
 80122ee:	68b9      	ldr	r1, [r7, #8]
 80122f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f2:	f000 fc5e 	bl	8012bb2 <prvCopyDataToQueue>
 80122f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80122f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d010      	beq.n	8012322 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012302:	3324      	adds	r3, #36	; 0x24
 8012304:	4618      	mov	r0, r3
 8012306:	f001 faaf 	bl	8013868 <xTaskRemoveFromEventList>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d013      	beq.n	8012338 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012310:	4b3f      	ldr	r3, [pc, #252]	; (8012410 <xQueueGenericSend+0x1f8>)
 8012312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012316:	601a      	str	r2, [r3, #0]
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	f3bf 8f6f 	isb	sy
 8012320:	e00a      	b.n	8012338 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012324:	2b00      	cmp	r3, #0
 8012326:	d007      	beq.n	8012338 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012328:	4b39      	ldr	r3, [pc, #228]	; (8012410 <xQueueGenericSend+0x1f8>)
 801232a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801232e:	601a      	str	r2, [r3, #0]
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012338:	f002 fc34 	bl	8014ba4 <vPortExitCritical>
				return pdPASS;
 801233c:	2301      	movs	r3, #1
 801233e:	e063      	b.n	8012408 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d103      	bne.n	801234e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012346:	f002 fc2d 	bl	8014ba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801234a:	2300      	movs	r3, #0
 801234c:	e05c      	b.n	8012408 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801234e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012350:	2b00      	cmp	r3, #0
 8012352:	d106      	bne.n	8012362 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012354:	f107 0314 	add.w	r3, r7, #20
 8012358:	4618      	mov	r0, r3
 801235a:	f001 fb4b 	bl	80139f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801235e:	2301      	movs	r3, #1
 8012360:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012362:	f002 fc1f 	bl	8014ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012366:	f001 f819 	bl	801339c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801236a:	f002 fbeb 	bl	8014b44 <vPortEnterCritical>
 801236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012374:	b25b      	sxtb	r3, r3
 8012376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801237a:	d103      	bne.n	8012384 <xQueueGenericSend+0x16c>
 801237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237e:	2200      	movs	r2, #0
 8012380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801238a:	b25b      	sxtb	r3, r3
 801238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012390:	d103      	bne.n	801239a <xQueueGenericSend+0x182>
 8012392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012394:	2200      	movs	r2, #0
 8012396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801239a:	f002 fc03 	bl	8014ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801239e:	1d3a      	adds	r2, r7, #4
 80123a0:	f107 0314 	add.w	r3, r7, #20
 80123a4:	4611      	mov	r1, r2
 80123a6:	4618      	mov	r0, r3
 80123a8:	f001 fb3a 	bl	8013a20 <xTaskCheckForTimeOut>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d124      	bne.n	80123fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80123b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123b4:	f000 fcf5 	bl	8012da2 <prvIsQueueFull>
 80123b8:	4603      	mov	r3, r0
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d018      	beq.n	80123f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80123be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c0:	3310      	adds	r3, #16
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	4611      	mov	r1, r2
 80123c6:	4618      	mov	r0, r3
 80123c8:	f001 f9c2 	bl	8013750 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80123cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123ce:	f000 fc80 	bl	8012cd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80123d2:	f000 fff1 	bl	80133b8 <xTaskResumeAll>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	f47f af7c 	bne.w	80122d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80123de:	4b0c      	ldr	r3, [pc, #48]	; (8012410 <xQueueGenericSend+0x1f8>)
 80123e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123e4:	601a      	str	r2, [r3, #0]
 80123e6:	f3bf 8f4f 	dsb	sy
 80123ea:	f3bf 8f6f 	isb	sy
 80123ee:	e772      	b.n	80122d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80123f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123f2:	f000 fc6e 	bl	8012cd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80123f6:	f000 ffdf 	bl	80133b8 <xTaskResumeAll>
 80123fa:	e76c      	b.n	80122d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80123fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123fe:	f000 fc68 	bl	8012cd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012402:	f000 ffd9 	bl	80133b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012406:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012408:	4618      	mov	r0, r3
 801240a:	3738      	adds	r7, #56	; 0x38
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	e000ed04 	.word	0xe000ed04

08012414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b090      	sub	sp, #64	; 0x40
 8012418:	af00      	add	r7, sp, #0
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
 8012420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012428:	2b00      	cmp	r3, #0
 801242a:	d10a      	bne.n	8012442 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012430:	f383 8811 	msr	BASEPRI, r3
 8012434:	f3bf 8f6f 	isb	sy
 8012438:	f3bf 8f4f 	dsb	sy
 801243c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801243e:	bf00      	nop
 8012440:	e7fe      	b.n	8012440 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d103      	bne.n	8012450 <xQueueGenericSendFromISR+0x3c>
 8012448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801244c:	2b00      	cmp	r3, #0
 801244e:	d101      	bne.n	8012454 <xQueueGenericSendFromISR+0x40>
 8012450:	2301      	movs	r3, #1
 8012452:	e000      	b.n	8012456 <xQueueGenericSendFromISR+0x42>
 8012454:	2300      	movs	r3, #0
 8012456:	2b00      	cmp	r3, #0
 8012458:	d10a      	bne.n	8012470 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801246c:	bf00      	nop
 801246e:	e7fe      	b.n	801246e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	2b02      	cmp	r3, #2
 8012474:	d103      	bne.n	801247e <xQueueGenericSendFromISR+0x6a>
 8012476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801247a:	2b01      	cmp	r3, #1
 801247c:	d101      	bne.n	8012482 <xQueueGenericSendFromISR+0x6e>
 801247e:	2301      	movs	r3, #1
 8012480:	e000      	b.n	8012484 <xQueueGenericSendFromISR+0x70>
 8012482:	2300      	movs	r3, #0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10a      	bne.n	801249e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248c:	f383 8811 	msr	BASEPRI, r3
 8012490:	f3bf 8f6f 	isb	sy
 8012494:	f3bf 8f4f 	dsb	sy
 8012498:	623b      	str	r3, [r7, #32]
}
 801249a:	bf00      	nop
 801249c:	e7fe      	b.n	801249c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801249e:	f002 fc33 	bl	8014d08 <vPortValidateInterruptPriority>
	__asm volatile
 80124a2:	f3ef 8211 	mrs	r2, BASEPRI
 80124a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124aa:	f383 8811 	msr	BASEPRI, r3
 80124ae:	f3bf 8f6f 	isb	sy
 80124b2:	f3bf 8f4f 	dsb	sy
 80124b6:	61fa      	str	r2, [r7, #28]
 80124b8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80124ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80124bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d302      	bcc.n	80124d0 <xQueueGenericSendFromISR+0xbc>
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	2b02      	cmp	r3, #2
 80124ce:	d12f      	bne.n	8012530 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124e0:	683a      	ldr	r2, [r7, #0]
 80124e2:	68b9      	ldr	r1, [r7, #8]
 80124e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124e6:	f000 fb64 	bl	8012bb2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80124ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80124ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124f2:	d112      	bne.n	801251a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d016      	beq.n	801252a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fe:	3324      	adds	r3, #36	; 0x24
 8012500:	4618      	mov	r0, r3
 8012502:	f001 f9b1 	bl	8013868 <xTaskRemoveFromEventList>
 8012506:	4603      	mov	r3, r0
 8012508:	2b00      	cmp	r3, #0
 801250a:	d00e      	beq.n	801252a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d00b      	beq.n	801252a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2201      	movs	r2, #1
 8012516:	601a      	str	r2, [r3, #0]
 8012518:	e007      	b.n	801252a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801251a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801251e:	3301      	adds	r3, #1
 8012520:	b2db      	uxtb	r3, r3
 8012522:	b25a      	sxtb	r2, r3
 8012524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801252a:	2301      	movs	r3, #1
 801252c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801252e:	e001      	b.n	8012534 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012530:	2300      	movs	r3, #0
 8012532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012536:	617b      	str	r3, [r7, #20]
	__asm volatile
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	f383 8811 	msr	BASEPRI, r3
}
 801253e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012542:	4618      	mov	r0, r3
 8012544:	3740      	adds	r7, #64	; 0x40
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}

0801254a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801254a:	b580      	push	{r7, lr}
 801254c:	b08e      	sub	sp, #56	; 0x38
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
 8012552:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801255a:	2b00      	cmp	r3, #0
 801255c:	d10a      	bne.n	8012574 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012562:	f383 8811 	msr	BASEPRI, r3
 8012566:	f3bf 8f6f 	isb	sy
 801256a:	f3bf 8f4f 	dsb	sy
 801256e:	623b      	str	r3, [r7, #32]
}
 8012570:	bf00      	nop
 8012572:	e7fe      	b.n	8012572 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00a      	beq.n	8012592 <xQueueGiveFromISR+0x48>
	__asm volatile
 801257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012580:	f383 8811 	msr	BASEPRI, r3
 8012584:	f3bf 8f6f 	isb	sy
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	61fb      	str	r3, [r7, #28]
}
 801258e:	bf00      	nop
 8012590:	e7fe      	b.n	8012590 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d103      	bne.n	80125a2 <xQueueGiveFromISR+0x58>
 801259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801259c:	689b      	ldr	r3, [r3, #8]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d101      	bne.n	80125a6 <xQueueGiveFromISR+0x5c>
 80125a2:	2301      	movs	r3, #1
 80125a4:	e000      	b.n	80125a8 <xQueueGiveFromISR+0x5e>
 80125a6:	2300      	movs	r3, #0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d10a      	bne.n	80125c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80125ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b0:	f383 8811 	msr	BASEPRI, r3
 80125b4:	f3bf 8f6f 	isb	sy
 80125b8:	f3bf 8f4f 	dsb	sy
 80125bc:	61bb      	str	r3, [r7, #24]
}
 80125be:	bf00      	nop
 80125c0:	e7fe      	b.n	80125c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80125c2:	f002 fba1 	bl	8014d08 <vPortValidateInterruptPriority>
	__asm volatile
 80125c6:	f3ef 8211 	mrs	r2, BASEPRI
 80125ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ce:	f383 8811 	msr	BASEPRI, r3
 80125d2:	f3bf 8f6f 	isb	sy
 80125d6:	f3bf 8f4f 	dsb	sy
 80125da:	617a      	str	r2, [r7, #20]
 80125dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80125de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80125e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80125e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80125ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d22b      	bcs.n	801264a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80125f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80125f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80125fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fe:	1c5a      	adds	r2, r3, #1
 8012600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012602:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801260c:	d112      	bne.n	8012634 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012612:	2b00      	cmp	r3, #0
 8012614:	d016      	beq.n	8012644 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012618:	3324      	adds	r3, #36	; 0x24
 801261a:	4618      	mov	r0, r3
 801261c:	f001 f924 	bl	8013868 <xTaskRemoveFromEventList>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00e      	beq.n	8012644 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d00b      	beq.n	8012644 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	2201      	movs	r2, #1
 8012630:	601a      	str	r2, [r3, #0]
 8012632:	e007      	b.n	8012644 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012638:	3301      	adds	r3, #1
 801263a:	b2db      	uxtb	r3, r3
 801263c:	b25a      	sxtb	r2, r3
 801263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012644:	2301      	movs	r3, #1
 8012646:	637b      	str	r3, [r7, #52]	; 0x34
 8012648:	e001      	b.n	801264e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801264a:	2300      	movs	r3, #0
 801264c:	637b      	str	r3, [r7, #52]	; 0x34
 801264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012650:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f383 8811 	msr	BASEPRI, r3
}
 8012658:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801265a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801265c:	4618      	mov	r0, r3
 801265e:	3738      	adds	r7, #56	; 0x38
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b08c      	sub	sp, #48	; 0x30
 8012668:	af00      	add	r7, sp, #0
 801266a:	60f8      	str	r0, [r7, #12]
 801266c:	60b9      	str	r1, [r7, #8]
 801266e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012670:	2300      	movs	r3, #0
 8012672:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801267a:	2b00      	cmp	r3, #0
 801267c:	d10a      	bne.n	8012694 <xQueueReceive+0x30>
	__asm volatile
 801267e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012682:	f383 8811 	msr	BASEPRI, r3
 8012686:	f3bf 8f6f 	isb	sy
 801268a:	f3bf 8f4f 	dsb	sy
 801268e:	623b      	str	r3, [r7, #32]
}
 8012690:	bf00      	nop
 8012692:	e7fe      	b.n	8012692 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d103      	bne.n	80126a2 <xQueueReceive+0x3e>
 801269a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <xQueueReceive+0x42>
 80126a2:	2301      	movs	r3, #1
 80126a4:	e000      	b.n	80126a8 <xQueueReceive+0x44>
 80126a6:	2300      	movs	r3, #0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d10a      	bne.n	80126c2 <xQueueReceive+0x5e>
	__asm volatile
 80126ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b0:	f383 8811 	msr	BASEPRI, r3
 80126b4:	f3bf 8f6f 	isb	sy
 80126b8:	f3bf 8f4f 	dsb	sy
 80126bc:	61fb      	str	r3, [r7, #28]
}
 80126be:	bf00      	nop
 80126c0:	e7fe      	b.n	80126c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126c2:	f001 faf5 	bl	8013cb0 <xTaskGetSchedulerState>
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d102      	bne.n	80126d2 <xQueueReceive+0x6e>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d101      	bne.n	80126d6 <xQueueReceive+0x72>
 80126d2:	2301      	movs	r3, #1
 80126d4:	e000      	b.n	80126d8 <xQueueReceive+0x74>
 80126d6:	2300      	movs	r3, #0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10a      	bne.n	80126f2 <xQueueReceive+0x8e>
	__asm volatile
 80126dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e0:	f383 8811 	msr	BASEPRI, r3
 80126e4:	f3bf 8f6f 	isb	sy
 80126e8:	f3bf 8f4f 	dsb	sy
 80126ec:	61bb      	str	r3, [r7, #24]
}
 80126ee:	bf00      	nop
 80126f0:	e7fe      	b.n	80126f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126f2:	f002 fa27 	bl	8014b44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80126fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d01f      	beq.n	8012742 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012702:	68b9      	ldr	r1, [r7, #8]
 8012704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012706:	f000 fabe 	bl	8012c86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801270c:	1e5a      	subs	r2, r3, #1
 801270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012710:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012714:	691b      	ldr	r3, [r3, #16]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00f      	beq.n	801273a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801271c:	3310      	adds	r3, #16
 801271e:	4618      	mov	r0, r3
 8012720:	f001 f8a2 	bl	8013868 <xTaskRemoveFromEventList>
 8012724:	4603      	mov	r3, r0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d007      	beq.n	801273a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801272a:	4b3d      	ldr	r3, [pc, #244]	; (8012820 <xQueueReceive+0x1bc>)
 801272c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	f3bf 8f4f 	dsb	sy
 8012736:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801273a:	f002 fa33 	bl	8014ba4 <vPortExitCritical>
				return pdPASS;
 801273e:	2301      	movs	r3, #1
 8012740:	e069      	b.n	8012816 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d103      	bne.n	8012750 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012748:	f002 fa2c 	bl	8014ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801274c:	2300      	movs	r3, #0
 801274e:	e062      	b.n	8012816 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012756:	f107 0310 	add.w	r3, r7, #16
 801275a:	4618      	mov	r0, r3
 801275c:	f001 f94a 	bl	80139f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012760:	2301      	movs	r3, #1
 8012762:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012764:	f002 fa1e 	bl	8014ba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012768:	f000 fe18 	bl	801339c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801276c:	f002 f9ea 	bl	8014b44 <vPortEnterCritical>
 8012770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012776:	b25b      	sxtb	r3, r3
 8012778:	f1b3 3fff 	cmp.w	r3, #4294967295
 801277c:	d103      	bne.n	8012786 <xQueueReceive+0x122>
 801277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012780:	2200      	movs	r2, #0
 8012782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801278c:	b25b      	sxtb	r3, r3
 801278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012792:	d103      	bne.n	801279c <xQueueReceive+0x138>
 8012794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012796:	2200      	movs	r2, #0
 8012798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801279c:	f002 fa02 	bl	8014ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80127a0:	1d3a      	adds	r2, r7, #4
 80127a2:	f107 0310 	add.w	r3, r7, #16
 80127a6:	4611      	mov	r1, r2
 80127a8:	4618      	mov	r0, r3
 80127aa:	f001 f939 	bl	8013a20 <xTaskCheckForTimeOut>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d123      	bne.n	80127fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80127b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127b6:	f000 fade 	bl	8012d76 <prvIsQueueEmpty>
 80127ba:	4603      	mov	r3, r0
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d017      	beq.n	80127f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80127c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c2:	3324      	adds	r3, #36	; 0x24
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	4611      	mov	r1, r2
 80127c8:	4618      	mov	r0, r3
 80127ca:	f000 ffc1 	bl	8013750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80127ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127d0:	f000 fa7f 	bl	8012cd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80127d4:	f000 fdf0 	bl	80133b8 <xTaskResumeAll>
 80127d8:	4603      	mov	r3, r0
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d189      	bne.n	80126f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80127de:	4b10      	ldr	r3, [pc, #64]	; (8012820 <xQueueReceive+0x1bc>)
 80127e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127e4:	601a      	str	r2, [r3, #0]
 80127e6:	f3bf 8f4f 	dsb	sy
 80127ea:	f3bf 8f6f 	isb	sy
 80127ee:	e780      	b.n	80126f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80127f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127f2:	f000 fa6e 	bl	8012cd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80127f6:	f000 fddf 	bl	80133b8 <xTaskResumeAll>
 80127fa:	e77a      	b.n	80126f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80127fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127fe:	f000 fa68 	bl	8012cd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012802:	f000 fdd9 	bl	80133b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012808:	f000 fab5 	bl	8012d76 <prvIsQueueEmpty>
 801280c:	4603      	mov	r3, r0
 801280e:	2b00      	cmp	r3, #0
 8012810:	f43f af6f 	beq.w	80126f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012816:	4618      	mov	r0, r3
 8012818:	3730      	adds	r7, #48	; 0x30
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	e000ed04 	.word	0xe000ed04

08012824 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b08e      	sub	sp, #56	; 0x38
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801282e:	2300      	movs	r3, #0
 8012830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012836:	2300      	movs	r3, #0
 8012838:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283c:	2b00      	cmp	r3, #0
 801283e:	d10a      	bne.n	8012856 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012844:	f383 8811 	msr	BASEPRI, r3
 8012848:	f3bf 8f6f 	isb	sy
 801284c:	f3bf 8f4f 	dsb	sy
 8012850:	623b      	str	r3, [r7, #32]
}
 8012852:	bf00      	nop
 8012854:	e7fe      	b.n	8012854 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801285a:	2b00      	cmp	r3, #0
 801285c:	d00a      	beq.n	8012874 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	61fb      	str	r3, [r7, #28]
}
 8012870:	bf00      	nop
 8012872:	e7fe      	b.n	8012872 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012874:	f001 fa1c 	bl	8013cb0 <xTaskGetSchedulerState>
 8012878:	4603      	mov	r3, r0
 801287a:	2b00      	cmp	r3, #0
 801287c:	d102      	bne.n	8012884 <xQueueSemaphoreTake+0x60>
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <xQueueSemaphoreTake+0x64>
 8012884:	2301      	movs	r3, #1
 8012886:	e000      	b.n	801288a <xQueueSemaphoreTake+0x66>
 8012888:	2300      	movs	r3, #0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d10a      	bne.n	80128a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012892:	f383 8811 	msr	BASEPRI, r3
 8012896:	f3bf 8f6f 	isb	sy
 801289a:	f3bf 8f4f 	dsb	sy
 801289e:	61bb      	str	r3, [r7, #24]
}
 80128a0:	bf00      	nop
 80128a2:	e7fe      	b.n	80128a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80128a4:	f002 f94e 	bl	8014b44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80128a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80128ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d024      	beq.n	80128fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80128b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b6:	1e5a      	subs	r2, r3, #1
 80128b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80128bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d104      	bne.n	80128ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80128c4:	f001 fb82 	bl	8013fcc <pvTaskIncrementMutexHeldCount>
 80128c8:	4602      	mov	r2, r0
 80128ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80128ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d0:	691b      	ldr	r3, [r3, #16]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d00f      	beq.n	80128f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80128d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d8:	3310      	adds	r3, #16
 80128da:	4618      	mov	r0, r3
 80128dc:	f000 ffc4 	bl	8013868 <xTaskRemoveFromEventList>
 80128e0:	4603      	mov	r3, r0
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d007      	beq.n	80128f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80128e6:	4b54      	ldr	r3, [pc, #336]	; (8012a38 <xQueueSemaphoreTake+0x214>)
 80128e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128ec:	601a      	str	r2, [r3, #0]
 80128ee:	f3bf 8f4f 	dsb	sy
 80128f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80128f6:	f002 f955 	bl	8014ba4 <vPortExitCritical>
				return pdPASS;
 80128fa:	2301      	movs	r3, #1
 80128fc:	e097      	b.n	8012a2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d111      	bne.n	8012928 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00a      	beq.n	8012920 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801290a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801290e:	f383 8811 	msr	BASEPRI, r3
 8012912:	f3bf 8f6f 	isb	sy
 8012916:	f3bf 8f4f 	dsb	sy
 801291a:	617b      	str	r3, [r7, #20]
}
 801291c:	bf00      	nop
 801291e:	e7fe      	b.n	801291e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012920:	f002 f940 	bl	8014ba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012924:	2300      	movs	r3, #0
 8012926:	e082      	b.n	8012a2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801292a:	2b00      	cmp	r3, #0
 801292c:	d106      	bne.n	801293c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801292e:	f107 030c 	add.w	r3, r7, #12
 8012932:	4618      	mov	r0, r3
 8012934:	f001 f85e 	bl	80139f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012938:	2301      	movs	r3, #1
 801293a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801293c:	f002 f932 	bl	8014ba4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012940:	f000 fd2c 	bl	801339c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012944:	f002 f8fe 	bl	8014b44 <vPortEnterCritical>
 8012948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801294e:	b25b      	sxtb	r3, r3
 8012950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012954:	d103      	bne.n	801295e <xQueueSemaphoreTake+0x13a>
 8012956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012958:	2200      	movs	r2, #0
 801295a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012964:	b25b      	sxtb	r3, r3
 8012966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801296a:	d103      	bne.n	8012974 <xQueueSemaphoreTake+0x150>
 801296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801296e:	2200      	movs	r2, #0
 8012970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012974:	f002 f916 	bl	8014ba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012978:	463a      	mov	r2, r7
 801297a:	f107 030c 	add.w	r3, r7, #12
 801297e:	4611      	mov	r1, r2
 8012980:	4618      	mov	r0, r3
 8012982:	f001 f84d 	bl	8013a20 <xTaskCheckForTimeOut>
 8012986:	4603      	mov	r3, r0
 8012988:	2b00      	cmp	r3, #0
 801298a:	d132      	bne.n	80129f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801298c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801298e:	f000 f9f2 	bl	8012d76 <prvIsQueueEmpty>
 8012992:	4603      	mov	r3, r0
 8012994:	2b00      	cmp	r3, #0
 8012996:	d026      	beq.n	80129e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d109      	bne.n	80129b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80129a0:	f002 f8d0 	bl	8014b44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80129a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f001 f99f 	bl	8013cec <xTaskPriorityInherit>
 80129ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80129b0:	f002 f8f8 	bl	8014ba4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	3324      	adds	r3, #36	; 0x24
 80129b8:	683a      	ldr	r2, [r7, #0]
 80129ba:	4611      	mov	r1, r2
 80129bc:	4618      	mov	r0, r3
 80129be:	f000 fec7 	bl	8013750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80129c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129c4:	f000 f985 	bl	8012cd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80129c8:	f000 fcf6 	bl	80133b8 <xTaskResumeAll>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	f47f af68 	bne.w	80128a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80129d4:	4b18      	ldr	r3, [pc, #96]	; (8012a38 <xQueueSemaphoreTake+0x214>)
 80129d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129da:	601a      	str	r2, [r3, #0]
 80129dc:	f3bf 8f4f 	dsb	sy
 80129e0:	f3bf 8f6f 	isb	sy
 80129e4:	e75e      	b.n	80128a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80129e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129e8:	f000 f973 	bl	8012cd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80129ec:	f000 fce4 	bl	80133b8 <xTaskResumeAll>
 80129f0:	e758      	b.n	80128a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80129f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129f4:	f000 f96d 	bl	8012cd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80129f8:	f000 fcde 	bl	80133b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80129fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129fe:	f000 f9ba 	bl	8012d76 <prvIsQueueEmpty>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f43f af4d 	beq.w	80128a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00d      	beq.n	8012a2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012a10:	f002 f898 	bl	8014b44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012a14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a16:	f000 f8b4 	bl	8012b82 <prvGetDisinheritPriorityAfterTimeout>
 8012a1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1e:	689b      	ldr	r3, [r3, #8]
 8012a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a22:	4618      	mov	r0, r3
 8012a24:	f001 fa38 	bl	8013e98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012a28:	f002 f8bc 	bl	8014ba4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012a2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012a2e:	4618      	mov	r0, r3
 8012a30:	3738      	adds	r7, #56	; 0x38
 8012a32:	46bd      	mov	sp, r7
 8012a34:	bd80      	pop	{r7, pc}
 8012a36:	bf00      	nop
 8012a38:	e000ed04 	.word	0xe000ed04

08012a3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b08e      	sub	sp, #56	; 0x38
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	60b9      	str	r1, [r7, #8]
 8012a46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d10a      	bne.n	8012a68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a56:	f383 8811 	msr	BASEPRI, r3
 8012a5a:	f3bf 8f6f 	isb	sy
 8012a5e:	f3bf 8f4f 	dsb	sy
 8012a62:	623b      	str	r3, [r7, #32]
}
 8012a64:	bf00      	nop
 8012a66:	e7fe      	b.n	8012a66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d103      	bne.n	8012a76 <xQueueReceiveFromISR+0x3a>
 8012a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d101      	bne.n	8012a7a <xQueueReceiveFromISR+0x3e>
 8012a76:	2301      	movs	r3, #1
 8012a78:	e000      	b.n	8012a7c <xQueueReceiveFromISR+0x40>
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d10a      	bne.n	8012a96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a84:	f383 8811 	msr	BASEPRI, r3
 8012a88:	f3bf 8f6f 	isb	sy
 8012a8c:	f3bf 8f4f 	dsb	sy
 8012a90:	61fb      	str	r3, [r7, #28]
}
 8012a92:	bf00      	nop
 8012a94:	e7fe      	b.n	8012a94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a96:	f002 f937 	bl	8014d08 <vPortValidateInterruptPriority>
	__asm volatile
 8012a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8012a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa2:	f383 8811 	msr	BASEPRI, r3
 8012aa6:	f3bf 8f6f 	isb	sy
 8012aaa:	f3bf 8f4f 	dsb	sy
 8012aae:	61ba      	str	r2, [r7, #24]
 8012ab0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012ab2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d02f      	beq.n	8012b22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012acc:	68b9      	ldr	r1, [r7, #8]
 8012ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ad0:	f000 f8d9 	bl	8012c86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad6:	1e5a      	subs	r2, r3, #1
 8012ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ada:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae4:	d112      	bne.n	8012b0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d016      	beq.n	8012b1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012af0:	3310      	adds	r3, #16
 8012af2:	4618      	mov	r0, r3
 8012af4:	f000 feb8 	bl	8013868 <xTaskRemoveFromEventList>
 8012af8:	4603      	mov	r3, r0
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00e      	beq.n	8012b1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d00b      	beq.n	8012b1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2201      	movs	r2, #1
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	e007      	b.n	8012b1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b10:	3301      	adds	r3, #1
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	b25a      	sxtb	r2, r3
 8012b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8012b20:	e001      	b.n	8012b26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012b22:	2300      	movs	r3, #0
 8012b24:	637b      	str	r3, [r7, #52]	; 0x34
 8012b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	f383 8811 	msr	BASEPRI, r3
}
 8012b30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012b34:	4618      	mov	r0, r3
 8012b36:	3738      	adds	r7, #56	; 0x38
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}

08012b3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10a      	bne.n	8012b64 <vQueueDelete+0x28>
	__asm volatile
 8012b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b52:	f383 8811 	msr	BASEPRI, r3
 8012b56:	f3bf 8f6f 	isb	sy
 8012b5a:	f3bf 8f4f 	dsb	sy
 8012b5e:	60bb      	str	r3, [r7, #8]
}
 8012b60:	bf00      	nop
 8012b62:	e7fe      	b.n	8012b62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	f000 f95f 	bl	8012e28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d102      	bne.n	8012b7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012b74:	68f8      	ldr	r0, [r7, #12]
 8012b76:	f002 f9d3 	bl	8014f20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012b7a:	bf00      	nop
 8012b7c:	3710      	adds	r7, #16
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012b82:	b480      	push	{r7}
 8012b84:	b085      	sub	sp, #20
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d006      	beq.n	8012ba0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012b9c:	60fb      	str	r3, [r7, #12]
 8012b9e:	e001      	b.n	8012ba4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012ba4:	68fb      	ldr	r3, [r7, #12]
	}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3714      	adds	r7, #20
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr

08012bb2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b086      	sub	sp, #24
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	60f8      	str	r0, [r7, #12]
 8012bba:	60b9      	str	r1, [r7, #8]
 8012bbc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bc6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d10d      	bne.n	8012bec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d14d      	bne.n	8012c74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	689b      	ldr	r3, [r3, #8]
 8012bdc:	4618      	mov	r0, r3
 8012bde:	f001 f8ed 	bl	8013dbc <xTaskPriorityDisinherit>
 8012be2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2200      	movs	r2, #0
 8012be8:	609a      	str	r2, [r3, #8]
 8012bea:	e043      	b.n	8012c74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d119      	bne.n	8012c26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	6858      	ldr	r0, [r3, #4]
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	68b9      	ldr	r1, [r7, #8]
 8012bfe:	f003 f995 	bl	8015f2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	685a      	ldr	r2, [r3, #4]
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c0a:	441a      	add	r2, r3
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	685a      	ldr	r2, [r3, #4]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	689b      	ldr	r3, [r3, #8]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d32b      	bcc.n	8012c74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	605a      	str	r2, [r3, #4]
 8012c24:	e026      	b.n	8012c74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	68d8      	ldr	r0, [r3, #12]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c2e:	461a      	mov	r2, r3
 8012c30:	68b9      	ldr	r1, [r7, #8]
 8012c32:	f003 f97b 	bl	8015f2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	68da      	ldr	r2, [r3, #12]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c3e:	425b      	negs	r3, r3
 8012c40:	441a      	add	r2, r3
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	68da      	ldr	r2, [r3, #12]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d207      	bcs.n	8012c62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	689a      	ldr	r2, [r3, #8]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c5a:	425b      	negs	r3, r3
 8012c5c:	441a      	add	r2, r3
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2b02      	cmp	r3, #2
 8012c66:	d105      	bne.n	8012c74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d002      	beq.n	8012c74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	3b01      	subs	r3, #1
 8012c72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	1c5a      	adds	r2, r3, #1
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012c7c:	697b      	ldr	r3, [r7, #20]
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3718      	adds	r7, #24
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}

08012c86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012c86:	b580      	push	{r7, lr}
 8012c88:	b082      	sub	sp, #8
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6078      	str	r0, [r7, #4]
 8012c8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d018      	beq.n	8012cca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	68da      	ldr	r2, [r3, #12]
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ca0:	441a      	add	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	68da      	ldr	r2, [r3, #12]
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	689b      	ldr	r3, [r3, #8]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d303      	bcc.n	8012cba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	68d9      	ldr	r1, [r3, #12]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	6838      	ldr	r0, [r7, #0]
 8012cc6:	f003 f931 	bl	8015f2c <memcpy>
	}
}
 8012cca:	bf00      	nop
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	b084      	sub	sp, #16
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012cda:	f001 ff33 	bl	8014b44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ce4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ce6:	e011      	b.n	8012d0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d012      	beq.n	8012d16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	3324      	adds	r3, #36	; 0x24
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f000 fdb7 	bl	8013868 <xTaskRemoveFromEventList>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d001      	beq.n	8012d04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012d00:	f000 fef0 	bl	8013ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012d04:	7bfb      	ldrb	r3, [r7, #15]
 8012d06:	3b01      	subs	r3, #1
 8012d08:	b2db      	uxtb	r3, r3
 8012d0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	dce9      	bgt.n	8012ce8 <prvUnlockQueue+0x16>
 8012d14:	e000      	b.n	8012d18 <prvUnlockQueue+0x46>
					break;
 8012d16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	22ff      	movs	r2, #255	; 0xff
 8012d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012d20:	f001 ff40 	bl	8014ba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012d24:	f001 ff0e 	bl	8014b44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d30:	e011      	b.n	8012d56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	691b      	ldr	r3, [r3, #16]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d012      	beq.n	8012d60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	3310      	adds	r3, #16
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f000 fd92 	bl	8013868 <xTaskRemoveFromEventList>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d001      	beq.n	8012d4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012d4a:	f000 fecb 	bl	8013ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012d4e:	7bbb      	ldrb	r3, [r7, #14]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	b2db      	uxtb	r3, r3
 8012d54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012d56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	dce9      	bgt.n	8012d32 <prvUnlockQueue+0x60>
 8012d5e:	e000      	b.n	8012d62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012d60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	22ff      	movs	r2, #255	; 0xff
 8012d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012d6a:	f001 ff1b 	bl	8014ba4 <vPortExitCritical>
}
 8012d6e:	bf00      	nop
 8012d70:	3710      	adds	r7, #16
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}

08012d76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012d76:	b580      	push	{r7, lr}
 8012d78:	b084      	sub	sp, #16
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012d7e:	f001 fee1 	bl	8014b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d102      	bne.n	8012d90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	60fb      	str	r3, [r7, #12]
 8012d8e:	e001      	b.n	8012d94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012d90:	2300      	movs	r3, #0
 8012d92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012d94:	f001 ff06 	bl	8014ba4 <vPortExitCritical>

	return xReturn;
 8012d98:	68fb      	ldr	r3, [r7, #12]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3710      	adds	r7, #16
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}

08012da2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b084      	sub	sp, #16
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012daa:	f001 fecb 	bl	8014b44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d102      	bne.n	8012dc0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	60fb      	str	r3, [r7, #12]
 8012dbe:	e001      	b.n	8012dc4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012dc4:	f001 feee 	bl	8014ba4 <vPortExitCritical>

	return xReturn;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3710      	adds	r7, #16
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
	...

08012dd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012dde:	2300      	movs	r3, #0
 8012de0:	60fb      	str	r3, [r7, #12]
 8012de2:	e014      	b.n	8012e0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012de4:	4a0f      	ldr	r2, [pc, #60]	; (8012e24 <vQueueAddToRegistry+0x50>)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d10b      	bne.n	8012e08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012df0:	490c      	ldr	r1, [pc, #48]	; (8012e24 <vQueueAddToRegistry+0x50>)
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	683a      	ldr	r2, [r7, #0]
 8012df6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012dfa:	4a0a      	ldr	r2, [pc, #40]	; (8012e24 <vQueueAddToRegistry+0x50>)
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	00db      	lsls	r3, r3, #3
 8012e00:	4413      	add	r3, r2
 8012e02:	687a      	ldr	r2, [r7, #4]
 8012e04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012e06:	e006      	b.n	8012e16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	3301      	adds	r3, #1
 8012e0c:	60fb      	str	r3, [r7, #12]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	2b07      	cmp	r3, #7
 8012e12:	d9e7      	bls.n	8012de4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012e14:	bf00      	nop
 8012e16:	bf00      	nop
 8012e18:	3714      	adds	r7, #20
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr
 8012e22:	bf00      	nop
 8012e24:	200011ac 	.word	0x200011ac

08012e28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012e28:	b480      	push	{r7}
 8012e2a:	b085      	sub	sp, #20
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012e30:	2300      	movs	r3, #0
 8012e32:	60fb      	str	r3, [r7, #12]
 8012e34:	e016      	b.n	8012e64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012e36:	4a10      	ldr	r2, [pc, #64]	; (8012e78 <vQueueUnregisterQueue+0x50>)
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	00db      	lsls	r3, r3, #3
 8012e3c:	4413      	add	r3, r2
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	687a      	ldr	r2, [r7, #4]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d10b      	bne.n	8012e5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012e46:	4a0c      	ldr	r2, [pc, #48]	; (8012e78 <vQueueUnregisterQueue+0x50>)
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	2100      	movs	r1, #0
 8012e4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012e50:	4a09      	ldr	r2, [pc, #36]	; (8012e78 <vQueueUnregisterQueue+0x50>)
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	00db      	lsls	r3, r3, #3
 8012e56:	4413      	add	r3, r2
 8012e58:	2200      	movs	r2, #0
 8012e5a:	605a      	str	r2, [r3, #4]
				break;
 8012e5c:	e006      	b.n	8012e6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	3301      	adds	r3, #1
 8012e62:	60fb      	str	r3, [r7, #12]
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2b07      	cmp	r3, #7
 8012e68:	d9e5      	bls.n	8012e36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012e6a:	bf00      	nop
 8012e6c:	bf00      	nop
 8012e6e:	3714      	adds	r7, #20
 8012e70:	46bd      	mov	sp, r7
 8012e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e76:	4770      	bx	lr
 8012e78:	200011ac 	.word	0x200011ac

08012e7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b086      	sub	sp, #24
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	60f8      	str	r0, [r7, #12]
 8012e84:	60b9      	str	r1, [r7, #8]
 8012e86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012e8c:	f001 fe5a 	bl	8014b44 <vPortEnterCritical>
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e96:	b25b      	sxtb	r3, r3
 8012e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e9c:	d103      	bne.n	8012ea6 <vQueueWaitForMessageRestricted+0x2a>
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012eac:	b25b      	sxtb	r3, r3
 8012eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eb2:	d103      	bne.n	8012ebc <vQueueWaitForMessageRestricted+0x40>
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ebc:	f001 fe72 	bl	8014ba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d106      	bne.n	8012ed6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	3324      	adds	r3, #36	; 0x24
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	68b9      	ldr	r1, [r7, #8]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f000 fc9d 	bl	8013810 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012ed6:	6978      	ldr	r0, [r7, #20]
 8012ed8:	f7ff fefb 	bl	8012cd2 <prvUnlockQueue>
	}
 8012edc:	bf00      	nop
 8012ede:	3718      	adds	r7, #24
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b08e      	sub	sp, #56	; 0x38
 8012ee8:	af04      	add	r7, sp, #16
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	607a      	str	r2, [r7, #4]
 8012ef0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10a      	bne.n	8012f0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	623b      	str	r3, [r7, #32]
}
 8012f0a:	bf00      	nop
 8012f0c:	e7fe      	b.n	8012f0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d10a      	bne.n	8012f2a <xTaskCreateStatic+0x46>
	__asm volatile
 8012f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f18:	f383 8811 	msr	BASEPRI, r3
 8012f1c:	f3bf 8f6f 	isb	sy
 8012f20:	f3bf 8f4f 	dsb	sy
 8012f24:	61fb      	str	r3, [r7, #28]
}
 8012f26:	bf00      	nop
 8012f28:	e7fe      	b.n	8012f28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012f2a:	23bc      	movs	r3, #188	; 0xbc
 8012f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	2bbc      	cmp	r3, #188	; 0xbc
 8012f32:	d00a      	beq.n	8012f4a <xTaskCreateStatic+0x66>
	__asm volatile
 8012f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f38:	f383 8811 	msr	BASEPRI, r3
 8012f3c:	f3bf 8f6f 	isb	sy
 8012f40:	f3bf 8f4f 	dsb	sy
 8012f44:	61bb      	str	r3, [r7, #24]
}
 8012f46:	bf00      	nop
 8012f48:	e7fe      	b.n	8012f48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012f4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d01e      	beq.n	8012f90 <xTaskCreateStatic+0xac>
 8012f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d01b      	beq.n	8012f90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f64:	2202      	movs	r2, #2
 8012f66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	9303      	str	r3, [sp, #12]
 8012f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f70:	9302      	str	r3, [sp, #8]
 8012f72:	f107 0314 	add.w	r3, r7, #20
 8012f76:	9301      	str	r3, [sp, #4]
 8012f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7a:	9300      	str	r3, [sp, #0]
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	687a      	ldr	r2, [r7, #4]
 8012f80:	68b9      	ldr	r1, [r7, #8]
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	f000 f850 	bl	8013028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f8a:	f000 f8f3 	bl	8013174 <prvAddNewTaskToReadyList>
 8012f8e:	e001      	b.n	8012f94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012f90:	2300      	movs	r3, #0
 8012f92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012f94:	697b      	ldr	r3, [r7, #20]
	}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3728      	adds	r7, #40	; 0x28
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}

08012f9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012f9e:	b580      	push	{r7, lr}
 8012fa0:	b08c      	sub	sp, #48	; 0x30
 8012fa2:	af04      	add	r7, sp, #16
 8012fa4:	60f8      	str	r0, [r7, #12]
 8012fa6:	60b9      	str	r1, [r7, #8]
 8012fa8:	603b      	str	r3, [r7, #0]
 8012faa:	4613      	mov	r3, r2
 8012fac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012fae:	88fb      	ldrh	r3, [r7, #6]
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	f001 fee8 	bl	8014d88 <pvPortMalloc>
 8012fb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00e      	beq.n	8012fde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012fc0:	20bc      	movs	r0, #188	; 0xbc
 8012fc2:	f001 fee1 	bl	8014d88 <pvPortMalloc>
 8012fc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012fc8:	69fb      	ldr	r3, [r7, #28]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d003      	beq.n	8012fd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012fce:	69fb      	ldr	r3, [r7, #28]
 8012fd0:	697a      	ldr	r2, [r7, #20]
 8012fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8012fd4:	e005      	b.n	8012fe2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012fd6:	6978      	ldr	r0, [r7, #20]
 8012fd8:	f001 ffa2 	bl	8014f20 <vPortFree>
 8012fdc:	e001      	b.n	8012fe2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012fe2:	69fb      	ldr	r3, [r7, #28]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d017      	beq.n	8013018 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012fe8:	69fb      	ldr	r3, [r7, #28]
 8012fea:	2200      	movs	r2, #0
 8012fec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012ff0:	88fa      	ldrh	r2, [r7, #6]
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	9303      	str	r3, [sp, #12]
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	9302      	str	r3, [sp, #8]
 8012ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffc:	9301      	str	r3, [sp, #4]
 8012ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013000:	9300      	str	r3, [sp, #0]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	68b9      	ldr	r1, [r7, #8]
 8013006:	68f8      	ldr	r0, [r7, #12]
 8013008:	f000 f80e 	bl	8013028 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801300c:	69f8      	ldr	r0, [r7, #28]
 801300e:	f000 f8b1 	bl	8013174 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013012:	2301      	movs	r3, #1
 8013014:	61bb      	str	r3, [r7, #24]
 8013016:	e002      	b.n	801301e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013018:	f04f 33ff 	mov.w	r3, #4294967295
 801301c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801301e:	69bb      	ldr	r3, [r7, #24]
	}
 8013020:	4618      	mov	r0, r3
 8013022:	3720      	adds	r7, #32
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b088      	sub	sp, #32
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
 8013034:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013038:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	461a      	mov	r2, r3
 8013040:	21a5      	movs	r1, #165	; 0xa5
 8013042:	f002 ff81 	bl	8015f48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013050:	3b01      	subs	r3, #1
 8013052:	009b      	lsls	r3, r3, #2
 8013054:	4413      	add	r3, r2
 8013056:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013058:	69bb      	ldr	r3, [r7, #24]
 801305a:	f023 0307 	bic.w	r3, r3, #7
 801305e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013060:	69bb      	ldr	r3, [r7, #24]
 8013062:	f003 0307 	and.w	r3, r3, #7
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00a      	beq.n	8013080 <prvInitialiseNewTask+0x58>
	__asm volatile
 801306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306e:	f383 8811 	msr	BASEPRI, r3
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	f3bf 8f4f 	dsb	sy
 801307a:	617b      	str	r3, [r7, #20]
}
 801307c:	bf00      	nop
 801307e:	e7fe      	b.n	801307e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d01f      	beq.n	80130c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013086:	2300      	movs	r3, #0
 8013088:	61fb      	str	r3, [r7, #28]
 801308a:	e012      	b.n	80130b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801308c:	68ba      	ldr	r2, [r7, #8]
 801308e:	69fb      	ldr	r3, [r7, #28]
 8013090:	4413      	add	r3, r2
 8013092:	7819      	ldrb	r1, [r3, #0]
 8013094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	4413      	add	r3, r2
 801309a:	3334      	adds	r3, #52	; 0x34
 801309c:	460a      	mov	r2, r1
 801309e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80130a0:	68ba      	ldr	r2, [r7, #8]
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	4413      	add	r3, r2
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d006      	beq.n	80130ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	3301      	adds	r3, #1
 80130b0:	61fb      	str	r3, [r7, #28]
 80130b2:	69fb      	ldr	r3, [r7, #28]
 80130b4:	2b0f      	cmp	r3, #15
 80130b6:	d9e9      	bls.n	801308c <prvInitialiseNewTask+0x64>
 80130b8:	e000      	b.n	80130bc <prvInitialiseNewTask+0x94>
			{
				break;
 80130ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80130bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130be:	2200      	movs	r2, #0
 80130c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80130c4:	e003      	b.n	80130ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80130c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c8:	2200      	movs	r2, #0
 80130ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80130ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d0:	2b37      	cmp	r3, #55	; 0x37
 80130d2:	d901      	bls.n	80130d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80130d4:	2337      	movs	r3, #55	; 0x37
 80130d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80130d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80130de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80130e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e6:	2200      	movs	r2, #0
 80130e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80130ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ec:	3304      	adds	r3, #4
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7fe fe56 	bl	8011da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80130f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f6:	3318      	adds	r3, #24
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fe fe51 	bl	8011da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80130fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013102:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013106:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801310a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013112:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013116:	2200      	movs	r2, #0
 8013118:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311e:	2200      	movs	r2, #0
 8013120:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013126:	3354      	adds	r3, #84	; 0x54
 8013128:	2260      	movs	r2, #96	; 0x60
 801312a:	2100      	movs	r1, #0
 801312c:	4618      	mov	r0, r3
 801312e:	f002 ff0b 	bl	8015f48 <memset>
 8013132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013134:	4a0c      	ldr	r2, [pc, #48]	; (8013168 <prvInitialiseNewTask+0x140>)
 8013136:	659a      	str	r2, [r3, #88]	; 0x58
 8013138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313a:	4a0c      	ldr	r2, [pc, #48]	; (801316c <prvInitialiseNewTask+0x144>)
 801313c:	65da      	str	r2, [r3, #92]	; 0x5c
 801313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013140:	4a0b      	ldr	r2, [pc, #44]	; (8013170 <prvInitialiseNewTask+0x148>)
 8013142:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013144:	683a      	ldr	r2, [r7, #0]
 8013146:	68f9      	ldr	r1, [r7, #12]
 8013148:	69b8      	ldr	r0, [r7, #24]
 801314a:	f001 fbcf 	bl	80148ec <pxPortInitialiseStack>
 801314e:	4602      	mov	r2, r0
 8013150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013152:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013156:	2b00      	cmp	r3, #0
 8013158:	d002      	beq.n	8013160 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801315e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013160:	bf00      	nop
 8013162:	3720      	adds	r7, #32
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	08019838 	.word	0x08019838
 801316c:	08019858 	.word	0x08019858
 8013170:	08019818 	.word	0x08019818

08013174 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
 801317a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801317c:	f001 fce2 	bl	8014b44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013180:	4b2d      	ldr	r3, [pc, #180]	; (8013238 <prvAddNewTaskToReadyList+0xc4>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	3301      	adds	r3, #1
 8013186:	4a2c      	ldr	r2, [pc, #176]	; (8013238 <prvAddNewTaskToReadyList+0xc4>)
 8013188:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801318a:	4b2c      	ldr	r3, [pc, #176]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d109      	bne.n	80131a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013192:	4a2a      	ldr	r2, [pc, #168]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013198:	4b27      	ldr	r3, [pc, #156]	; (8013238 <prvAddNewTaskToReadyList+0xc4>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2b01      	cmp	r3, #1
 801319e:	d110      	bne.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80131a0:	f000 fcc4 	bl	8013b2c <prvInitialiseTaskLists>
 80131a4:	e00d      	b.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80131a6:	4b26      	ldr	r3, [pc, #152]	; (8013240 <prvAddNewTaskToReadyList+0xcc>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d109      	bne.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80131ae:	4b23      	ldr	r3, [pc, #140]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d802      	bhi.n	80131c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80131bc:	4a1f      	ldr	r2, [pc, #124]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80131c2:	4b20      	ldr	r3, [pc, #128]	; (8013244 <prvAddNewTaskToReadyList+0xd0>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	3301      	adds	r3, #1
 80131c8:	4a1e      	ldr	r2, [pc, #120]	; (8013244 <prvAddNewTaskToReadyList+0xd0>)
 80131ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80131cc:	4b1d      	ldr	r3, [pc, #116]	; (8013244 <prvAddNewTaskToReadyList+0xd0>)
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131d8:	4b1b      	ldr	r3, [pc, #108]	; (8013248 <prvAddNewTaskToReadyList+0xd4>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d903      	bls.n	80131e8 <prvAddNewTaskToReadyList+0x74>
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e4:	4a18      	ldr	r2, [pc, #96]	; (8013248 <prvAddNewTaskToReadyList+0xd4>)
 80131e6:	6013      	str	r3, [r2, #0]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131ec:	4613      	mov	r3, r2
 80131ee:	009b      	lsls	r3, r3, #2
 80131f0:	4413      	add	r3, r2
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	4a15      	ldr	r2, [pc, #84]	; (801324c <prvAddNewTaskToReadyList+0xd8>)
 80131f6:	441a      	add	r2, r3
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	3304      	adds	r3, #4
 80131fc:	4619      	mov	r1, r3
 80131fe:	4610      	mov	r0, r2
 8013200:	f7fe fddb 	bl	8011dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013204:	f001 fcce 	bl	8014ba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013208:	4b0d      	ldr	r3, [pc, #52]	; (8013240 <prvAddNewTaskToReadyList+0xcc>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00e      	beq.n	801322e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013210:	4b0a      	ldr	r3, [pc, #40]	; (801323c <prvAddNewTaskToReadyList+0xc8>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321a:	429a      	cmp	r2, r3
 801321c:	d207      	bcs.n	801322e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801321e:	4b0c      	ldr	r3, [pc, #48]	; (8013250 <prvAddNewTaskToReadyList+0xdc>)
 8013220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013224:	601a      	str	r2, [r3, #0]
 8013226:	f3bf 8f4f 	dsb	sy
 801322a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801322e:	bf00      	nop
 8013230:	3708      	adds	r7, #8
 8013232:	46bd      	mov	sp, r7
 8013234:	bd80      	pop	{r7, pc}
 8013236:	bf00      	nop
 8013238:	200016c0 	.word	0x200016c0
 801323c:	200011ec 	.word	0x200011ec
 8013240:	200016cc 	.word	0x200016cc
 8013244:	200016dc 	.word	0x200016dc
 8013248:	200016c8 	.word	0x200016c8
 801324c:	200011f0 	.word	0x200011f0
 8013250:	e000ed04 	.word	0xe000ed04

08013254 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801325c:	2300      	movs	r3, #0
 801325e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d017      	beq.n	8013296 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013266:	4b13      	ldr	r3, [pc, #76]	; (80132b4 <vTaskDelay+0x60>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d00a      	beq.n	8013284 <vTaskDelay+0x30>
	__asm volatile
 801326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013272:	f383 8811 	msr	BASEPRI, r3
 8013276:	f3bf 8f6f 	isb	sy
 801327a:	f3bf 8f4f 	dsb	sy
 801327e:	60bb      	str	r3, [r7, #8]
}
 8013280:	bf00      	nop
 8013282:	e7fe      	b.n	8013282 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013284:	f000 f88a 	bl	801339c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013288:	2100      	movs	r1, #0
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 feb2 	bl	8013ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013290:	f000 f892 	bl	80133b8 <xTaskResumeAll>
 8013294:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d107      	bne.n	80132ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801329c:	4b06      	ldr	r3, [pc, #24]	; (80132b8 <vTaskDelay+0x64>)
 801329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132a2:	601a      	str	r2, [r3, #0]
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80132ac:	bf00      	nop
 80132ae:	3710      	adds	r7, #16
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}
 80132b4:	200016e8 	.word	0x200016e8
 80132b8:	e000ed04 	.word	0xe000ed04

080132bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b08a      	sub	sp, #40	; 0x28
 80132c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80132c2:	2300      	movs	r3, #0
 80132c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80132c6:	2300      	movs	r3, #0
 80132c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80132ca:	463a      	mov	r2, r7
 80132cc:	1d39      	adds	r1, r7, #4
 80132ce:	f107 0308 	add.w	r3, r7, #8
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fe fb22 	bl	801191c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80132d8:	6839      	ldr	r1, [r7, #0]
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	68ba      	ldr	r2, [r7, #8]
 80132de:	9202      	str	r2, [sp, #8]
 80132e0:	9301      	str	r3, [sp, #4]
 80132e2:	2300      	movs	r3, #0
 80132e4:	9300      	str	r3, [sp, #0]
 80132e6:	2300      	movs	r3, #0
 80132e8:	460a      	mov	r2, r1
 80132ea:	4924      	ldr	r1, [pc, #144]	; (801337c <vTaskStartScheduler+0xc0>)
 80132ec:	4824      	ldr	r0, [pc, #144]	; (8013380 <vTaskStartScheduler+0xc4>)
 80132ee:	f7ff fdf9 	bl	8012ee4 <xTaskCreateStatic>
 80132f2:	4603      	mov	r3, r0
 80132f4:	4a23      	ldr	r2, [pc, #140]	; (8013384 <vTaskStartScheduler+0xc8>)
 80132f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80132f8:	4b22      	ldr	r3, [pc, #136]	; (8013384 <vTaskStartScheduler+0xc8>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d002      	beq.n	8013306 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013300:	2301      	movs	r3, #1
 8013302:	617b      	str	r3, [r7, #20]
 8013304:	e001      	b.n	801330a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013306:	2300      	movs	r3, #0
 8013308:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d102      	bne.n	8013316 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013310:	f000 fec4 	bl	801409c <xTimerCreateTimerTask>
 8013314:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	2b01      	cmp	r3, #1
 801331a:	d11b      	bne.n	8013354 <vTaskStartScheduler+0x98>
	__asm volatile
 801331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013320:	f383 8811 	msr	BASEPRI, r3
 8013324:	f3bf 8f6f 	isb	sy
 8013328:	f3bf 8f4f 	dsb	sy
 801332c:	613b      	str	r3, [r7, #16]
}
 801332e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013330:	4b15      	ldr	r3, [pc, #84]	; (8013388 <vTaskStartScheduler+0xcc>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	3354      	adds	r3, #84	; 0x54
 8013336:	4a15      	ldr	r2, [pc, #84]	; (801338c <vTaskStartScheduler+0xd0>)
 8013338:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801333a:	4b15      	ldr	r3, [pc, #84]	; (8013390 <vTaskStartScheduler+0xd4>)
 801333c:	f04f 32ff 	mov.w	r2, #4294967295
 8013340:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013342:	4b14      	ldr	r3, [pc, #80]	; (8013394 <vTaskStartScheduler+0xd8>)
 8013344:	2201      	movs	r2, #1
 8013346:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013348:	4b13      	ldr	r3, [pc, #76]	; (8013398 <vTaskStartScheduler+0xdc>)
 801334a:	2200      	movs	r2, #0
 801334c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801334e:	f001 fb57 	bl	8014a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013352:	e00e      	b.n	8013372 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335a:	d10a      	bne.n	8013372 <vTaskStartScheduler+0xb6>
	__asm volatile
 801335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013360:	f383 8811 	msr	BASEPRI, r3
 8013364:	f3bf 8f6f 	isb	sy
 8013368:	f3bf 8f4f 	dsb	sy
 801336c:	60fb      	str	r3, [r7, #12]
}
 801336e:	bf00      	nop
 8013370:	e7fe      	b.n	8013370 <vTaskStartScheduler+0xb4>
}
 8013372:	bf00      	nop
 8013374:	3718      	adds	r7, #24
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	0801968c 	.word	0x0801968c
 8013380:	08013afd 	.word	0x08013afd
 8013384:	200016e4 	.word	0x200016e4
 8013388:	200011ec 	.word	0x200011ec
 801338c:	20000140 	.word	0x20000140
 8013390:	200016e0 	.word	0x200016e0
 8013394:	200016cc 	.word	0x200016cc
 8013398:	200016c4 	.word	0x200016c4

0801339c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801339c:	b480      	push	{r7}
 801339e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80133a0:	4b04      	ldr	r3, [pc, #16]	; (80133b4 <vTaskSuspendAll+0x18>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	3301      	adds	r3, #1
 80133a6:	4a03      	ldr	r2, [pc, #12]	; (80133b4 <vTaskSuspendAll+0x18>)
 80133a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80133aa:	bf00      	nop
 80133ac:	46bd      	mov	sp, r7
 80133ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b2:	4770      	bx	lr
 80133b4:	200016e8 	.word	0x200016e8

080133b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80133be:	2300      	movs	r3, #0
 80133c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80133c2:	2300      	movs	r3, #0
 80133c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80133c6:	4b42      	ldr	r3, [pc, #264]	; (80134d0 <xTaskResumeAll+0x118>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d10a      	bne.n	80133e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80133ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d2:	f383 8811 	msr	BASEPRI, r3
 80133d6:	f3bf 8f6f 	isb	sy
 80133da:	f3bf 8f4f 	dsb	sy
 80133de:	603b      	str	r3, [r7, #0]
}
 80133e0:	bf00      	nop
 80133e2:	e7fe      	b.n	80133e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80133e4:	f001 fbae 	bl	8014b44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80133e8:	4b39      	ldr	r3, [pc, #228]	; (80134d0 <xTaskResumeAll+0x118>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	3b01      	subs	r3, #1
 80133ee:	4a38      	ldr	r2, [pc, #224]	; (80134d0 <xTaskResumeAll+0x118>)
 80133f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133f2:	4b37      	ldr	r3, [pc, #220]	; (80134d0 <xTaskResumeAll+0x118>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d162      	bne.n	80134c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80133fa:	4b36      	ldr	r3, [pc, #216]	; (80134d4 <xTaskResumeAll+0x11c>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d05e      	beq.n	80134c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013402:	e02f      	b.n	8013464 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013404:	4b34      	ldr	r3, [pc, #208]	; (80134d8 <xTaskResumeAll+0x120>)
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	68db      	ldr	r3, [r3, #12]
 801340a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	3318      	adds	r3, #24
 8013410:	4618      	mov	r0, r3
 8013412:	f7fe fd2f 	bl	8011e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	3304      	adds	r3, #4
 801341a:	4618      	mov	r0, r3
 801341c:	f7fe fd2a 	bl	8011e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013424:	4b2d      	ldr	r3, [pc, #180]	; (80134dc <xTaskResumeAll+0x124>)
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	429a      	cmp	r2, r3
 801342a:	d903      	bls.n	8013434 <xTaskResumeAll+0x7c>
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013430:	4a2a      	ldr	r2, [pc, #168]	; (80134dc <xTaskResumeAll+0x124>)
 8013432:	6013      	str	r3, [r2, #0]
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013438:	4613      	mov	r3, r2
 801343a:	009b      	lsls	r3, r3, #2
 801343c:	4413      	add	r3, r2
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	4a27      	ldr	r2, [pc, #156]	; (80134e0 <xTaskResumeAll+0x128>)
 8013442:	441a      	add	r2, r3
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	3304      	adds	r3, #4
 8013448:	4619      	mov	r1, r3
 801344a:	4610      	mov	r0, r2
 801344c:	f7fe fcb5 	bl	8011dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013454:	4b23      	ldr	r3, [pc, #140]	; (80134e4 <xTaskResumeAll+0x12c>)
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801345a:	429a      	cmp	r2, r3
 801345c:	d302      	bcc.n	8013464 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801345e:	4b22      	ldr	r3, [pc, #136]	; (80134e8 <xTaskResumeAll+0x130>)
 8013460:	2201      	movs	r2, #1
 8013462:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013464:	4b1c      	ldr	r3, [pc, #112]	; (80134d8 <xTaskResumeAll+0x120>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d1cb      	bne.n	8013404 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d001      	beq.n	8013476 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013472:	f000 fbfd 	bl	8013c70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013476:	4b1d      	ldr	r3, [pc, #116]	; (80134ec <xTaskResumeAll+0x134>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d010      	beq.n	80134a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013482:	f000 f847 	bl	8013514 <xTaskIncrementTick>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d002      	beq.n	8013492 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801348c:	4b16      	ldr	r3, [pc, #88]	; (80134e8 <xTaskResumeAll+0x130>)
 801348e:	2201      	movs	r2, #1
 8013490:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	3b01      	subs	r3, #1
 8013496:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d1f1      	bne.n	8013482 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801349e:	4b13      	ldr	r3, [pc, #76]	; (80134ec <xTaskResumeAll+0x134>)
 80134a0:	2200      	movs	r2, #0
 80134a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80134a4:	4b10      	ldr	r3, [pc, #64]	; (80134e8 <xTaskResumeAll+0x130>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d009      	beq.n	80134c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80134ac:	2301      	movs	r3, #1
 80134ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80134b0:	4b0f      	ldr	r3, [pc, #60]	; (80134f0 <xTaskResumeAll+0x138>)
 80134b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134b6:	601a      	str	r2, [r3, #0]
 80134b8:	f3bf 8f4f 	dsb	sy
 80134bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80134c0:	f001 fb70 	bl	8014ba4 <vPortExitCritical>

	return xAlreadyYielded;
 80134c4:	68bb      	ldr	r3, [r7, #8]
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3710      	adds	r7, #16
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	200016e8 	.word	0x200016e8
 80134d4:	200016c0 	.word	0x200016c0
 80134d8:	20001680 	.word	0x20001680
 80134dc:	200016c8 	.word	0x200016c8
 80134e0:	200011f0 	.word	0x200011f0
 80134e4:	200011ec 	.word	0x200011ec
 80134e8:	200016d4 	.word	0x200016d4
 80134ec:	200016d0 	.word	0x200016d0
 80134f0:	e000ed04 	.word	0xe000ed04

080134f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80134f4:	b480      	push	{r7}
 80134f6:	b083      	sub	sp, #12
 80134f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80134fa:	4b05      	ldr	r3, [pc, #20]	; (8013510 <xTaskGetTickCount+0x1c>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013500:	687b      	ldr	r3, [r7, #4]
}
 8013502:	4618      	mov	r0, r3
 8013504:	370c      	adds	r7, #12
 8013506:	46bd      	mov	sp, r7
 8013508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	200016c4 	.word	0x200016c4

08013514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b086      	sub	sp, #24
 8013518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801351a:	2300      	movs	r3, #0
 801351c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801351e:	4b4f      	ldr	r3, [pc, #316]	; (801365c <xTaskIncrementTick+0x148>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	f040 808f 	bne.w	8013646 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013528:	4b4d      	ldr	r3, [pc, #308]	; (8013660 <xTaskIncrementTick+0x14c>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	3301      	adds	r3, #1
 801352e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013530:	4a4b      	ldr	r2, [pc, #300]	; (8013660 <xTaskIncrementTick+0x14c>)
 8013532:	693b      	ldr	r3, [r7, #16]
 8013534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d120      	bne.n	801357e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801353c:	4b49      	ldr	r3, [pc, #292]	; (8013664 <xTaskIncrementTick+0x150>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d00a      	beq.n	801355c <xTaskIncrementTick+0x48>
	__asm volatile
 8013546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801354a:	f383 8811 	msr	BASEPRI, r3
 801354e:	f3bf 8f6f 	isb	sy
 8013552:	f3bf 8f4f 	dsb	sy
 8013556:	603b      	str	r3, [r7, #0]
}
 8013558:	bf00      	nop
 801355a:	e7fe      	b.n	801355a <xTaskIncrementTick+0x46>
 801355c:	4b41      	ldr	r3, [pc, #260]	; (8013664 <xTaskIncrementTick+0x150>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	60fb      	str	r3, [r7, #12]
 8013562:	4b41      	ldr	r3, [pc, #260]	; (8013668 <xTaskIncrementTick+0x154>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4a3f      	ldr	r2, [pc, #252]	; (8013664 <xTaskIncrementTick+0x150>)
 8013568:	6013      	str	r3, [r2, #0]
 801356a:	4a3f      	ldr	r2, [pc, #252]	; (8013668 <xTaskIncrementTick+0x154>)
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6013      	str	r3, [r2, #0]
 8013570:	4b3e      	ldr	r3, [pc, #248]	; (801366c <xTaskIncrementTick+0x158>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	3301      	adds	r3, #1
 8013576:	4a3d      	ldr	r2, [pc, #244]	; (801366c <xTaskIncrementTick+0x158>)
 8013578:	6013      	str	r3, [r2, #0]
 801357a:	f000 fb79 	bl	8013c70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801357e:	4b3c      	ldr	r3, [pc, #240]	; (8013670 <xTaskIncrementTick+0x15c>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	693a      	ldr	r2, [r7, #16]
 8013584:	429a      	cmp	r2, r3
 8013586:	d349      	bcc.n	801361c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013588:	4b36      	ldr	r3, [pc, #216]	; (8013664 <xTaskIncrementTick+0x150>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d104      	bne.n	801359c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013592:	4b37      	ldr	r3, [pc, #220]	; (8013670 <xTaskIncrementTick+0x15c>)
 8013594:	f04f 32ff 	mov.w	r2, #4294967295
 8013598:	601a      	str	r2, [r3, #0]
					break;
 801359a:	e03f      	b.n	801361c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801359c:	4b31      	ldr	r3, [pc, #196]	; (8013664 <xTaskIncrementTick+0x150>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80135ac:	693a      	ldr	r2, [r7, #16]
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d203      	bcs.n	80135bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80135b4:	4a2e      	ldr	r2, [pc, #184]	; (8013670 <xTaskIncrementTick+0x15c>)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80135ba:	e02f      	b.n	801361c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	3304      	adds	r3, #4
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fe fc57 	bl	8011e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d004      	beq.n	80135d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	3318      	adds	r3, #24
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7fe fc4e 	bl	8011e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80135d8:	68bb      	ldr	r3, [r7, #8]
 80135da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135dc:	4b25      	ldr	r3, [pc, #148]	; (8013674 <xTaskIncrementTick+0x160>)
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d903      	bls.n	80135ec <xTaskIncrementTick+0xd8>
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e8:	4a22      	ldr	r2, [pc, #136]	; (8013674 <xTaskIncrementTick+0x160>)
 80135ea:	6013      	str	r3, [r2, #0]
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135f0:	4613      	mov	r3, r2
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	4413      	add	r3, r2
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	4a1f      	ldr	r2, [pc, #124]	; (8013678 <xTaskIncrementTick+0x164>)
 80135fa:	441a      	add	r2, r3
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	3304      	adds	r3, #4
 8013600:	4619      	mov	r1, r3
 8013602:	4610      	mov	r0, r2
 8013604:	f7fe fbd9 	bl	8011dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801360c:	4b1b      	ldr	r3, [pc, #108]	; (801367c <xTaskIncrementTick+0x168>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013612:	429a      	cmp	r2, r3
 8013614:	d3b8      	bcc.n	8013588 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013616:	2301      	movs	r3, #1
 8013618:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801361a:	e7b5      	b.n	8013588 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801361c:	4b17      	ldr	r3, [pc, #92]	; (801367c <xTaskIncrementTick+0x168>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013622:	4915      	ldr	r1, [pc, #84]	; (8013678 <xTaskIncrementTick+0x164>)
 8013624:	4613      	mov	r3, r2
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	4413      	add	r3, r2
 801362a:	009b      	lsls	r3, r3, #2
 801362c:	440b      	add	r3, r1
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2b01      	cmp	r3, #1
 8013632:	d901      	bls.n	8013638 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013634:	2301      	movs	r3, #1
 8013636:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013638:	4b11      	ldr	r3, [pc, #68]	; (8013680 <xTaskIncrementTick+0x16c>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d007      	beq.n	8013650 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013640:	2301      	movs	r3, #1
 8013642:	617b      	str	r3, [r7, #20]
 8013644:	e004      	b.n	8013650 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013646:	4b0f      	ldr	r3, [pc, #60]	; (8013684 <xTaskIncrementTick+0x170>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	3301      	adds	r3, #1
 801364c:	4a0d      	ldr	r2, [pc, #52]	; (8013684 <xTaskIncrementTick+0x170>)
 801364e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013650:	697b      	ldr	r3, [r7, #20]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3718      	adds	r7, #24
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	200016e8 	.word	0x200016e8
 8013660:	200016c4 	.word	0x200016c4
 8013664:	20001678 	.word	0x20001678
 8013668:	2000167c 	.word	0x2000167c
 801366c:	200016d8 	.word	0x200016d8
 8013670:	200016e0 	.word	0x200016e0
 8013674:	200016c8 	.word	0x200016c8
 8013678:	200011f0 	.word	0x200011f0
 801367c:	200011ec 	.word	0x200011ec
 8013680:	200016d4 	.word	0x200016d4
 8013684:	200016d0 	.word	0x200016d0

08013688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013688:	b480      	push	{r7}
 801368a:	b085      	sub	sp, #20
 801368c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801368e:	4b2a      	ldr	r3, [pc, #168]	; (8013738 <vTaskSwitchContext+0xb0>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d003      	beq.n	801369e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013696:	4b29      	ldr	r3, [pc, #164]	; (801373c <vTaskSwitchContext+0xb4>)
 8013698:	2201      	movs	r2, #1
 801369a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801369c:	e046      	b.n	801372c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801369e:	4b27      	ldr	r3, [pc, #156]	; (801373c <vTaskSwitchContext+0xb4>)
 80136a0:	2200      	movs	r2, #0
 80136a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136a4:	4b26      	ldr	r3, [pc, #152]	; (8013740 <vTaskSwitchContext+0xb8>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	60fb      	str	r3, [r7, #12]
 80136aa:	e010      	b.n	80136ce <vTaskSwitchContext+0x46>
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d10a      	bne.n	80136c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80136b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136b6:	f383 8811 	msr	BASEPRI, r3
 80136ba:	f3bf 8f6f 	isb	sy
 80136be:	f3bf 8f4f 	dsb	sy
 80136c2:	607b      	str	r3, [r7, #4]
}
 80136c4:	bf00      	nop
 80136c6:	e7fe      	b.n	80136c6 <vTaskSwitchContext+0x3e>
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	3b01      	subs	r3, #1
 80136cc:	60fb      	str	r3, [r7, #12]
 80136ce:	491d      	ldr	r1, [pc, #116]	; (8013744 <vTaskSwitchContext+0xbc>)
 80136d0:	68fa      	ldr	r2, [r7, #12]
 80136d2:	4613      	mov	r3, r2
 80136d4:	009b      	lsls	r3, r3, #2
 80136d6:	4413      	add	r3, r2
 80136d8:	009b      	lsls	r3, r3, #2
 80136da:	440b      	add	r3, r1
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d0e4      	beq.n	80136ac <vTaskSwitchContext+0x24>
 80136e2:	68fa      	ldr	r2, [r7, #12]
 80136e4:	4613      	mov	r3, r2
 80136e6:	009b      	lsls	r3, r3, #2
 80136e8:	4413      	add	r3, r2
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	4a15      	ldr	r2, [pc, #84]	; (8013744 <vTaskSwitchContext+0xbc>)
 80136ee:	4413      	add	r3, r2
 80136f0:	60bb      	str	r3, [r7, #8]
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	685a      	ldr	r2, [r3, #4]
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	605a      	str	r2, [r3, #4]
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	685a      	ldr	r2, [r3, #4]
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	3308      	adds	r3, #8
 8013704:	429a      	cmp	r2, r3
 8013706:	d104      	bne.n	8013712 <vTaskSwitchContext+0x8a>
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	685a      	ldr	r2, [r3, #4]
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	605a      	str	r2, [r3, #4]
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	4a0b      	ldr	r2, [pc, #44]	; (8013748 <vTaskSwitchContext+0xc0>)
 801371a:	6013      	str	r3, [r2, #0]
 801371c:	4a08      	ldr	r2, [pc, #32]	; (8013740 <vTaskSwitchContext+0xb8>)
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013722:	4b09      	ldr	r3, [pc, #36]	; (8013748 <vTaskSwitchContext+0xc0>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	3354      	adds	r3, #84	; 0x54
 8013728:	4a08      	ldr	r2, [pc, #32]	; (801374c <vTaskSwitchContext+0xc4>)
 801372a:	6013      	str	r3, [r2, #0]
}
 801372c:	bf00      	nop
 801372e:	3714      	adds	r7, #20
 8013730:	46bd      	mov	sp, r7
 8013732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013736:	4770      	bx	lr
 8013738:	200016e8 	.word	0x200016e8
 801373c:	200016d4 	.word	0x200016d4
 8013740:	200016c8 	.word	0x200016c8
 8013744:	200011f0 	.word	0x200011f0
 8013748:	200011ec 	.word	0x200011ec
 801374c:	20000140 	.word	0x20000140

08013750 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10a      	bne.n	8013776 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013764:	f383 8811 	msr	BASEPRI, r3
 8013768:	f3bf 8f6f 	isb	sy
 801376c:	f3bf 8f4f 	dsb	sy
 8013770:	60fb      	str	r3, [r7, #12]
}
 8013772:	bf00      	nop
 8013774:	e7fe      	b.n	8013774 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013776:	4b07      	ldr	r3, [pc, #28]	; (8013794 <vTaskPlaceOnEventList+0x44>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	3318      	adds	r3, #24
 801377c:	4619      	mov	r1, r3
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	f7fe fb3f 	bl	8011e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013784:	2101      	movs	r1, #1
 8013786:	6838      	ldr	r0, [r7, #0]
 8013788:	f000 fc34 	bl	8013ff4 <prvAddCurrentTaskToDelayedList>
}
 801378c:	bf00      	nop
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}
 8013794:	200011ec 	.word	0x200011ec

08013798 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b086      	sub	sp, #24
 801379c:	af00      	add	r7, sp, #0
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d10a      	bne.n	80137c0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80137aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ae:	f383 8811 	msr	BASEPRI, r3
 80137b2:	f3bf 8f6f 	isb	sy
 80137b6:	f3bf 8f4f 	dsb	sy
 80137ba:	617b      	str	r3, [r7, #20]
}
 80137bc:	bf00      	nop
 80137be:	e7fe      	b.n	80137be <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80137c0:	4b11      	ldr	r3, [pc, #68]	; (8013808 <vTaskPlaceOnUnorderedEventList+0x70>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10a      	bne.n	80137de <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80137c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137cc:	f383 8811 	msr	BASEPRI, r3
 80137d0:	f3bf 8f6f 	isb	sy
 80137d4:	f3bf 8f4f 	dsb	sy
 80137d8:	613b      	str	r3, [r7, #16]
}
 80137da:	bf00      	nop
 80137dc:	e7fe      	b.n	80137dc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80137de:	4b0b      	ldr	r3, [pc, #44]	; (801380c <vTaskPlaceOnUnorderedEventList+0x74>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	68ba      	ldr	r2, [r7, #8]
 80137e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80137e8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80137ea:	4b08      	ldr	r3, [pc, #32]	; (801380c <vTaskPlaceOnUnorderedEventList+0x74>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	3318      	adds	r3, #24
 80137f0:	4619      	mov	r1, r3
 80137f2:	68f8      	ldr	r0, [r7, #12]
 80137f4:	f7fe fae1 	bl	8011dba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80137f8:	2101      	movs	r1, #1
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f000 fbfa 	bl	8013ff4 <prvAddCurrentTaskToDelayedList>
}
 8013800:	bf00      	nop
 8013802:	3718      	adds	r7, #24
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	200016e8 	.word	0x200016e8
 801380c:	200011ec 	.word	0x200011ec

08013810 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013810:	b580      	push	{r7, lr}
 8013812:	b086      	sub	sp, #24
 8013814:	af00      	add	r7, sp, #0
 8013816:	60f8      	str	r0, [r7, #12]
 8013818:	60b9      	str	r1, [r7, #8]
 801381a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d10a      	bne.n	8013838 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013826:	f383 8811 	msr	BASEPRI, r3
 801382a:	f3bf 8f6f 	isb	sy
 801382e:	f3bf 8f4f 	dsb	sy
 8013832:	617b      	str	r3, [r7, #20]
}
 8013834:	bf00      	nop
 8013836:	e7fe      	b.n	8013836 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013838:	4b0a      	ldr	r3, [pc, #40]	; (8013864 <vTaskPlaceOnEventListRestricted+0x54>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	3318      	adds	r3, #24
 801383e:	4619      	mov	r1, r3
 8013840:	68f8      	ldr	r0, [r7, #12]
 8013842:	f7fe faba 	bl	8011dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d002      	beq.n	8013852 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801384c:	f04f 33ff 	mov.w	r3, #4294967295
 8013850:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013852:	6879      	ldr	r1, [r7, #4]
 8013854:	68b8      	ldr	r0, [r7, #8]
 8013856:	f000 fbcd 	bl	8013ff4 <prvAddCurrentTaskToDelayedList>
	}
 801385a:	bf00      	nop
 801385c:	3718      	adds	r7, #24
 801385e:	46bd      	mov	sp, r7
 8013860:	bd80      	pop	{r7, pc}
 8013862:	bf00      	nop
 8013864:	200011ec 	.word	0x200011ec

08013868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b086      	sub	sp, #24
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	68db      	ldr	r3, [r3, #12]
 8013874:	68db      	ldr	r3, [r3, #12]
 8013876:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d10a      	bne.n	8013894 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013882:	f383 8811 	msr	BASEPRI, r3
 8013886:	f3bf 8f6f 	isb	sy
 801388a:	f3bf 8f4f 	dsb	sy
 801388e:	60fb      	str	r3, [r7, #12]
}
 8013890:	bf00      	nop
 8013892:	e7fe      	b.n	8013892 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	3318      	adds	r3, #24
 8013898:	4618      	mov	r0, r3
 801389a:	f7fe faeb 	bl	8011e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801389e:	4b1e      	ldr	r3, [pc, #120]	; (8013918 <xTaskRemoveFromEventList+0xb0>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d11d      	bne.n	80138e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	3304      	adds	r3, #4
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7fe fae2 	bl	8011e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138b4:	4b19      	ldr	r3, [pc, #100]	; (801391c <xTaskRemoveFromEventList+0xb4>)
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	429a      	cmp	r2, r3
 80138ba:	d903      	bls.n	80138c4 <xTaskRemoveFromEventList+0x5c>
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138c0:	4a16      	ldr	r2, [pc, #88]	; (801391c <xTaskRemoveFromEventList+0xb4>)
 80138c2:	6013      	str	r3, [r2, #0]
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138c8:	4613      	mov	r3, r2
 80138ca:	009b      	lsls	r3, r3, #2
 80138cc:	4413      	add	r3, r2
 80138ce:	009b      	lsls	r3, r3, #2
 80138d0:	4a13      	ldr	r2, [pc, #76]	; (8013920 <xTaskRemoveFromEventList+0xb8>)
 80138d2:	441a      	add	r2, r3
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	3304      	adds	r3, #4
 80138d8:	4619      	mov	r1, r3
 80138da:	4610      	mov	r0, r2
 80138dc:	f7fe fa6d 	bl	8011dba <vListInsertEnd>
 80138e0:	e005      	b.n	80138ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	3318      	adds	r3, #24
 80138e6:	4619      	mov	r1, r3
 80138e8:	480e      	ldr	r0, [pc, #56]	; (8013924 <xTaskRemoveFromEventList+0xbc>)
 80138ea:	f7fe fa66 	bl	8011dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138f2:	4b0d      	ldr	r3, [pc, #52]	; (8013928 <xTaskRemoveFromEventList+0xc0>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d905      	bls.n	8013908 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80138fc:	2301      	movs	r3, #1
 80138fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013900:	4b0a      	ldr	r3, [pc, #40]	; (801392c <xTaskRemoveFromEventList+0xc4>)
 8013902:	2201      	movs	r2, #1
 8013904:	601a      	str	r2, [r3, #0]
 8013906:	e001      	b.n	801390c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013908:	2300      	movs	r3, #0
 801390a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801390c:	697b      	ldr	r3, [r7, #20]
}
 801390e:	4618      	mov	r0, r3
 8013910:	3718      	adds	r7, #24
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	200016e8 	.word	0x200016e8
 801391c:	200016c8 	.word	0x200016c8
 8013920:	200011f0 	.word	0x200011f0
 8013924:	20001680 	.word	0x20001680
 8013928:	200011ec 	.word	0x200011ec
 801392c:	200016d4 	.word	0x200016d4

08013930 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b086      	sub	sp, #24
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801393a:	4b29      	ldr	r3, [pc, #164]	; (80139e0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d10a      	bne.n	8013958 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013946:	f383 8811 	msr	BASEPRI, r3
 801394a:	f3bf 8f6f 	isb	sy
 801394e:	f3bf 8f4f 	dsb	sy
 8013952:	613b      	str	r3, [r7, #16]
}
 8013954:	bf00      	nop
 8013956:	e7fe      	b.n	8013956 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68db      	ldr	r3, [r3, #12]
 8013966:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8013968:	697b      	ldr	r3, [r7, #20]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d10a      	bne.n	8013984 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013972:	f383 8811 	msr	BASEPRI, r3
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	f3bf 8f4f 	dsb	sy
 801397e:	60fb      	str	r3, [r7, #12]
}
 8013980:	bf00      	nop
 8013982:	e7fe      	b.n	8013982 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f7fe fa75 	bl	8011e74 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	3304      	adds	r3, #4
 801398e:	4618      	mov	r0, r3
 8013990:	f7fe fa70 	bl	8011e74 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013998:	4b12      	ldr	r3, [pc, #72]	; (80139e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	429a      	cmp	r2, r3
 801399e:	d903      	bls.n	80139a8 <vTaskRemoveFromUnorderedEventList+0x78>
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a4:	4a0f      	ldr	r2, [pc, #60]	; (80139e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ac:	4613      	mov	r3, r2
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	4413      	add	r3, r2
 80139b2:	009b      	lsls	r3, r3, #2
 80139b4:	4a0c      	ldr	r2, [pc, #48]	; (80139e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80139b6:	441a      	add	r2, r3
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	3304      	adds	r3, #4
 80139bc:	4619      	mov	r1, r3
 80139be:	4610      	mov	r0, r2
 80139c0:	f7fe f9fb 	bl	8011dba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139c8:	4b08      	ldr	r3, [pc, #32]	; (80139ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d902      	bls.n	80139d8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80139d2:	4b07      	ldr	r3, [pc, #28]	; (80139f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80139d4:	2201      	movs	r2, #1
 80139d6:	601a      	str	r2, [r3, #0]
	}
}
 80139d8:	bf00      	nop
 80139da:	3718      	adds	r7, #24
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	200016e8 	.word	0x200016e8
 80139e4:	200016c8 	.word	0x200016c8
 80139e8:	200011f0 	.word	0x200011f0
 80139ec:	200011ec 	.word	0x200011ec
 80139f0:	200016d4 	.word	0x200016d4

080139f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80139fc:	4b06      	ldr	r3, [pc, #24]	; (8013a18 <vTaskInternalSetTimeOutState+0x24>)
 80139fe:	681a      	ldr	r2, [r3, #0]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013a04:	4b05      	ldr	r3, [pc, #20]	; (8013a1c <vTaskInternalSetTimeOutState+0x28>)
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	605a      	str	r2, [r3, #4]
}
 8013a0c:	bf00      	nop
 8013a0e:	370c      	adds	r7, #12
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr
 8013a18:	200016d8 	.word	0x200016d8
 8013a1c:	200016c4 	.word	0x200016c4

08013a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b088      	sub	sp, #32
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
 8013a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d10a      	bne.n	8013a46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a34:	f383 8811 	msr	BASEPRI, r3
 8013a38:	f3bf 8f6f 	isb	sy
 8013a3c:	f3bf 8f4f 	dsb	sy
 8013a40:	613b      	str	r3, [r7, #16]
}
 8013a42:	bf00      	nop
 8013a44:	e7fe      	b.n	8013a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10a      	bne.n	8013a62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a50:	f383 8811 	msr	BASEPRI, r3
 8013a54:	f3bf 8f6f 	isb	sy
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	60fb      	str	r3, [r7, #12]
}
 8013a5e:	bf00      	nop
 8013a60:	e7fe      	b.n	8013a60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013a62:	f001 f86f 	bl	8014b44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013a66:	4b1d      	ldr	r3, [pc, #116]	; (8013adc <xTaskCheckForTimeOut+0xbc>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	685b      	ldr	r3, [r3, #4]
 8013a70:	69ba      	ldr	r2, [r7, #24]
 8013a72:	1ad3      	subs	r3, r2, r3
 8013a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a7e:	d102      	bne.n	8013a86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013a80:	2300      	movs	r3, #0
 8013a82:	61fb      	str	r3, [r7, #28]
 8013a84:	e023      	b.n	8013ace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	4b15      	ldr	r3, [pc, #84]	; (8013ae0 <xTaskCheckForTimeOut+0xc0>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d007      	beq.n	8013aa2 <xTaskCheckForTimeOut+0x82>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	69ba      	ldr	r2, [r7, #24]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d302      	bcc.n	8013aa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	61fb      	str	r3, [r7, #28]
 8013aa0:	e015      	b.n	8013ace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	697a      	ldr	r2, [r7, #20]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d20b      	bcs.n	8013ac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	1ad2      	subs	r2, r2, r3
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7ff ff9b 	bl	80139f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	61fb      	str	r3, [r7, #28]
 8013ac2:	e004      	b.n	8013ace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013aca:	2301      	movs	r3, #1
 8013acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013ace:	f001 f869 	bl	8014ba4 <vPortExitCritical>

	return xReturn;
 8013ad2:	69fb      	ldr	r3, [r7, #28]
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3720      	adds	r7, #32
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	200016c4 	.word	0x200016c4
 8013ae0:	200016d8 	.word	0x200016d8

08013ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013ae8:	4b03      	ldr	r3, [pc, #12]	; (8013af8 <vTaskMissedYield+0x14>)
 8013aea:	2201      	movs	r2, #1
 8013aec:	601a      	str	r2, [r3, #0]
}
 8013aee:	bf00      	nop
 8013af0:	46bd      	mov	sp, r7
 8013af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af6:	4770      	bx	lr
 8013af8:	200016d4 	.word	0x200016d4

08013afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b082      	sub	sp, #8
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013b04:	f000 f852 	bl	8013bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013b08:	4b06      	ldr	r3, [pc, #24]	; (8013b24 <prvIdleTask+0x28>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d9f9      	bls.n	8013b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013b10:	4b05      	ldr	r3, [pc, #20]	; (8013b28 <prvIdleTask+0x2c>)
 8013b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b16:	601a      	str	r2, [r3, #0]
 8013b18:	f3bf 8f4f 	dsb	sy
 8013b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013b20:	e7f0      	b.n	8013b04 <prvIdleTask+0x8>
 8013b22:	bf00      	nop
 8013b24:	200011f0 	.word	0x200011f0
 8013b28:	e000ed04 	.word	0xe000ed04

08013b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b32:	2300      	movs	r3, #0
 8013b34:	607b      	str	r3, [r7, #4]
 8013b36:	e00c      	b.n	8013b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	4613      	mov	r3, r2
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	4413      	add	r3, r2
 8013b40:	009b      	lsls	r3, r3, #2
 8013b42:	4a12      	ldr	r2, [pc, #72]	; (8013b8c <prvInitialiseTaskLists+0x60>)
 8013b44:	4413      	add	r3, r2
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fe f90a 	bl	8011d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	607b      	str	r3, [r7, #4]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2b37      	cmp	r3, #55	; 0x37
 8013b56:	d9ef      	bls.n	8013b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013b58:	480d      	ldr	r0, [pc, #52]	; (8013b90 <prvInitialiseTaskLists+0x64>)
 8013b5a:	f7fe f901 	bl	8011d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013b5e:	480d      	ldr	r0, [pc, #52]	; (8013b94 <prvInitialiseTaskLists+0x68>)
 8013b60:	f7fe f8fe 	bl	8011d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013b64:	480c      	ldr	r0, [pc, #48]	; (8013b98 <prvInitialiseTaskLists+0x6c>)
 8013b66:	f7fe f8fb 	bl	8011d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013b6a:	480c      	ldr	r0, [pc, #48]	; (8013b9c <prvInitialiseTaskLists+0x70>)
 8013b6c:	f7fe f8f8 	bl	8011d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013b70:	480b      	ldr	r0, [pc, #44]	; (8013ba0 <prvInitialiseTaskLists+0x74>)
 8013b72:	f7fe f8f5 	bl	8011d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013b76:	4b0b      	ldr	r3, [pc, #44]	; (8013ba4 <prvInitialiseTaskLists+0x78>)
 8013b78:	4a05      	ldr	r2, [pc, #20]	; (8013b90 <prvInitialiseTaskLists+0x64>)
 8013b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013b7c:	4b0a      	ldr	r3, [pc, #40]	; (8013ba8 <prvInitialiseTaskLists+0x7c>)
 8013b7e:	4a05      	ldr	r2, [pc, #20]	; (8013b94 <prvInitialiseTaskLists+0x68>)
 8013b80:	601a      	str	r2, [r3, #0]
}
 8013b82:	bf00      	nop
 8013b84:	3708      	adds	r7, #8
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}
 8013b8a:	bf00      	nop
 8013b8c:	200011f0 	.word	0x200011f0
 8013b90:	20001650 	.word	0x20001650
 8013b94:	20001664 	.word	0x20001664
 8013b98:	20001680 	.word	0x20001680
 8013b9c:	20001694 	.word	0x20001694
 8013ba0:	200016ac 	.word	0x200016ac
 8013ba4:	20001678 	.word	0x20001678
 8013ba8:	2000167c 	.word	0x2000167c

08013bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013bb2:	e019      	b.n	8013be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013bb4:	f000 ffc6 	bl	8014b44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bb8:	4b10      	ldr	r3, [pc, #64]	; (8013bfc <prvCheckTasksWaitingTermination+0x50>)
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	3304      	adds	r3, #4
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fe f955 	bl	8011e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013bca:	4b0d      	ldr	r3, [pc, #52]	; (8013c00 <prvCheckTasksWaitingTermination+0x54>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	3b01      	subs	r3, #1
 8013bd0:	4a0b      	ldr	r2, [pc, #44]	; (8013c00 <prvCheckTasksWaitingTermination+0x54>)
 8013bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013bd4:	4b0b      	ldr	r3, [pc, #44]	; (8013c04 <prvCheckTasksWaitingTermination+0x58>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	3b01      	subs	r3, #1
 8013bda:	4a0a      	ldr	r2, [pc, #40]	; (8013c04 <prvCheckTasksWaitingTermination+0x58>)
 8013bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013bde:	f000 ffe1 	bl	8014ba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 f810 	bl	8013c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013be8:	4b06      	ldr	r3, [pc, #24]	; (8013c04 <prvCheckTasksWaitingTermination+0x58>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d1e1      	bne.n	8013bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013bf0:	bf00      	nop
 8013bf2:	bf00      	nop
 8013bf4:	3708      	adds	r7, #8
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	20001694 	.word	0x20001694
 8013c00:	200016c0 	.word	0x200016c0
 8013c04:	200016a8 	.word	0x200016a8

08013c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	3354      	adds	r3, #84	; 0x54
 8013c14:	4618      	mov	r0, r3
 8013c16:	f002 ff85 	bl	8016b24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d108      	bne.n	8013c36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f001 f979 	bl	8014f20 <vPortFree>
				vPortFree( pxTCB );
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f001 f976 	bl	8014f20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013c34:	e018      	b.n	8013c68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013c3c:	2b01      	cmp	r3, #1
 8013c3e:	d103      	bne.n	8013c48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f001 f96d 	bl	8014f20 <vPortFree>
	}
 8013c46:	e00f      	b.n	8013c68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013c4e:	2b02      	cmp	r3, #2
 8013c50:	d00a      	beq.n	8013c68 <prvDeleteTCB+0x60>
	__asm volatile
 8013c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c56:	f383 8811 	msr	BASEPRI, r3
 8013c5a:	f3bf 8f6f 	isb	sy
 8013c5e:	f3bf 8f4f 	dsb	sy
 8013c62:	60fb      	str	r3, [r7, #12]
}
 8013c64:	bf00      	nop
 8013c66:	e7fe      	b.n	8013c66 <prvDeleteTCB+0x5e>
	}
 8013c68:	bf00      	nop
 8013c6a:	3710      	adds	r7, #16
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013c70:	b480      	push	{r7}
 8013c72:	b083      	sub	sp, #12
 8013c74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013c76:	4b0c      	ldr	r3, [pc, #48]	; (8013ca8 <prvResetNextTaskUnblockTime+0x38>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d104      	bne.n	8013c8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013c80:	4b0a      	ldr	r3, [pc, #40]	; (8013cac <prvResetNextTaskUnblockTime+0x3c>)
 8013c82:	f04f 32ff 	mov.w	r2, #4294967295
 8013c86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013c88:	e008      	b.n	8013c9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c8a:	4b07      	ldr	r3, [pc, #28]	; (8013ca8 <prvResetNextTaskUnblockTime+0x38>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	68db      	ldr	r3, [r3, #12]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	685b      	ldr	r3, [r3, #4]
 8013c98:	4a04      	ldr	r2, [pc, #16]	; (8013cac <prvResetNextTaskUnblockTime+0x3c>)
 8013c9a:	6013      	str	r3, [r2, #0]
}
 8013c9c:	bf00      	nop
 8013c9e:	370c      	adds	r7, #12
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr
 8013ca8:	20001678 	.word	0x20001678
 8013cac:	200016e0 	.word	0x200016e0

08013cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013cb0:	b480      	push	{r7}
 8013cb2:	b083      	sub	sp, #12
 8013cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013cb6:	4b0b      	ldr	r3, [pc, #44]	; (8013ce4 <xTaskGetSchedulerState+0x34>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d102      	bne.n	8013cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	607b      	str	r3, [r7, #4]
 8013cc2:	e008      	b.n	8013cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cc4:	4b08      	ldr	r3, [pc, #32]	; (8013ce8 <xTaskGetSchedulerState+0x38>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d102      	bne.n	8013cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013ccc:	2302      	movs	r3, #2
 8013cce:	607b      	str	r3, [r7, #4]
 8013cd0:	e001      	b.n	8013cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013cd6:	687b      	ldr	r3, [r7, #4]
	}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	370c      	adds	r7, #12
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce2:	4770      	bx	lr
 8013ce4:	200016cc 	.word	0x200016cc
 8013ce8:	200016e8 	.word	0x200016e8

08013cec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d051      	beq.n	8013da6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d06:	4b2a      	ldr	r3, [pc, #168]	; (8013db0 <xTaskPriorityInherit+0xc4>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d0c:	429a      	cmp	r2, r3
 8013d0e:	d241      	bcs.n	8013d94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	699b      	ldr	r3, [r3, #24]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	db06      	blt.n	8013d26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d18:	4b25      	ldr	r3, [pc, #148]	; (8013db0 <xTaskPriorityInherit+0xc4>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	6959      	ldr	r1, [r3, #20]
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d2e:	4613      	mov	r3, r2
 8013d30:	009b      	lsls	r3, r3, #2
 8013d32:	4413      	add	r3, r2
 8013d34:	009b      	lsls	r3, r3, #2
 8013d36:	4a1f      	ldr	r2, [pc, #124]	; (8013db4 <xTaskPriorityInherit+0xc8>)
 8013d38:	4413      	add	r3, r2
 8013d3a:	4299      	cmp	r1, r3
 8013d3c:	d122      	bne.n	8013d84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	3304      	adds	r3, #4
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fe f896 	bl	8011e74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013d48:	4b19      	ldr	r3, [pc, #100]	; (8013db0 <xTaskPriorityInherit+0xc4>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d56:	4b18      	ldr	r3, [pc, #96]	; (8013db8 <xTaskPriorityInherit+0xcc>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d903      	bls.n	8013d66 <xTaskPriorityInherit+0x7a>
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d62:	4a15      	ldr	r2, [pc, #84]	; (8013db8 <xTaskPriorityInherit+0xcc>)
 8013d64:	6013      	str	r3, [r2, #0]
 8013d66:	68bb      	ldr	r3, [r7, #8]
 8013d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	009b      	lsls	r3, r3, #2
 8013d6e:	4413      	add	r3, r2
 8013d70:	009b      	lsls	r3, r3, #2
 8013d72:	4a10      	ldr	r2, [pc, #64]	; (8013db4 <xTaskPriorityInherit+0xc8>)
 8013d74:	441a      	add	r2, r3
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	3304      	adds	r3, #4
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	4610      	mov	r0, r2
 8013d7e:	f7fe f81c 	bl	8011dba <vListInsertEnd>
 8013d82:	e004      	b.n	8013d8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013d84:	4b0a      	ldr	r3, [pc, #40]	; (8013db0 <xTaskPriorityInherit+0xc4>)
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013d8e:	2301      	movs	r3, #1
 8013d90:	60fb      	str	r3, [r7, #12]
 8013d92:	e008      	b.n	8013da6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d98:	4b05      	ldr	r3, [pc, #20]	; (8013db0 <xTaskPriorityInherit+0xc4>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d201      	bcs.n	8013da6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013da2:	2301      	movs	r3, #1
 8013da4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013da6:	68fb      	ldr	r3, [r7, #12]
	}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3710      	adds	r7, #16
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	200011ec 	.word	0x200011ec
 8013db4:	200011f0 	.word	0x200011f0
 8013db8:	200016c8 	.word	0x200016c8

08013dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b086      	sub	sp, #24
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d056      	beq.n	8013e80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013dd2:	4b2e      	ldr	r3, [pc, #184]	; (8013e8c <xTaskPriorityDisinherit+0xd0>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	693a      	ldr	r2, [r7, #16]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d00a      	beq.n	8013df2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013de0:	f383 8811 	msr	BASEPRI, r3
 8013de4:	f3bf 8f6f 	isb	sy
 8013de8:	f3bf 8f4f 	dsb	sy
 8013dec:	60fb      	str	r3, [r7, #12]
}
 8013dee:	bf00      	nop
 8013df0:	e7fe      	b.n	8013df0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d10a      	bne.n	8013e10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dfe:	f383 8811 	msr	BASEPRI, r3
 8013e02:	f3bf 8f6f 	isb	sy
 8013e06:	f3bf 8f4f 	dsb	sy
 8013e0a:	60bb      	str	r3, [r7, #8]
}
 8013e0c:	bf00      	nop
 8013e0e:	e7fe      	b.n	8013e0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e14:	1e5a      	subs	r2, r3, #1
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d02c      	beq.n	8013e80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d128      	bne.n	8013e80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	3304      	adds	r3, #4
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7fe f81e 	bl	8011e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e50:	4b0f      	ldr	r3, [pc, #60]	; (8013e90 <xTaskPriorityDisinherit+0xd4>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	429a      	cmp	r2, r3
 8013e56:	d903      	bls.n	8013e60 <xTaskPriorityDisinherit+0xa4>
 8013e58:	693b      	ldr	r3, [r7, #16]
 8013e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e5c:	4a0c      	ldr	r2, [pc, #48]	; (8013e90 <xTaskPriorityDisinherit+0xd4>)
 8013e5e:	6013      	str	r3, [r2, #0]
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e64:	4613      	mov	r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	4413      	add	r3, r2
 8013e6a:	009b      	lsls	r3, r3, #2
 8013e6c:	4a09      	ldr	r2, [pc, #36]	; (8013e94 <xTaskPriorityDisinherit+0xd8>)
 8013e6e:	441a      	add	r2, r3
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	3304      	adds	r3, #4
 8013e74:	4619      	mov	r1, r3
 8013e76:	4610      	mov	r0, r2
 8013e78:	f7fd ff9f 	bl	8011dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013e80:	697b      	ldr	r3, [r7, #20]
	}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3718      	adds	r7, #24
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	200011ec 	.word	0x200011ec
 8013e90:	200016c8 	.word	0x200016c8
 8013e94:	200011f0 	.word	0x200011f0

08013e98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b088      	sub	sp, #32
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
 8013ea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d06a      	beq.n	8013f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013eb0:	69bb      	ldr	r3, [r7, #24]
 8013eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d10a      	bne.n	8013ece <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8013eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebc:	f383 8811 	msr	BASEPRI, r3
 8013ec0:	f3bf 8f6f 	isb	sy
 8013ec4:	f3bf 8f4f 	dsb	sy
 8013ec8:	60fb      	str	r3, [r7, #12]
}
 8013eca:	bf00      	nop
 8013ecc:	e7fe      	b.n	8013ecc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ed2:	683a      	ldr	r2, [r7, #0]
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d902      	bls.n	8013ede <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	61fb      	str	r3, [r7, #28]
 8013edc:	e002      	b.n	8013ee4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013ede:	69bb      	ldr	r3, [r7, #24]
 8013ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ee2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013ee4:	69bb      	ldr	r3, [r7, #24]
 8013ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d04b      	beq.n	8013f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013eee:	69bb      	ldr	r3, [r7, #24]
 8013ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013ef2:	697a      	ldr	r2, [r7, #20]
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	d146      	bne.n	8013f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013ef8:	4b25      	ldr	r3, [pc, #148]	; (8013f90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	69ba      	ldr	r2, [r7, #24]
 8013efe:	429a      	cmp	r2, r3
 8013f00:	d10a      	bne.n	8013f18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f06:	f383 8811 	msr	BASEPRI, r3
 8013f0a:	f3bf 8f6f 	isb	sy
 8013f0e:	f3bf 8f4f 	dsb	sy
 8013f12:	60bb      	str	r3, [r7, #8]
}
 8013f14:	bf00      	nop
 8013f16:	e7fe      	b.n	8013f16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013f18:	69bb      	ldr	r3, [r7, #24]
 8013f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	69fa      	ldr	r2, [r7, #28]
 8013f22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	699b      	ldr	r3, [r3, #24]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	db04      	blt.n	8013f36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013f32:	69bb      	ldr	r3, [r7, #24]
 8013f34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013f36:	69bb      	ldr	r3, [r7, #24]
 8013f38:	6959      	ldr	r1, [r3, #20]
 8013f3a:	693a      	ldr	r2, [r7, #16]
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	009b      	lsls	r3, r3, #2
 8013f40:	4413      	add	r3, r2
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	4a13      	ldr	r2, [pc, #76]	; (8013f94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013f46:	4413      	add	r3, r2
 8013f48:	4299      	cmp	r1, r3
 8013f4a:	d11c      	bne.n	8013f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f4c:	69bb      	ldr	r3, [r7, #24]
 8013f4e:	3304      	adds	r3, #4
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7fd ff8f 	bl	8011e74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f5a:	4b0f      	ldr	r3, [pc, #60]	; (8013f98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d903      	bls.n	8013f6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f66:	4a0c      	ldr	r2, [pc, #48]	; (8013f98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013f68:	6013      	str	r3, [r2, #0]
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f6e:	4613      	mov	r3, r2
 8013f70:	009b      	lsls	r3, r3, #2
 8013f72:	4413      	add	r3, r2
 8013f74:	009b      	lsls	r3, r3, #2
 8013f76:	4a07      	ldr	r2, [pc, #28]	; (8013f94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013f78:	441a      	add	r2, r3
 8013f7a:	69bb      	ldr	r3, [r7, #24]
 8013f7c:	3304      	adds	r3, #4
 8013f7e:	4619      	mov	r1, r3
 8013f80:	4610      	mov	r0, r2
 8013f82:	f7fd ff1a 	bl	8011dba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013f86:	bf00      	nop
 8013f88:	3720      	adds	r7, #32
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	200011ec 	.word	0x200011ec
 8013f94:	200011f0 	.word	0x200011f0
 8013f98:	200016c8 	.word	0x200016c8

08013f9c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8013f9c:	b480      	push	{r7}
 8013f9e:	b083      	sub	sp, #12
 8013fa0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8013fa2:	4b09      	ldr	r3, [pc, #36]	; (8013fc8 <uxTaskResetEventItemValue+0x2c>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	699b      	ldr	r3, [r3, #24]
 8013fa8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013faa:	4b07      	ldr	r3, [pc, #28]	; (8013fc8 <uxTaskResetEventItemValue+0x2c>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb0:	4b05      	ldr	r3, [pc, #20]	; (8013fc8 <uxTaskResetEventItemValue+0x2c>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013fb8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8013fba:	687b      	ldr	r3, [r7, #4]
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	370c      	adds	r7, #12
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr
 8013fc8:	200011ec 	.word	0x200011ec

08013fcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013fcc:	b480      	push	{r7}
 8013fce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013fd0:	4b07      	ldr	r3, [pc, #28]	; (8013ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d004      	beq.n	8013fe2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013fd8:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013fde:	3201      	adds	r2, #1
 8013fe0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013fe2:	4b03      	ldr	r3, [pc, #12]	; (8013ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
	}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	46bd      	mov	sp, r7
 8013fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fee:	4770      	bx	lr
 8013ff0:	200011ec 	.word	0x200011ec

08013ff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
 8013ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013ffe:	4b21      	ldr	r3, [pc, #132]	; (8014084 <prvAddCurrentTaskToDelayedList+0x90>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014004:	4b20      	ldr	r3, [pc, #128]	; (8014088 <prvAddCurrentTaskToDelayedList+0x94>)
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	3304      	adds	r3, #4
 801400a:	4618      	mov	r0, r3
 801400c:	f7fd ff32 	bl	8011e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014016:	d10a      	bne.n	801402e <prvAddCurrentTaskToDelayedList+0x3a>
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d007      	beq.n	801402e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801401e:	4b1a      	ldr	r3, [pc, #104]	; (8014088 <prvAddCurrentTaskToDelayedList+0x94>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	3304      	adds	r3, #4
 8014024:	4619      	mov	r1, r3
 8014026:	4819      	ldr	r0, [pc, #100]	; (801408c <prvAddCurrentTaskToDelayedList+0x98>)
 8014028:	f7fd fec7 	bl	8011dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801402c:	e026      	b.n	801407c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	4413      	add	r3, r2
 8014034:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014036:	4b14      	ldr	r3, [pc, #80]	; (8014088 <prvAddCurrentTaskToDelayedList+0x94>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	68ba      	ldr	r2, [r7, #8]
 801403c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	429a      	cmp	r2, r3
 8014044:	d209      	bcs.n	801405a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014046:	4b12      	ldr	r3, [pc, #72]	; (8014090 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	4b0f      	ldr	r3, [pc, #60]	; (8014088 <prvAddCurrentTaskToDelayedList+0x94>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	3304      	adds	r3, #4
 8014050:	4619      	mov	r1, r3
 8014052:	4610      	mov	r0, r2
 8014054:	f7fd fed5 	bl	8011e02 <vListInsert>
}
 8014058:	e010      	b.n	801407c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801405a:	4b0e      	ldr	r3, [pc, #56]	; (8014094 <prvAddCurrentTaskToDelayedList+0xa0>)
 801405c:	681a      	ldr	r2, [r3, #0]
 801405e:	4b0a      	ldr	r3, [pc, #40]	; (8014088 <prvAddCurrentTaskToDelayedList+0x94>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	3304      	adds	r3, #4
 8014064:	4619      	mov	r1, r3
 8014066:	4610      	mov	r0, r2
 8014068:	f7fd fecb 	bl	8011e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801406c:	4b0a      	ldr	r3, [pc, #40]	; (8014098 <prvAddCurrentTaskToDelayedList+0xa4>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	68ba      	ldr	r2, [r7, #8]
 8014072:	429a      	cmp	r2, r3
 8014074:	d202      	bcs.n	801407c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014076:	4a08      	ldr	r2, [pc, #32]	; (8014098 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	6013      	str	r3, [r2, #0]
}
 801407c:	bf00      	nop
 801407e:	3710      	adds	r7, #16
 8014080:	46bd      	mov	sp, r7
 8014082:	bd80      	pop	{r7, pc}
 8014084:	200016c4 	.word	0x200016c4
 8014088:	200011ec 	.word	0x200011ec
 801408c:	200016ac 	.word	0x200016ac
 8014090:	2000167c 	.word	0x2000167c
 8014094:	20001678 	.word	0x20001678
 8014098:	200016e0 	.word	0x200016e0

0801409c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b08a      	sub	sp, #40	; 0x28
 80140a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80140a2:	2300      	movs	r3, #0
 80140a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80140a6:	f000 fba1 	bl	80147ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80140aa:	4b1c      	ldr	r3, [pc, #112]	; (801411c <xTimerCreateTimerTask+0x80>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d021      	beq.n	80140f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80140b2:	2300      	movs	r3, #0
 80140b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80140b6:	2300      	movs	r3, #0
 80140b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80140ba:	1d3a      	adds	r2, r7, #4
 80140bc:	f107 0108 	add.w	r1, r7, #8
 80140c0:	f107 030c 	add.w	r3, r7, #12
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fd fc43 	bl	8011950 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80140ca:	6879      	ldr	r1, [r7, #4]
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	68fa      	ldr	r2, [r7, #12]
 80140d0:	9202      	str	r2, [sp, #8]
 80140d2:	9301      	str	r3, [sp, #4]
 80140d4:	2302      	movs	r3, #2
 80140d6:	9300      	str	r3, [sp, #0]
 80140d8:	2300      	movs	r3, #0
 80140da:	460a      	mov	r2, r1
 80140dc:	4910      	ldr	r1, [pc, #64]	; (8014120 <xTimerCreateTimerTask+0x84>)
 80140de:	4811      	ldr	r0, [pc, #68]	; (8014124 <xTimerCreateTimerTask+0x88>)
 80140e0:	f7fe ff00 	bl	8012ee4 <xTaskCreateStatic>
 80140e4:	4603      	mov	r3, r0
 80140e6:	4a10      	ldr	r2, [pc, #64]	; (8014128 <xTimerCreateTimerTask+0x8c>)
 80140e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80140ea:	4b0f      	ldr	r3, [pc, #60]	; (8014128 <xTimerCreateTimerTask+0x8c>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d001      	beq.n	80140f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80140f2:	2301      	movs	r3, #1
 80140f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d10a      	bne.n	8014112 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80140fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014100:	f383 8811 	msr	BASEPRI, r3
 8014104:	f3bf 8f6f 	isb	sy
 8014108:	f3bf 8f4f 	dsb	sy
 801410c:	613b      	str	r3, [r7, #16]
}
 801410e:	bf00      	nop
 8014110:	e7fe      	b.n	8014110 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014112:	697b      	ldr	r3, [r7, #20]
}
 8014114:	4618      	mov	r0, r3
 8014116:	3718      	adds	r7, #24
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	2000171c 	.word	0x2000171c
 8014120:	08019694 	.word	0x08019694
 8014124:	08014395 	.word	0x08014395
 8014128:	20001720 	.word	0x20001720

0801412c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801412c:	b580      	push	{r7, lr}
 801412e:	b088      	sub	sp, #32
 8014130:	af02      	add	r7, sp, #8
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	607a      	str	r2, [r7, #4]
 8014138:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801413a:	202c      	movs	r0, #44	; 0x2c
 801413c:	f000 fe24 	bl	8014d88 <pvPortMalloc>
 8014140:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d00d      	beq.n	8014164 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	2200      	movs	r2, #0
 801414c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	9301      	str	r3, [sp, #4]
 8014154:	6a3b      	ldr	r3, [r7, #32]
 8014156:	9300      	str	r3, [sp, #0]
 8014158:	683b      	ldr	r3, [r7, #0]
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	68b9      	ldr	r1, [r7, #8]
 801415e:	68f8      	ldr	r0, [r7, #12]
 8014160:	f000 f843 	bl	80141ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014164:	697b      	ldr	r3, [r7, #20]
	}
 8014166:	4618      	mov	r0, r3
 8014168:	3718      	adds	r7, #24
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}

0801416e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801416e:	b580      	push	{r7, lr}
 8014170:	b08a      	sub	sp, #40	; 0x28
 8014172:	af02      	add	r7, sp, #8
 8014174:	60f8      	str	r0, [r7, #12]
 8014176:	60b9      	str	r1, [r7, #8]
 8014178:	607a      	str	r2, [r7, #4]
 801417a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 801417c:	232c      	movs	r3, #44	; 0x2c
 801417e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	2b2c      	cmp	r3, #44	; 0x2c
 8014184:	d00a      	beq.n	801419c <xTimerCreateStatic+0x2e>
	__asm volatile
 8014186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418a:	f383 8811 	msr	BASEPRI, r3
 801418e:	f3bf 8f6f 	isb	sy
 8014192:	f3bf 8f4f 	dsb	sy
 8014196:	61bb      	str	r3, [r7, #24]
}
 8014198:	bf00      	nop
 801419a:	e7fe      	b.n	801419a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801419c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10a      	bne.n	80141ba <xTimerCreateStatic+0x4c>
	__asm volatile
 80141a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141a8:	f383 8811 	msr	BASEPRI, r3
 80141ac:	f3bf 8f6f 	isb	sy
 80141b0:	f3bf 8f4f 	dsb	sy
 80141b4:	617b      	str	r3, [r7, #20]
}
 80141b6:	bf00      	nop
 80141b8:	e7fe      	b.n	80141b8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80141ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141bc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80141be:	69fb      	ldr	r3, [r7, #28]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d00d      	beq.n	80141e0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80141c4:	69fb      	ldr	r3, [r7, #28]
 80141c6:	2202      	movs	r2, #2
 80141c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80141cc:	69fb      	ldr	r3, [r7, #28]
 80141ce:	9301      	str	r3, [sp, #4]
 80141d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d2:	9300      	str	r3, [sp, #0]
 80141d4:	683b      	ldr	r3, [r7, #0]
 80141d6:	687a      	ldr	r2, [r7, #4]
 80141d8:	68b9      	ldr	r1, [r7, #8]
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f000 f805 	bl	80141ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80141e0:	69fb      	ldr	r3, [r7, #28]
	}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3720      	adds	r7, #32
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80141ea:	b580      	push	{r7, lr}
 80141ec:	b086      	sub	sp, #24
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	60f8      	str	r0, [r7, #12]
 80141f2:	60b9      	str	r1, [r7, #8]
 80141f4:	607a      	str	r2, [r7, #4]
 80141f6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d10a      	bne.n	8014214 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80141fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014202:	f383 8811 	msr	BASEPRI, r3
 8014206:	f3bf 8f6f 	isb	sy
 801420a:	f3bf 8f4f 	dsb	sy
 801420e:	617b      	str	r3, [r7, #20]
}
 8014210:	bf00      	nop
 8014212:	e7fe      	b.n	8014212 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8014214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014216:	2b00      	cmp	r3, #0
 8014218:	d01e      	beq.n	8014258 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 801421a:	f000 fae7 	bl	80147ec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 801421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014220:	68fa      	ldr	r2, [r7, #12]
 8014222:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8014224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014226:	68ba      	ldr	r2, [r7, #8]
 8014228:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 801422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422c:	683a      	ldr	r2, [r7, #0]
 801422e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8014230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014232:	6a3a      	ldr	r2, [r7, #32]
 8014234:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014238:	3304      	adds	r3, #4
 801423a:	4618      	mov	r0, r3
 801423c:	f7fd fdb0 	bl	8011da0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d008      	beq.n	8014258 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801424c:	f043 0304 	orr.w	r3, r3, #4
 8014250:	b2da      	uxtb	r2, r3
 8014252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014258:	bf00      	nop
 801425a:	3718      	adds	r7, #24
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b08a      	sub	sp, #40	; 0x28
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	60b9      	str	r1, [r7, #8]
 801426a:	607a      	str	r2, [r7, #4]
 801426c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801426e:	2300      	movs	r3, #0
 8014270:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d10a      	bne.n	801428e <xTimerGenericCommand+0x2e>
	__asm volatile
 8014278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801427c:	f383 8811 	msr	BASEPRI, r3
 8014280:	f3bf 8f6f 	isb	sy
 8014284:	f3bf 8f4f 	dsb	sy
 8014288:	623b      	str	r3, [r7, #32]
}
 801428a:	bf00      	nop
 801428c:	e7fe      	b.n	801428c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801428e:	4b1a      	ldr	r3, [pc, #104]	; (80142f8 <xTimerGenericCommand+0x98>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d02a      	beq.n	80142ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	2b05      	cmp	r3, #5
 80142a6:	dc18      	bgt.n	80142da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80142a8:	f7ff fd02 	bl	8013cb0 <xTaskGetSchedulerState>
 80142ac:	4603      	mov	r3, r0
 80142ae:	2b02      	cmp	r3, #2
 80142b0:	d109      	bne.n	80142c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80142b2:	4b11      	ldr	r3, [pc, #68]	; (80142f8 <xTimerGenericCommand+0x98>)
 80142b4:	6818      	ldr	r0, [r3, #0]
 80142b6:	f107 0110 	add.w	r1, r7, #16
 80142ba:	2300      	movs	r3, #0
 80142bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142be:	f7fd ffab 	bl	8012218 <xQueueGenericSend>
 80142c2:	6278      	str	r0, [r7, #36]	; 0x24
 80142c4:	e012      	b.n	80142ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80142c6:	4b0c      	ldr	r3, [pc, #48]	; (80142f8 <xTimerGenericCommand+0x98>)
 80142c8:	6818      	ldr	r0, [r3, #0]
 80142ca:	f107 0110 	add.w	r1, r7, #16
 80142ce:	2300      	movs	r3, #0
 80142d0:	2200      	movs	r2, #0
 80142d2:	f7fd ffa1 	bl	8012218 <xQueueGenericSend>
 80142d6:	6278      	str	r0, [r7, #36]	; 0x24
 80142d8:	e008      	b.n	80142ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80142da:	4b07      	ldr	r3, [pc, #28]	; (80142f8 <xTimerGenericCommand+0x98>)
 80142dc:	6818      	ldr	r0, [r3, #0]
 80142de:	f107 0110 	add.w	r1, r7, #16
 80142e2:	2300      	movs	r3, #0
 80142e4:	683a      	ldr	r2, [r7, #0]
 80142e6:	f7fe f895 	bl	8012414 <xQueueGenericSendFromISR>
 80142ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80142ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3728      	adds	r7, #40	; 0x28
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
 80142f6:	bf00      	nop
 80142f8:	2000171c 	.word	0x2000171c

080142fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b088      	sub	sp, #32
 8014300:	af02      	add	r7, sp, #8
 8014302:	6078      	str	r0, [r7, #4]
 8014304:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014306:	4b22      	ldr	r3, [pc, #136]	; (8014390 <prvProcessExpiredTimer+0x94>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	3304      	adds	r3, #4
 8014314:	4618      	mov	r0, r3
 8014316:	f7fd fdad 	bl	8011e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014320:	f003 0304 	and.w	r3, r3, #4
 8014324:	2b00      	cmp	r3, #0
 8014326:	d022      	beq.n	801436e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	699a      	ldr	r2, [r3, #24]
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	18d1      	adds	r1, r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	683a      	ldr	r2, [r7, #0]
 8014334:	6978      	ldr	r0, [r7, #20]
 8014336:	f000 f8d1 	bl	80144dc <prvInsertTimerInActiveList>
 801433a:	4603      	mov	r3, r0
 801433c:	2b00      	cmp	r3, #0
 801433e:	d01f      	beq.n	8014380 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014340:	2300      	movs	r3, #0
 8014342:	9300      	str	r3, [sp, #0]
 8014344:	2300      	movs	r3, #0
 8014346:	687a      	ldr	r2, [r7, #4]
 8014348:	2100      	movs	r1, #0
 801434a:	6978      	ldr	r0, [r7, #20]
 801434c:	f7ff ff88 	bl	8014260 <xTimerGenericCommand>
 8014350:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d113      	bne.n	8014380 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801435c:	f383 8811 	msr	BASEPRI, r3
 8014360:	f3bf 8f6f 	isb	sy
 8014364:	f3bf 8f4f 	dsb	sy
 8014368:	60fb      	str	r3, [r7, #12]
}
 801436a:	bf00      	nop
 801436c:	e7fe      	b.n	801436c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801436e:	697b      	ldr	r3, [r7, #20]
 8014370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014374:	f023 0301 	bic.w	r3, r3, #1
 8014378:	b2da      	uxtb	r2, r3
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	6a1b      	ldr	r3, [r3, #32]
 8014384:	6978      	ldr	r0, [r7, #20]
 8014386:	4798      	blx	r3
}
 8014388:	bf00      	nop
 801438a:	3718      	adds	r7, #24
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}
 8014390:	20001714 	.word	0x20001714

08014394 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b084      	sub	sp, #16
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801439c:	f107 0308 	add.w	r3, r7, #8
 80143a0:	4618      	mov	r0, r3
 80143a2:	f000 f857 	bl	8014454 <prvGetNextExpireTime>
 80143a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	4619      	mov	r1, r3
 80143ac:	68f8      	ldr	r0, [r7, #12]
 80143ae:	f000 f803 	bl	80143b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80143b2:	f000 f8d5 	bl	8014560 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80143b6:	e7f1      	b.n	801439c <prvTimerTask+0x8>

080143b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80143c2:	f7fe ffeb 	bl	801339c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80143c6:	f107 0308 	add.w	r3, r7, #8
 80143ca:	4618      	mov	r0, r3
 80143cc:	f000 f866 	bl	801449c <prvSampleTimeNow>
 80143d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d130      	bne.n	801443a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d10a      	bne.n	80143f4 <prvProcessTimerOrBlockTask+0x3c>
 80143de:	687a      	ldr	r2, [r7, #4]
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d806      	bhi.n	80143f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80143e6:	f7fe ffe7 	bl	80133b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80143ea:	68f9      	ldr	r1, [r7, #12]
 80143ec:	6878      	ldr	r0, [r7, #4]
 80143ee:	f7ff ff85 	bl	80142fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80143f2:	e024      	b.n	801443e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d008      	beq.n	801440c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80143fa:	4b13      	ldr	r3, [pc, #76]	; (8014448 <prvProcessTimerOrBlockTask+0x90>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d101      	bne.n	8014408 <prvProcessTimerOrBlockTask+0x50>
 8014404:	2301      	movs	r3, #1
 8014406:	e000      	b.n	801440a <prvProcessTimerOrBlockTask+0x52>
 8014408:	2300      	movs	r3, #0
 801440a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801440c:	4b0f      	ldr	r3, [pc, #60]	; (801444c <prvProcessTimerOrBlockTask+0x94>)
 801440e:	6818      	ldr	r0, [r3, #0]
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	1ad3      	subs	r3, r2, r3
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	4619      	mov	r1, r3
 801441a:	f7fe fd2f 	bl	8012e7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801441e:	f7fe ffcb 	bl	80133b8 <xTaskResumeAll>
 8014422:	4603      	mov	r3, r0
 8014424:	2b00      	cmp	r3, #0
 8014426:	d10a      	bne.n	801443e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014428:	4b09      	ldr	r3, [pc, #36]	; (8014450 <prvProcessTimerOrBlockTask+0x98>)
 801442a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801442e:	601a      	str	r2, [r3, #0]
 8014430:	f3bf 8f4f 	dsb	sy
 8014434:	f3bf 8f6f 	isb	sy
}
 8014438:	e001      	b.n	801443e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801443a:	f7fe ffbd 	bl	80133b8 <xTaskResumeAll>
}
 801443e:	bf00      	nop
 8014440:	3710      	adds	r7, #16
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}
 8014446:	bf00      	nop
 8014448:	20001718 	.word	0x20001718
 801444c:	2000171c 	.word	0x2000171c
 8014450:	e000ed04 	.word	0xe000ed04

08014454 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014454:	b480      	push	{r7}
 8014456:	b085      	sub	sp, #20
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801445c:	4b0e      	ldr	r3, [pc, #56]	; (8014498 <prvGetNextExpireTime+0x44>)
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d101      	bne.n	801446a <prvGetNextExpireTime+0x16>
 8014466:	2201      	movs	r2, #1
 8014468:	e000      	b.n	801446c <prvGetNextExpireTime+0x18>
 801446a:	2200      	movs	r2, #0
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d105      	bne.n	8014484 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014478:	4b07      	ldr	r3, [pc, #28]	; (8014498 <prvGetNextExpireTime+0x44>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	68db      	ldr	r3, [r3, #12]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	60fb      	str	r3, [r7, #12]
 8014482:	e001      	b.n	8014488 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014484:	2300      	movs	r3, #0
 8014486:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014488:	68fb      	ldr	r3, [r7, #12]
}
 801448a:	4618      	mov	r0, r3
 801448c:	3714      	adds	r7, #20
 801448e:	46bd      	mov	sp, r7
 8014490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014494:	4770      	bx	lr
 8014496:	bf00      	nop
 8014498:	20001714 	.word	0x20001714

0801449c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b084      	sub	sp, #16
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80144a4:	f7ff f826 	bl	80134f4 <xTaskGetTickCount>
 80144a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80144aa:	4b0b      	ldr	r3, [pc, #44]	; (80144d8 <prvSampleTimeNow+0x3c>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	429a      	cmp	r2, r3
 80144b2:	d205      	bcs.n	80144c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80144b4:	f000 f936 	bl	8014724 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2201      	movs	r2, #1
 80144bc:	601a      	str	r2, [r3, #0]
 80144be:	e002      	b.n	80144c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80144c6:	4a04      	ldr	r2, [pc, #16]	; (80144d8 <prvSampleTimeNow+0x3c>)
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80144cc:	68fb      	ldr	r3, [r7, #12]
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3710      	adds	r7, #16
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop
 80144d8:	20001724 	.word	0x20001724

080144dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b086      	sub	sp, #24
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	60f8      	str	r0, [r7, #12]
 80144e4:	60b9      	str	r1, [r7, #8]
 80144e6:	607a      	str	r2, [r7, #4]
 80144e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80144ea:	2300      	movs	r3, #0
 80144ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	68fa      	ldr	r2, [r7, #12]
 80144f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80144fa:	68ba      	ldr	r2, [r7, #8]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d812      	bhi.n	8014528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	683b      	ldr	r3, [r7, #0]
 8014506:	1ad2      	subs	r2, r2, r3
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	699b      	ldr	r3, [r3, #24]
 801450c:	429a      	cmp	r2, r3
 801450e:	d302      	bcc.n	8014516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014510:	2301      	movs	r3, #1
 8014512:	617b      	str	r3, [r7, #20]
 8014514:	e01b      	b.n	801454e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014516:	4b10      	ldr	r3, [pc, #64]	; (8014558 <prvInsertTimerInActiveList+0x7c>)
 8014518:	681a      	ldr	r2, [r3, #0]
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	3304      	adds	r3, #4
 801451e:	4619      	mov	r1, r3
 8014520:	4610      	mov	r0, r2
 8014522:	f7fd fc6e 	bl	8011e02 <vListInsert>
 8014526:	e012      	b.n	801454e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	429a      	cmp	r2, r3
 801452e:	d206      	bcs.n	801453e <prvInsertTimerInActiveList+0x62>
 8014530:	68ba      	ldr	r2, [r7, #8]
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	429a      	cmp	r2, r3
 8014536:	d302      	bcc.n	801453e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014538:	2301      	movs	r3, #1
 801453a:	617b      	str	r3, [r7, #20]
 801453c:	e007      	b.n	801454e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801453e:	4b07      	ldr	r3, [pc, #28]	; (801455c <prvInsertTimerInActiveList+0x80>)
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	3304      	adds	r3, #4
 8014546:	4619      	mov	r1, r3
 8014548:	4610      	mov	r0, r2
 801454a:	f7fd fc5a 	bl	8011e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801454e:	697b      	ldr	r3, [r7, #20]
}
 8014550:	4618      	mov	r0, r3
 8014552:	3718      	adds	r7, #24
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	20001718 	.word	0x20001718
 801455c:	20001714 	.word	0x20001714

08014560 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b08e      	sub	sp, #56	; 0x38
 8014564:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014566:	e0ca      	b.n	80146fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	da18      	bge.n	80145a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801456e:	1d3b      	adds	r3, r7, #4
 8014570:	3304      	adds	r3, #4
 8014572:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014576:	2b00      	cmp	r3, #0
 8014578:	d10a      	bne.n	8014590 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801457e:	f383 8811 	msr	BASEPRI, r3
 8014582:	f3bf 8f6f 	isb	sy
 8014586:	f3bf 8f4f 	dsb	sy
 801458a:	61fb      	str	r3, [r7, #28]
}
 801458c:	bf00      	nop
 801458e:	e7fe      	b.n	801458e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014596:	6850      	ldr	r0, [r2, #4]
 8014598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801459a:	6892      	ldr	r2, [r2, #8]
 801459c:	4611      	mov	r1, r2
 801459e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	f2c0 80aa 	blt.w	80146fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80145ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ae:	695b      	ldr	r3, [r3, #20]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d004      	beq.n	80145be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80145b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b6:	3304      	adds	r3, #4
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7fd fc5b 	bl	8011e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80145be:	463b      	mov	r3, r7
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7ff ff6b 	bl	801449c <prvSampleTimeNow>
 80145c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2b09      	cmp	r3, #9
 80145cc:	f200 8097 	bhi.w	80146fe <prvProcessReceivedCommands+0x19e>
 80145d0:	a201      	add	r2, pc, #4	; (adr r2, 80145d8 <prvProcessReceivedCommands+0x78>)
 80145d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145d6:	bf00      	nop
 80145d8:	08014601 	.word	0x08014601
 80145dc:	08014601 	.word	0x08014601
 80145e0:	08014601 	.word	0x08014601
 80145e4:	08014675 	.word	0x08014675
 80145e8:	08014689 	.word	0x08014689
 80145ec:	080146d3 	.word	0x080146d3
 80145f0:	08014601 	.word	0x08014601
 80145f4:	08014601 	.word	0x08014601
 80145f8:	08014675 	.word	0x08014675
 80145fc:	08014689 	.word	0x08014689
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014606:	f043 0301 	orr.w	r3, r3, #1
 801460a:	b2da      	uxtb	r2, r3
 801460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801460e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014612:	68ba      	ldr	r2, [r7, #8]
 8014614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014616:	699b      	ldr	r3, [r3, #24]
 8014618:	18d1      	adds	r1, r2, r3
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801461e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014620:	f7ff ff5c 	bl	80144dc <prvInsertTimerInActiveList>
 8014624:	4603      	mov	r3, r0
 8014626:	2b00      	cmp	r3, #0
 8014628:	d069      	beq.n	80146fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801462c:	6a1b      	ldr	r3, [r3, #32]
 801462e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014630:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014638:	f003 0304 	and.w	r3, r3, #4
 801463c:	2b00      	cmp	r3, #0
 801463e:	d05e      	beq.n	80146fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014640:	68ba      	ldr	r2, [r7, #8]
 8014642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014644:	699b      	ldr	r3, [r3, #24]
 8014646:	441a      	add	r2, r3
 8014648:	2300      	movs	r3, #0
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	2300      	movs	r3, #0
 801464e:	2100      	movs	r1, #0
 8014650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014652:	f7ff fe05 	bl	8014260 <xTimerGenericCommand>
 8014656:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014658:	6a3b      	ldr	r3, [r7, #32]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d14f      	bne.n	80146fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014662:	f383 8811 	msr	BASEPRI, r3
 8014666:	f3bf 8f6f 	isb	sy
 801466a:	f3bf 8f4f 	dsb	sy
 801466e:	61bb      	str	r3, [r7, #24]
}
 8014670:	bf00      	nop
 8014672:	e7fe      	b.n	8014672 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801467a:	f023 0301 	bic.w	r3, r3, #1
 801467e:	b2da      	uxtb	r2, r3
 8014680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014686:	e03a      	b.n	80146fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801468e:	f043 0301 	orr.w	r3, r3, #1
 8014692:	b2da      	uxtb	r2, r3
 8014694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801469e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80146a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a2:	699b      	ldr	r3, [r3, #24]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d10a      	bne.n	80146be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80146a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ac:	f383 8811 	msr	BASEPRI, r3
 80146b0:	f3bf 8f6f 	isb	sy
 80146b4:	f3bf 8f4f 	dsb	sy
 80146b8:	617b      	str	r3, [r7, #20]
}
 80146ba:	bf00      	nop
 80146bc:	e7fe      	b.n	80146bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80146be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c0:	699a      	ldr	r2, [r3, #24]
 80146c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c4:	18d1      	adds	r1, r2, r3
 80146c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146cc:	f7ff ff06 	bl	80144dc <prvInsertTimerInActiveList>
					break;
 80146d0:	e015      	b.n	80146fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80146d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146d8:	f003 0302 	and.w	r3, r3, #2
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d103      	bne.n	80146e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80146e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146e2:	f000 fc1d 	bl	8014f20 <vPortFree>
 80146e6:	e00a      	b.n	80146fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80146e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146ee:	f023 0301 	bic.w	r3, r3, #1
 80146f2:	b2da      	uxtb	r2, r3
 80146f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80146fa:	e000      	b.n	80146fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80146fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80146fe:	4b08      	ldr	r3, [pc, #32]	; (8014720 <prvProcessReceivedCommands+0x1c0>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	1d39      	adds	r1, r7, #4
 8014704:	2200      	movs	r2, #0
 8014706:	4618      	mov	r0, r3
 8014708:	f7fd ffac 	bl	8012664 <xQueueReceive>
 801470c:	4603      	mov	r3, r0
 801470e:	2b00      	cmp	r3, #0
 8014710:	f47f af2a 	bne.w	8014568 <prvProcessReceivedCommands+0x8>
	}
}
 8014714:	bf00      	nop
 8014716:	bf00      	nop
 8014718:	3730      	adds	r7, #48	; 0x30
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}
 801471e:	bf00      	nop
 8014720:	2000171c 	.word	0x2000171c

08014724 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b088      	sub	sp, #32
 8014728:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801472a:	e048      	b.n	80147be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801472c:	4b2d      	ldr	r3, [pc, #180]	; (80147e4 <prvSwitchTimerLists+0xc0>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014736:	4b2b      	ldr	r3, [pc, #172]	; (80147e4 <prvSwitchTimerLists+0xc0>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	68db      	ldr	r3, [r3, #12]
 801473e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	3304      	adds	r3, #4
 8014744:	4618      	mov	r0, r3
 8014746:	f7fd fb95 	bl	8011e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	6a1b      	ldr	r3, [r3, #32]
 801474e:	68f8      	ldr	r0, [r7, #12]
 8014750:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014758:	f003 0304 	and.w	r3, r3, #4
 801475c:	2b00      	cmp	r3, #0
 801475e:	d02e      	beq.n	80147be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	699b      	ldr	r3, [r3, #24]
 8014764:	693a      	ldr	r2, [r7, #16]
 8014766:	4413      	add	r3, r2
 8014768:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	429a      	cmp	r2, r3
 8014770:	d90e      	bls.n	8014790 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	68ba      	ldr	r2, [r7, #8]
 8014776:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801477e:	4b19      	ldr	r3, [pc, #100]	; (80147e4 <prvSwitchTimerLists+0xc0>)
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	3304      	adds	r3, #4
 8014786:	4619      	mov	r1, r3
 8014788:	4610      	mov	r0, r2
 801478a:	f7fd fb3a 	bl	8011e02 <vListInsert>
 801478e:	e016      	b.n	80147be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014790:	2300      	movs	r3, #0
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	2300      	movs	r3, #0
 8014796:	693a      	ldr	r2, [r7, #16]
 8014798:	2100      	movs	r1, #0
 801479a:	68f8      	ldr	r0, [r7, #12]
 801479c:	f7ff fd60 	bl	8014260 <xTimerGenericCommand>
 80147a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d10a      	bne.n	80147be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80147a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147ac:	f383 8811 	msr	BASEPRI, r3
 80147b0:	f3bf 8f6f 	isb	sy
 80147b4:	f3bf 8f4f 	dsb	sy
 80147b8:	603b      	str	r3, [r7, #0]
}
 80147ba:	bf00      	nop
 80147bc:	e7fe      	b.n	80147bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80147be:	4b09      	ldr	r3, [pc, #36]	; (80147e4 <prvSwitchTimerLists+0xc0>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d1b1      	bne.n	801472c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80147c8:	4b06      	ldr	r3, [pc, #24]	; (80147e4 <prvSwitchTimerLists+0xc0>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80147ce:	4b06      	ldr	r3, [pc, #24]	; (80147e8 <prvSwitchTimerLists+0xc4>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	4a04      	ldr	r2, [pc, #16]	; (80147e4 <prvSwitchTimerLists+0xc0>)
 80147d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80147d6:	4a04      	ldr	r2, [pc, #16]	; (80147e8 <prvSwitchTimerLists+0xc4>)
 80147d8:	697b      	ldr	r3, [r7, #20]
 80147da:	6013      	str	r3, [r2, #0]
}
 80147dc:	bf00      	nop
 80147de:	3718      	adds	r7, #24
 80147e0:	46bd      	mov	sp, r7
 80147e2:	bd80      	pop	{r7, pc}
 80147e4:	20001714 	.word	0x20001714
 80147e8:	20001718 	.word	0x20001718

080147ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80147f2:	f000 f9a7 	bl	8014b44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80147f6:	4b15      	ldr	r3, [pc, #84]	; (801484c <prvCheckForValidListAndQueue+0x60>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d120      	bne.n	8014840 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80147fe:	4814      	ldr	r0, [pc, #80]	; (8014850 <prvCheckForValidListAndQueue+0x64>)
 8014800:	f7fd faae 	bl	8011d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014804:	4813      	ldr	r0, [pc, #76]	; (8014854 <prvCheckForValidListAndQueue+0x68>)
 8014806:	f7fd faab 	bl	8011d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801480a:	4b13      	ldr	r3, [pc, #76]	; (8014858 <prvCheckForValidListAndQueue+0x6c>)
 801480c:	4a10      	ldr	r2, [pc, #64]	; (8014850 <prvCheckForValidListAndQueue+0x64>)
 801480e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014810:	4b12      	ldr	r3, [pc, #72]	; (801485c <prvCheckForValidListAndQueue+0x70>)
 8014812:	4a10      	ldr	r2, [pc, #64]	; (8014854 <prvCheckForValidListAndQueue+0x68>)
 8014814:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014816:	2300      	movs	r3, #0
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	4b11      	ldr	r3, [pc, #68]	; (8014860 <prvCheckForValidListAndQueue+0x74>)
 801481c:	4a11      	ldr	r2, [pc, #68]	; (8014864 <prvCheckForValidListAndQueue+0x78>)
 801481e:	2110      	movs	r1, #16
 8014820:	200a      	movs	r0, #10
 8014822:	f7fd fbb9 	bl	8011f98 <xQueueGenericCreateStatic>
 8014826:	4603      	mov	r3, r0
 8014828:	4a08      	ldr	r2, [pc, #32]	; (801484c <prvCheckForValidListAndQueue+0x60>)
 801482a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801482c:	4b07      	ldr	r3, [pc, #28]	; (801484c <prvCheckForValidListAndQueue+0x60>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d005      	beq.n	8014840 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014834:	4b05      	ldr	r3, [pc, #20]	; (801484c <prvCheckForValidListAndQueue+0x60>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	490b      	ldr	r1, [pc, #44]	; (8014868 <prvCheckForValidListAndQueue+0x7c>)
 801483a:	4618      	mov	r0, r3
 801483c:	f7fe faca 	bl	8012dd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014840:	f000 f9b0 	bl	8014ba4 <vPortExitCritical>
}
 8014844:	bf00      	nop
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
 801484a:	bf00      	nop
 801484c:	2000171c 	.word	0x2000171c
 8014850:	200016ec 	.word	0x200016ec
 8014854:	20001700 	.word	0x20001700
 8014858:	20001714 	.word	0x20001714
 801485c:	20001718 	.word	0x20001718
 8014860:	200017c8 	.word	0x200017c8
 8014864:	20001728 	.word	0x20001728
 8014868:	0801969c 	.word	0x0801969c

0801486c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b086      	sub	sp, #24
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d10a      	bne.n	8014894 <pvTimerGetTimerID+0x28>
	__asm volatile
 801487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014882:	f383 8811 	msr	BASEPRI, r3
 8014886:	f3bf 8f6f 	isb	sy
 801488a:	f3bf 8f4f 	dsb	sy
 801488e:	60fb      	str	r3, [r7, #12]
}
 8014890:	bf00      	nop
 8014892:	e7fe      	b.n	8014892 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8014894:	f000 f956 	bl	8014b44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	69db      	ldr	r3, [r3, #28]
 801489c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801489e:	f000 f981 	bl	8014ba4 <vPortExitCritical>

	return pvReturn;
 80148a2:	693b      	ldr	r3, [r7, #16]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3718      	adds	r7, #24
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b08a      	sub	sp, #40	; 0x28
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	60b9      	str	r1, [r7, #8]
 80148b6:	607a      	str	r2, [r7, #4]
 80148b8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80148ba:	f06f 0301 	mvn.w	r3, #1
 80148be:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80148cc:	4b06      	ldr	r3, [pc, #24]	; (80148e8 <xTimerPendFunctionCallFromISR+0x3c>)
 80148ce:	6818      	ldr	r0, [r3, #0]
 80148d0:	f107 0114 	add.w	r1, r7, #20
 80148d4:	2300      	movs	r3, #0
 80148d6:	683a      	ldr	r2, [r7, #0]
 80148d8:	f7fd fd9c 	bl	8012414 <xQueueGenericSendFromISR>
 80148dc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80148de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80148e0:	4618      	mov	r0, r3
 80148e2:	3728      	adds	r7, #40	; 0x28
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	2000171c 	.word	0x2000171c

080148ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80148ec:	b480      	push	{r7}
 80148ee:	b085      	sub	sp, #20
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	60b9      	str	r1, [r7, #8]
 80148f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	3b04      	subs	r3, #4
 80148fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014904:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	3b04      	subs	r3, #4
 801490a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	f023 0201 	bic.w	r2, r3, #1
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	3b04      	subs	r3, #4
 801491a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801491c:	4a0c      	ldr	r2, [pc, #48]	; (8014950 <pxPortInitialiseStack+0x64>)
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	3b14      	subs	r3, #20
 8014926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014928:	687a      	ldr	r2, [r7, #4]
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	3b04      	subs	r3, #4
 8014932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	f06f 0202 	mvn.w	r2, #2
 801493a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	3b20      	subs	r3, #32
 8014940:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014942:	68fb      	ldr	r3, [r7, #12]
}
 8014944:	4618      	mov	r0, r3
 8014946:	3714      	adds	r7, #20
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr
 8014950:	08014955 	.word	0x08014955

08014954 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014954:	b480      	push	{r7}
 8014956:	b085      	sub	sp, #20
 8014958:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801495a:	2300      	movs	r3, #0
 801495c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801495e:	4b12      	ldr	r3, [pc, #72]	; (80149a8 <prvTaskExitError+0x54>)
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014966:	d00a      	beq.n	801497e <prvTaskExitError+0x2a>
	__asm volatile
 8014968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801496c:	f383 8811 	msr	BASEPRI, r3
 8014970:	f3bf 8f6f 	isb	sy
 8014974:	f3bf 8f4f 	dsb	sy
 8014978:	60fb      	str	r3, [r7, #12]
}
 801497a:	bf00      	nop
 801497c:	e7fe      	b.n	801497c <prvTaskExitError+0x28>
	__asm volatile
 801497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014982:	f383 8811 	msr	BASEPRI, r3
 8014986:	f3bf 8f6f 	isb	sy
 801498a:	f3bf 8f4f 	dsb	sy
 801498e:	60bb      	str	r3, [r7, #8]
}
 8014990:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014992:	bf00      	nop
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d0fc      	beq.n	8014994 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801499a:	bf00      	nop
 801499c:	bf00      	nop
 801499e:	3714      	adds	r7, #20
 80149a0:	46bd      	mov	sp, r7
 80149a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a6:	4770      	bx	lr
 80149a8:	200000c8 	.word	0x200000c8
 80149ac:	00000000 	.word	0x00000000

080149b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80149b0:	4b07      	ldr	r3, [pc, #28]	; (80149d0 <pxCurrentTCBConst2>)
 80149b2:	6819      	ldr	r1, [r3, #0]
 80149b4:	6808      	ldr	r0, [r1, #0]
 80149b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ba:	f380 8809 	msr	PSP, r0
 80149be:	f3bf 8f6f 	isb	sy
 80149c2:	f04f 0000 	mov.w	r0, #0
 80149c6:	f380 8811 	msr	BASEPRI, r0
 80149ca:	4770      	bx	lr
 80149cc:	f3af 8000 	nop.w

080149d0 <pxCurrentTCBConst2>:
 80149d0:	200011ec 	.word	0x200011ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80149d4:	bf00      	nop
 80149d6:	bf00      	nop

080149d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80149d8:	4808      	ldr	r0, [pc, #32]	; (80149fc <prvPortStartFirstTask+0x24>)
 80149da:	6800      	ldr	r0, [r0, #0]
 80149dc:	6800      	ldr	r0, [r0, #0]
 80149de:	f380 8808 	msr	MSP, r0
 80149e2:	f04f 0000 	mov.w	r0, #0
 80149e6:	f380 8814 	msr	CONTROL, r0
 80149ea:	b662      	cpsie	i
 80149ec:	b661      	cpsie	f
 80149ee:	f3bf 8f4f 	dsb	sy
 80149f2:	f3bf 8f6f 	isb	sy
 80149f6:	df00      	svc	0
 80149f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80149fa:	bf00      	nop
 80149fc:	e000ed08 	.word	0xe000ed08

08014a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b086      	sub	sp, #24
 8014a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014a06:	4b46      	ldr	r3, [pc, #280]	; (8014b20 <xPortStartScheduler+0x120>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	4a46      	ldr	r2, [pc, #280]	; (8014b24 <xPortStartScheduler+0x124>)
 8014a0c:	4293      	cmp	r3, r2
 8014a0e:	d10a      	bne.n	8014a26 <xPortStartScheduler+0x26>
	__asm volatile
 8014a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a14:	f383 8811 	msr	BASEPRI, r3
 8014a18:	f3bf 8f6f 	isb	sy
 8014a1c:	f3bf 8f4f 	dsb	sy
 8014a20:	613b      	str	r3, [r7, #16]
}
 8014a22:	bf00      	nop
 8014a24:	e7fe      	b.n	8014a24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014a26:	4b3e      	ldr	r3, [pc, #248]	; (8014b20 <xPortStartScheduler+0x120>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	4a3f      	ldr	r2, [pc, #252]	; (8014b28 <xPortStartScheduler+0x128>)
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d10a      	bne.n	8014a46 <xPortStartScheduler+0x46>
	__asm volatile
 8014a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a34:	f383 8811 	msr	BASEPRI, r3
 8014a38:	f3bf 8f6f 	isb	sy
 8014a3c:	f3bf 8f4f 	dsb	sy
 8014a40:	60fb      	str	r3, [r7, #12]
}
 8014a42:	bf00      	nop
 8014a44:	e7fe      	b.n	8014a44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014a46:	4b39      	ldr	r3, [pc, #228]	; (8014b2c <xPortStartScheduler+0x12c>)
 8014a48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	22ff      	movs	r2, #255	; 0xff
 8014a56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014a60:	78fb      	ldrb	r3, [r7, #3]
 8014a62:	b2db      	uxtb	r3, r3
 8014a64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014a68:	b2da      	uxtb	r2, r3
 8014a6a:	4b31      	ldr	r3, [pc, #196]	; (8014b30 <xPortStartScheduler+0x130>)
 8014a6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014a6e:	4b31      	ldr	r3, [pc, #196]	; (8014b34 <xPortStartScheduler+0x134>)
 8014a70:	2207      	movs	r2, #7
 8014a72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014a74:	e009      	b.n	8014a8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014a76:	4b2f      	ldr	r3, [pc, #188]	; (8014b34 <xPortStartScheduler+0x134>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	3b01      	subs	r3, #1
 8014a7c:	4a2d      	ldr	r2, [pc, #180]	; (8014b34 <xPortStartScheduler+0x134>)
 8014a7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014a80:	78fb      	ldrb	r3, [r7, #3]
 8014a82:	b2db      	uxtb	r3, r3
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	b2db      	uxtb	r3, r3
 8014a88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014a8a:	78fb      	ldrb	r3, [r7, #3]
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a92:	2b80      	cmp	r3, #128	; 0x80
 8014a94:	d0ef      	beq.n	8014a76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014a96:	4b27      	ldr	r3, [pc, #156]	; (8014b34 <xPortStartScheduler+0x134>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	f1c3 0307 	rsb	r3, r3, #7
 8014a9e:	2b04      	cmp	r3, #4
 8014aa0:	d00a      	beq.n	8014ab8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aa6:	f383 8811 	msr	BASEPRI, r3
 8014aaa:	f3bf 8f6f 	isb	sy
 8014aae:	f3bf 8f4f 	dsb	sy
 8014ab2:	60bb      	str	r3, [r7, #8]
}
 8014ab4:	bf00      	nop
 8014ab6:	e7fe      	b.n	8014ab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014ab8:	4b1e      	ldr	r3, [pc, #120]	; (8014b34 <xPortStartScheduler+0x134>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	021b      	lsls	r3, r3, #8
 8014abe:	4a1d      	ldr	r2, [pc, #116]	; (8014b34 <xPortStartScheduler+0x134>)
 8014ac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014ac2:	4b1c      	ldr	r3, [pc, #112]	; (8014b34 <xPortStartScheduler+0x134>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014aca:	4a1a      	ldr	r2, [pc, #104]	; (8014b34 <xPortStartScheduler+0x134>)
 8014acc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	b2da      	uxtb	r2, r3
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014ad6:	4b18      	ldr	r3, [pc, #96]	; (8014b38 <xPortStartScheduler+0x138>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	4a17      	ldr	r2, [pc, #92]	; (8014b38 <xPortStartScheduler+0x138>)
 8014adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014ae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ae2:	4b15      	ldr	r3, [pc, #84]	; (8014b38 <xPortStartScheduler+0x138>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	4a14      	ldr	r2, [pc, #80]	; (8014b38 <xPortStartScheduler+0x138>)
 8014ae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014aec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014aee:	f000 f8dd 	bl	8014cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014af2:	4b12      	ldr	r3, [pc, #72]	; (8014b3c <xPortStartScheduler+0x13c>)
 8014af4:	2200      	movs	r2, #0
 8014af6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014af8:	f000 f8fc 	bl	8014cf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014afc:	4b10      	ldr	r3, [pc, #64]	; (8014b40 <xPortStartScheduler+0x140>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	4a0f      	ldr	r2, [pc, #60]	; (8014b40 <xPortStartScheduler+0x140>)
 8014b02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014b06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014b08:	f7ff ff66 	bl	80149d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014b0c:	f7fe fdbc 	bl	8013688 <vTaskSwitchContext>
	prvTaskExitError();
 8014b10:	f7ff ff20 	bl	8014954 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014b14:	2300      	movs	r3, #0
}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3718      	adds	r7, #24
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}
 8014b1e:	bf00      	nop
 8014b20:	e000ed00 	.word	0xe000ed00
 8014b24:	410fc271 	.word	0x410fc271
 8014b28:	410fc270 	.word	0x410fc270
 8014b2c:	e000e400 	.word	0xe000e400
 8014b30:	20001818 	.word	0x20001818
 8014b34:	2000181c 	.word	0x2000181c
 8014b38:	e000ed20 	.word	0xe000ed20
 8014b3c:	200000c8 	.word	0x200000c8
 8014b40:	e000ef34 	.word	0xe000ef34

08014b44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014b44:	b480      	push	{r7}
 8014b46:	b083      	sub	sp, #12
 8014b48:	af00      	add	r7, sp, #0
	__asm volatile
 8014b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b4e:	f383 8811 	msr	BASEPRI, r3
 8014b52:	f3bf 8f6f 	isb	sy
 8014b56:	f3bf 8f4f 	dsb	sy
 8014b5a:	607b      	str	r3, [r7, #4]
}
 8014b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014b5e:	4b0f      	ldr	r3, [pc, #60]	; (8014b9c <vPortEnterCritical+0x58>)
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	3301      	adds	r3, #1
 8014b64:	4a0d      	ldr	r2, [pc, #52]	; (8014b9c <vPortEnterCritical+0x58>)
 8014b66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014b68:	4b0c      	ldr	r3, [pc, #48]	; (8014b9c <vPortEnterCritical+0x58>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d10f      	bne.n	8014b90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014b70:	4b0b      	ldr	r3, [pc, #44]	; (8014ba0 <vPortEnterCritical+0x5c>)
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	b2db      	uxtb	r3, r3
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d00a      	beq.n	8014b90 <vPortEnterCritical+0x4c>
	__asm volatile
 8014b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7e:	f383 8811 	msr	BASEPRI, r3
 8014b82:	f3bf 8f6f 	isb	sy
 8014b86:	f3bf 8f4f 	dsb	sy
 8014b8a:	603b      	str	r3, [r7, #0]
}
 8014b8c:	bf00      	nop
 8014b8e:	e7fe      	b.n	8014b8e <vPortEnterCritical+0x4a>
	}
}
 8014b90:	bf00      	nop
 8014b92:	370c      	adds	r7, #12
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr
 8014b9c:	200000c8 	.word	0x200000c8
 8014ba0:	e000ed04 	.word	0xe000ed04

08014ba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014ba4:	b480      	push	{r7}
 8014ba6:	b083      	sub	sp, #12
 8014ba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014baa:	4b12      	ldr	r3, [pc, #72]	; (8014bf4 <vPortExitCritical+0x50>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d10a      	bne.n	8014bc8 <vPortExitCritical+0x24>
	__asm volatile
 8014bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb6:	f383 8811 	msr	BASEPRI, r3
 8014bba:	f3bf 8f6f 	isb	sy
 8014bbe:	f3bf 8f4f 	dsb	sy
 8014bc2:	607b      	str	r3, [r7, #4]
}
 8014bc4:	bf00      	nop
 8014bc6:	e7fe      	b.n	8014bc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014bc8:	4b0a      	ldr	r3, [pc, #40]	; (8014bf4 <vPortExitCritical+0x50>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	4a09      	ldr	r2, [pc, #36]	; (8014bf4 <vPortExitCritical+0x50>)
 8014bd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014bd2:	4b08      	ldr	r3, [pc, #32]	; (8014bf4 <vPortExitCritical+0x50>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d105      	bne.n	8014be6 <vPortExitCritical+0x42>
 8014bda:	2300      	movs	r3, #0
 8014bdc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	f383 8811 	msr	BASEPRI, r3
}
 8014be4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014be6:	bf00      	nop
 8014be8:	370c      	adds	r7, #12
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr
 8014bf2:	bf00      	nop
 8014bf4:	200000c8 	.word	0x200000c8
	...

08014c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014c00:	f3ef 8009 	mrs	r0, PSP
 8014c04:	f3bf 8f6f 	isb	sy
 8014c08:	4b15      	ldr	r3, [pc, #84]	; (8014c60 <pxCurrentTCBConst>)
 8014c0a:	681a      	ldr	r2, [r3, #0]
 8014c0c:	f01e 0f10 	tst.w	lr, #16
 8014c10:	bf08      	it	eq
 8014c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1a:	6010      	str	r0, [r2, #0]
 8014c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014c24:	f380 8811 	msr	BASEPRI, r0
 8014c28:	f3bf 8f4f 	dsb	sy
 8014c2c:	f3bf 8f6f 	isb	sy
 8014c30:	f7fe fd2a 	bl	8013688 <vTaskSwitchContext>
 8014c34:	f04f 0000 	mov.w	r0, #0
 8014c38:	f380 8811 	msr	BASEPRI, r0
 8014c3c:	bc09      	pop	{r0, r3}
 8014c3e:	6819      	ldr	r1, [r3, #0]
 8014c40:	6808      	ldr	r0, [r1, #0]
 8014c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c46:	f01e 0f10 	tst.w	lr, #16
 8014c4a:	bf08      	it	eq
 8014c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014c50:	f380 8809 	msr	PSP, r0
 8014c54:	f3bf 8f6f 	isb	sy
 8014c58:	4770      	bx	lr
 8014c5a:	bf00      	nop
 8014c5c:	f3af 8000 	nop.w

08014c60 <pxCurrentTCBConst>:
 8014c60:	200011ec 	.word	0x200011ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014c64:	bf00      	nop
 8014c66:	bf00      	nop

08014c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8014c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c72:	f383 8811 	msr	BASEPRI, r3
 8014c76:	f3bf 8f6f 	isb	sy
 8014c7a:	f3bf 8f4f 	dsb	sy
 8014c7e:	607b      	str	r3, [r7, #4]
}
 8014c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014c82:	f7fe fc47 	bl	8013514 <xTaskIncrementTick>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d003      	beq.n	8014c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014c8c:	4b06      	ldr	r3, [pc, #24]	; (8014ca8 <xPortSysTickHandler+0x40>)
 8014c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c92:	601a      	str	r2, [r3, #0]
 8014c94:	2300      	movs	r3, #0
 8014c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014c98:	683b      	ldr	r3, [r7, #0]
 8014c9a:	f383 8811 	msr	BASEPRI, r3
}
 8014c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014ca0:	bf00      	nop
 8014ca2:	3708      	adds	r7, #8
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}
 8014ca8:	e000ed04 	.word	0xe000ed04

08014cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014cac:	b480      	push	{r7}
 8014cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014cb0:	4b0b      	ldr	r3, [pc, #44]	; (8014ce0 <vPortSetupTimerInterrupt+0x34>)
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014cb6:	4b0b      	ldr	r3, [pc, #44]	; (8014ce4 <vPortSetupTimerInterrupt+0x38>)
 8014cb8:	2200      	movs	r2, #0
 8014cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014cbc:	4b0a      	ldr	r3, [pc, #40]	; (8014ce8 <vPortSetupTimerInterrupt+0x3c>)
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	4a0a      	ldr	r2, [pc, #40]	; (8014cec <vPortSetupTimerInterrupt+0x40>)
 8014cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8014cc6:	099b      	lsrs	r3, r3, #6
 8014cc8:	4a09      	ldr	r2, [pc, #36]	; (8014cf0 <vPortSetupTimerInterrupt+0x44>)
 8014cca:	3b01      	subs	r3, #1
 8014ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014cce:	4b04      	ldr	r3, [pc, #16]	; (8014ce0 <vPortSetupTimerInterrupt+0x34>)
 8014cd0:	2207      	movs	r2, #7
 8014cd2:	601a      	str	r2, [r3, #0]
}
 8014cd4:	bf00      	nop
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cdc:	4770      	bx	lr
 8014cde:	bf00      	nop
 8014ce0:	e000e010 	.word	0xe000e010
 8014ce4:	e000e018 	.word	0xe000e018
 8014ce8:	2000001c 	.word	0x2000001c
 8014cec:	10624dd3 	.word	0x10624dd3
 8014cf0:	e000e014 	.word	0xe000e014

08014cf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014cf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014d04 <vPortEnableVFP+0x10>
 8014cf8:	6801      	ldr	r1, [r0, #0]
 8014cfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014cfe:	6001      	str	r1, [r0, #0]
 8014d00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014d02:	bf00      	nop
 8014d04:	e000ed88 	.word	0xe000ed88

08014d08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014d08:	b480      	push	{r7}
 8014d0a:	b085      	sub	sp, #20
 8014d0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014d0e:	f3ef 8305 	mrs	r3, IPSR
 8014d12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	2b0f      	cmp	r3, #15
 8014d18:	d914      	bls.n	8014d44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014d1a:	4a17      	ldr	r2, [pc, #92]	; (8014d78 <vPortValidateInterruptPriority+0x70>)
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	4413      	add	r3, r2
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014d24:	4b15      	ldr	r3, [pc, #84]	; (8014d7c <vPortValidateInterruptPriority+0x74>)
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	7afa      	ldrb	r2, [r7, #11]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d20a      	bcs.n	8014d44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8014d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d32:	f383 8811 	msr	BASEPRI, r3
 8014d36:	f3bf 8f6f 	isb	sy
 8014d3a:	f3bf 8f4f 	dsb	sy
 8014d3e:	607b      	str	r3, [r7, #4]
}
 8014d40:	bf00      	nop
 8014d42:	e7fe      	b.n	8014d42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014d44:	4b0e      	ldr	r3, [pc, #56]	; (8014d80 <vPortValidateInterruptPriority+0x78>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014d4c:	4b0d      	ldr	r3, [pc, #52]	; (8014d84 <vPortValidateInterruptPriority+0x7c>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	d90a      	bls.n	8014d6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d58:	f383 8811 	msr	BASEPRI, r3
 8014d5c:	f3bf 8f6f 	isb	sy
 8014d60:	f3bf 8f4f 	dsb	sy
 8014d64:	603b      	str	r3, [r7, #0]
}
 8014d66:	bf00      	nop
 8014d68:	e7fe      	b.n	8014d68 <vPortValidateInterruptPriority+0x60>
	}
 8014d6a:	bf00      	nop
 8014d6c:	3714      	adds	r7, #20
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr
 8014d76:	bf00      	nop
 8014d78:	e000e3f0 	.word	0xe000e3f0
 8014d7c:	20001818 	.word	0x20001818
 8014d80:	e000ed0c 	.word	0xe000ed0c
 8014d84:	2000181c 	.word	0x2000181c

08014d88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b08a      	sub	sp, #40	; 0x28
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014d90:	2300      	movs	r3, #0
 8014d92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014d94:	f7fe fb02 	bl	801339c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014d98:	4b5b      	ldr	r3, [pc, #364]	; (8014f08 <pvPortMalloc+0x180>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d101      	bne.n	8014da4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014da0:	f000 f920 	bl	8014fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014da4:	4b59      	ldr	r3, [pc, #356]	; (8014f0c <pvPortMalloc+0x184>)
 8014da6:	681a      	ldr	r2, [r3, #0]
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	4013      	ands	r3, r2
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	f040 8093 	bne.w	8014ed8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d01d      	beq.n	8014df4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014db8:	2208      	movs	r2, #8
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	4413      	add	r3, r2
 8014dbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f003 0307 	and.w	r3, r3, #7
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d014      	beq.n	8014df4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f023 0307 	bic.w	r3, r3, #7
 8014dd0:	3308      	adds	r3, #8
 8014dd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f003 0307 	and.w	r3, r3, #7
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d00a      	beq.n	8014df4 <pvPortMalloc+0x6c>
	__asm volatile
 8014dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de2:	f383 8811 	msr	BASEPRI, r3
 8014de6:	f3bf 8f6f 	isb	sy
 8014dea:	f3bf 8f4f 	dsb	sy
 8014dee:	617b      	str	r3, [r7, #20]
}
 8014df0:	bf00      	nop
 8014df2:	e7fe      	b.n	8014df2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d06e      	beq.n	8014ed8 <pvPortMalloc+0x150>
 8014dfa:	4b45      	ldr	r3, [pc, #276]	; (8014f10 <pvPortMalloc+0x188>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d869      	bhi.n	8014ed8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014e04:	4b43      	ldr	r3, [pc, #268]	; (8014f14 <pvPortMalloc+0x18c>)
 8014e06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014e08:	4b42      	ldr	r3, [pc, #264]	; (8014f14 <pvPortMalloc+0x18c>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e0e:	e004      	b.n	8014e1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1c:	685b      	ldr	r3, [r3, #4]
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d903      	bls.n	8014e2c <pvPortMalloc+0xa4>
 8014e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d1f1      	bne.n	8014e10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014e2c:	4b36      	ldr	r3, [pc, #216]	; (8014f08 <pvPortMalloc+0x180>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e32:	429a      	cmp	r2, r3
 8014e34:	d050      	beq.n	8014ed8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014e36:	6a3b      	ldr	r3, [r7, #32]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2208      	movs	r2, #8
 8014e3c:	4413      	add	r3, r2
 8014e3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	6a3b      	ldr	r3, [r7, #32]
 8014e46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4a:	685a      	ldr	r2, [r3, #4]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	1ad2      	subs	r2, r2, r3
 8014e50:	2308      	movs	r3, #8
 8014e52:	005b      	lsls	r3, r3, #1
 8014e54:	429a      	cmp	r2, r3
 8014e56:	d91f      	bls.n	8014e98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4413      	add	r3, r2
 8014e5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	f003 0307 	and.w	r3, r3, #7
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d00a      	beq.n	8014e80 <pvPortMalloc+0xf8>
	__asm volatile
 8014e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e6e:	f383 8811 	msr	BASEPRI, r3
 8014e72:	f3bf 8f6f 	isb	sy
 8014e76:	f3bf 8f4f 	dsb	sy
 8014e7a:	613b      	str	r3, [r7, #16]
}
 8014e7c:	bf00      	nop
 8014e7e:	e7fe      	b.n	8014e7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e82:	685a      	ldr	r2, [r3, #4]
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	1ad2      	subs	r2, r2, r3
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014e92:	69b8      	ldr	r0, [r7, #24]
 8014e94:	f000 f908 	bl	80150a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014e98:	4b1d      	ldr	r3, [pc, #116]	; (8014f10 <pvPortMalloc+0x188>)
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e9e:	685b      	ldr	r3, [r3, #4]
 8014ea0:	1ad3      	subs	r3, r2, r3
 8014ea2:	4a1b      	ldr	r2, [pc, #108]	; (8014f10 <pvPortMalloc+0x188>)
 8014ea4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014ea6:	4b1a      	ldr	r3, [pc, #104]	; (8014f10 <pvPortMalloc+0x188>)
 8014ea8:	681a      	ldr	r2, [r3, #0]
 8014eaa:	4b1b      	ldr	r3, [pc, #108]	; (8014f18 <pvPortMalloc+0x190>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d203      	bcs.n	8014eba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014eb2:	4b17      	ldr	r3, [pc, #92]	; (8014f10 <pvPortMalloc+0x188>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	4a18      	ldr	r2, [pc, #96]	; (8014f18 <pvPortMalloc+0x190>)
 8014eb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebc:	685a      	ldr	r2, [r3, #4]
 8014ebe:	4b13      	ldr	r3, [pc, #76]	; (8014f0c <pvPortMalloc+0x184>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	431a      	orrs	r2, r3
 8014ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eca:	2200      	movs	r2, #0
 8014ecc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014ece:	4b13      	ldr	r3, [pc, #76]	; (8014f1c <pvPortMalloc+0x194>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	4a11      	ldr	r2, [pc, #68]	; (8014f1c <pvPortMalloc+0x194>)
 8014ed6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014ed8:	f7fe fa6e 	bl	80133b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	f003 0307 	and.w	r3, r3, #7
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d00a      	beq.n	8014efc <pvPortMalloc+0x174>
	__asm volatile
 8014ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eea:	f383 8811 	msr	BASEPRI, r3
 8014eee:	f3bf 8f6f 	isb	sy
 8014ef2:	f3bf 8f4f 	dsb	sy
 8014ef6:	60fb      	str	r3, [r7, #12]
}
 8014ef8:	bf00      	nop
 8014efa:	e7fe      	b.n	8014efa <pvPortMalloc+0x172>
	return pvReturn;
 8014efc:	69fb      	ldr	r3, [r7, #28]
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3728      	adds	r7, #40	; 0x28
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	bf00      	nop
 8014f08:	20005428 	.word	0x20005428
 8014f0c:	2000543c 	.word	0x2000543c
 8014f10:	2000542c 	.word	0x2000542c
 8014f14:	20005420 	.word	0x20005420
 8014f18:	20005430 	.word	0x20005430
 8014f1c:	20005434 	.word	0x20005434

08014f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b086      	sub	sp, #24
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d04d      	beq.n	8014fce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014f32:	2308      	movs	r3, #8
 8014f34:	425b      	negs	r3, r3
 8014f36:	697a      	ldr	r2, [r7, #20]
 8014f38:	4413      	add	r3, r2
 8014f3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	685a      	ldr	r2, [r3, #4]
 8014f44:	4b24      	ldr	r3, [pc, #144]	; (8014fd8 <vPortFree+0xb8>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	4013      	ands	r3, r2
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d10a      	bne.n	8014f64 <vPortFree+0x44>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f52:	f383 8811 	msr	BASEPRI, r3
 8014f56:	f3bf 8f6f 	isb	sy
 8014f5a:	f3bf 8f4f 	dsb	sy
 8014f5e:	60fb      	str	r3, [r7, #12]
}
 8014f60:	bf00      	nop
 8014f62:	e7fe      	b.n	8014f62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d00a      	beq.n	8014f82 <vPortFree+0x62>
	__asm volatile
 8014f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f70:	f383 8811 	msr	BASEPRI, r3
 8014f74:	f3bf 8f6f 	isb	sy
 8014f78:	f3bf 8f4f 	dsb	sy
 8014f7c:	60bb      	str	r3, [r7, #8]
}
 8014f7e:	bf00      	nop
 8014f80:	e7fe      	b.n	8014f80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014f82:	693b      	ldr	r3, [r7, #16]
 8014f84:	685a      	ldr	r2, [r3, #4]
 8014f86:	4b14      	ldr	r3, [pc, #80]	; (8014fd8 <vPortFree+0xb8>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	4013      	ands	r3, r2
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d01e      	beq.n	8014fce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d11a      	bne.n	8014fce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	685a      	ldr	r2, [r3, #4]
 8014f9c:	4b0e      	ldr	r3, [pc, #56]	; (8014fd8 <vPortFree+0xb8>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	43db      	mvns	r3, r3
 8014fa2:	401a      	ands	r2, r3
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014fa8:	f7fe f9f8 	bl	801339c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014fac:	693b      	ldr	r3, [r7, #16]
 8014fae:	685a      	ldr	r2, [r3, #4]
 8014fb0:	4b0a      	ldr	r3, [pc, #40]	; (8014fdc <vPortFree+0xbc>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4413      	add	r3, r2
 8014fb6:	4a09      	ldr	r2, [pc, #36]	; (8014fdc <vPortFree+0xbc>)
 8014fb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014fba:	6938      	ldr	r0, [r7, #16]
 8014fbc:	f000 f874 	bl	80150a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014fc0:	4b07      	ldr	r3, [pc, #28]	; (8014fe0 <vPortFree+0xc0>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	4a06      	ldr	r2, [pc, #24]	; (8014fe0 <vPortFree+0xc0>)
 8014fc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014fca:	f7fe f9f5 	bl	80133b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014fce:	bf00      	nop
 8014fd0:	3718      	adds	r7, #24
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	2000543c 	.word	0x2000543c
 8014fdc:	2000542c 	.word	0x2000542c
 8014fe0:	20005438 	.word	0x20005438

08014fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014fe4:	b480      	push	{r7}
 8014fe6:	b085      	sub	sp, #20
 8014fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8014fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014ff0:	4b27      	ldr	r3, [pc, #156]	; (8015090 <prvHeapInit+0xac>)
 8014ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	f003 0307 	and.w	r3, r3, #7
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d00c      	beq.n	8015018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	3307      	adds	r3, #7
 8015002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	f023 0307 	bic.w	r3, r3, #7
 801500a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801500c:	68ba      	ldr	r2, [r7, #8]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	1ad3      	subs	r3, r2, r3
 8015012:	4a1f      	ldr	r2, [pc, #124]	; (8015090 <prvHeapInit+0xac>)
 8015014:	4413      	add	r3, r2
 8015016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801501c:	4a1d      	ldr	r2, [pc, #116]	; (8015094 <prvHeapInit+0xb0>)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015022:	4b1c      	ldr	r3, [pc, #112]	; (8015094 <prvHeapInit+0xb0>)
 8015024:	2200      	movs	r2, #0
 8015026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	68ba      	ldr	r2, [r7, #8]
 801502c:	4413      	add	r3, r2
 801502e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015030:	2208      	movs	r2, #8
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	1a9b      	subs	r3, r3, r2
 8015036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	f023 0307 	bic.w	r3, r3, #7
 801503e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	4a15      	ldr	r2, [pc, #84]	; (8015098 <prvHeapInit+0xb4>)
 8015044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015046:	4b14      	ldr	r3, [pc, #80]	; (8015098 <prvHeapInit+0xb4>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2200      	movs	r2, #0
 801504c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801504e:	4b12      	ldr	r3, [pc, #72]	; (8015098 <prvHeapInit+0xb4>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2200      	movs	r2, #0
 8015054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801505a:	683b      	ldr	r3, [r7, #0]
 801505c:	68fa      	ldr	r2, [r7, #12]
 801505e:	1ad2      	subs	r2, r2, r3
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015064:	4b0c      	ldr	r3, [pc, #48]	; (8015098 <prvHeapInit+0xb4>)
 8015066:	681a      	ldr	r2, [r3, #0]
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	4a0a      	ldr	r2, [pc, #40]	; (801509c <prvHeapInit+0xb8>)
 8015072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	4a09      	ldr	r2, [pc, #36]	; (80150a0 <prvHeapInit+0xbc>)
 801507a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801507c:	4b09      	ldr	r3, [pc, #36]	; (80150a4 <prvHeapInit+0xc0>)
 801507e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015082:	601a      	str	r2, [r3, #0]
}
 8015084:	bf00      	nop
 8015086:	3714      	adds	r7, #20
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr
 8015090:	20001820 	.word	0x20001820
 8015094:	20005420 	.word	0x20005420
 8015098:	20005428 	.word	0x20005428
 801509c:	20005430 	.word	0x20005430
 80150a0:	2000542c 	.word	0x2000542c
 80150a4:	2000543c 	.word	0x2000543c

080150a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80150a8:	b480      	push	{r7}
 80150aa:	b085      	sub	sp, #20
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80150b0:	4b28      	ldr	r3, [pc, #160]	; (8015154 <prvInsertBlockIntoFreeList+0xac>)
 80150b2:	60fb      	str	r3, [r7, #12]
 80150b4:	e002      	b.n	80150bc <prvInsertBlockIntoFreeList+0x14>
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	60fb      	str	r3, [r7, #12]
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d8f7      	bhi.n	80150b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	68ba      	ldr	r2, [r7, #8]
 80150d0:	4413      	add	r3, r2
 80150d2:	687a      	ldr	r2, [r7, #4]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d108      	bne.n	80150ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	685a      	ldr	r2, [r3, #4]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	441a      	add	r2, r3
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	685b      	ldr	r3, [r3, #4]
 80150f2:	68ba      	ldr	r2, [r7, #8]
 80150f4:	441a      	add	r2, r3
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d118      	bne.n	8015130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	681a      	ldr	r2, [r3, #0]
 8015102:	4b15      	ldr	r3, [pc, #84]	; (8015158 <prvInsertBlockIntoFreeList+0xb0>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	429a      	cmp	r2, r3
 8015108:	d00d      	beq.n	8015126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	685a      	ldr	r2, [r3, #4]
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	685b      	ldr	r3, [r3, #4]
 8015114:	441a      	add	r2, r3
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	601a      	str	r2, [r3, #0]
 8015124:	e008      	b.n	8015138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015126:	4b0c      	ldr	r3, [pc, #48]	; (8015158 <prvInsertBlockIntoFreeList+0xb0>)
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	601a      	str	r2, [r3, #0]
 801512e:	e003      	b.n	8015138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	681a      	ldr	r2, [r3, #0]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015138:	68fa      	ldr	r2, [r7, #12]
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	429a      	cmp	r2, r3
 801513e:	d002      	beq.n	8015146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	687a      	ldr	r2, [r7, #4]
 8015144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015146:	bf00      	nop
 8015148:	3714      	adds	r7, #20
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr
 8015152:	bf00      	nop
 8015154:	20005420 	.word	0x20005420
 8015158:	20005428 	.word	0x20005428

0801515c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015160:	2200      	movs	r2, #0
 8015162:	4912      	ldr	r1, [pc, #72]	; (80151ac <MX_USB_DEVICE_Init+0x50>)
 8015164:	4812      	ldr	r0, [pc, #72]	; (80151b0 <MX_USB_DEVICE_Init+0x54>)
 8015166:	f7f9 ff1f 	bl	800efa8 <USBD_Init>
 801516a:	4603      	mov	r3, r0
 801516c:	2b00      	cmp	r3, #0
 801516e:	d001      	beq.n	8015174 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015170:	f7ef f9a0 	bl	80044b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015174:	490f      	ldr	r1, [pc, #60]	; (80151b4 <MX_USB_DEVICE_Init+0x58>)
 8015176:	480e      	ldr	r0, [pc, #56]	; (80151b0 <MX_USB_DEVICE_Init+0x54>)
 8015178:	f7f9 ff46 	bl	800f008 <USBD_RegisterClass>
 801517c:	4603      	mov	r3, r0
 801517e:	2b00      	cmp	r3, #0
 8015180:	d001      	beq.n	8015186 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015182:	f7ef f997 	bl	80044b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015186:	490c      	ldr	r1, [pc, #48]	; (80151b8 <MX_USB_DEVICE_Init+0x5c>)
 8015188:	4809      	ldr	r0, [pc, #36]	; (80151b0 <MX_USB_DEVICE_Init+0x54>)
 801518a:	f7f9 fe37 	bl	800edfc <USBD_CDC_RegisterInterface>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	d001      	beq.n	8015198 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015194:	f7ef f98e 	bl	80044b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015198:	4805      	ldr	r0, [pc, #20]	; (80151b0 <MX_USB_DEVICE_Init+0x54>)
 801519a:	f7f9 ff6b 	bl	800f074 <USBD_Start>
 801519e:	4603      	mov	r3, r0
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d001      	beq.n	80151a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80151a4:	f7ef f986 	bl	80044b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80151a8:	bf00      	nop
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	200000e0 	.word	0x200000e0
 80151b0:	20005440 	.word	0x20005440
 80151b4:	20000048 	.word	0x20000048
 80151b8:	200000cc 	.word	0x200000cc

080151bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80151c0:	2200      	movs	r2, #0
 80151c2:	4905      	ldr	r1, [pc, #20]	; (80151d8 <CDC_Init_FS+0x1c>)
 80151c4:	4805      	ldr	r0, [pc, #20]	; (80151dc <CDC_Init_FS+0x20>)
 80151c6:	f7f9 fe33 	bl	800ee30 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80151ca:	4905      	ldr	r1, [pc, #20]	; (80151e0 <CDC_Init_FS+0x24>)
 80151cc:	4803      	ldr	r0, [pc, #12]	; (80151dc <CDC_Init_FS+0x20>)
 80151ce:	f7f9 fe51 	bl	800ee74 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80151d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	20005f28 	.word	0x20005f28
 80151dc:	20005440 	.word	0x20005440
 80151e0:	20005728 	.word	0x20005728

080151e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80151e4:	b480      	push	{r7}
 80151e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80151e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	46bd      	mov	sp, r7
 80151ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f2:	4770      	bx	lr

080151f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80151f4:	b480      	push	{r7}
 80151f6:	b083      	sub	sp, #12
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	4603      	mov	r3, r0
 80151fc:	6039      	str	r1, [r7, #0]
 80151fe:	71fb      	strb	r3, [r7, #7]
 8015200:	4613      	mov	r3, r2
 8015202:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015204:	79fb      	ldrb	r3, [r7, #7]
 8015206:	2b23      	cmp	r3, #35	; 0x23
 8015208:	d84a      	bhi.n	80152a0 <CDC_Control_FS+0xac>
 801520a:	a201      	add	r2, pc, #4	; (adr r2, 8015210 <CDC_Control_FS+0x1c>)
 801520c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015210:	080152a1 	.word	0x080152a1
 8015214:	080152a1 	.word	0x080152a1
 8015218:	080152a1 	.word	0x080152a1
 801521c:	080152a1 	.word	0x080152a1
 8015220:	080152a1 	.word	0x080152a1
 8015224:	080152a1 	.word	0x080152a1
 8015228:	080152a1 	.word	0x080152a1
 801522c:	080152a1 	.word	0x080152a1
 8015230:	080152a1 	.word	0x080152a1
 8015234:	080152a1 	.word	0x080152a1
 8015238:	080152a1 	.word	0x080152a1
 801523c:	080152a1 	.word	0x080152a1
 8015240:	080152a1 	.word	0x080152a1
 8015244:	080152a1 	.word	0x080152a1
 8015248:	080152a1 	.word	0x080152a1
 801524c:	080152a1 	.word	0x080152a1
 8015250:	080152a1 	.word	0x080152a1
 8015254:	080152a1 	.word	0x080152a1
 8015258:	080152a1 	.word	0x080152a1
 801525c:	080152a1 	.word	0x080152a1
 8015260:	080152a1 	.word	0x080152a1
 8015264:	080152a1 	.word	0x080152a1
 8015268:	080152a1 	.word	0x080152a1
 801526c:	080152a1 	.word	0x080152a1
 8015270:	080152a1 	.word	0x080152a1
 8015274:	080152a1 	.word	0x080152a1
 8015278:	080152a1 	.word	0x080152a1
 801527c:	080152a1 	.word	0x080152a1
 8015280:	080152a1 	.word	0x080152a1
 8015284:	080152a1 	.word	0x080152a1
 8015288:	080152a1 	.word	0x080152a1
 801528c:	080152a1 	.word	0x080152a1
 8015290:	080152a1 	.word	0x080152a1
 8015294:	080152a1 	.word	0x080152a1
 8015298:	080152a1 	.word	0x080152a1
 801529c:	080152a1 	.word	0x080152a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80152a0:	bf00      	nop
  }

  return (USBD_OK);
 80152a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80152a4:	4618      	mov	r0, r3
 80152a6:	370c      	adds	r7, #12
 80152a8:	46bd      	mov	sp, r7
 80152aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ae:	4770      	bx	lr

080152b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80152ba:	6879      	ldr	r1, [r7, #4]
 80152bc:	481a      	ldr	r0, [pc, #104]	; (8015328 <CDC_Receive_FS+0x78>)
 80152be:	f7f9 fdd9 	bl	800ee74 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80152c2:	4819      	ldr	r0, [pc, #100]	; (8015328 <CDC_Receive_FS+0x78>)
 80152c4:	f7f9 fe3a 	bl	800ef3c <USBD_CDC_ReceivePacket>

	if (Buf[0] == '\r') {
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	2b0d      	cmp	r3, #13
 80152ce:	d112      	bne.n	80152f6 <CDC_Receive_FS+0x46>
		memcpy(usb_rx_buffer.buffer, _buffer.buffer, sizeof(usb_rx_buffer.buffer));
 80152d0:	4a16      	ldr	r2, [pc, #88]	; (801532c <CDC_Receive_FS+0x7c>)
 80152d2:	4b17      	ldr	r3, [pc, #92]	; (8015330 <CDC_Receive_FS+0x80>)
 80152d4:	cb03      	ldmia	r3!, {r0, r1}
 80152d6:	6010      	str	r0, [r2, #0]
 80152d8:	6051      	str	r1, [r2, #4]
 80152da:	4b15      	ldr	r3, [pc, #84]	; (8015330 <CDC_Receive_FS+0x80>)
 80152dc:	2200      	movs	r2, #0
 80152de:	701a      	strb	r2, [r3, #0]
		memset(_buffer.buffer, 0, RECEIVED_USB);
		_buffer.pos = 0;
 80152e0:	4b13      	ldr	r3, [pc, #76]	; (8015330 <CDC_Receive_FS+0x80>)
 80152e2:	2200      	movs	r2, #0
 80152e4:	811a      	strh	r2, [r3, #8]
		osEventFlagsSet(USBEventHandle, RECEIVED_USB);
 80152e6:	4b13      	ldr	r3, [pc, #76]	; (8015334 <CDC_Receive_FS+0x84>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	2101      	movs	r1, #1
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7fc f927 	bl	8011540 <osEventFlagsSet>
		return (USBD_OK);
 80152f2:	2300      	movs	r3, #0
 80152f4:	e014      	b.n	8015320 <CDC_Receive_FS+0x70>
	}

	_buffer.buffer[_buffer.pos++] = Buf[0];
 80152f6:	4b0e      	ldr	r3, [pc, #56]	; (8015330 <CDC_Receive_FS+0x80>)
 80152f8:	891b      	ldrh	r3, [r3, #8]
 80152fa:	b29b      	uxth	r3, r3
 80152fc:	1c5a      	adds	r2, r3, #1
 80152fe:	b291      	uxth	r1, r2
 8015300:	4a0b      	ldr	r2, [pc, #44]	; (8015330 <CDC_Receive_FS+0x80>)
 8015302:	8111      	strh	r1, [r2, #8]
 8015304:	461a      	mov	r2, r3
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	7819      	ldrb	r1, [r3, #0]
 801530a:	4b09      	ldr	r3, [pc, #36]	; (8015330 <CDC_Receive_FS+0x80>)
 801530c:	5499      	strb	r1, [r3, r2]
	if (_buffer.pos > USB_BUFFER_SIZE) {
 801530e:	4b08      	ldr	r3, [pc, #32]	; (8015330 <CDC_Receive_FS+0x80>)
 8015310:	891b      	ldrh	r3, [r3, #8]
 8015312:	b29b      	uxth	r3, r3
 8015314:	2b08      	cmp	r3, #8
 8015316:	d902      	bls.n	801531e <CDC_Receive_FS+0x6e>

		_buffer.pos = 0;
 8015318:	4b05      	ldr	r3, [pc, #20]	; (8015330 <CDC_Receive_FS+0x80>)
 801531a:	2200      	movs	r2, #0
 801531c:	811a      	strh	r2, [r3, #8]
	}

	return (USBD_OK);
 801531e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015320:	4618      	mov	r0, r3
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}
 8015328:	20005440 	.word	0x20005440
 801532c:	20000400 	.word	0x20000400
 8015330:	2000571c 	.word	0x2000571c
 8015334:	200003dc 	.word	0x200003dc

08015338 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b084      	sub	sp, #16
 801533c:	af00      	add	r7, sp, #0
 801533e:	6078      	str	r0, [r7, #4]
 8015340:	460b      	mov	r3, r1
 8015342:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015344:	2300      	movs	r3, #0
 8015346:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015348:	4b0d      	ldr	r3, [pc, #52]	; (8015380 <CDC_Transmit_FS+0x48>)
 801534a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801534e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015350:	68bb      	ldr	r3, [r7, #8]
 8015352:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015356:	2b00      	cmp	r3, #0
 8015358:	d001      	beq.n	801535e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801535a:	2301      	movs	r3, #1
 801535c:	e00b      	b.n	8015376 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801535e:	887b      	ldrh	r3, [r7, #2]
 8015360:	461a      	mov	r2, r3
 8015362:	6879      	ldr	r1, [r7, #4]
 8015364:	4806      	ldr	r0, [pc, #24]	; (8015380 <CDC_Transmit_FS+0x48>)
 8015366:	f7f9 fd63 	bl	800ee30 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801536a:	4805      	ldr	r0, [pc, #20]	; (8015380 <CDC_Transmit_FS+0x48>)
 801536c:	f7f9 fda0 	bl	800eeb0 <USBD_CDC_TransmitPacket>
 8015370:	4603      	mov	r3, r0
 8015372:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015374:	7bfb      	ldrb	r3, [r7, #15]
}
 8015376:	4618      	mov	r0, r3
 8015378:	3710      	adds	r7, #16
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	20005440 	.word	0x20005440

08015384 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015384:	b480      	push	{r7}
 8015386:	b087      	sub	sp, #28
 8015388:	af00      	add	r7, sp, #0
 801538a:	60f8      	str	r0, [r7, #12]
 801538c:	60b9      	str	r1, [r7, #8]
 801538e:	4613      	mov	r3, r2
 8015390:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015392:	2300      	movs	r3, #0
 8015394:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015396:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801539a:	4618      	mov	r0, r3
 801539c:	371c      	adds	r7, #28
 801539e:	46bd      	mov	sp, r7
 80153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a4:	4770      	bx	lr
	...

080153a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153a8:	b480      	push	{r7}
 80153aa:	b083      	sub	sp, #12
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	4603      	mov	r3, r0
 80153b0:	6039      	str	r1, [r7, #0]
 80153b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	2212      	movs	r2, #18
 80153b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80153ba:	4b03      	ldr	r3, [pc, #12]	; (80153c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80153bc:	4618      	mov	r0, r3
 80153be:	370c      	adds	r7, #12
 80153c0:	46bd      	mov	sp, r7
 80153c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c6:	4770      	bx	lr
 80153c8:	20000100 	.word	0x20000100

080153cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153cc:	b480      	push	{r7}
 80153ce:	b083      	sub	sp, #12
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	4603      	mov	r3, r0
 80153d4:	6039      	str	r1, [r7, #0]
 80153d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	2204      	movs	r2, #4
 80153dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80153de:	4b03      	ldr	r3, [pc, #12]	; (80153ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	370c      	adds	r7, #12
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr
 80153ec:	20000120 	.word	0x20000120

080153f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	4603      	mov	r3, r0
 80153f8:	6039      	str	r1, [r7, #0]
 80153fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80153fc:	79fb      	ldrb	r3, [r7, #7]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d105      	bne.n	801540e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015402:	683a      	ldr	r2, [r7, #0]
 8015404:	4907      	ldr	r1, [pc, #28]	; (8015424 <USBD_FS_ProductStrDescriptor+0x34>)
 8015406:	4808      	ldr	r0, [pc, #32]	; (8015428 <USBD_FS_ProductStrDescriptor+0x38>)
 8015408:	f7fb f80a 	bl	8010420 <USBD_GetString>
 801540c:	e004      	b.n	8015418 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801540e:	683a      	ldr	r2, [r7, #0]
 8015410:	4904      	ldr	r1, [pc, #16]	; (8015424 <USBD_FS_ProductStrDescriptor+0x34>)
 8015412:	4805      	ldr	r0, [pc, #20]	; (8015428 <USBD_FS_ProductStrDescriptor+0x38>)
 8015414:	f7fb f804 	bl	8010420 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015418:	4b02      	ldr	r3, [pc, #8]	; (8015424 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801541a:	4618      	mov	r0, r3
 801541c:	3708      	adds	r7, #8
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	20006728 	.word	0x20006728
 8015428:	080196a4 	.word	0x080196a4

0801542c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	4603      	mov	r3, r0
 8015434:	6039      	str	r1, [r7, #0]
 8015436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015438:	683a      	ldr	r2, [r7, #0]
 801543a:	4904      	ldr	r1, [pc, #16]	; (801544c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801543c:	4804      	ldr	r0, [pc, #16]	; (8015450 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801543e:	f7fa ffef 	bl	8010420 <USBD_GetString>
  return USBD_StrDesc;
 8015442:	4b02      	ldr	r3, [pc, #8]	; (801544c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015444:	4618      	mov	r0, r3
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	20006728 	.word	0x20006728
 8015450:	080196bc 	.word	0x080196bc

08015454 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	4603      	mov	r3, r0
 801545c:	6039      	str	r1, [r7, #0]
 801545e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	221a      	movs	r2, #26
 8015464:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015466:	f000 f855 	bl	8015514 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801546a:	4b02      	ldr	r3, [pc, #8]	; (8015474 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801546c:	4618      	mov	r0, r3
 801546e:	3708      	adds	r7, #8
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	20000124 	.word	0x20000124

08015478 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	af00      	add	r7, sp, #0
 801547e:	4603      	mov	r3, r0
 8015480:	6039      	str	r1, [r7, #0]
 8015482:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015484:	79fb      	ldrb	r3, [r7, #7]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d105      	bne.n	8015496 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801548a:	683a      	ldr	r2, [r7, #0]
 801548c:	4907      	ldr	r1, [pc, #28]	; (80154ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801548e:	4808      	ldr	r0, [pc, #32]	; (80154b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015490:	f7fa ffc6 	bl	8010420 <USBD_GetString>
 8015494:	e004      	b.n	80154a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015496:	683a      	ldr	r2, [r7, #0]
 8015498:	4904      	ldr	r1, [pc, #16]	; (80154ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801549a:	4805      	ldr	r0, [pc, #20]	; (80154b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801549c:	f7fa ffc0 	bl	8010420 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154a0:	4b02      	ldr	r3, [pc, #8]	; (80154ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3708      	adds	r7, #8
 80154a6:	46bd      	mov	sp, r7
 80154a8:	bd80      	pop	{r7, pc}
 80154aa:	bf00      	nop
 80154ac:	20006728 	.word	0x20006728
 80154b0:	080196d0 	.word	0x080196d0

080154b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	4603      	mov	r3, r0
 80154bc:	6039      	str	r1, [r7, #0]
 80154be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80154c0:	79fb      	ldrb	r3, [r7, #7]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d105      	bne.n	80154d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154c6:	683a      	ldr	r2, [r7, #0]
 80154c8:	4907      	ldr	r1, [pc, #28]	; (80154e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154ca:	4808      	ldr	r0, [pc, #32]	; (80154ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154cc:	f7fa ffa8 	bl	8010420 <USBD_GetString>
 80154d0:	e004      	b.n	80154dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80154d2:	683a      	ldr	r2, [r7, #0]
 80154d4:	4904      	ldr	r1, [pc, #16]	; (80154e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80154d6:	4805      	ldr	r0, [pc, #20]	; (80154ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80154d8:	f7fa ffa2 	bl	8010420 <USBD_GetString>
  }
  return USBD_StrDesc;
 80154dc:	4b02      	ldr	r3, [pc, #8]	; (80154e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3708      	adds	r7, #8
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	20006728 	.word	0x20006728
 80154ec:	080196dc 	.word	0x080196dc

080154f0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	4603      	mov	r3, r0
 80154f8:	6039      	str	r1, [r7, #0]
 80154fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	220c      	movs	r2, #12
 8015500:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015502:	4b03      	ldr	r3, [pc, #12]	; (8015510 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015504:	4618      	mov	r0, r3
 8015506:	370c      	adds	r7, #12
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr
 8015510:	20000114 	.word	0x20000114

08015514 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801551a:	4b0f      	ldr	r3, [pc, #60]	; (8015558 <Get_SerialNum+0x44>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015520:	4b0e      	ldr	r3, [pc, #56]	; (801555c <Get_SerialNum+0x48>)
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015526:	4b0e      	ldr	r3, [pc, #56]	; (8015560 <Get_SerialNum+0x4c>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801552c:	68fa      	ldr	r2, [r7, #12]
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	4413      	add	r3, r2
 8015532:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d009      	beq.n	801554e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801553a:	2208      	movs	r2, #8
 801553c:	4909      	ldr	r1, [pc, #36]	; (8015564 <Get_SerialNum+0x50>)
 801553e:	68f8      	ldr	r0, [r7, #12]
 8015540:	f000 f814 	bl	801556c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015544:	2204      	movs	r2, #4
 8015546:	4908      	ldr	r1, [pc, #32]	; (8015568 <Get_SerialNum+0x54>)
 8015548:	68b8      	ldr	r0, [r7, #8]
 801554a:	f000 f80f 	bl	801556c <IntToUnicode>
  }
}
 801554e:	bf00      	nop
 8015550:	3710      	adds	r7, #16
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	1fff7a10 	.word	0x1fff7a10
 801555c:	1fff7a14 	.word	0x1fff7a14
 8015560:	1fff7a18 	.word	0x1fff7a18
 8015564:	20000126 	.word	0x20000126
 8015568:	20000136 	.word	0x20000136

0801556c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801556c:	b480      	push	{r7}
 801556e:	b087      	sub	sp, #28
 8015570:	af00      	add	r7, sp, #0
 8015572:	60f8      	str	r0, [r7, #12]
 8015574:	60b9      	str	r1, [r7, #8]
 8015576:	4613      	mov	r3, r2
 8015578:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801557a:	2300      	movs	r3, #0
 801557c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801557e:	2300      	movs	r3, #0
 8015580:	75fb      	strb	r3, [r7, #23]
 8015582:	e027      	b.n	80155d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	0f1b      	lsrs	r3, r3, #28
 8015588:	2b09      	cmp	r3, #9
 801558a:	d80b      	bhi.n	80155a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	0f1b      	lsrs	r3, r3, #28
 8015590:	b2da      	uxtb	r2, r3
 8015592:	7dfb      	ldrb	r3, [r7, #23]
 8015594:	005b      	lsls	r3, r3, #1
 8015596:	4619      	mov	r1, r3
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	440b      	add	r3, r1
 801559c:	3230      	adds	r2, #48	; 0x30
 801559e:	b2d2      	uxtb	r2, r2
 80155a0:	701a      	strb	r2, [r3, #0]
 80155a2:	e00a      	b.n	80155ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	0f1b      	lsrs	r3, r3, #28
 80155a8:	b2da      	uxtb	r2, r3
 80155aa:	7dfb      	ldrb	r3, [r7, #23]
 80155ac:	005b      	lsls	r3, r3, #1
 80155ae:	4619      	mov	r1, r3
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	440b      	add	r3, r1
 80155b4:	3237      	adds	r2, #55	; 0x37
 80155b6:	b2d2      	uxtb	r2, r2
 80155b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	011b      	lsls	r3, r3, #4
 80155be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80155c0:	7dfb      	ldrb	r3, [r7, #23]
 80155c2:	005b      	lsls	r3, r3, #1
 80155c4:	3301      	adds	r3, #1
 80155c6:	68ba      	ldr	r2, [r7, #8]
 80155c8:	4413      	add	r3, r2
 80155ca:	2200      	movs	r2, #0
 80155cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80155ce:	7dfb      	ldrb	r3, [r7, #23]
 80155d0:	3301      	adds	r3, #1
 80155d2:	75fb      	strb	r3, [r7, #23]
 80155d4:	7dfa      	ldrb	r2, [r7, #23]
 80155d6:	79fb      	ldrb	r3, [r7, #7]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d3d3      	bcc.n	8015584 <IntToUnicode+0x18>
  }
}
 80155dc:	bf00      	nop
 80155de:	bf00      	nop
 80155e0:	371c      	adds	r7, #28
 80155e2:	46bd      	mov	sp, r7
 80155e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e8:	4770      	bx	lr
	...

080155ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b0a0      	sub	sp, #128	; 0x80
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80155f8:	2200      	movs	r2, #0
 80155fa:	601a      	str	r2, [r3, #0]
 80155fc:	605a      	str	r2, [r3, #4]
 80155fe:	609a      	str	r2, [r3, #8]
 8015600:	60da      	str	r2, [r3, #12]
 8015602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015604:	f107 0310 	add.w	r3, r7, #16
 8015608:	225c      	movs	r2, #92	; 0x5c
 801560a:	2100      	movs	r1, #0
 801560c:	4618      	mov	r0, r3
 801560e:	f000 fc9b 	bl	8015f48 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801561a:	d149      	bne.n	80156b0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801561c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015620:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8015622:	2300      	movs	r3, #0
 8015624:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015626:	f107 0310 	add.w	r3, r7, #16
 801562a:	4618      	mov	r0, r3
 801562c:	f7f3 ff2a 	bl	8009484 <HAL_RCCEx_PeriphCLKConfig>
 8015630:	4603      	mov	r3, r0
 8015632:	2b00      	cmp	r3, #0
 8015634:	d001      	beq.n	801563a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8015636:	f7ee ff3d 	bl	80044b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801563a:	2300      	movs	r3, #0
 801563c:	60fb      	str	r3, [r7, #12]
 801563e:	4b1e      	ldr	r3, [pc, #120]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 8015640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015642:	4a1d      	ldr	r2, [pc, #116]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 8015644:	f043 0301 	orr.w	r3, r3, #1
 8015648:	6313      	str	r3, [r2, #48]	; 0x30
 801564a:	4b1b      	ldr	r3, [pc, #108]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 801564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801564e:	f003 0301 	and.w	r3, r3, #1
 8015652:	60fb      	str	r3, [r7, #12]
 8015654:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015656:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801565a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801565c:	2302      	movs	r3, #2
 801565e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015660:	2300      	movs	r3, #0
 8015662:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015664:	2303      	movs	r3, #3
 8015666:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015668:	230a      	movs	r3, #10
 801566a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801566c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015670:	4619      	mov	r1, r3
 8015672:	4812      	ldr	r0, [pc, #72]	; (80156bc <HAL_PCD_MspInit+0xd0>)
 8015674:	f7f0 fcdc 	bl	8006030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015678:	4b0f      	ldr	r3, [pc, #60]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 801567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801567c:	4a0e      	ldr	r2, [pc, #56]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 801567e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015682:	6353      	str	r3, [r2, #52]	; 0x34
 8015684:	2300      	movs	r3, #0
 8015686:	60bb      	str	r3, [r7, #8]
 8015688:	4b0b      	ldr	r3, [pc, #44]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 801568a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801568c:	4a0a      	ldr	r2, [pc, #40]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 801568e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015692:	6453      	str	r3, [r2, #68]	; 0x44
 8015694:	4b08      	ldr	r3, [pc, #32]	; (80156b8 <HAL_PCD_MspInit+0xcc>)
 8015696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801569c:	60bb      	str	r3, [r7, #8]
 801569e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80156a0:	2200      	movs	r2, #0
 80156a2:	2105      	movs	r1, #5
 80156a4:	2043      	movs	r0, #67	; 0x43
 80156a6:	f7f0 fc07 	bl	8005eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80156aa:	2043      	movs	r0, #67	; 0x43
 80156ac:	f7f0 fc20 	bl	8005ef0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80156b0:	bf00      	nop
 80156b2:	3780      	adds	r7, #128	; 0x80
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}
 80156b8:	40023800 	.word	0x40023800
 80156bc:	40020000 	.word	0x40020000

080156c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80156d4:	4619      	mov	r1, r3
 80156d6:	4610      	mov	r0, r2
 80156d8:	f7f9 fd19 	bl	800f10e <USBD_LL_SetupStage>
}
 80156dc:	bf00      	nop
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80156f6:	78fa      	ldrb	r2, [r7, #3]
 80156f8:	6879      	ldr	r1, [r7, #4]
 80156fa:	4613      	mov	r3, r2
 80156fc:	00db      	lsls	r3, r3, #3
 80156fe:	4413      	add	r3, r2
 8015700:	009b      	lsls	r3, r3, #2
 8015702:	440b      	add	r3, r1
 8015704:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8015708:	681a      	ldr	r2, [r3, #0]
 801570a:	78fb      	ldrb	r3, [r7, #3]
 801570c:	4619      	mov	r1, r3
 801570e:	f7f9 fd53 	bl	800f1b8 <USBD_LL_DataOutStage>
}
 8015712:	bf00      	nop
 8015714:	3708      	adds	r7, #8
 8015716:	46bd      	mov	sp, r7
 8015718:	bd80      	pop	{r7, pc}

0801571a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801571a:	b580      	push	{r7, lr}
 801571c:	b082      	sub	sp, #8
 801571e:	af00      	add	r7, sp, #0
 8015720:	6078      	str	r0, [r7, #4]
 8015722:	460b      	mov	r3, r1
 8015724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801572c:	78fa      	ldrb	r2, [r7, #3]
 801572e:	6879      	ldr	r1, [r7, #4]
 8015730:	4613      	mov	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	4413      	add	r3, r2
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	440b      	add	r3, r1
 801573a:	334c      	adds	r3, #76	; 0x4c
 801573c:	681a      	ldr	r2, [r3, #0]
 801573e:	78fb      	ldrb	r3, [r7, #3]
 8015740:	4619      	mov	r1, r3
 8015742:	f7f9 fdec 	bl	800f31e <USBD_LL_DataInStage>
}
 8015746:	bf00      	nop
 8015748:	3708      	adds	r7, #8
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}

0801574e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801574e:	b580      	push	{r7, lr}
 8015750:	b082      	sub	sp, #8
 8015752:	af00      	add	r7, sp, #0
 8015754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801575c:	4618      	mov	r0, r3
 801575e:	f7f9 ff20 	bl	800f5a2 <USBD_LL_SOF>
}
 8015762:	bf00      	nop
 8015764:	3708      	adds	r7, #8
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}

0801576a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801576a:	b580      	push	{r7, lr}
 801576c:	b084      	sub	sp, #16
 801576e:	af00      	add	r7, sp, #0
 8015770:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015772:	2301      	movs	r3, #1
 8015774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d102      	bne.n	8015784 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801577e:	2300      	movs	r3, #0
 8015780:	73fb      	strb	r3, [r7, #15]
 8015782:	e008      	b.n	8015796 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	68db      	ldr	r3, [r3, #12]
 8015788:	2b02      	cmp	r3, #2
 801578a:	d102      	bne.n	8015792 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801578c:	2301      	movs	r3, #1
 801578e:	73fb      	strb	r3, [r7, #15]
 8015790:	e001      	b.n	8015796 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015792:	f7ee fe8f 	bl	80044b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801579c:	7bfa      	ldrb	r2, [r7, #15]
 801579e:	4611      	mov	r1, r2
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7f9 fec0 	bl	800f526 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7f9 fe68 	bl	800f482 <USBD_LL_Reset>
}
 80157b2:	bf00      	nop
 80157b4:	3710      	adds	r7, #16
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
	...

080157bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b082      	sub	sp, #8
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7f9 febb 	bl	800f546 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	6812      	ldr	r2, [r2, #0]
 80157de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80157e2:	f043 0301 	orr.w	r3, r3, #1
 80157e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6a1b      	ldr	r3, [r3, #32]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d005      	beq.n	80157fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157f0:	4b04      	ldr	r3, [pc, #16]	; (8015804 <HAL_PCD_SuspendCallback+0x48>)
 80157f2:	691b      	ldr	r3, [r3, #16]
 80157f4:	4a03      	ldr	r2, [pc, #12]	; (8015804 <HAL_PCD_SuspendCallback+0x48>)
 80157f6:	f043 0306 	orr.w	r3, r3, #6
 80157fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80157fc:	bf00      	nop
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	e000ed00 	.word	0xe000ed00

08015808 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015816:	4618      	mov	r0, r3
 8015818:	f7f9 feab 	bl	800f572 <USBD_LL_Resume>
}
 801581c:	bf00      	nop
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	460b      	mov	r3, r1
 801582e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015836:	78fa      	ldrb	r2, [r7, #3]
 8015838:	4611      	mov	r1, r2
 801583a:	4618      	mov	r0, r3
 801583c:	f7f9 ff03 	bl	800f646 <USBD_LL_IsoOUTIncomplete>
}
 8015840:	bf00      	nop
 8015842:	3708      	adds	r7, #8
 8015844:	46bd      	mov	sp, r7
 8015846:	bd80      	pop	{r7, pc}

08015848 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015848:	b580      	push	{r7, lr}
 801584a:	b082      	sub	sp, #8
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	460b      	mov	r3, r1
 8015852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801585a:	78fa      	ldrb	r2, [r7, #3]
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7f9 febf 	bl	800f5e2 <USBD_LL_IsoINIncomplete>
}
 8015864:	bf00      	nop
 8015866:	3708      	adds	r7, #8
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}

0801586c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801587a:	4618      	mov	r0, r3
 801587c:	f7f9 ff15 	bl	800f6aa <USBD_LL_DevConnected>
}
 8015880:	bf00      	nop
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}

08015888 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015896:	4618      	mov	r0, r3
 8015898:	f7f9 ff12 	bl	800f6c0 <USBD_LL_DevDisconnected>
}
 801589c:	bf00      	nop
 801589e:	3708      	adds	r7, #8
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d13c      	bne.n	801592e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80158b4:	4a20      	ldr	r2, [pc, #128]	; (8015938 <USBD_LL_Init+0x94>)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	4a1e      	ldr	r2, [pc, #120]	; (8015938 <USBD_LL_Init+0x94>)
 80158c0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80158c4:	4b1c      	ldr	r3, [pc, #112]	; (8015938 <USBD_LL_Init+0x94>)
 80158c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80158ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80158cc:	4b1a      	ldr	r3, [pc, #104]	; (8015938 <USBD_LL_Init+0x94>)
 80158ce:	2206      	movs	r2, #6
 80158d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80158d2:	4b19      	ldr	r3, [pc, #100]	; (8015938 <USBD_LL_Init+0x94>)
 80158d4:	2202      	movs	r2, #2
 80158d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80158d8:	4b17      	ldr	r3, [pc, #92]	; (8015938 <USBD_LL_Init+0x94>)
 80158da:	2200      	movs	r2, #0
 80158dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80158de:	4b16      	ldr	r3, [pc, #88]	; (8015938 <USBD_LL_Init+0x94>)
 80158e0:	2202      	movs	r2, #2
 80158e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80158e4:	4b14      	ldr	r3, [pc, #80]	; (8015938 <USBD_LL_Init+0x94>)
 80158e6:	2200      	movs	r2, #0
 80158e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80158ea:	4b13      	ldr	r3, [pc, #76]	; (8015938 <USBD_LL_Init+0x94>)
 80158ec:	2200      	movs	r2, #0
 80158ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80158f0:	4b11      	ldr	r3, [pc, #68]	; (8015938 <USBD_LL_Init+0x94>)
 80158f2:	2200      	movs	r2, #0
 80158f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80158f6:	4b10      	ldr	r3, [pc, #64]	; (8015938 <USBD_LL_Init+0x94>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80158fc:	4b0e      	ldr	r3, [pc, #56]	; (8015938 <USBD_LL_Init+0x94>)
 80158fe:	2200      	movs	r2, #0
 8015900:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015902:	480d      	ldr	r0, [pc, #52]	; (8015938 <USBD_LL_Init+0x94>)
 8015904:	f7f2 f9a9 	bl	8007c5a <HAL_PCD_Init>
 8015908:	4603      	mov	r3, r0
 801590a:	2b00      	cmp	r3, #0
 801590c:	d001      	beq.n	8015912 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801590e:	f7ee fdd1 	bl	80044b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015912:	2180      	movs	r1, #128	; 0x80
 8015914:	4808      	ldr	r0, [pc, #32]	; (8015938 <USBD_LL_Init+0x94>)
 8015916:	f7f3 fc34 	bl	8009182 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801591a:	2240      	movs	r2, #64	; 0x40
 801591c:	2100      	movs	r1, #0
 801591e:	4806      	ldr	r0, [pc, #24]	; (8015938 <USBD_LL_Init+0x94>)
 8015920:	f7f3 fbe8 	bl	80090f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015924:	2280      	movs	r2, #128	; 0x80
 8015926:	2101      	movs	r1, #1
 8015928:	4803      	ldr	r0, [pc, #12]	; (8015938 <USBD_LL_Init+0x94>)
 801592a:	f7f3 fbe3 	bl	80090f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801592e:	2300      	movs	r3, #0
}
 8015930:	4618      	mov	r0, r3
 8015932:	3708      	adds	r7, #8
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}
 8015938:	20006928 	.word	0x20006928

0801593c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b084      	sub	sp, #16
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015944:	2300      	movs	r3, #0
 8015946:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015948:	2300      	movs	r3, #0
 801594a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015952:	4618      	mov	r0, r3
 8015954:	f7f2 faa5 	bl	8007ea2 <HAL_PCD_Start>
 8015958:	4603      	mov	r3, r0
 801595a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801595c:	7bfb      	ldrb	r3, [r7, #15]
 801595e:	4618      	mov	r0, r3
 8015960:	f000 f990 	bl	8015c84 <USBD_Get_USB_Status>
 8015964:	4603      	mov	r3, r0
 8015966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015968:	7bbb      	ldrb	r3, [r7, #14]
}
 801596a:	4618      	mov	r0, r3
 801596c:	3710      	adds	r7, #16
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}

08015972 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015972:	b580      	push	{r7, lr}
 8015974:	b084      	sub	sp, #16
 8015976:	af00      	add	r7, sp, #0
 8015978:	6078      	str	r0, [r7, #4]
 801597a:	4608      	mov	r0, r1
 801597c:	4611      	mov	r1, r2
 801597e:	461a      	mov	r2, r3
 8015980:	4603      	mov	r3, r0
 8015982:	70fb      	strb	r3, [r7, #3]
 8015984:	460b      	mov	r3, r1
 8015986:	70bb      	strb	r3, [r7, #2]
 8015988:	4613      	mov	r3, r2
 801598a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801598c:	2300      	movs	r3, #0
 801598e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015990:	2300      	movs	r3, #0
 8015992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801599a:	78bb      	ldrb	r3, [r7, #2]
 801599c:	883a      	ldrh	r2, [r7, #0]
 801599e:	78f9      	ldrb	r1, [r7, #3]
 80159a0:	f7f2 ffa3 	bl	80088ea <HAL_PCD_EP_Open>
 80159a4:	4603      	mov	r3, r0
 80159a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159a8:	7bfb      	ldrb	r3, [r7, #15]
 80159aa:	4618      	mov	r0, r3
 80159ac:	f000 f96a 	bl	8015c84 <USBD_Get_USB_Status>
 80159b0:	4603      	mov	r3, r0
 80159b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80159b6:	4618      	mov	r0, r3
 80159b8:	3710      	adds	r7, #16
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bd80      	pop	{r7, pc}

080159be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159be:	b580      	push	{r7, lr}
 80159c0:	b084      	sub	sp, #16
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
 80159c6:	460b      	mov	r3, r1
 80159c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159ca:	2300      	movs	r3, #0
 80159cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159ce:	2300      	movs	r3, #0
 80159d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80159d8:	78fa      	ldrb	r2, [r7, #3]
 80159da:	4611      	mov	r1, r2
 80159dc:	4618      	mov	r0, r3
 80159de:	f7f2 ffec 	bl	80089ba <HAL_PCD_EP_Close>
 80159e2:	4603      	mov	r3, r0
 80159e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159e6:	7bfb      	ldrb	r3, [r7, #15]
 80159e8:	4618      	mov	r0, r3
 80159ea:	f000 f94b 	bl	8015c84 <USBD_Get_USB_Status>
 80159ee:	4603      	mov	r3, r0
 80159f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3710      	adds	r7, #16
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}

080159fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b084      	sub	sp, #16
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	460b      	mov	r3, r1
 8015a06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a08:	2300      	movs	r3, #0
 8015a0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a16:	78fa      	ldrb	r2, [r7, #3]
 8015a18:	4611      	mov	r1, r2
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7f3 f8c4 	bl	8008ba8 <HAL_PCD_EP_SetStall>
 8015a20:	4603      	mov	r3, r0
 8015a22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a24:	7bfb      	ldrb	r3, [r7, #15]
 8015a26:	4618      	mov	r0, r3
 8015a28:	f000 f92c 	bl	8015c84 <USBD_Get_USB_Status>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a30:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3710      	adds	r7, #16
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}

08015a3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a3a:	b580      	push	{r7, lr}
 8015a3c:	b084      	sub	sp, #16
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
 8015a42:	460b      	mov	r3, r1
 8015a44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a46:	2300      	movs	r3, #0
 8015a48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a54:	78fa      	ldrb	r2, [r7, #3]
 8015a56:	4611      	mov	r1, r2
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7f3 f909 	bl	8008c70 <HAL_PCD_EP_ClrStall>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a62:	7bfb      	ldrb	r3, [r7, #15]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f000 f90d 	bl	8015c84 <USBD_Get_USB_Status>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a70:	4618      	mov	r0, r3
 8015a72:	3710      	adds	r7, #16
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bd80      	pop	{r7, pc}

08015a78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a78:	b480      	push	{r7}
 8015a7a:	b085      	sub	sp, #20
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
 8015a80:	460b      	mov	r3, r1
 8015a82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015a8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	da0b      	bge.n	8015aac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015a94:	78fb      	ldrb	r3, [r7, #3]
 8015a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a9a:	68f9      	ldr	r1, [r7, #12]
 8015a9c:	4613      	mov	r3, r2
 8015a9e:	00db      	lsls	r3, r3, #3
 8015aa0:	4413      	add	r3, r2
 8015aa2:	009b      	lsls	r3, r3, #2
 8015aa4:	440b      	add	r3, r1
 8015aa6:	333e      	adds	r3, #62	; 0x3e
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	e00b      	b.n	8015ac4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015aac:	78fb      	ldrb	r3, [r7, #3]
 8015aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ab2:	68f9      	ldr	r1, [r7, #12]
 8015ab4:	4613      	mov	r3, r2
 8015ab6:	00db      	lsls	r3, r3, #3
 8015ab8:	4413      	add	r3, r2
 8015aba:	009b      	lsls	r3, r3, #2
 8015abc:	440b      	add	r3, r1
 8015abe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015ac2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	3714      	adds	r7, #20
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ace:	4770      	bx	lr

08015ad0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b084      	sub	sp, #16
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
 8015ad8:	460b      	mov	r3, r1
 8015ada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015adc:	2300      	movs	r3, #0
 8015ade:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015aea:	78fa      	ldrb	r2, [r7, #3]
 8015aec:	4611      	mov	r1, r2
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7f2 fed6 	bl	80088a0 <HAL_PCD_SetAddress>
 8015af4:	4603      	mov	r3, r0
 8015af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015af8:	7bfb      	ldrb	r3, [r7, #15]
 8015afa:	4618      	mov	r0, r3
 8015afc:	f000 f8c2 	bl	8015c84 <USBD_Get_USB_Status>
 8015b00:	4603      	mov	r3, r0
 8015b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3710      	adds	r7, #16
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b086      	sub	sp, #24
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	60f8      	str	r0, [r7, #12]
 8015b16:	607a      	str	r2, [r7, #4]
 8015b18:	603b      	str	r3, [r7, #0]
 8015b1a:	460b      	mov	r3, r1
 8015b1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b22:	2300      	movs	r3, #0
 8015b24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015b2c:	7af9      	ldrb	r1, [r7, #11]
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	687a      	ldr	r2, [r7, #4]
 8015b32:	f7f2 ffef 	bl	8008b14 <HAL_PCD_EP_Transmit>
 8015b36:	4603      	mov	r3, r0
 8015b38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b3a:	7dfb      	ldrb	r3, [r7, #23]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f000 f8a1 	bl	8015c84 <USBD_Get_USB_Status>
 8015b42:	4603      	mov	r3, r0
 8015b44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b46:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b48:	4618      	mov	r0, r3
 8015b4a:	3718      	adds	r7, #24
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	60f8      	str	r0, [r7, #12]
 8015b58:	607a      	str	r2, [r7, #4]
 8015b5a:	603b      	str	r3, [r7, #0]
 8015b5c:	460b      	mov	r3, r1
 8015b5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b60:	2300      	movs	r3, #0
 8015b62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b64:	2300      	movs	r3, #0
 8015b66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015b6e:	7af9      	ldrb	r1, [r7, #11]
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	687a      	ldr	r2, [r7, #4]
 8015b74:	f7f2 ff6b 	bl	8008a4e <HAL_PCD_EP_Receive>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b7c:	7dfb      	ldrb	r3, [r7, #23]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f000 f880 	bl	8015c84 <USBD_Get_USB_Status>
 8015b84:	4603      	mov	r3, r0
 8015b86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b88:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3718      	adds	r7, #24
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}

08015b92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b92:	b580      	push	{r7, lr}
 8015b94:	b082      	sub	sp, #8
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	6078      	str	r0, [r7, #4]
 8015b9a:	460b      	mov	r3, r1
 8015b9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015ba4:	78fa      	ldrb	r2, [r7, #3]
 8015ba6:	4611      	mov	r1, r2
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7f2 ff9b 	bl	8008ae4 <HAL_PCD_EP_GetRxCount>
 8015bae:	4603      	mov	r3, r0
}
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	3708      	adds	r7, #8
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}

08015bb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b082      	sub	sp, #8
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	460b      	mov	r3, r1
 8015bc2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015bc4:	78fb      	ldrb	r3, [r7, #3]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d002      	beq.n	8015bd0 <HAL_PCDEx_LPM_Callback+0x18>
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d01f      	beq.n	8015c0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8015bce:	e03b      	b.n	8015c48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	6a1b      	ldr	r3, [r3, #32]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d007      	beq.n	8015be8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8015bd8:	f7ef f890 	bl	8004cfc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015bdc:	4b1c      	ldr	r3, [pc, #112]	; (8015c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8015bde:	691b      	ldr	r3, [r3, #16]
 8015be0:	4a1b      	ldr	r2, [pc, #108]	; (8015c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8015be2:	f023 0306 	bic.w	r3, r3, #6
 8015be6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	687a      	ldr	r2, [r7, #4]
 8015bf4:	6812      	ldr	r2, [r2, #0]
 8015bf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015bfa:	f023 0301 	bic.w	r3, r3, #1
 8015bfe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7f9 fcb3 	bl	800f572 <USBD_LL_Resume>
    break;
 8015c0c:	e01c      	b.n	8015c48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	687a      	ldr	r2, [r7, #4]
 8015c1a:	6812      	ldr	r2, [r2, #0]
 8015c1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015c20:	f043 0301 	orr.w	r3, r3, #1
 8015c24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f7f9 fc8a 	bl	800f546 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6a1b      	ldr	r3, [r3, #32]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d005      	beq.n	8015c46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c3a:	4b05      	ldr	r3, [pc, #20]	; (8015c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8015c3c:	691b      	ldr	r3, [r3, #16]
 8015c3e:	4a04      	ldr	r2, [pc, #16]	; (8015c50 <HAL_PCDEx_LPM_Callback+0x98>)
 8015c40:	f043 0306 	orr.w	r3, r3, #6
 8015c44:	6113      	str	r3, [r2, #16]
    break;
 8015c46:	bf00      	nop
}
 8015c48:	bf00      	nop
 8015c4a:	3708      	adds	r7, #8
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	e000ed00 	.word	0xe000ed00

08015c54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015c5c:	4b03      	ldr	r3, [pc, #12]	; (8015c6c <USBD_static_malloc+0x18>)
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	370c      	adds	r7, #12
 8015c62:	46bd      	mov	sp, r7
 8015c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop
 8015c6c:	20006e34 	.word	0x20006e34

08015c70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015c70:	b480      	push	{r7}
 8015c72:	b083      	sub	sp, #12
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]

}
 8015c78:	bf00      	nop
 8015c7a:	370c      	adds	r7, #12
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c82:	4770      	bx	lr

08015c84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c84:	b480      	push	{r7}
 8015c86:	b085      	sub	sp, #20
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015c92:	79fb      	ldrb	r3, [r7, #7]
 8015c94:	2b03      	cmp	r3, #3
 8015c96:	d817      	bhi.n	8015cc8 <USBD_Get_USB_Status+0x44>
 8015c98:	a201      	add	r2, pc, #4	; (adr r2, 8015ca0 <USBD_Get_USB_Status+0x1c>)
 8015c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c9e:	bf00      	nop
 8015ca0:	08015cb1 	.word	0x08015cb1
 8015ca4:	08015cb7 	.word	0x08015cb7
 8015ca8:	08015cbd 	.word	0x08015cbd
 8015cac:	08015cc3 	.word	0x08015cc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8015cb4:	e00b      	b.n	8015cce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015cb6:	2303      	movs	r3, #3
 8015cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8015cba:	e008      	b.n	8015cce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8015cc0:	e005      	b.n	8015cce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015cc2:	2303      	movs	r3, #3
 8015cc4:	73fb      	strb	r3, [r7, #15]
    break;
 8015cc6:	e002      	b.n	8015cce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015cc8:	2303      	movs	r3, #3
 8015cca:	73fb      	strb	r3, [r7, #15]
    break;
 8015ccc:	bf00      	nop
  }
  return usb_status;
 8015cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	3714      	adds	r7, #20
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cda:	4770      	bx	lr

08015cdc <__errno>:
 8015cdc:	4b01      	ldr	r3, [pc, #4]	; (8015ce4 <__errno+0x8>)
 8015cde:	6818      	ldr	r0, [r3, #0]
 8015ce0:	4770      	bx	lr
 8015ce2:	bf00      	nop
 8015ce4:	20000140 	.word	0x20000140

08015ce8 <std>:
 8015ce8:	2300      	movs	r3, #0
 8015cea:	b510      	push	{r4, lr}
 8015cec:	4604      	mov	r4, r0
 8015cee:	e9c0 3300 	strd	r3, r3, [r0]
 8015cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015cf6:	6083      	str	r3, [r0, #8]
 8015cf8:	8181      	strh	r1, [r0, #12]
 8015cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8015cfc:	81c2      	strh	r2, [r0, #14]
 8015cfe:	6183      	str	r3, [r0, #24]
 8015d00:	4619      	mov	r1, r3
 8015d02:	2208      	movs	r2, #8
 8015d04:	305c      	adds	r0, #92	; 0x5c
 8015d06:	f000 f91f 	bl	8015f48 <memset>
 8015d0a:	4b05      	ldr	r3, [pc, #20]	; (8015d20 <std+0x38>)
 8015d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8015d0e:	4b05      	ldr	r3, [pc, #20]	; (8015d24 <std+0x3c>)
 8015d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8015d12:	4b05      	ldr	r3, [pc, #20]	; (8015d28 <std+0x40>)
 8015d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d16:	4b05      	ldr	r3, [pc, #20]	; (8015d2c <std+0x44>)
 8015d18:	6224      	str	r4, [r4, #32]
 8015d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8015d1c:	bd10      	pop	{r4, pc}
 8015d1e:	bf00      	nop
 8015d20:	08016bfd 	.word	0x08016bfd
 8015d24:	08016c1f 	.word	0x08016c1f
 8015d28:	08016c57 	.word	0x08016c57
 8015d2c:	08016c7b 	.word	0x08016c7b

08015d30 <_cleanup_r>:
 8015d30:	4901      	ldr	r1, [pc, #4]	; (8015d38 <_cleanup_r+0x8>)
 8015d32:	f000 b8af 	b.w	8015e94 <_fwalk_reent>
 8015d36:	bf00      	nop
 8015d38:	08017c89 	.word	0x08017c89

08015d3c <__sfmoreglue>:
 8015d3c:	b570      	push	{r4, r5, r6, lr}
 8015d3e:	2268      	movs	r2, #104	; 0x68
 8015d40:	1e4d      	subs	r5, r1, #1
 8015d42:	4355      	muls	r5, r2
 8015d44:	460e      	mov	r6, r1
 8015d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015d4a:	f000 f971 	bl	8016030 <_malloc_r>
 8015d4e:	4604      	mov	r4, r0
 8015d50:	b140      	cbz	r0, 8015d64 <__sfmoreglue+0x28>
 8015d52:	2100      	movs	r1, #0
 8015d54:	e9c0 1600 	strd	r1, r6, [r0]
 8015d58:	300c      	adds	r0, #12
 8015d5a:	60a0      	str	r0, [r4, #8]
 8015d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015d60:	f000 f8f2 	bl	8015f48 <memset>
 8015d64:	4620      	mov	r0, r4
 8015d66:	bd70      	pop	{r4, r5, r6, pc}

08015d68 <__sfp_lock_acquire>:
 8015d68:	4801      	ldr	r0, [pc, #4]	; (8015d70 <__sfp_lock_acquire+0x8>)
 8015d6a:	f7ef bb83 	b.w	8005474 <__retarget_lock_acquire_recursive>
 8015d6e:	bf00      	nop
 8015d70:	200007a0 	.word	0x200007a0

08015d74 <__sfp_lock_release>:
 8015d74:	4801      	ldr	r0, [pc, #4]	; (8015d7c <__sfp_lock_release+0x8>)
 8015d76:	f7ef bb91 	b.w	800549c <__retarget_lock_release_recursive>
 8015d7a:	bf00      	nop
 8015d7c:	200007a0 	.word	0x200007a0

08015d80 <__sinit_lock_acquire>:
 8015d80:	4801      	ldr	r0, [pc, #4]	; (8015d88 <__sinit_lock_acquire+0x8>)
 8015d82:	f7ef bb77 	b.w	8005474 <__retarget_lock_acquire_recursive>
 8015d86:	bf00      	nop
 8015d88:	20000794 	.word	0x20000794

08015d8c <__sinit_lock_release>:
 8015d8c:	4801      	ldr	r0, [pc, #4]	; (8015d94 <__sinit_lock_release+0x8>)
 8015d8e:	f7ef bb85 	b.w	800549c <__retarget_lock_release_recursive>
 8015d92:	bf00      	nop
 8015d94:	20000794 	.word	0x20000794

08015d98 <__sinit>:
 8015d98:	b510      	push	{r4, lr}
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	f7ff fff0 	bl	8015d80 <__sinit_lock_acquire>
 8015da0:	69a3      	ldr	r3, [r4, #24]
 8015da2:	b11b      	cbz	r3, 8015dac <__sinit+0x14>
 8015da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015da8:	f7ff bff0 	b.w	8015d8c <__sinit_lock_release>
 8015dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015db0:	6523      	str	r3, [r4, #80]	; 0x50
 8015db2:	4b13      	ldr	r3, [pc, #76]	; (8015e00 <__sinit+0x68>)
 8015db4:	4a13      	ldr	r2, [pc, #76]	; (8015e04 <__sinit+0x6c>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8015dba:	42a3      	cmp	r3, r4
 8015dbc:	bf04      	itt	eq
 8015dbe:	2301      	moveq	r3, #1
 8015dc0:	61a3      	streq	r3, [r4, #24]
 8015dc2:	4620      	mov	r0, r4
 8015dc4:	f000 f820 	bl	8015e08 <__sfp>
 8015dc8:	6060      	str	r0, [r4, #4]
 8015dca:	4620      	mov	r0, r4
 8015dcc:	f000 f81c 	bl	8015e08 <__sfp>
 8015dd0:	60a0      	str	r0, [r4, #8]
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f000 f818 	bl	8015e08 <__sfp>
 8015dd8:	2200      	movs	r2, #0
 8015dda:	60e0      	str	r0, [r4, #12]
 8015ddc:	2104      	movs	r1, #4
 8015dde:	6860      	ldr	r0, [r4, #4]
 8015de0:	f7ff ff82 	bl	8015ce8 <std>
 8015de4:	68a0      	ldr	r0, [r4, #8]
 8015de6:	2201      	movs	r2, #1
 8015de8:	2109      	movs	r1, #9
 8015dea:	f7ff ff7d 	bl	8015ce8 <std>
 8015dee:	68e0      	ldr	r0, [r4, #12]
 8015df0:	2202      	movs	r2, #2
 8015df2:	2112      	movs	r1, #18
 8015df4:	f7ff ff78 	bl	8015ce8 <std>
 8015df8:	2301      	movs	r3, #1
 8015dfa:	61a3      	str	r3, [r4, #24]
 8015dfc:	e7d2      	b.n	8015da4 <__sinit+0xc>
 8015dfe:	bf00      	nop
 8015e00:	08019878 	.word	0x08019878
 8015e04:	08015d31 	.word	0x08015d31

08015e08 <__sfp>:
 8015e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e0a:	4607      	mov	r7, r0
 8015e0c:	f7ff ffac 	bl	8015d68 <__sfp_lock_acquire>
 8015e10:	4b1e      	ldr	r3, [pc, #120]	; (8015e8c <__sfp+0x84>)
 8015e12:	681e      	ldr	r6, [r3, #0]
 8015e14:	69b3      	ldr	r3, [r6, #24]
 8015e16:	b913      	cbnz	r3, 8015e1e <__sfp+0x16>
 8015e18:	4630      	mov	r0, r6
 8015e1a:	f7ff ffbd 	bl	8015d98 <__sinit>
 8015e1e:	3648      	adds	r6, #72	; 0x48
 8015e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015e24:	3b01      	subs	r3, #1
 8015e26:	d503      	bpl.n	8015e30 <__sfp+0x28>
 8015e28:	6833      	ldr	r3, [r6, #0]
 8015e2a:	b30b      	cbz	r3, 8015e70 <__sfp+0x68>
 8015e2c:	6836      	ldr	r6, [r6, #0]
 8015e2e:	e7f7      	b.n	8015e20 <__sfp+0x18>
 8015e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015e34:	b9d5      	cbnz	r5, 8015e6c <__sfp+0x64>
 8015e36:	4b16      	ldr	r3, [pc, #88]	; (8015e90 <__sfp+0x88>)
 8015e38:	60e3      	str	r3, [r4, #12]
 8015e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8015e40:	f7ef faf2 	bl	8005428 <__retarget_lock_init_recursive>
 8015e44:	f7ff ff96 	bl	8015d74 <__sfp_lock_release>
 8015e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015e50:	6025      	str	r5, [r4, #0]
 8015e52:	61a5      	str	r5, [r4, #24]
 8015e54:	2208      	movs	r2, #8
 8015e56:	4629      	mov	r1, r5
 8015e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015e5c:	f000 f874 	bl	8015f48 <memset>
 8015e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015e68:	4620      	mov	r0, r4
 8015e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e6c:	3468      	adds	r4, #104	; 0x68
 8015e6e:	e7d9      	b.n	8015e24 <__sfp+0x1c>
 8015e70:	2104      	movs	r1, #4
 8015e72:	4638      	mov	r0, r7
 8015e74:	f7ff ff62 	bl	8015d3c <__sfmoreglue>
 8015e78:	4604      	mov	r4, r0
 8015e7a:	6030      	str	r0, [r6, #0]
 8015e7c:	2800      	cmp	r0, #0
 8015e7e:	d1d5      	bne.n	8015e2c <__sfp+0x24>
 8015e80:	f7ff ff78 	bl	8015d74 <__sfp_lock_release>
 8015e84:	230c      	movs	r3, #12
 8015e86:	603b      	str	r3, [r7, #0]
 8015e88:	e7ee      	b.n	8015e68 <__sfp+0x60>
 8015e8a:	bf00      	nop
 8015e8c:	08019878 	.word	0x08019878
 8015e90:	ffff0001 	.word	0xffff0001

08015e94 <_fwalk_reent>:
 8015e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e98:	4606      	mov	r6, r0
 8015e9a:	4688      	mov	r8, r1
 8015e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015ea0:	2700      	movs	r7, #0
 8015ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8015eaa:	d505      	bpl.n	8015eb8 <_fwalk_reent+0x24>
 8015eac:	6824      	ldr	r4, [r4, #0]
 8015eae:	2c00      	cmp	r4, #0
 8015eb0:	d1f7      	bne.n	8015ea2 <_fwalk_reent+0xe>
 8015eb2:	4638      	mov	r0, r7
 8015eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eb8:	89ab      	ldrh	r3, [r5, #12]
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	d907      	bls.n	8015ece <_fwalk_reent+0x3a>
 8015ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015ec2:	3301      	adds	r3, #1
 8015ec4:	d003      	beq.n	8015ece <_fwalk_reent+0x3a>
 8015ec6:	4629      	mov	r1, r5
 8015ec8:	4630      	mov	r0, r6
 8015eca:	47c0      	blx	r8
 8015ecc:	4307      	orrs	r7, r0
 8015ece:	3568      	adds	r5, #104	; 0x68
 8015ed0:	e7e9      	b.n	8015ea6 <_fwalk_reent+0x12>
	...

08015ed4 <__libc_init_array>:
 8015ed4:	b570      	push	{r4, r5, r6, lr}
 8015ed6:	4d0d      	ldr	r5, [pc, #52]	; (8015f0c <__libc_init_array+0x38>)
 8015ed8:	4c0d      	ldr	r4, [pc, #52]	; (8015f10 <__libc_init_array+0x3c>)
 8015eda:	1b64      	subs	r4, r4, r5
 8015edc:	10a4      	asrs	r4, r4, #2
 8015ede:	2600      	movs	r6, #0
 8015ee0:	42a6      	cmp	r6, r4
 8015ee2:	d109      	bne.n	8015ef8 <__libc_init_array+0x24>
 8015ee4:	4d0b      	ldr	r5, [pc, #44]	; (8015f14 <__libc_init_array+0x40>)
 8015ee6:	4c0c      	ldr	r4, [pc, #48]	; (8015f18 <__libc_init_array+0x44>)
 8015ee8:	f003 fa06 	bl	80192f8 <_init>
 8015eec:	1b64      	subs	r4, r4, r5
 8015eee:	10a4      	asrs	r4, r4, #2
 8015ef0:	2600      	movs	r6, #0
 8015ef2:	42a6      	cmp	r6, r4
 8015ef4:	d105      	bne.n	8015f02 <__libc_init_array+0x2e>
 8015ef6:	bd70      	pop	{r4, r5, r6, pc}
 8015ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015efc:	4798      	blx	r3
 8015efe:	3601      	adds	r6, #1
 8015f00:	e7ee      	b.n	8015ee0 <__libc_init_array+0xc>
 8015f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f06:	4798      	blx	r3
 8015f08:	3601      	adds	r6, #1
 8015f0a:	e7f2      	b.n	8015ef2 <__libc_init_array+0x1e>
 8015f0c:	08019c14 	.word	0x08019c14
 8015f10:	08019c14 	.word	0x08019c14
 8015f14:	08019c14 	.word	0x08019c14
 8015f18:	08019c18 	.word	0x08019c18

08015f1c <malloc>:
 8015f1c:	4b02      	ldr	r3, [pc, #8]	; (8015f28 <malloc+0xc>)
 8015f1e:	4601      	mov	r1, r0
 8015f20:	6818      	ldr	r0, [r3, #0]
 8015f22:	f000 b885 	b.w	8016030 <_malloc_r>
 8015f26:	bf00      	nop
 8015f28:	20000140 	.word	0x20000140

08015f2c <memcpy>:
 8015f2c:	440a      	add	r2, r1
 8015f2e:	4291      	cmp	r1, r2
 8015f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f34:	d100      	bne.n	8015f38 <memcpy+0xc>
 8015f36:	4770      	bx	lr
 8015f38:	b510      	push	{r4, lr}
 8015f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f42:	4291      	cmp	r1, r2
 8015f44:	d1f9      	bne.n	8015f3a <memcpy+0xe>
 8015f46:	bd10      	pop	{r4, pc}

08015f48 <memset>:
 8015f48:	4402      	add	r2, r0
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	4293      	cmp	r3, r2
 8015f4e:	d100      	bne.n	8015f52 <memset+0xa>
 8015f50:	4770      	bx	lr
 8015f52:	f803 1b01 	strb.w	r1, [r3], #1
 8015f56:	e7f9      	b.n	8015f4c <memset+0x4>

08015f58 <_free_r>:
 8015f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f5a:	2900      	cmp	r1, #0
 8015f5c:	d044      	beq.n	8015fe8 <_free_r+0x90>
 8015f5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f62:	9001      	str	r0, [sp, #4]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f1a1 0404 	sub.w	r4, r1, #4
 8015f6a:	bfb8      	it	lt
 8015f6c:	18e4      	addlt	r4, r4, r3
 8015f6e:	f001 ff55 	bl	8017e1c <__malloc_lock>
 8015f72:	4a1e      	ldr	r2, [pc, #120]	; (8015fec <_free_r+0x94>)
 8015f74:	9801      	ldr	r0, [sp, #4]
 8015f76:	6813      	ldr	r3, [r2, #0]
 8015f78:	b933      	cbnz	r3, 8015f88 <_free_r+0x30>
 8015f7a:	6063      	str	r3, [r4, #4]
 8015f7c:	6014      	str	r4, [r2, #0]
 8015f7e:	b003      	add	sp, #12
 8015f80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f84:	f001 bf50 	b.w	8017e28 <__malloc_unlock>
 8015f88:	42a3      	cmp	r3, r4
 8015f8a:	d908      	bls.n	8015f9e <_free_r+0x46>
 8015f8c:	6825      	ldr	r5, [r4, #0]
 8015f8e:	1961      	adds	r1, r4, r5
 8015f90:	428b      	cmp	r3, r1
 8015f92:	bf01      	itttt	eq
 8015f94:	6819      	ldreq	r1, [r3, #0]
 8015f96:	685b      	ldreq	r3, [r3, #4]
 8015f98:	1949      	addeq	r1, r1, r5
 8015f9a:	6021      	streq	r1, [r4, #0]
 8015f9c:	e7ed      	b.n	8015f7a <_free_r+0x22>
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	685b      	ldr	r3, [r3, #4]
 8015fa2:	b10b      	cbz	r3, 8015fa8 <_free_r+0x50>
 8015fa4:	42a3      	cmp	r3, r4
 8015fa6:	d9fa      	bls.n	8015f9e <_free_r+0x46>
 8015fa8:	6811      	ldr	r1, [r2, #0]
 8015faa:	1855      	adds	r5, r2, r1
 8015fac:	42a5      	cmp	r5, r4
 8015fae:	d10b      	bne.n	8015fc8 <_free_r+0x70>
 8015fb0:	6824      	ldr	r4, [r4, #0]
 8015fb2:	4421      	add	r1, r4
 8015fb4:	1854      	adds	r4, r2, r1
 8015fb6:	42a3      	cmp	r3, r4
 8015fb8:	6011      	str	r1, [r2, #0]
 8015fba:	d1e0      	bne.n	8015f7e <_free_r+0x26>
 8015fbc:	681c      	ldr	r4, [r3, #0]
 8015fbe:	685b      	ldr	r3, [r3, #4]
 8015fc0:	6053      	str	r3, [r2, #4]
 8015fc2:	4421      	add	r1, r4
 8015fc4:	6011      	str	r1, [r2, #0]
 8015fc6:	e7da      	b.n	8015f7e <_free_r+0x26>
 8015fc8:	d902      	bls.n	8015fd0 <_free_r+0x78>
 8015fca:	230c      	movs	r3, #12
 8015fcc:	6003      	str	r3, [r0, #0]
 8015fce:	e7d6      	b.n	8015f7e <_free_r+0x26>
 8015fd0:	6825      	ldr	r5, [r4, #0]
 8015fd2:	1961      	adds	r1, r4, r5
 8015fd4:	428b      	cmp	r3, r1
 8015fd6:	bf04      	itt	eq
 8015fd8:	6819      	ldreq	r1, [r3, #0]
 8015fda:	685b      	ldreq	r3, [r3, #4]
 8015fdc:	6063      	str	r3, [r4, #4]
 8015fde:	bf04      	itt	eq
 8015fe0:	1949      	addeq	r1, r1, r5
 8015fe2:	6021      	streq	r1, [r4, #0]
 8015fe4:	6054      	str	r4, [r2, #4]
 8015fe6:	e7ca      	b.n	8015f7e <_free_r+0x26>
 8015fe8:	b003      	add	sp, #12
 8015fea:	bd30      	pop	{r4, r5, pc}
 8015fec:	20007054 	.word	0x20007054

08015ff0 <sbrk_aligned>:
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	4e0e      	ldr	r6, [pc, #56]	; (801602c <sbrk_aligned+0x3c>)
 8015ff4:	460c      	mov	r4, r1
 8015ff6:	6831      	ldr	r1, [r6, #0]
 8015ff8:	4605      	mov	r5, r0
 8015ffa:	b911      	cbnz	r1, 8016002 <sbrk_aligned+0x12>
 8015ffc:	f000 fdee 	bl	8016bdc <_sbrk_r>
 8016000:	6030      	str	r0, [r6, #0]
 8016002:	4621      	mov	r1, r4
 8016004:	4628      	mov	r0, r5
 8016006:	f000 fde9 	bl	8016bdc <_sbrk_r>
 801600a:	1c43      	adds	r3, r0, #1
 801600c:	d00a      	beq.n	8016024 <sbrk_aligned+0x34>
 801600e:	1cc4      	adds	r4, r0, #3
 8016010:	f024 0403 	bic.w	r4, r4, #3
 8016014:	42a0      	cmp	r0, r4
 8016016:	d007      	beq.n	8016028 <sbrk_aligned+0x38>
 8016018:	1a21      	subs	r1, r4, r0
 801601a:	4628      	mov	r0, r5
 801601c:	f000 fdde 	bl	8016bdc <_sbrk_r>
 8016020:	3001      	adds	r0, #1
 8016022:	d101      	bne.n	8016028 <sbrk_aligned+0x38>
 8016024:	f04f 34ff 	mov.w	r4, #4294967295
 8016028:	4620      	mov	r0, r4
 801602a:	bd70      	pop	{r4, r5, r6, pc}
 801602c:	20007058 	.word	0x20007058

08016030 <_malloc_r>:
 8016030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016034:	1ccd      	adds	r5, r1, #3
 8016036:	f025 0503 	bic.w	r5, r5, #3
 801603a:	3508      	adds	r5, #8
 801603c:	2d0c      	cmp	r5, #12
 801603e:	bf38      	it	cc
 8016040:	250c      	movcc	r5, #12
 8016042:	2d00      	cmp	r5, #0
 8016044:	4607      	mov	r7, r0
 8016046:	db01      	blt.n	801604c <_malloc_r+0x1c>
 8016048:	42a9      	cmp	r1, r5
 801604a:	d905      	bls.n	8016058 <_malloc_r+0x28>
 801604c:	230c      	movs	r3, #12
 801604e:	603b      	str	r3, [r7, #0]
 8016050:	2600      	movs	r6, #0
 8016052:	4630      	mov	r0, r6
 8016054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016058:	4e2e      	ldr	r6, [pc, #184]	; (8016114 <_malloc_r+0xe4>)
 801605a:	f001 fedf 	bl	8017e1c <__malloc_lock>
 801605e:	6833      	ldr	r3, [r6, #0]
 8016060:	461c      	mov	r4, r3
 8016062:	bb34      	cbnz	r4, 80160b2 <_malloc_r+0x82>
 8016064:	4629      	mov	r1, r5
 8016066:	4638      	mov	r0, r7
 8016068:	f7ff ffc2 	bl	8015ff0 <sbrk_aligned>
 801606c:	1c43      	adds	r3, r0, #1
 801606e:	4604      	mov	r4, r0
 8016070:	d14d      	bne.n	801610e <_malloc_r+0xde>
 8016072:	6834      	ldr	r4, [r6, #0]
 8016074:	4626      	mov	r6, r4
 8016076:	2e00      	cmp	r6, #0
 8016078:	d140      	bne.n	80160fc <_malloc_r+0xcc>
 801607a:	6823      	ldr	r3, [r4, #0]
 801607c:	4631      	mov	r1, r6
 801607e:	4638      	mov	r0, r7
 8016080:	eb04 0803 	add.w	r8, r4, r3
 8016084:	f000 fdaa 	bl	8016bdc <_sbrk_r>
 8016088:	4580      	cmp	r8, r0
 801608a:	d13a      	bne.n	8016102 <_malloc_r+0xd2>
 801608c:	6821      	ldr	r1, [r4, #0]
 801608e:	3503      	adds	r5, #3
 8016090:	1a6d      	subs	r5, r5, r1
 8016092:	f025 0503 	bic.w	r5, r5, #3
 8016096:	3508      	adds	r5, #8
 8016098:	2d0c      	cmp	r5, #12
 801609a:	bf38      	it	cc
 801609c:	250c      	movcc	r5, #12
 801609e:	4629      	mov	r1, r5
 80160a0:	4638      	mov	r0, r7
 80160a2:	f7ff ffa5 	bl	8015ff0 <sbrk_aligned>
 80160a6:	3001      	adds	r0, #1
 80160a8:	d02b      	beq.n	8016102 <_malloc_r+0xd2>
 80160aa:	6823      	ldr	r3, [r4, #0]
 80160ac:	442b      	add	r3, r5
 80160ae:	6023      	str	r3, [r4, #0]
 80160b0:	e00e      	b.n	80160d0 <_malloc_r+0xa0>
 80160b2:	6822      	ldr	r2, [r4, #0]
 80160b4:	1b52      	subs	r2, r2, r5
 80160b6:	d41e      	bmi.n	80160f6 <_malloc_r+0xc6>
 80160b8:	2a0b      	cmp	r2, #11
 80160ba:	d916      	bls.n	80160ea <_malloc_r+0xba>
 80160bc:	1961      	adds	r1, r4, r5
 80160be:	42a3      	cmp	r3, r4
 80160c0:	6025      	str	r5, [r4, #0]
 80160c2:	bf18      	it	ne
 80160c4:	6059      	strne	r1, [r3, #4]
 80160c6:	6863      	ldr	r3, [r4, #4]
 80160c8:	bf08      	it	eq
 80160ca:	6031      	streq	r1, [r6, #0]
 80160cc:	5162      	str	r2, [r4, r5]
 80160ce:	604b      	str	r3, [r1, #4]
 80160d0:	4638      	mov	r0, r7
 80160d2:	f104 060b 	add.w	r6, r4, #11
 80160d6:	f001 fea7 	bl	8017e28 <__malloc_unlock>
 80160da:	f026 0607 	bic.w	r6, r6, #7
 80160de:	1d23      	adds	r3, r4, #4
 80160e0:	1af2      	subs	r2, r6, r3
 80160e2:	d0b6      	beq.n	8016052 <_malloc_r+0x22>
 80160e4:	1b9b      	subs	r3, r3, r6
 80160e6:	50a3      	str	r3, [r4, r2]
 80160e8:	e7b3      	b.n	8016052 <_malloc_r+0x22>
 80160ea:	6862      	ldr	r2, [r4, #4]
 80160ec:	42a3      	cmp	r3, r4
 80160ee:	bf0c      	ite	eq
 80160f0:	6032      	streq	r2, [r6, #0]
 80160f2:	605a      	strne	r2, [r3, #4]
 80160f4:	e7ec      	b.n	80160d0 <_malloc_r+0xa0>
 80160f6:	4623      	mov	r3, r4
 80160f8:	6864      	ldr	r4, [r4, #4]
 80160fa:	e7b2      	b.n	8016062 <_malloc_r+0x32>
 80160fc:	4634      	mov	r4, r6
 80160fe:	6876      	ldr	r6, [r6, #4]
 8016100:	e7b9      	b.n	8016076 <_malloc_r+0x46>
 8016102:	230c      	movs	r3, #12
 8016104:	603b      	str	r3, [r7, #0]
 8016106:	4638      	mov	r0, r7
 8016108:	f001 fe8e 	bl	8017e28 <__malloc_unlock>
 801610c:	e7a1      	b.n	8016052 <_malloc_r+0x22>
 801610e:	6025      	str	r5, [r4, #0]
 8016110:	e7de      	b.n	80160d0 <_malloc_r+0xa0>
 8016112:	bf00      	nop
 8016114:	20007054 	.word	0x20007054

08016118 <__cvt>:
 8016118:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801611c:	ec55 4b10 	vmov	r4, r5, d0
 8016120:	2d00      	cmp	r5, #0
 8016122:	460e      	mov	r6, r1
 8016124:	4619      	mov	r1, r3
 8016126:	462b      	mov	r3, r5
 8016128:	bfbb      	ittet	lt
 801612a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801612e:	461d      	movlt	r5, r3
 8016130:	2300      	movge	r3, #0
 8016132:	232d      	movlt	r3, #45	; 0x2d
 8016134:	700b      	strb	r3, [r1, #0]
 8016136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016138:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801613c:	4691      	mov	r9, r2
 801613e:	f023 0820 	bic.w	r8, r3, #32
 8016142:	bfbc      	itt	lt
 8016144:	4622      	movlt	r2, r4
 8016146:	4614      	movlt	r4, r2
 8016148:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801614c:	d005      	beq.n	801615a <__cvt+0x42>
 801614e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016152:	d100      	bne.n	8016156 <__cvt+0x3e>
 8016154:	3601      	adds	r6, #1
 8016156:	2102      	movs	r1, #2
 8016158:	e000      	b.n	801615c <__cvt+0x44>
 801615a:	2103      	movs	r1, #3
 801615c:	ab03      	add	r3, sp, #12
 801615e:	9301      	str	r3, [sp, #4]
 8016160:	ab02      	add	r3, sp, #8
 8016162:	9300      	str	r3, [sp, #0]
 8016164:	ec45 4b10 	vmov	d0, r4, r5
 8016168:	4653      	mov	r3, sl
 801616a:	4632      	mov	r2, r6
 801616c:	f000 ff18 	bl	8016fa0 <_dtoa_r>
 8016170:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016174:	4607      	mov	r7, r0
 8016176:	d102      	bne.n	801617e <__cvt+0x66>
 8016178:	f019 0f01 	tst.w	r9, #1
 801617c:	d022      	beq.n	80161c4 <__cvt+0xac>
 801617e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016182:	eb07 0906 	add.w	r9, r7, r6
 8016186:	d110      	bne.n	80161aa <__cvt+0x92>
 8016188:	783b      	ldrb	r3, [r7, #0]
 801618a:	2b30      	cmp	r3, #48	; 0x30
 801618c:	d10a      	bne.n	80161a4 <__cvt+0x8c>
 801618e:	2200      	movs	r2, #0
 8016190:	2300      	movs	r3, #0
 8016192:	4620      	mov	r0, r4
 8016194:	4629      	mov	r1, r5
 8016196:	f7ea fcb7 	bl	8000b08 <__aeabi_dcmpeq>
 801619a:	b918      	cbnz	r0, 80161a4 <__cvt+0x8c>
 801619c:	f1c6 0601 	rsb	r6, r6, #1
 80161a0:	f8ca 6000 	str.w	r6, [sl]
 80161a4:	f8da 3000 	ldr.w	r3, [sl]
 80161a8:	4499      	add	r9, r3
 80161aa:	2200      	movs	r2, #0
 80161ac:	2300      	movs	r3, #0
 80161ae:	4620      	mov	r0, r4
 80161b0:	4629      	mov	r1, r5
 80161b2:	f7ea fca9 	bl	8000b08 <__aeabi_dcmpeq>
 80161b6:	b108      	cbz	r0, 80161bc <__cvt+0xa4>
 80161b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80161bc:	2230      	movs	r2, #48	; 0x30
 80161be:	9b03      	ldr	r3, [sp, #12]
 80161c0:	454b      	cmp	r3, r9
 80161c2:	d307      	bcc.n	80161d4 <__cvt+0xbc>
 80161c4:	9b03      	ldr	r3, [sp, #12]
 80161c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80161c8:	1bdb      	subs	r3, r3, r7
 80161ca:	4638      	mov	r0, r7
 80161cc:	6013      	str	r3, [r2, #0]
 80161ce:	b004      	add	sp, #16
 80161d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161d4:	1c59      	adds	r1, r3, #1
 80161d6:	9103      	str	r1, [sp, #12]
 80161d8:	701a      	strb	r2, [r3, #0]
 80161da:	e7f0      	b.n	80161be <__cvt+0xa6>

080161dc <__exponent>:
 80161dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80161de:	4603      	mov	r3, r0
 80161e0:	2900      	cmp	r1, #0
 80161e2:	bfb8      	it	lt
 80161e4:	4249      	neglt	r1, r1
 80161e6:	f803 2b02 	strb.w	r2, [r3], #2
 80161ea:	bfb4      	ite	lt
 80161ec:	222d      	movlt	r2, #45	; 0x2d
 80161ee:	222b      	movge	r2, #43	; 0x2b
 80161f0:	2909      	cmp	r1, #9
 80161f2:	7042      	strb	r2, [r0, #1]
 80161f4:	dd2a      	ble.n	801624c <__exponent+0x70>
 80161f6:	f10d 0407 	add.w	r4, sp, #7
 80161fa:	46a4      	mov	ip, r4
 80161fc:	270a      	movs	r7, #10
 80161fe:	46a6      	mov	lr, r4
 8016200:	460a      	mov	r2, r1
 8016202:	fb91 f6f7 	sdiv	r6, r1, r7
 8016206:	fb07 1516 	mls	r5, r7, r6, r1
 801620a:	3530      	adds	r5, #48	; 0x30
 801620c:	2a63      	cmp	r2, #99	; 0x63
 801620e:	f104 34ff 	add.w	r4, r4, #4294967295
 8016212:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016216:	4631      	mov	r1, r6
 8016218:	dcf1      	bgt.n	80161fe <__exponent+0x22>
 801621a:	3130      	adds	r1, #48	; 0x30
 801621c:	f1ae 0502 	sub.w	r5, lr, #2
 8016220:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016224:	1c44      	adds	r4, r0, #1
 8016226:	4629      	mov	r1, r5
 8016228:	4561      	cmp	r1, ip
 801622a:	d30a      	bcc.n	8016242 <__exponent+0x66>
 801622c:	f10d 0209 	add.w	r2, sp, #9
 8016230:	eba2 020e 	sub.w	r2, r2, lr
 8016234:	4565      	cmp	r5, ip
 8016236:	bf88      	it	hi
 8016238:	2200      	movhi	r2, #0
 801623a:	4413      	add	r3, r2
 801623c:	1a18      	subs	r0, r3, r0
 801623e:	b003      	add	sp, #12
 8016240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016246:	f804 2f01 	strb.w	r2, [r4, #1]!
 801624a:	e7ed      	b.n	8016228 <__exponent+0x4c>
 801624c:	2330      	movs	r3, #48	; 0x30
 801624e:	3130      	adds	r1, #48	; 0x30
 8016250:	7083      	strb	r3, [r0, #2]
 8016252:	70c1      	strb	r1, [r0, #3]
 8016254:	1d03      	adds	r3, r0, #4
 8016256:	e7f1      	b.n	801623c <__exponent+0x60>

08016258 <_printf_float>:
 8016258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801625c:	ed2d 8b02 	vpush	{d8}
 8016260:	b08d      	sub	sp, #52	; 0x34
 8016262:	460c      	mov	r4, r1
 8016264:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016268:	4616      	mov	r6, r2
 801626a:	461f      	mov	r7, r3
 801626c:	4605      	mov	r5, r0
 801626e:	f001 fd47 	bl	8017d00 <_localeconv_r>
 8016272:	f8d0 a000 	ldr.w	sl, [r0]
 8016276:	4650      	mov	r0, sl
 8016278:	f7e9 ffca 	bl	8000210 <strlen>
 801627c:	2300      	movs	r3, #0
 801627e:	930a      	str	r3, [sp, #40]	; 0x28
 8016280:	6823      	ldr	r3, [r4, #0]
 8016282:	9305      	str	r3, [sp, #20]
 8016284:	f8d8 3000 	ldr.w	r3, [r8]
 8016288:	f894 b018 	ldrb.w	fp, [r4, #24]
 801628c:	3307      	adds	r3, #7
 801628e:	f023 0307 	bic.w	r3, r3, #7
 8016292:	f103 0208 	add.w	r2, r3, #8
 8016296:	f8c8 2000 	str.w	r2, [r8]
 801629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801629e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80162a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80162a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80162aa:	9307      	str	r3, [sp, #28]
 80162ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80162b0:	ee08 0a10 	vmov	s16, r0
 80162b4:	4b9f      	ldr	r3, [pc, #636]	; (8016534 <_printf_float+0x2dc>)
 80162b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162ba:	f04f 32ff 	mov.w	r2, #4294967295
 80162be:	f7ea fc55 	bl	8000b6c <__aeabi_dcmpun>
 80162c2:	bb88      	cbnz	r0, 8016328 <_printf_float+0xd0>
 80162c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80162c8:	4b9a      	ldr	r3, [pc, #616]	; (8016534 <_printf_float+0x2dc>)
 80162ca:	f04f 32ff 	mov.w	r2, #4294967295
 80162ce:	f7ea fc2f 	bl	8000b30 <__aeabi_dcmple>
 80162d2:	bb48      	cbnz	r0, 8016328 <_printf_float+0xd0>
 80162d4:	2200      	movs	r2, #0
 80162d6:	2300      	movs	r3, #0
 80162d8:	4640      	mov	r0, r8
 80162da:	4649      	mov	r1, r9
 80162dc:	f7ea fc1e 	bl	8000b1c <__aeabi_dcmplt>
 80162e0:	b110      	cbz	r0, 80162e8 <_printf_float+0x90>
 80162e2:	232d      	movs	r3, #45	; 0x2d
 80162e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162e8:	4b93      	ldr	r3, [pc, #588]	; (8016538 <_printf_float+0x2e0>)
 80162ea:	4894      	ldr	r0, [pc, #592]	; (801653c <_printf_float+0x2e4>)
 80162ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80162f0:	bf94      	ite	ls
 80162f2:	4698      	movls	r8, r3
 80162f4:	4680      	movhi	r8, r0
 80162f6:	2303      	movs	r3, #3
 80162f8:	6123      	str	r3, [r4, #16]
 80162fa:	9b05      	ldr	r3, [sp, #20]
 80162fc:	f023 0204 	bic.w	r2, r3, #4
 8016300:	6022      	str	r2, [r4, #0]
 8016302:	f04f 0900 	mov.w	r9, #0
 8016306:	9700      	str	r7, [sp, #0]
 8016308:	4633      	mov	r3, r6
 801630a:	aa0b      	add	r2, sp, #44	; 0x2c
 801630c:	4621      	mov	r1, r4
 801630e:	4628      	mov	r0, r5
 8016310:	f000 f9d8 	bl	80166c4 <_printf_common>
 8016314:	3001      	adds	r0, #1
 8016316:	f040 8090 	bne.w	801643a <_printf_float+0x1e2>
 801631a:	f04f 30ff 	mov.w	r0, #4294967295
 801631e:	b00d      	add	sp, #52	; 0x34
 8016320:	ecbd 8b02 	vpop	{d8}
 8016324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016328:	4642      	mov	r2, r8
 801632a:	464b      	mov	r3, r9
 801632c:	4640      	mov	r0, r8
 801632e:	4649      	mov	r1, r9
 8016330:	f7ea fc1c 	bl	8000b6c <__aeabi_dcmpun>
 8016334:	b140      	cbz	r0, 8016348 <_printf_float+0xf0>
 8016336:	464b      	mov	r3, r9
 8016338:	2b00      	cmp	r3, #0
 801633a:	bfbc      	itt	lt
 801633c:	232d      	movlt	r3, #45	; 0x2d
 801633e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016342:	487f      	ldr	r0, [pc, #508]	; (8016540 <_printf_float+0x2e8>)
 8016344:	4b7f      	ldr	r3, [pc, #508]	; (8016544 <_printf_float+0x2ec>)
 8016346:	e7d1      	b.n	80162ec <_printf_float+0x94>
 8016348:	6863      	ldr	r3, [r4, #4]
 801634a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801634e:	9206      	str	r2, [sp, #24]
 8016350:	1c5a      	adds	r2, r3, #1
 8016352:	d13f      	bne.n	80163d4 <_printf_float+0x17c>
 8016354:	2306      	movs	r3, #6
 8016356:	6063      	str	r3, [r4, #4]
 8016358:	9b05      	ldr	r3, [sp, #20]
 801635a:	6861      	ldr	r1, [r4, #4]
 801635c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016360:	2300      	movs	r3, #0
 8016362:	9303      	str	r3, [sp, #12]
 8016364:	ab0a      	add	r3, sp, #40	; 0x28
 8016366:	e9cd b301 	strd	fp, r3, [sp, #4]
 801636a:	ab09      	add	r3, sp, #36	; 0x24
 801636c:	ec49 8b10 	vmov	d0, r8, r9
 8016370:	9300      	str	r3, [sp, #0]
 8016372:	6022      	str	r2, [r4, #0]
 8016374:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016378:	4628      	mov	r0, r5
 801637a:	f7ff fecd 	bl	8016118 <__cvt>
 801637e:	9b06      	ldr	r3, [sp, #24]
 8016380:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016382:	2b47      	cmp	r3, #71	; 0x47
 8016384:	4680      	mov	r8, r0
 8016386:	d108      	bne.n	801639a <_printf_float+0x142>
 8016388:	1cc8      	adds	r0, r1, #3
 801638a:	db02      	blt.n	8016392 <_printf_float+0x13a>
 801638c:	6863      	ldr	r3, [r4, #4]
 801638e:	4299      	cmp	r1, r3
 8016390:	dd41      	ble.n	8016416 <_printf_float+0x1be>
 8016392:	f1ab 0b02 	sub.w	fp, fp, #2
 8016396:	fa5f fb8b 	uxtb.w	fp, fp
 801639a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801639e:	d820      	bhi.n	80163e2 <_printf_float+0x18a>
 80163a0:	3901      	subs	r1, #1
 80163a2:	465a      	mov	r2, fp
 80163a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80163a8:	9109      	str	r1, [sp, #36]	; 0x24
 80163aa:	f7ff ff17 	bl	80161dc <__exponent>
 80163ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80163b0:	1813      	adds	r3, r2, r0
 80163b2:	2a01      	cmp	r2, #1
 80163b4:	4681      	mov	r9, r0
 80163b6:	6123      	str	r3, [r4, #16]
 80163b8:	dc02      	bgt.n	80163c0 <_printf_float+0x168>
 80163ba:	6822      	ldr	r2, [r4, #0]
 80163bc:	07d2      	lsls	r2, r2, #31
 80163be:	d501      	bpl.n	80163c4 <_printf_float+0x16c>
 80163c0:	3301      	adds	r3, #1
 80163c2:	6123      	str	r3, [r4, #16]
 80163c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d09c      	beq.n	8016306 <_printf_float+0xae>
 80163cc:	232d      	movs	r3, #45	; 0x2d
 80163ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163d2:	e798      	b.n	8016306 <_printf_float+0xae>
 80163d4:	9a06      	ldr	r2, [sp, #24]
 80163d6:	2a47      	cmp	r2, #71	; 0x47
 80163d8:	d1be      	bne.n	8016358 <_printf_float+0x100>
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d1bc      	bne.n	8016358 <_printf_float+0x100>
 80163de:	2301      	movs	r3, #1
 80163e0:	e7b9      	b.n	8016356 <_printf_float+0xfe>
 80163e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80163e6:	d118      	bne.n	801641a <_printf_float+0x1c2>
 80163e8:	2900      	cmp	r1, #0
 80163ea:	6863      	ldr	r3, [r4, #4]
 80163ec:	dd0b      	ble.n	8016406 <_printf_float+0x1ae>
 80163ee:	6121      	str	r1, [r4, #16]
 80163f0:	b913      	cbnz	r3, 80163f8 <_printf_float+0x1a0>
 80163f2:	6822      	ldr	r2, [r4, #0]
 80163f4:	07d0      	lsls	r0, r2, #31
 80163f6:	d502      	bpl.n	80163fe <_printf_float+0x1a6>
 80163f8:	3301      	adds	r3, #1
 80163fa:	440b      	add	r3, r1
 80163fc:	6123      	str	r3, [r4, #16]
 80163fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8016400:	f04f 0900 	mov.w	r9, #0
 8016404:	e7de      	b.n	80163c4 <_printf_float+0x16c>
 8016406:	b913      	cbnz	r3, 801640e <_printf_float+0x1b6>
 8016408:	6822      	ldr	r2, [r4, #0]
 801640a:	07d2      	lsls	r2, r2, #31
 801640c:	d501      	bpl.n	8016412 <_printf_float+0x1ba>
 801640e:	3302      	adds	r3, #2
 8016410:	e7f4      	b.n	80163fc <_printf_float+0x1a4>
 8016412:	2301      	movs	r3, #1
 8016414:	e7f2      	b.n	80163fc <_printf_float+0x1a4>
 8016416:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801641a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801641c:	4299      	cmp	r1, r3
 801641e:	db05      	blt.n	801642c <_printf_float+0x1d4>
 8016420:	6823      	ldr	r3, [r4, #0]
 8016422:	6121      	str	r1, [r4, #16]
 8016424:	07d8      	lsls	r0, r3, #31
 8016426:	d5ea      	bpl.n	80163fe <_printf_float+0x1a6>
 8016428:	1c4b      	adds	r3, r1, #1
 801642a:	e7e7      	b.n	80163fc <_printf_float+0x1a4>
 801642c:	2900      	cmp	r1, #0
 801642e:	bfd4      	ite	le
 8016430:	f1c1 0202 	rsble	r2, r1, #2
 8016434:	2201      	movgt	r2, #1
 8016436:	4413      	add	r3, r2
 8016438:	e7e0      	b.n	80163fc <_printf_float+0x1a4>
 801643a:	6823      	ldr	r3, [r4, #0]
 801643c:	055a      	lsls	r2, r3, #21
 801643e:	d407      	bmi.n	8016450 <_printf_float+0x1f8>
 8016440:	6923      	ldr	r3, [r4, #16]
 8016442:	4642      	mov	r2, r8
 8016444:	4631      	mov	r1, r6
 8016446:	4628      	mov	r0, r5
 8016448:	47b8      	blx	r7
 801644a:	3001      	adds	r0, #1
 801644c:	d12c      	bne.n	80164a8 <_printf_float+0x250>
 801644e:	e764      	b.n	801631a <_printf_float+0xc2>
 8016450:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016454:	f240 80e0 	bls.w	8016618 <_printf_float+0x3c0>
 8016458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801645c:	2200      	movs	r2, #0
 801645e:	2300      	movs	r3, #0
 8016460:	f7ea fb52 	bl	8000b08 <__aeabi_dcmpeq>
 8016464:	2800      	cmp	r0, #0
 8016466:	d034      	beq.n	80164d2 <_printf_float+0x27a>
 8016468:	4a37      	ldr	r2, [pc, #220]	; (8016548 <_printf_float+0x2f0>)
 801646a:	2301      	movs	r3, #1
 801646c:	4631      	mov	r1, r6
 801646e:	4628      	mov	r0, r5
 8016470:	47b8      	blx	r7
 8016472:	3001      	adds	r0, #1
 8016474:	f43f af51 	beq.w	801631a <_printf_float+0xc2>
 8016478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801647c:	429a      	cmp	r2, r3
 801647e:	db02      	blt.n	8016486 <_printf_float+0x22e>
 8016480:	6823      	ldr	r3, [r4, #0]
 8016482:	07d8      	lsls	r0, r3, #31
 8016484:	d510      	bpl.n	80164a8 <_printf_float+0x250>
 8016486:	ee18 3a10 	vmov	r3, s16
 801648a:	4652      	mov	r2, sl
 801648c:	4631      	mov	r1, r6
 801648e:	4628      	mov	r0, r5
 8016490:	47b8      	blx	r7
 8016492:	3001      	adds	r0, #1
 8016494:	f43f af41 	beq.w	801631a <_printf_float+0xc2>
 8016498:	f04f 0800 	mov.w	r8, #0
 801649c:	f104 091a 	add.w	r9, r4, #26
 80164a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164a2:	3b01      	subs	r3, #1
 80164a4:	4543      	cmp	r3, r8
 80164a6:	dc09      	bgt.n	80164bc <_printf_float+0x264>
 80164a8:	6823      	ldr	r3, [r4, #0]
 80164aa:	079b      	lsls	r3, r3, #30
 80164ac:	f100 8105 	bmi.w	80166ba <_printf_float+0x462>
 80164b0:	68e0      	ldr	r0, [r4, #12]
 80164b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164b4:	4298      	cmp	r0, r3
 80164b6:	bfb8      	it	lt
 80164b8:	4618      	movlt	r0, r3
 80164ba:	e730      	b.n	801631e <_printf_float+0xc6>
 80164bc:	2301      	movs	r3, #1
 80164be:	464a      	mov	r2, r9
 80164c0:	4631      	mov	r1, r6
 80164c2:	4628      	mov	r0, r5
 80164c4:	47b8      	blx	r7
 80164c6:	3001      	adds	r0, #1
 80164c8:	f43f af27 	beq.w	801631a <_printf_float+0xc2>
 80164cc:	f108 0801 	add.w	r8, r8, #1
 80164d0:	e7e6      	b.n	80164a0 <_printf_float+0x248>
 80164d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	dc39      	bgt.n	801654c <_printf_float+0x2f4>
 80164d8:	4a1b      	ldr	r2, [pc, #108]	; (8016548 <_printf_float+0x2f0>)
 80164da:	2301      	movs	r3, #1
 80164dc:	4631      	mov	r1, r6
 80164de:	4628      	mov	r0, r5
 80164e0:	47b8      	blx	r7
 80164e2:	3001      	adds	r0, #1
 80164e4:	f43f af19 	beq.w	801631a <_printf_float+0xc2>
 80164e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80164ec:	4313      	orrs	r3, r2
 80164ee:	d102      	bne.n	80164f6 <_printf_float+0x29e>
 80164f0:	6823      	ldr	r3, [r4, #0]
 80164f2:	07d9      	lsls	r1, r3, #31
 80164f4:	d5d8      	bpl.n	80164a8 <_printf_float+0x250>
 80164f6:	ee18 3a10 	vmov	r3, s16
 80164fa:	4652      	mov	r2, sl
 80164fc:	4631      	mov	r1, r6
 80164fe:	4628      	mov	r0, r5
 8016500:	47b8      	blx	r7
 8016502:	3001      	adds	r0, #1
 8016504:	f43f af09 	beq.w	801631a <_printf_float+0xc2>
 8016508:	f04f 0900 	mov.w	r9, #0
 801650c:	f104 0a1a 	add.w	sl, r4, #26
 8016510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016512:	425b      	negs	r3, r3
 8016514:	454b      	cmp	r3, r9
 8016516:	dc01      	bgt.n	801651c <_printf_float+0x2c4>
 8016518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801651a:	e792      	b.n	8016442 <_printf_float+0x1ea>
 801651c:	2301      	movs	r3, #1
 801651e:	4652      	mov	r2, sl
 8016520:	4631      	mov	r1, r6
 8016522:	4628      	mov	r0, r5
 8016524:	47b8      	blx	r7
 8016526:	3001      	adds	r0, #1
 8016528:	f43f aef7 	beq.w	801631a <_printf_float+0xc2>
 801652c:	f109 0901 	add.w	r9, r9, #1
 8016530:	e7ee      	b.n	8016510 <_printf_float+0x2b8>
 8016532:	bf00      	nop
 8016534:	7fefffff 	.word	0x7fefffff
 8016538:	0801987c 	.word	0x0801987c
 801653c:	08019880 	.word	0x08019880
 8016540:	08019888 	.word	0x08019888
 8016544:	08019884 	.word	0x08019884
 8016548:	0801988c 	.word	0x0801988c
 801654c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801654e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016550:	429a      	cmp	r2, r3
 8016552:	bfa8      	it	ge
 8016554:	461a      	movge	r2, r3
 8016556:	2a00      	cmp	r2, #0
 8016558:	4691      	mov	r9, r2
 801655a:	dc37      	bgt.n	80165cc <_printf_float+0x374>
 801655c:	f04f 0b00 	mov.w	fp, #0
 8016560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016564:	f104 021a 	add.w	r2, r4, #26
 8016568:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801656a:	9305      	str	r3, [sp, #20]
 801656c:	eba3 0309 	sub.w	r3, r3, r9
 8016570:	455b      	cmp	r3, fp
 8016572:	dc33      	bgt.n	80165dc <_printf_float+0x384>
 8016574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016578:	429a      	cmp	r2, r3
 801657a:	db3b      	blt.n	80165f4 <_printf_float+0x39c>
 801657c:	6823      	ldr	r3, [r4, #0]
 801657e:	07da      	lsls	r2, r3, #31
 8016580:	d438      	bmi.n	80165f4 <_printf_float+0x39c>
 8016582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016584:	9a05      	ldr	r2, [sp, #20]
 8016586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016588:	1a9a      	subs	r2, r3, r2
 801658a:	eba3 0901 	sub.w	r9, r3, r1
 801658e:	4591      	cmp	r9, r2
 8016590:	bfa8      	it	ge
 8016592:	4691      	movge	r9, r2
 8016594:	f1b9 0f00 	cmp.w	r9, #0
 8016598:	dc35      	bgt.n	8016606 <_printf_float+0x3ae>
 801659a:	f04f 0800 	mov.w	r8, #0
 801659e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80165a2:	f104 0a1a 	add.w	sl, r4, #26
 80165a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80165aa:	1a9b      	subs	r3, r3, r2
 80165ac:	eba3 0309 	sub.w	r3, r3, r9
 80165b0:	4543      	cmp	r3, r8
 80165b2:	f77f af79 	ble.w	80164a8 <_printf_float+0x250>
 80165b6:	2301      	movs	r3, #1
 80165b8:	4652      	mov	r2, sl
 80165ba:	4631      	mov	r1, r6
 80165bc:	4628      	mov	r0, r5
 80165be:	47b8      	blx	r7
 80165c0:	3001      	adds	r0, #1
 80165c2:	f43f aeaa 	beq.w	801631a <_printf_float+0xc2>
 80165c6:	f108 0801 	add.w	r8, r8, #1
 80165ca:	e7ec      	b.n	80165a6 <_printf_float+0x34e>
 80165cc:	4613      	mov	r3, r2
 80165ce:	4631      	mov	r1, r6
 80165d0:	4642      	mov	r2, r8
 80165d2:	4628      	mov	r0, r5
 80165d4:	47b8      	blx	r7
 80165d6:	3001      	adds	r0, #1
 80165d8:	d1c0      	bne.n	801655c <_printf_float+0x304>
 80165da:	e69e      	b.n	801631a <_printf_float+0xc2>
 80165dc:	2301      	movs	r3, #1
 80165de:	4631      	mov	r1, r6
 80165e0:	4628      	mov	r0, r5
 80165e2:	9205      	str	r2, [sp, #20]
 80165e4:	47b8      	blx	r7
 80165e6:	3001      	adds	r0, #1
 80165e8:	f43f ae97 	beq.w	801631a <_printf_float+0xc2>
 80165ec:	9a05      	ldr	r2, [sp, #20]
 80165ee:	f10b 0b01 	add.w	fp, fp, #1
 80165f2:	e7b9      	b.n	8016568 <_printf_float+0x310>
 80165f4:	ee18 3a10 	vmov	r3, s16
 80165f8:	4652      	mov	r2, sl
 80165fa:	4631      	mov	r1, r6
 80165fc:	4628      	mov	r0, r5
 80165fe:	47b8      	blx	r7
 8016600:	3001      	adds	r0, #1
 8016602:	d1be      	bne.n	8016582 <_printf_float+0x32a>
 8016604:	e689      	b.n	801631a <_printf_float+0xc2>
 8016606:	9a05      	ldr	r2, [sp, #20]
 8016608:	464b      	mov	r3, r9
 801660a:	4442      	add	r2, r8
 801660c:	4631      	mov	r1, r6
 801660e:	4628      	mov	r0, r5
 8016610:	47b8      	blx	r7
 8016612:	3001      	adds	r0, #1
 8016614:	d1c1      	bne.n	801659a <_printf_float+0x342>
 8016616:	e680      	b.n	801631a <_printf_float+0xc2>
 8016618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801661a:	2a01      	cmp	r2, #1
 801661c:	dc01      	bgt.n	8016622 <_printf_float+0x3ca>
 801661e:	07db      	lsls	r3, r3, #31
 8016620:	d538      	bpl.n	8016694 <_printf_float+0x43c>
 8016622:	2301      	movs	r3, #1
 8016624:	4642      	mov	r2, r8
 8016626:	4631      	mov	r1, r6
 8016628:	4628      	mov	r0, r5
 801662a:	47b8      	blx	r7
 801662c:	3001      	adds	r0, #1
 801662e:	f43f ae74 	beq.w	801631a <_printf_float+0xc2>
 8016632:	ee18 3a10 	vmov	r3, s16
 8016636:	4652      	mov	r2, sl
 8016638:	4631      	mov	r1, r6
 801663a:	4628      	mov	r0, r5
 801663c:	47b8      	blx	r7
 801663e:	3001      	adds	r0, #1
 8016640:	f43f ae6b 	beq.w	801631a <_printf_float+0xc2>
 8016644:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016648:	2200      	movs	r2, #0
 801664a:	2300      	movs	r3, #0
 801664c:	f7ea fa5c 	bl	8000b08 <__aeabi_dcmpeq>
 8016650:	b9d8      	cbnz	r0, 801668a <_printf_float+0x432>
 8016652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016654:	f108 0201 	add.w	r2, r8, #1
 8016658:	3b01      	subs	r3, #1
 801665a:	4631      	mov	r1, r6
 801665c:	4628      	mov	r0, r5
 801665e:	47b8      	blx	r7
 8016660:	3001      	adds	r0, #1
 8016662:	d10e      	bne.n	8016682 <_printf_float+0x42a>
 8016664:	e659      	b.n	801631a <_printf_float+0xc2>
 8016666:	2301      	movs	r3, #1
 8016668:	4652      	mov	r2, sl
 801666a:	4631      	mov	r1, r6
 801666c:	4628      	mov	r0, r5
 801666e:	47b8      	blx	r7
 8016670:	3001      	adds	r0, #1
 8016672:	f43f ae52 	beq.w	801631a <_printf_float+0xc2>
 8016676:	f108 0801 	add.w	r8, r8, #1
 801667a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801667c:	3b01      	subs	r3, #1
 801667e:	4543      	cmp	r3, r8
 8016680:	dcf1      	bgt.n	8016666 <_printf_float+0x40e>
 8016682:	464b      	mov	r3, r9
 8016684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016688:	e6dc      	b.n	8016444 <_printf_float+0x1ec>
 801668a:	f04f 0800 	mov.w	r8, #0
 801668e:	f104 0a1a 	add.w	sl, r4, #26
 8016692:	e7f2      	b.n	801667a <_printf_float+0x422>
 8016694:	2301      	movs	r3, #1
 8016696:	4642      	mov	r2, r8
 8016698:	e7df      	b.n	801665a <_printf_float+0x402>
 801669a:	2301      	movs	r3, #1
 801669c:	464a      	mov	r2, r9
 801669e:	4631      	mov	r1, r6
 80166a0:	4628      	mov	r0, r5
 80166a2:	47b8      	blx	r7
 80166a4:	3001      	adds	r0, #1
 80166a6:	f43f ae38 	beq.w	801631a <_printf_float+0xc2>
 80166aa:	f108 0801 	add.w	r8, r8, #1
 80166ae:	68e3      	ldr	r3, [r4, #12]
 80166b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166b2:	1a5b      	subs	r3, r3, r1
 80166b4:	4543      	cmp	r3, r8
 80166b6:	dcf0      	bgt.n	801669a <_printf_float+0x442>
 80166b8:	e6fa      	b.n	80164b0 <_printf_float+0x258>
 80166ba:	f04f 0800 	mov.w	r8, #0
 80166be:	f104 0919 	add.w	r9, r4, #25
 80166c2:	e7f4      	b.n	80166ae <_printf_float+0x456>

080166c4 <_printf_common>:
 80166c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166c8:	4616      	mov	r6, r2
 80166ca:	4699      	mov	r9, r3
 80166cc:	688a      	ldr	r2, [r1, #8]
 80166ce:	690b      	ldr	r3, [r1, #16]
 80166d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80166d4:	4293      	cmp	r3, r2
 80166d6:	bfb8      	it	lt
 80166d8:	4613      	movlt	r3, r2
 80166da:	6033      	str	r3, [r6, #0]
 80166dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80166e0:	4607      	mov	r7, r0
 80166e2:	460c      	mov	r4, r1
 80166e4:	b10a      	cbz	r2, 80166ea <_printf_common+0x26>
 80166e6:	3301      	adds	r3, #1
 80166e8:	6033      	str	r3, [r6, #0]
 80166ea:	6823      	ldr	r3, [r4, #0]
 80166ec:	0699      	lsls	r1, r3, #26
 80166ee:	bf42      	ittt	mi
 80166f0:	6833      	ldrmi	r3, [r6, #0]
 80166f2:	3302      	addmi	r3, #2
 80166f4:	6033      	strmi	r3, [r6, #0]
 80166f6:	6825      	ldr	r5, [r4, #0]
 80166f8:	f015 0506 	ands.w	r5, r5, #6
 80166fc:	d106      	bne.n	801670c <_printf_common+0x48>
 80166fe:	f104 0a19 	add.w	sl, r4, #25
 8016702:	68e3      	ldr	r3, [r4, #12]
 8016704:	6832      	ldr	r2, [r6, #0]
 8016706:	1a9b      	subs	r3, r3, r2
 8016708:	42ab      	cmp	r3, r5
 801670a:	dc26      	bgt.n	801675a <_printf_common+0x96>
 801670c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016710:	1e13      	subs	r3, r2, #0
 8016712:	6822      	ldr	r2, [r4, #0]
 8016714:	bf18      	it	ne
 8016716:	2301      	movne	r3, #1
 8016718:	0692      	lsls	r2, r2, #26
 801671a:	d42b      	bmi.n	8016774 <_printf_common+0xb0>
 801671c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016720:	4649      	mov	r1, r9
 8016722:	4638      	mov	r0, r7
 8016724:	47c0      	blx	r8
 8016726:	3001      	adds	r0, #1
 8016728:	d01e      	beq.n	8016768 <_printf_common+0xa4>
 801672a:	6823      	ldr	r3, [r4, #0]
 801672c:	68e5      	ldr	r5, [r4, #12]
 801672e:	6832      	ldr	r2, [r6, #0]
 8016730:	f003 0306 	and.w	r3, r3, #6
 8016734:	2b04      	cmp	r3, #4
 8016736:	bf08      	it	eq
 8016738:	1aad      	subeq	r5, r5, r2
 801673a:	68a3      	ldr	r3, [r4, #8]
 801673c:	6922      	ldr	r2, [r4, #16]
 801673e:	bf0c      	ite	eq
 8016740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016744:	2500      	movne	r5, #0
 8016746:	4293      	cmp	r3, r2
 8016748:	bfc4      	itt	gt
 801674a:	1a9b      	subgt	r3, r3, r2
 801674c:	18ed      	addgt	r5, r5, r3
 801674e:	2600      	movs	r6, #0
 8016750:	341a      	adds	r4, #26
 8016752:	42b5      	cmp	r5, r6
 8016754:	d11a      	bne.n	801678c <_printf_common+0xc8>
 8016756:	2000      	movs	r0, #0
 8016758:	e008      	b.n	801676c <_printf_common+0xa8>
 801675a:	2301      	movs	r3, #1
 801675c:	4652      	mov	r2, sl
 801675e:	4649      	mov	r1, r9
 8016760:	4638      	mov	r0, r7
 8016762:	47c0      	blx	r8
 8016764:	3001      	adds	r0, #1
 8016766:	d103      	bne.n	8016770 <_printf_common+0xac>
 8016768:	f04f 30ff 	mov.w	r0, #4294967295
 801676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016770:	3501      	adds	r5, #1
 8016772:	e7c6      	b.n	8016702 <_printf_common+0x3e>
 8016774:	18e1      	adds	r1, r4, r3
 8016776:	1c5a      	adds	r2, r3, #1
 8016778:	2030      	movs	r0, #48	; 0x30
 801677a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801677e:	4422      	add	r2, r4
 8016780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016788:	3302      	adds	r3, #2
 801678a:	e7c7      	b.n	801671c <_printf_common+0x58>
 801678c:	2301      	movs	r3, #1
 801678e:	4622      	mov	r2, r4
 8016790:	4649      	mov	r1, r9
 8016792:	4638      	mov	r0, r7
 8016794:	47c0      	blx	r8
 8016796:	3001      	adds	r0, #1
 8016798:	d0e6      	beq.n	8016768 <_printf_common+0xa4>
 801679a:	3601      	adds	r6, #1
 801679c:	e7d9      	b.n	8016752 <_printf_common+0x8e>
	...

080167a0 <_printf_i>:
 80167a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167a4:	7e0f      	ldrb	r7, [r1, #24]
 80167a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80167a8:	2f78      	cmp	r7, #120	; 0x78
 80167aa:	4691      	mov	r9, r2
 80167ac:	4680      	mov	r8, r0
 80167ae:	460c      	mov	r4, r1
 80167b0:	469a      	mov	sl, r3
 80167b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80167b6:	d807      	bhi.n	80167c8 <_printf_i+0x28>
 80167b8:	2f62      	cmp	r7, #98	; 0x62
 80167ba:	d80a      	bhi.n	80167d2 <_printf_i+0x32>
 80167bc:	2f00      	cmp	r7, #0
 80167be:	f000 80d8 	beq.w	8016972 <_printf_i+0x1d2>
 80167c2:	2f58      	cmp	r7, #88	; 0x58
 80167c4:	f000 80a3 	beq.w	801690e <_printf_i+0x16e>
 80167c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80167cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80167d0:	e03a      	b.n	8016848 <_printf_i+0xa8>
 80167d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80167d6:	2b15      	cmp	r3, #21
 80167d8:	d8f6      	bhi.n	80167c8 <_printf_i+0x28>
 80167da:	a101      	add	r1, pc, #4	; (adr r1, 80167e0 <_printf_i+0x40>)
 80167dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80167e0:	08016839 	.word	0x08016839
 80167e4:	0801684d 	.word	0x0801684d
 80167e8:	080167c9 	.word	0x080167c9
 80167ec:	080167c9 	.word	0x080167c9
 80167f0:	080167c9 	.word	0x080167c9
 80167f4:	080167c9 	.word	0x080167c9
 80167f8:	0801684d 	.word	0x0801684d
 80167fc:	080167c9 	.word	0x080167c9
 8016800:	080167c9 	.word	0x080167c9
 8016804:	080167c9 	.word	0x080167c9
 8016808:	080167c9 	.word	0x080167c9
 801680c:	08016959 	.word	0x08016959
 8016810:	0801687d 	.word	0x0801687d
 8016814:	0801693b 	.word	0x0801693b
 8016818:	080167c9 	.word	0x080167c9
 801681c:	080167c9 	.word	0x080167c9
 8016820:	0801697b 	.word	0x0801697b
 8016824:	080167c9 	.word	0x080167c9
 8016828:	0801687d 	.word	0x0801687d
 801682c:	080167c9 	.word	0x080167c9
 8016830:	080167c9 	.word	0x080167c9
 8016834:	08016943 	.word	0x08016943
 8016838:	682b      	ldr	r3, [r5, #0]
 801683a:	1d1a      	adds	r2, r3, #4
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	602a      	str	r2, [r5, #0]
 8016840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016848:	2301      	movs	r3, #1
 801684a:	e0a3      	b.n	8016994 <_printf_i+0x1f4>
 801684c:	6820      	ldr	r0, [r4, #0]
 801684e:	6829      	ldr	r1, [r5, #0]
 8016850:	0606      	lsls	r6, r0, #24
 8016852:	f101 0304 	add.w	r3, r1, #4
 8016856:	d50a      	bpl.n	801686e <_printf_i+0xce>
 8016858:	680e      	ldr	r6, [r1, #0]
 801685a:	602b      	str	r3, [r5, #0]
 801685c:	2e00      	cmp	r6, #0
 801685e:	da03      	bge.n	8016868 <_printf_i+0xc8>
 8016860:	232d      	movs	r3, #45	; 0x2d
 8016862:	4276      	negs	r6, r6
 8016864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016868:	485e      	ldr	r0, [pc, #376]	; (80169e4 <_printf_i+0x244>)
 801686a:	230a      	movs	r3, #10
 801686c:	e019      	b.n	80168a2 <_printf_i+0x102>
 801686e:	680e      	ldr	r6, [r1, #0]
 8016870:	602b      	str	r3, [r5, #0]
 8016872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016876:	bf18      	it	ne
 8016878:	b236      	sxthne	r6, r6
 801687a:	e7ef      	b.n	801685c <_printf_i+0xbc>
 801687c:	682b      	ldr	r3, [r5, #0]
 801687e:	6820      	ldr	r0, [r4, #0]
 8016880:	1d19      	adds	r1, r3, #4
 8016882:	6029      	str	r1, [r5, #0]
 8016884:	0601      	lsls	r1, r0, #24
 8016886:	d501      	bpl.n	801688c <_printf_i+0xec>
 8016888:	681e      	ldr	r6, [r3, #0]
 801688a:	e002      	b.n	8016892 <_printf_i+0xf2>
 801688c:	0646      	lsls	r6, r0, #25
 801688e:	d5fb      	bpl.n	8016888 <_printf_i+0xe8>
 8016890:	881e      	ldrh	r6, [r3, #0]
 8016892:	4854      	ldr	r0, [pc, #336]	; (80169e4 <_printf_i+0x244>)
 8016894:	2f6f      	cmp	r7, #111	; 0x6f
 8016896:	bf0c      	ite	eq
 8016898:	2308      	moveq	r3, #8
 801689a:	230a      	movne	r3, #10
 801689c:	2100      	movs	r1, #0
 801689e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80168a2:	6865      	ldr	r5, [r4, #4]
 80168a4:	60a5      	str	r5, [r4, #8]
 80168a6:	2d00      	cmp	r5, #0
 80168a8:	bfa2      	ittt	ge
 80168aa:	6821      	ldrge	r1, [r4, #0]
 80168ac:	f021 0104 	bicge.w	r1, r1, #4
 80168b0:	6021      	strge	r1, [r4, #0]
 80168b2:	b90e      	cbnz	r6, 80168b8 <_printf_i+0x118>
 80168b4:	2d00      	cmp	r5, #0
 80168b6:	d04d      	beq.n	8016954 <_printf_i+0x1b4>
 80168b8:	4615      	mov	r5, r2
 80168ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80168be:	fb03 6711 	mls	r7, r3, r1, r6
 80168c2:	5dc7      	ldrb	r7, [r0, r7]
 80168c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80168c8:	4637      	mov	r7, r6
 80168ca:	42bb      	cmp	r3, r7
 80168cc:	460e      	mov	r6, r1
 80168ce:	d9f4      	bls.n	80168ba <_printf_i+0x11a>
 80168d0:	2b08      	cmp	r3, #8
 80168d2:	d10b      	bne.n	80168ec <_printf_i+0x14c>
 80168d4:	6823      	ldr	r3, [r4, #0]
 80168d6:	07de      	lsls	r6, r3, #31
 80168d8:	d508      	bpl.n	80168ec <_printf_i+0x14c>
 80168da:	6923      	ldr	r3, [r4, #16]
 80168dc:	6861      	ldr	r1, [r4, #4]
 80168de:	4299      	cmp	r1, r3
 80168e0:	bfde      	ittt	le
 80168e2:	2330      	movle	r3, #48	; 0x30
 80168e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80168e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80168ec:	1b52      	subs	r2, r2, r5
 80168ee:	6122      	str	r2, [r4, #16]
 80168f0:	f8cd a000 	str.w	sl, [sp]
 80168f4:	464b      	mov	r3, r9
 80168f6:	aa03      	add	r2, sp, #12
 80168f8:	4621      	mov	r1, r4
 80168fa:	4640      	mov	r0, r8
 80168fc:	f7ff fee2 	bl	80166c4 <_printf_common>
 8016900:	3001      	adds	r0, #1
 8016902:	d14c      	bne.n	801699e <_printf_i+0x1fe>
 8016904:	f04f 30ff 	mov.w	r0, #4294967295
 8016908:	b004      	add	sp, #16
 801690a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801690e:	4835      	ldr	r0, [pc, #212]	; (80169e4 <_printf_i+0x244>)
 8016910:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016914:	6829      	ldr	r1, [r5, #0]
 8016916:	6823      	ldr	r3, [r4, #0]
 8016918:	f851 6b04 	ldr.w	r6, [r1], #4
 801691c:	6029      	str	r1, [r5, #0]
 801691e:	061d      	lsls	r5, r3, #24
 8016920:	d514      	bpl.n	801694c <_printf_i+0x1ac>
 8016922:	07df      	lsls	r7, r3, #31
 8016924:	bf44      	itt	mi
 8016926:	f043 0320 	orrmi.w	r3, r3, #32
 801692a:	6023      	strmi	r3, [r4, #0]
 801692c:	b91e      	cbnz	r6, 8016936 <_printf_i+0x196>
 801692e:	6823      	ldr	r3, [r4, #0]
 8016930:	f023 0320 	bic.w	r3, r3, #32
 8016934:	6023      	str	r3, [r4, #0]
 8016936:	2310      	movs	r3, #16
 8016938:	e7b0      	b.n	801689c <_printf_i+0xfc>
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	f043 0320 	orr.w	r3, r3, #32
 8016940:	6023      	str	r3, [r4, #0]
 8016942:	2378      	movs	r3, #120	; 0x78
 8016944:	4828      	ldr	r0, [pc, #160]	; (80169e8 <_printf_i+0x248>)
 8016946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801694a:	e7e3      	b.n	8016914 <_printf_i+0x174>
 801694c:	0659      	lsls	r1, r3, #25
 801694e:	bf48      	it	mi
 8016950:	b2b6      	uxthmi	r6, r6
 8016952:	e7e6      	b.n	8016922 <_printf_i+0x182>
 8016954:	4615      	mov	r5, r2
 8016956:	e7bb      	b.n	80168d0 <_printf_i+0x130>
 8016958:	682b      	ldr	r3, [r5, #0]
 801695a:	6826      	ldr	r6, [r4, #0]
 801695c:	6961      	ldr	r1, [r4, #20]
 801695e:	1d18      	adds	r0, r3, #4
 8016960:	6028      	str	r0, [r5, #0]
 8016962:	0635      	lsls	r5, r6, #24
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	d501      	bpl.n	801696c <_printf_i+0x1cc>
 8016968:	6019      	str	r1, [r3, #0]
 801696a:	e002      	b.n	8016972 <_printf_i+0x1d2>
 801696c:	0670      	lsls	r0, r6, #25
 801696e:	d5fb      	bpl.n	8016968 <_printf_i+0x1c8>
 8016970:	8019      	strh	r1, [r3, #0]
 8016972:	2300      	movs	r3, #0
 8016974:	6123      	str	r3, [r4, #16]
 8016976:	4615      	mov	r5, r2
 8016978:	e7ba      	b.n	80168f0 <_printf_i+0x150>
 801697a:	682b      	ldr	r3, [r5, #0]
 801697c:	1d1a      	adds	r2, r3, #4
 801697e:	602a      	str	r2, [r5, #0]
 8016980:	681d      	ldr	r5, [r3, #0]
 8016982:	6862      	ldr	r2, [r4, #4]
 8016984:	2100      	movs	r1, #0
 8016986:	4628      	mov	r0, r5
 8016988:	f7e9 fc4a 	bl	8000220 <memchr>
 801698c:	b108      	cbz	r0, 8016992 <_printf_i+0x1f2>
 801698e:	1b40      	subs	r0, r0, r5
 8016990:	6060      	str	r0, [r4, #4]
 8016992:	6863      	ldr	r3, [r4, #4]
 8016994:	6123      	str	r3, [r4, #16]
 8016996:	2300      	movs	r3, #0
 8016998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801699c:	e7a8      	b.n	80168f0 <_printf_i+0x150>
 801699e:	6923      	ldr	r3, [r4, #16]
 80169a0:	462a      	mov	r2, r5
 80169a2:	4649      	mov	r1, r9
 80169a4:	4640      	mov	r0, r8
 80169a6:	47d0      	blx	sl
 80169a8:	3001      	adds	r0, #1
 80169aa:	d0ab      	beq.n	8016904 <_printf_i+0x164>
 80169ac:	6823      	ldr	r3, [r4, #0]
 80169ae:	079b      	lsls	r3, r3, #30
 80169b0:	d413      	bmi.n	80169da <_printf_i+0x23a>
 80169b2:	68e0      	ldr	r0, [r4, #12]
 80169b4:	9b03      	ldr	r3, [sp, #12]
 80169b6:	4298      	cmp	r0, r3
 80169b8:	bfb8      	it	lt
 80169ba:	4618      	movlt	r0, r3
 80169bc:	e7a4      	b.n	8016908 <_printf_i+0x168>
 80169be:	2301      	movs	r3, #1
 80169c0:	4632      	mov	r2, r6
 80169c2:	4649      	mov	r1, r9
 80169c4:	4640      	mov	r0, r8
 80169c6:	47d0      	blx	sl
 80169c8:	3001      	adds	r0, #1
 80169ca:	d09b      	beq.n	8016904 <_printf_i+0x164>
 80169cc:	3501      	adds	r5, #1
 80169ce:	68e3      	ldr	r3, [r4, #12]
 80169d0:	9903      	ldr	r1, [sp, #12]
 80169d2:	1a5b      	subs	r3, r3, r1
 80169d4:	42ab      	cmp	r3, r5
 80169d6:	dcf2      	bgt.n	80169be <_printf_i+0x21e>
 80169d8:	e7eb      	b.n	80169b2 <_printf_i+0x212>
 80169da:	2500      	movs	r5, #0
 80169dc:	f104 0619 	add.w	r6, r4, #25
 80169e0:	e7f5      	b.n	80169ce <_printf_i+0x22e>
 80169e2:	bf00      	nop
 80169e4:	0801988e 	.word	0x0801988e
 80169e8:	0801989f 	.word	0x0801989f

080169ec <iprintf>:
 80169ec:	b40f      	push	{r0, r1, r2, r3}
 80169ee:	4b0a      	ldr	r3, [pc, #40]	; (8016a18 <iprintf+0x2c>)
 80169f0:	b513      	push	{r0, r1, r4, lr}
 80169f2:	681c      	ldr	r4, [r3, #0]
 80169f4:	b124      	cbz	r4, 8016a00 <iprintf+0x14>
 80169f6:	69a3      	ldr	r3, [r4, #24]
 80169f8:	b913      	cbnz	r3, 8016a00 <iprintf+0x14>
 80169fa:	4620      	mov	r0, r4
 80169fc:	f7ff f9cc 	bl	8015d98 <__sinit>
 8016a00:	ab05      	add	r3, sp, #20
 8016a02:	9a04      	ldr	r2, [sp, #16]
 8016a04:	68a1      	ldr	r1, [r4, #8]
 8016a06:	9301      	str	r3, [sp, #4]
 8016a08:	4620      	mov	r0, r4
 8016a0a:	f001 fdd7 	bl	80185bc <_vfiprintf_r>
 8016a0e:	b002      	add	sp, #8
 8016a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a14:	b004      	add	sp, #16
 8016a16:	4770      	bx	lr
 8016a18:	20000140 	.word	0x20000140

08016a1c <_puts_r>:
 8016a1c:	b570      	push	{r4, r5, r6, lr}
 8016a1e:	460e      	mov	r6, r1
 8016a20:	4605      	mov	r5, r0
 8016a22:	b118      	cbz	r0, 8016a2c <_puts_r+0x10>
 8016a24:	6983      	ldr	r3, [r0, #24]
 8016a26:	b90b      	cbnz	r3, 8016a2c <_puts_r+0x10>
 8016a28:	f7ff f9b6 	bl	8015d98 <__sinit>
 8016a2c:	69ab      	ldr	r3, [r5, #24]
 8016a2e:	68ac      	ldr	r4, [r5, #8]
 8016a30:	b913      	cbnz	r3, 8016a38 <_puts_r+0x1c>
 8016a32:	4628      	mov	r0, r5
 8016a34:	f7ff f9b0 	bl	8015d98 <__sinit>
 8016a38:	4b2c      	ldr	r3, [pc, #176]	; (8016aec <_puts_r+0xd0>)
 8016a3a:	429c      	cmp	r4, r3
 8016a3c:	d120      	bne.n	8016a80 <_puts_r+0x64>
 8016a3e:	686c      	ldr	r4, [r5, #4]
 8016a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a42:	07db      	lsls	r3, r3, #31
 8016a44:	d405      	bmi.n	8016a52 <_puts_r+0x36>
 8016a46:	89a3      	ldrh	r3, [r4, #12]
 8016a48:	0598      	lsls	r0, r3, #22
 8016a4a:	d402      	bmi.n	8016a52 <_puts_r+0x36>
 8016a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a4e:	f7ee fd11 	bl	8005474 <__retarget_lock_acquire_recursive>
 8016a52:	89a3      	ldrh	r3, [r4, #12]
 8016a54:	0719      	lsls	r1, r3, #28
 8016a56:	d51d      	bpl.n	8016a94 <_puts_r+0x78>
 8016a58:	6923      	ldr	r3, [r4, #16]
 8016a5a:	b1db      	cbz	r3, 8016a94 <_puts_r+0x78>
 8016a5c:	3e01      	subs	r6, #1
 8016a5e:	68a3      	ldr	r3, [r4, #8]
 8016a60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016a64:	3b01      	subs	r3, #1
 8016a66:	60a3      	str	r3, [r4, #8]
 8016a68:	bb39      	cbnz	r1, 8016aba <_puts_r+0x9e>
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	da38      	bge.n	8016ae0 <_puts_r+0xc4>
 8016a6e:	4622      	mov	r2, r4
 8016a70:	210a      	movs	r1, #10
 8016a72:	4628      	mov	r0, r5
 8016a74:	f000 f926 	bl	8016cc4 <__swbuf_r>
 8016a78:	3001      	adds	r0, #1
 8016a7a:	d011      	beq.n	8016aa0 <_puts_r+0x84>
 8016a7c:	250a      	movs	r5, #10
 8016a7e:	e011      	b.n	8016aa4 <_puts_r+0x88>
 8016a80:	4b1b      	ldr	r3, [pc, #108]	; (8016af0 <_puts_r+0xd4>)
 8016a82:	429c      	cmp	r4, r3
 8016a84:	d101      	bne.n	8016a8a <_puts_r+0x6e>
 8016a86:	68ac      	ldr	r4, [r5, #8]
 8016a88:	e7da      	b.n	8016a40 <_puts_r+0x24>
 8016a8a:	4b1a      	ldr	r3, [pc, #104]	; (8016af4 <_puts_r+0xd8>)
 8016a8c:	429c      	cmp	r4, r3
 8016a8e:	bf08      	it	eq
 8016a90:	68ec      	ldreq	r4, [r5, #12]
 8016a92:	e7d5      	b.n	8016a40 <_puts_r+0x24>
 8016a94:	4621      	mov	r1, r4
 8016a96:	4628      	mov	r0, r5
 8016a98:	f000 f978 	bl	8016d8c <__swsetup_r>
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d0dd      	beq.n	8016a5c <_puts_r+0x40>
 8016aa0:	f04f 35ff 	mov.w	r5, #4294967295
 8016aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016aa6:	07da      	lsls	r2, r3, #31
 8016aa8:	d405      	bmi.n	8016ab6 <_puts_r+0x9a>
 8016aaa:	89a3      	ldrh	r3, [r4, #12]
 8016aac:	059b      	lsls	r3, r3, #22
 8016aae:	d402      	bmi.n	8016ab6 <_puts_r+0x9a>
 8016ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ab2:	f7ee fcf3 	bl	800549c <__retarget_lock_release_recursive>
 8016ab6:	4628      	mov	r0, r5
 8016ab8:	bd70      	pop	{r4, r5, r6, pc}
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	da04      	bge.n	8016ac8 <_puts_r+0xac>
 8016abe:	69a2      	ldr	r2, [r4, #24]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	dc06      	bgt.n	8016ad2 <_puts_r+0xb6>
 8016ac4:	290a      	cmp	r1, #10
 8016ac6:	d004      	beq.n	8016ad2 <_puts_r+0xb6>
 8016ac8:	6823      	ldr	r3, [r4, #0]
 8016aca:	1c5a      	adds	r2, r3, #1
 8016acc:	6022      	str	r2, [r4, #0]
 8016ace:	7019      	strb	r1, [r3, #0]
 8016ad0:	e7c5      	b.n	8016a5e <_puts_r+0x42>
 8016ad2:	4622      	mov	r2, r4
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	f000 f8f5 	bl	8016cc4 <__swbuf_r>
 8016ada:	3001      	adds	r0, #1
 8016adc:	d1bf      	bne.n	8016a5e <_puts_r+0x42>
 8016ade:	e7df      	b.n	8016aa0 <_puts_r+0x84>
 8016ae0:	6823      	ldr	r3, [r4, #0]
 8016ae2:	250a      	movs	r5, #10
 8016ae4:	1c5a      	adds	r2, r3, #1
 8016ae6:	6022      	str	r2, [r4, #0]
 8016ae8:	701d      	strb	r5, [r3, #0]
 8016aea:	e7db      	b.n	8016aa4 <_puts_r+0x88>
 8016aec:	08019838 	.word	0x08019838
 8016af0:	08019858 	.word	0x08019858
 8016af4:	08019818 	.word	0x08019818

08016af8 <puts>:
 8016af8:	4b02      	ldr	r3, [pc, #8]	; (8016b04 <puts+0xc>)
 8016afa:	4601      	mov	r1, r0
 8016afc:	6818      	ldr	r0, [r3, #0]
 8016afe:	f7ff bf8d 	b.w	8016a1c <_puts_r>
 8016b02:	bf00      	nop
 8016b04:	20000140 	.word	0x20000140

08016b08 <cleanup_glue>:
 8016b08:	b538      	push	{r3, r4, r5, lr}
 8016b0a:	460c      	mov	r4, r1
 8016b0c:	6809      	ldr	r1, [r1, #0]
 8016b0e:	4605      	mov	r5, r0
 8016b10:	b109      	cbz	r1, 8016b16 <cleanup_glue+0xe>
 8016b12:	f7ff fff9 	bl	8016b08 <cleanup_glue>
 8016b16:	4621      	mov	r1, r4
 8016b18:	4628      	mov	r0, r5
 8016b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b1e:	f7ff ba1b 	b.w	8015f58 <_free_r>
	...

08016b24 <_reclaim_reent>:
 8016b24:	4b2c      	ldr	r3, [pc, #176]	; (8016bd8 <_reclaim_reent+0xb4>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4283      	cmp	r3, r0
 8016b2a:	b570      	push	{r4, r5, r6, lr}
 8016b2c:	4604      	mov	r4, r0
 8016b2e:	d051      	beq.n	8016bd4 <_reclaim_reent+0xb0>
 8016b30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016b32:	b143      	cbz	r3, 8016b46 <_reclaim_reent+0x22>
 8016b34:	68db      	ldr	r3, [r3, #12]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d14a      	bne.n	8016bd0 <_reclaim_reent+0xac>
 8016b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b3c:	6819      	ldr	r1, [r3, #0]
 8016b3e:	b111      	cbz	r1, 8016b46 <_reclaim_reent+0x22>
 8016b40:	4620      	mov	r0, r4
 8016b42:	f7ff fa09 	bl	8015f58 <_free_r>
 8016b46:	6961      	ldr	r1, [r4, #20]
 8016b48:	b111      	cbz	r1, 8016b50 <_reclaim_reent+0x2c>
 8016b4a:	4620      	mov	r0, r4
 8016b4c:	f7ff fa04 	bl	8015f58 <_free_r>
 8016b50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016b52:	b111      	cbz	r1, 8016b5a <_reclaim_reent+0x36>
 8016b54:	4620      	mov	r0, r4
 8016b56:	f7ff f9ff 	bl	8015f58 <_free_r>
 8016b5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016b5c:	b111      	cbz	r1, 8016b64 <_reclaim_reent+0x40>
 8016b5e:	4620      	mov	r0, r4
 8016b60:	f7ff f9fa 	bl	8015f58 <_free_r>
 8016b64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016b66:	b111      	cbz	r1, 8016b6e <_reclaim_reent+0x4a>
 8016b68:	4620      	mov	r0, r4
 8016b6a:	f7ff f9f5 	bl	8015f58 <_free_r>
 8016b6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016b70:	b111      	cbz	r1, 8016b78 <_reclaim_reent+0x54>
 8016b72:	4620      	mov	r0, r4
 8016b74:	f7ff f9f0 	bl	8015f58 <_free_r>
 8016b78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016b7a:	b111      	cbz	r1, 8016b82 <_reclaim_reent+0x5e>
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	f7ff f9eb 	bl	8015f58 <_free_r>
 8016b82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016b84:	b111      	cbz	r1, 8016b8c <_reclaim_reent+0x68>
 8016b86:	4620      	mov	r0, r4
 8016b88:	f7ff f9e6 	bl	8015f58 <_free_r>
 8016b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b8e:	b111      	cbz	r1, 8016b96 <_reclaim_reent+0x72>
 8016b90:	4620      	mov	r0, r4
 8016b92:	f7ff f9e1 	bl	8015f58 <_free_r>
 8016b96:	69a3      	ldr	r3, [r4, #24]
 8016b98:	b1e3      	cbz	r3, 8016bd4 <_reclaim_reent+0xb0>
 8016b9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016b9c:	4620      	mov	r0, r4
 8016b9e:	4798      	blx	r3
 8016ba0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016ba2:	b1b9      	cbz	r1, 8016bd4 <_reclaim_reent+0xb0>
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016baa:	f7ff bfad 	b.w	8016b08 <cleanup_glue>
 8016bae:	5949      	ldr	r1, [r1, r5]
 8016bb0:	b941      	cbnz	r1, 8016bc4 <_reclaim_reent+0xa0>
 8016bb2:	3504      	adds	r5, #4
 8016bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016bb6:	2d80      	cmp	r5, #128	; 0x80
 8016bb8:	68d9      	ldr	r1, [r3, #12]
 8016bba:	d1f8      	bne.n	8016bae <_reclaim_reent+0x8a>
 8016bbc:	4620      	mov	r0, r4
 8016bbe:	f7ff f9cb 	bl	8015f58 <_free_r>
 8016bc2:	e7ba      	b.n	8016b3a <_reclaim_reent+0x16>
 8016bc4:	680e      	ldr	r6, [r1, #0]
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	f7ff f9c6 	bl	8015f58 <_free_r>
 8016bcc:	4631      	mov	r1, r6
 8016bce:	e7ef      	b.n	8016bb0 <_reclaim_reent+0x8c>
 8016bd0:	2500      	movs	r5, #0
 8016bd2:	e7ef      	b.n	8016bb4 <_reclaim_reent+0x90>
 8016bd4:	bd70      	pop	{r4, r5, r6, pc}
 8016bd6:	bf00      	nop
 8016bd8:	20000140 	.word	0x20000140

08016bdc <_sbrk_r>:
 8016bdc:	b538      	push	{r3, r4, r5, lr}
 8016bde:	4d06      	ldr	r5, [pc, #24]	; (8016bf8 <_sbrk_r+0x1c>)
 8016be0:	2300      	movs	r3, #0
 8016be2:	4604      	mov	r4, r0
 8016be4:	4608      	mov	r0, r1
 8016be6:	602b      	str	r3, [r5, #0]
 8016be8:	f7ed ffde 	bl	8004ba8 <_sbrk>
 8016bec:	1c43      	adds	r3, r0, #1
 8016bee:	d102      	bne.n	8016bf6 <_sbrk_r+0x1a>
 8016bf0:	682b      	ldr	r3, [r5, #0]
 8016bf2:	b103      	cbz	r3, 8016bf6 <_sbrk_r+0x1a>
 8016bf4:	6023      	str	r3, [r4, #0]
 8016bf6:	bd38      	pop	{r3, r4, r5, pc}
 8016bf8:	2000705c 	.word	0x2000705c

08016bfc <__sread>:
 8016bfc:	b510      	push	{r4, lr}
 8016bfe:	460c      	mov	r4, r1
 8016c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c04:	f001 fe0a 	bl	801881c <_read_r>
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	bfab      	itete	ge
 8016c0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c0e:	89a3      	ldrhlt	r3, [r4, #12]
 8016c10:	181b      	addge	r3, r3, r0
 8016c12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c16:	bfac      	ite	ge
 8016c18:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c1a:	81a3      	strhlt	r3, [r4, #12]
 8016c1c:	bd10      	pop	{r4, pc}

08016c1e <__swrite>:
 8016c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c22:	461f      	mov	r7, r3
 8016c24:	898b      	ldrh	r3, [r1, #12]
 8016c26:	05db      	lsls	r3, r3, #23
 8016c28:	4605      	mov	r5, r0
 8016c2a:	460c      	mov	r4, r1
 8016c2c:	4616      	mov	r6, r2
 8016c2e:	d505      	bpl.n	8016c3c <__swrite+0x1e>
 8016c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c34:	2302      	movs	r3, #2
 8016c36:	2200      	movs	r2, #0
 8016c38:	f001 f866 	bl	8017d08 <_lseek_r>
 8016c3c:	89a3      	ldrh	r3, [r4, #12]
 8016c3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c46:	81a3      	strh	r3, [r4, #12]
 8016c48:	4632      	mov	r2, r6
 8016c4a:	463b      	mov	r3, r7
 8016c4c:	4628      	mov	r0, r5
 8016c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c52:	f000 b889 	b.w	8016d68 <_write_r>

08016c56 <__sseek>:
 8016c56:	b510      	push	{r4, lr}
 8016c58:	460c      	mov	r4, r1
 8016c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c5e:	f001 f853 	bl	8017d08 <_lseek_r>
 8016c62:	1c43      	adds	r3, r0, #1
 8016c64:	89a3      	ldrh	r3, [r4, #12]
 8016c66:	bf15      	itete	ne
 8016c68:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c72:	81a3      	strheq	r3, [r4, #12]
 8016c74:	bf18      	it	ne
 8016c76:	81a3      	strhne	r3, [r4, #12]
 8016c78:	bd10      	pop	{r4, pc}

08016c7a <__sclose>:
 8016c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c7e:	f000 b8f3 	b.w	8016e68 <_close_r>

08016c82 <strcpy>:
 8016c82:	4603      	mov	r3, r0
 8016c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c88:	f803 2b01 	strb.w	r2, [r3], #1
 8016c8c:	2a00      	cmp	r2, #0
 8016c8e:	d1f9      	bne.n	8016c84 <strcpy+0x2>
 8016c90:	4770      	bx	lr
	...

08016c94 <viprintf>:
 8016c94:	b513      	push	{r0, r1, r4, lr}
 8016c96:	460b      	mov	r3, r1
 8016c98:	4909      	ldr	r1, [pc, #36]	; (8016cc0 <viprintf+0x2c>)
 8016c9a:	680c      	ldr	r4, [r1, #0]
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	b144      	cbz	r4, 8016cb2 <viprintf+0x1e>
 8016ca0:	69a1      	ldr	r1, [r4, #24]
 8016ca2:	b931      	cbnz	r1, 8016cb2 <viprintf+0x1e>
 8016ca4:	e9cd 0300 	strd	r0, r3, [sp]
 8016ca8:	4620      	mov	r0, r4
 8016caa:	f7ff f875 	bl	8015d98 <__sinit>
 8016cae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016cb2:	68a1      	ldr	r1, [r4, #8]
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	b002      	add	sp, #8
 8016cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cbc:	f001 bc7e 	b.w	80185bc <_vfiprintf_r>
 8016cc0:	20000140 	.word	0x20000140

08016cc4 <__swbuf_r>:
 8016cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cc6:	460e      	mov	r6, r1
 8016cc8:	4614      	mov	r4, r2
 8016cca:	4605      	mov	r5, r0
 8016ccc:	b118      	cbz	r0, 8016cd6 <__swbuf_r+0x12>
 8016cce:	6983      	ldr	r3, [r0, #24]
 8016cd0:	b90b      	cbnz	r3, 8016cd6 <__swbuf_r+0x12>
 8016cd2:	f7ff f861 	bl	8015d98 <__sinit>
 8016cd6:	4b21      	ldr	r3, [pc, #132]	; (8016d5c <__swbuf_r+0x98>)
 8016cd8:	429c      	cmp	r4, r3
 8016cda:	d12b      	bne.n	8016d34 <__swbuf_r+0x70>
 8016cdc:	686c      	ldr	r4, [r5, #4]
 8016cde:	69a3      	ldr	r3, [r4, #24]
 8016ce0:	60a3      	str	r3, [r4, #8]
 8016ce2:	89a3      	ldrh	r3, [r4, #12]
 8016ce4:	071a      	lsls	r2, r3, #28
 8016ce6:	d52f      	bpl.n	8016d48 <__swbuf_r+0x84>
 8016ce8:	6923      	ldr	r3, [r4, #16]
 8016cea:	b36b      	cbz	r3, 8016d48 <__swbuf_r+0x84>
 8016cec:	6923      	ldr	r3, [r4, #16]
 8016cee:	6820      	ldr	r0, [r4, #0]
 8016cf0:	1ac0      	subs	r0, r0, r3
 8016cf2:	6963      	ldr	r3, [r4, #20]
 8016cf4:	b2f6      	uxtb	r6, r6
 8016cf6:	4283      	cmp	r3, r0
 8016cf8:	4637      	mov	r7, r6
 8016cfa:	dc04      	bgt.n	8016d06 <__swbuf_r+0x42>
 8016cfc:	4621      	mov	r1, r4
 8016cfe:	4628      	mov	r0, r5
 8016d00:	f000 ffc2 	bl	8017c88 <_fflush_r>
 8016d04:	bb30      	cbnz	r0, 8016d54 <__swbuf_r+0x90>
 8016d06:	68a3      	ldr	r3, [r4, #8]
 8016d08:	3b01      	subs	r3, #1
 8016d0a:	60a3      	str	r3, [r4, #8]
 8016d0c:	6823      	ldr	r3, [r4, #0]
 8016d0e:	1c5a      	adds	r2, r3, #1
 8016d10:	6022      	str	r2, [r4, #0]
 8016d12:	701e      	strb	r6, [r3, #0]
 8016d14:	6963      	ldr	r3, [r4, #20]
 8016d16:	3001      	adds	r0, #1
 8016d18:	4283      	cmp	r3, r0
 8016d1a:	d004      	beq.n	8016d26 <__swbuf_r+0x62>
 8016d1c:	89a3      	ldrh	r3, [r4, #12]
 8016d1e:	07db      	lsls	r3, r3, #31
 8016d20:	d506      	bpl.n	8016d30 <__swbuf_r+0x6c>
 8016d22:	2e0a      	cmp	r6, #10
 8016d24:	d104      	bne.n	8016d30 <__swbuf_r+0x6c>
 8016d26:	4621      	mov	r1, r4
 8016d28:	4628      	mov	r0, r5
 8016d2a:	f000 ffad 	bl	8017c88 <_fflush_r>
 8016d2e:	b988      	cbnz	r0, 8016d54 <__swbuf_r+0x90>
 8016d30:	4638      	mov	r0, r7
 8016d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d34:	4b0a      	ldr	r3, [pc, #40]	; (8016d60 <__swbuf_r+0x9c>)
 8016d36:	429c      	cmp	r4, r3
 8016d38:	d101      	bne.n	8016d3e <__swbuf_r+0x7a>
 8016d3a:	68ac      	ldr	r4, [r5, #8]
 8016d3c:	e7cf      	b.n	8016cde <__swbuf_r+0x1a>
 8016d3e:	4b09      	ldr	r3, [pc, #36]	; (8016d64 <__swbuf_r+0xa0>)
 8016d40:	429c      	cmp	r4, r3
 8016d42:	bf08      	it	eq
 8016d44:	68ec      	ldreq	r4, [r5, #12]
 8016d46:	e7ca      	b.n	8016cde <__swbuf_r+0x1a>
 8016d48:	4621      	mov	r1, r4
 8016d4a:	4628      	mov	r0, r5
 8016d4c:	f000 f81e 	bl	8016d8c <__swsetup_r>
 8016d50:	2800      	cmp	r0, #0
 8016d52:	d0cb      	beq.n	8016cec <__swbuf_r+0x28>
 8016d54:	f04f 37ff 	mov.w	r7, #4294967295
 8016d58:	e7ea      	b.n	8016d30 <__swbuf_r+0x6c>
 8016d5a:	bf00      	nop
 8016d5c:	08019838 	.word	0x08019838
 8016d60:	08019858 	.word	0x08019858
 8016d64:	08019818 	.word	0x08019818

08016d68 <_write_r>:
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4d07      	ldr	r5, [pc, #28]	; (8016d88 <_write_r+0x20>)
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	4608      	mov	r0, r1
 8016d70:	4611      	mov	r1, r2
 8016d72:	2200      	movs	r2, #0
 8016d74:	602a      	str	r2, [r5, #0]
 8016d76:	461a      	mov	r2, r3
 8016d78:	f7ec feb1 	bl	8003ade <_write>
 8016d7c:	1c43      	adds	r3, r0, #1
 8016d7e:	d102      	bne.n	8016d86 <_write_r+0x1e>
 8016d80:	682b      	ldr	r3, [r5, #0]
 8016d82:	b103      	cbz	r3, 8016d86 <_write_r+0x1e>
 8016d84:	6023      	str	r3, [r4, #0]
 8016d86:	bd38      	pop	{r3, r4, r5, pc}
 8016d88:	2000705c 	.word	0x2000705c

08016d8c <__swsetup_r>:
 8016d8c:	4b32      	ldr	r3, [pc, #200]	; (8016e58 <__swsetup_r+0xcc>)
 8016d8e:	b570      	push	{r4, r5, r6, lr}
 8016d90:	681d      	ldr	r5, [r3, #0]
 8016d92:	4606      	mov	r6, r0
 8016d94:	460c      	mov	r4, r1
 8016d96:	b125      	cbz	r5, 8016da2 <__swsetup_r+0x16>
 8016d98:	69ab      	ldr	r3, [r5, #24]
 8016d9a:	b913      	cbnz	r3, 8016da2 <__swsetup_r+0x16>
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	f7fe fffb 	bl	8015d98 <__sinit>
 8016da2:	4b2e      	ldr	r3, [pc, #184]	; (8016e5c <__swsetup_r+0xd0>)
 8016da4:	429c      	cmp	r4, r3
 8016da6:	d10f      	bne.n	8016dc8 <__swsetup_r+0x3c>
 8016da8:	686c      	ldr	r4, [r5, #4]
 8016daa:	89a3      	ldrh	r3, [r4, #12]
 8016dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016db0:	0719      	lsls	r1, r3, #28
 8016db2:	d42c      	bmi.n	8016e0e <__swsetup_r+0x82>
 8016db4:	06dd      	lsls	r5, r3, #27
 8016db6:	d411      	bmi.n	8016ddc <__swsetup_r+0x50>
 8016db8:	2309      	movs	r3, #9
 8016dba:	6033      	str	r3, [r6, #0]
 8016dbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016dc0:	81a3      	strh	r3, [r4, #12]
 8016dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8016dc6:	e03e      	b.n	8016e46 <__swsetup_r+0xba>
 8016dc8:	4b25      	ldr	r3, [pc, #148]	; (8016e60 <__swsetup_r+0xd4>)
 8016dca:	429c      	cmp	r4, r3
 8016dcc:	d101      	bne.n	8016dd2 <__swsetup_r+0x46>
 8016dce:	68ac      	ldr	r4, [r5, #8]
 8016dd0:	e7eb      	b.n	8016daa <__swsetup_r+0x1e>
 8016dd2:	4b24      	ldr	r3, [pc, #144]	; (8016e64 <__swsetup_r+0xd8>)
 8016dd4:	429c      	cmp	r4, r3
 8016dd6:	bf08      	it	eq
 8016dd8:	68ec      	ldreq	r4, [r5, #12]
 8016dda:	e7e6      	b.n	8016daa <__swsetup_r+0x1e>
 8016ddc:	0758      	lsls	r0, r3, #29
 8016dde:	d512      	bpl.n	8016e06 <__swsetup_r+0x7a>
 8016de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016de2:	b141      	cbz	r1, 8016df6 <__swsetup_r+0x6a>
 8016de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016de8:	4299      	cmp	r1, r3
 8016dea:	d002      	beq.n	8016df2 <__swsetup_r+0x66>
 8016dec:	4630      	mov	r0, r6
 8016dee:	f7ff f8b3 	bl	8015f58 <_free_r>
 8016df2:	2300      	movs	r3, #0
 8016df4:	6363      	str	r3, [r4, #52]	; 0x34
 8016df6:	89a3      	ldrh	r3, [r4, #12]
 8016df8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016dfc:	81a3      	strh	r3, [r4, #12]
 8016dfe:	2300      	movs	r3, #0
 8016e00:	6063      	str	r3, [r4, #4]
 8016e02:	6923      	ldr	r3, [r4, #16]
 8016e04:	6023      	str	r3, [r4, #0]
 8016e06:	89a3      	ldrh	r3, [r4, #12]
 8016e08:	f043 0308 	orr.w	r3, r3, #8
 8016e0c:	81a3      	strh	r3, [r4, #12]
 8016e0e:	6923      	ldr	r3, [r4, #16]
 8016e10:	b94b      	cbnz	r3, 8016e26 <__swsetup_r+0x9a>
 8016e12:	89a3      	ldrh	r3, [r4, #12]
 8016e14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e1c:	d003      	beq.n	8016e26 <__swsetup_r+0x9a>
 8016e1e:	4621      	mov	r1, r4
 8016e20:	4630      	mov	r0, r6
 8016e22:	f000 ffa9 	bl	8017d78 <__smakebuf_r>
 8016e26:	89a0      	ldrh	r0, [r4, #12]
 8016e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e2c:	f010 0301 	ands.w	r3, r0, #1
 8016e30:	d00a      	beq.n	8016e48 <__swsetup_r+0xbc>
 8016e32:	2300      	movs	r3, #0
 8016e34:	60a3      	str	r3, [r4, #8]
 8016e36:	6963      	ldr	r3, [r4, #20]
 8016e38:	425b      	negs	r3, r3
 8016e3a:	61a3      	str	r3, [r4, #24]
 8016e3c:	6923      	ldr	r3, [r4, #16]
 8016e3e:	b943      	cbnz	r3, 8016e52 <__swsetup_r+0xc6>
 8016e40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e44:	d1ba      	bne.n	8016dbc <__swsetup_r+0x30>
 8016e46:	bd70      	pop	{r4, r5, r6, pc}
 8016e48:	0781      	lsls	r1, r0, #30
 8016e4a:	bf58      	it	pl
 8016e4c:	6963      	ldrpl	r3, [r4, #20]
 8016e4e:	60a3      	str	r3, [r4, #8]
 8016e50:	e7f4      	b.n	8016e3c <__swsetup_r+0xb0>
 8016e52:	2000      	movs	r0, #0
 8016e54:	e7f7      	b.n	8016e46 <__swsetup_r+0xba>
 8016e56:	bf00      	nop
 8016e58:	20000140 	.word	0x20000140
 8016e5c:	08019838 	.word	0x08019838
 8016e60:	08019858 	.word	0x08019858
 8016e64:	08019818 	.word	0x08019818

08016e68 <_close_r>:
 8016e68:	b538      	push	{r3, r4, r5, lr}
 8016e6a:	4d06      	ldr	r5, [pc, #24]	; (8016e84 <_close_r+0x1c>)
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	4604      	mov	r4, r0
 8016e70:	4608      	mov	r0, r1
 8016e72:	602b      	str	r3, [r5, #0]
 8016e74:	f7ed fe63 	bl	8004b3e <_close>
 8016e78:	1c43      	adds	r3, r0, #1
 8016e7a:	d102      	bne.n	8016e82 <_close_r+0x1a>
 8016e7c:	682b      	ldr	r3, [r5, #0]
 8016e7e:	b103      	cbz	r3, 8016e82 <_close_r+0x1a>
 8016e80:	6023      	str	r3, [r4, #0]
 8016e82:	bd38      	pop	{r3, r4, r5, pc}
 8016e84:	2000705c 	.word	0x2000705c

08016e88 <quorem>:
 8016e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e8c:	6903      	ldr	r3, [r0, #16]
 8016e8e:	690c      	ldr	r4, [r1, #16]
 8016e90:	42a3      	cmp	r3, r4
 8016e92:	4607      	mov	r7, r0
 8016e94:	f2c0 8081 	blt.w	8016f9a <quorem+0x112>
 8016e98:	3c01      	subs	r4, #1
 8016e9a:	f101 0814 	add.w	r8, r1, #20
 8016e9e:	f100 0514 	add.w	r5, r0, #20
 8016ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016ea6:	9301      	str	r3, [sp, #4]
 8016ea8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016eac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	429a      	cmp	r2, r3
 8016eb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016ebc:	fbb2 f6f3 	udiv	r6, r2, r3
 8016ec0:	d331      	bcc.n	8016f26 <quorem+0x9e>
 8016ec2:	f04f 0e00 	mov.w	lr, #0
 8016ec6:	4640      	mov	r0, r8
 8016ec8:	46ac      	mov	ip, r5
 8016eca:	46f2      	mov	sl, lr
 8016ecc:	f850 2b04 	ldr.w	r2, [r0], #4
 8016ed0:	b293      	uxth	r3, r2
 8016ed2:	fb06 e303 	mla	r3, r6, r3, lr
 8016ed6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	ebaa 0303 	sub.w	r3, sl, r3
 8016ee0:	f8dc a000 	ldr.w	sl, [ip]
 8016ee4:	0c12      	lsrs	r2, r2, #16
 8016ee6:	fa13 f38a 	uxtah	r3, r3, sl
 8016eea:	fb06 e202 	mla	r2, r6, r2, lr
 8016eee:	9300      	str	r3, [sp, #0]
 8016ef0:	9b00      	ldr	r3, [sp, #0]
 8016ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016ef6:	b292      	uxth	r2, r2
 8016ef8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016f00:	f8bd 3000 	ldrh.w	r3, [sp]
 8016f04:	4581      	cmp	r9, r0
 8016f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8016f0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016f12:	d2db      	bcs.n	8016ecc <quorem+0x44>
 8016f14:	f855 300b 	ldr.w	r3, [r5, fp]
 8016f18:	b92b      	cbnz	r3, 8016f26 <quorem+0x9e>
 8016f1a:	9b01      	ldr	r3, [sp, #4]
 8016f1c:	3b04      	subs	r3, #4
 8016f1e:	429d      	cmp	r5, r3
 8016f20:	461a      	mov	r2, r3
 8016f22:	d32e      	bcc.n	8016f82 <quorem+0xfa>
 8016f24:	613c      	str	r4, [r7, #16]
 8016f26:	4638      	mov	r0, r7
 8016f28:	f001 fa06 	bl	8018338 <__mcmp>
 8016f2c:	2800      	cmp	r0, #0
 8016f2e:	db24      	blt.n	8016f7a <quorem+0xf2>
 8016f30:	3601      	adds	r6, #1
 8016f32:	4628      	mov	r0, r5
 8016f34:	f04f 0c00 	mov.w	ip, #0
 8016f38:	f858 2b04 	ldr.w	r2, [r8], #4
 8016f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8016f40:	b293      	uxth	r3, r2
 8016f42:	ebac 0303 	sub.w	r3, ip, r3
 8016f46:	0c12      	lsrs	r2, r2, #16
 8016f48:	fa13 f38e 	uxtah	r3, r3, lr
 8016f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f5a:	45c1      	cmp	r9, r8
 8016f5c:	f840 3b04 	str.w	r3, [r0], #4
 8016f60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016f64:	d2e8      	bcs.n	8016f38 <quorem+0xb0>
 8016f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016f6e:	b922      	cbnz	r2, 8016f7a <quorem+0xf2>
 8016f70:	3b04      	subs	r3, #4
 8016f72:	429d      	cmp	r5, r3
 8016f74:	461a      	mov	r2, r3
 8016f76:	d30a      	bcc.n	8016f8e <quorem+0x106>
 8016f78:	613c      	str	r4, [r7, #16]
 8016f7a:	4630      	mov	r0, r6
 8016f7c:	b003      	add	sp, #12
 8016f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f82:	6812      	ldr	r2, [r2, #0]
 8016f84:	3b04      	subs	r3, #4
 8016f86:	2a00      	cmp	r2, #0
 8016f88:	d1cc      	bne.n	8016f24 <quorem+0x9c>
 8016f8a:	3c01      	subs	r4, #1
 8016f8c:	e7c7      	b.n	8016f1e <quorem+0x96>
 8016f8e:	6812      	ldr	r2, [r2, #0]
 8016f90:	3b04      	subs	r3, #4
 8016f92:	2a00      	cmp	r2, #0
 8016f94:	d1f0      	bne.n	8016f78 <quorem+0xf0>
 8016f96:	3c01      	subs	r4, #1
 8016f98:	e7eb      	b.n	8016f72 <quorem+0xea>
 8016f9a:	2000      	movs	r0, #0
 8016f9c:	e7ee      	b.n	8016f7c <quorem+0xf4>
	...

08016fa0 <_dtoa_r>:
 8016fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa4:	ed2d 8b04 	vpush	{d8-d9}
 8016fa8:	ec57 6b10 	vmov	r6, r7, d0
 8016fac:	b093      	sub	sp, #76	; 0x4c
 8016fae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016fb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016fb4:	9106      	str	r1, [sp, #24]
 8016fb6:	ee10 aa10 	vmov	sl, s0
 8016fba:	4604      	mov	r4, r0
 8016fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8016fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8016fc0:	46bb      	mov	fp, r7
 8016fc2:	b975      	cbnz	r5, 8016fe2 <_dtoa_r+0x42>
 8016fc4:	2010      	movs	r0, #16
 8016fc6:	f7fe ffa9 	bl	8015f1c <malloc>
 8016fca:	4602      	mov	r2, r0
 8016fcc:	6260      	str	r0, [r4, #36]	; 0x24
 8016fce:	b920      	cbnz	r0, 8016fda <_dtoa_r+0x3a>
 8016fd0:	4ba7      	ldr	r3, [pc, #668]	; (8017270 <_dtoa_r+0x2d0>)
 8016fd2:	21ea      	movs	r1, #234	; 0xea
 8016fd4:	48a7      	ldr	r0, [pc, #668]	; (8017274 <_dtoa_r+0x2d4>)
 8016fd6:	f001 fc41 	bl	801885c <__assert_func>
 8016fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016fde:	6005      	str	r5, [r0, #0]
 8016fe0:	60c5      	str	r5, [r0, #12]
 8016fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fe4:	6819      	ldr	r1, [r3, #0]
 8016fe6:	b151      	cbz	r1, 8016ffe <_dtoa_r+0x5e>
 8016fe8:	685a      	ldr	r2, [r3, #4]
 8016fea:	604a      	str	r2, [r1, #4]
 8016fec:	2301      	movs	r3, #1
 8016fee:	4093      	lsls	r3, r2
 8016ff0:	608b      	str	r3, [r1, #8]
 8016ff2:	4620      	mov	r0, r4
 8016ff4:	f000 ff5e 	bl	8017eb4 <_Bfree>
 8016ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	601a      	str	r2, [r3, #0]
 8016ffe:	1e3b      	subs	r3, r7, #0
 8017000:	bfaa      	itet	ge
 8017002:	2300      	movge	r3, #0
 8017004:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8017008:	f8c8 3000 	strge.w	r3, [r8]
 801700c:	4b9a      	ldr	r3, [pc, #616]	; (8017278 <_dtoa_r+0x2d8>)
 801700e:	bfbc      	itt	lt
 8017010:	2201      	movlt	r2, #1
 8017012:	f8c8 2000 	strlt.w	r2, [r8]
 8017016:	ea33 030b 	bics.w	r3, r3, fp
 801701a:	d11b      	bne.n	8017054 <_dtoa_r+0xb4>
 801701c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801701e:	f242 730f 	movw	r3, #9999	; 0x270f
 8017022:	6013      	str	r3, [r2, #0]
 8017024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017028:	4333      	orrs	r3, r6
 801702a:	f000 8592 	beq.w	8017b52 <_dtoa_r+0xbb2>
 801702e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017030:	b963      	cbnz	r3, 801704c <_dtoa_r+0xac>
 8017032:	4b92      	ldr	r3, [pc, #584]	; (801727c <_dtoa_r+0x2dc>)
 8017034:	e022      	b.n	801707c <_dtoa_r+0xdc>
 8017036:	4b92      	ldr	r3, [pc, #584]	; (8017280 <_dtoa_r+0x2e0>)
 8017038:	9301      	str	r3, [sp, #4]
 801703a:	3308      	adds	r3, #8
 801703c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801703e:	6013      	str	r3, [r2, #0]
 8017040:	9801      	ldr	r0, [sp, #4]
 8017042:	b013      	add	sp, #76	; 0x4c
 8017044:	ecbd 8b04 	vpop	{d8-d9}
 8017048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801704c:	4b8b      	ldr	r3, [pc, #556]	; (801727c <_dtoa_r+0x2dc>)
 801704e:	9301      	str	r3, [sp, #4]
 8017050:	3303      	adds	r3, #3
 8017052:	e7f3      	b.n	801703c <_dtoa_r+0x9c>
 8017054:	2200      	movs	r2, #0
 8017056:	2300      	movs	r3, #0
 8017058:	4650      	mov	r0, sl
 801705a:	4659      	mov	r1, fp
 801705c:	f7e9 fd54 	bl	8000b08 <__aeabi_dcmpeq>
 8017060:	ec4b ab19 	vmov	d9, sl, fp
 8017064:	4680      	mov	r8, r0
 8017066:	b158      	cbz	r0, 8017080 <_dtoa_r+0xe0>
 8017068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801706a:	2301      	movs	r3, #1
 801706c:	6013      	str	r3, [r2, #0]
 801706e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017070:	2b00      	cmp	r3, #0
 8017072:	f000 856b 	beq.w	8017b4c <_dtoa_r+0xbac>
 8017076:	4883      	ldr	r0, [pc, #524]	; (8017284 <_dtoa_r+0x2e4>)
 8017078:	6018      	str	r0, [r3, #0]
 801707a:	1e43      	subs	r3, r0, #1
 801707c:	9301      	str	r3, [sp, #4]
 801707e:	e7df      	b.n	8017040 <_dtoa_r+0xa0>
 8017080:	ec4b ab10 	vmov	d0, sl, fp
 8017084:	aa10      	add	r2, sp, #64	; 0x40
 8017086:	a911      	add	r1, sp, #68	; 0x44
 8017088:	4620      	mov	r0, r4
 801708a:	f001 f9fb 	bl	8018484 <__d2b>
 801708e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8017092:	ee08 0a10 	vmov	s16, r0
 8017096:	2d00      	cmp	r5, #0
 8017098:	f000 8084 	beq.w	80171a4 <_dtoa_r+0x204>
 801709c:	ee19 3a90 	vmov	r3, s19
 80170a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80170a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80170a8:	4656      	mov	r6, sl
 80170aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80170ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80170b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80170b6:	4b74      	ldr	r3, [pc, #464]	; (8017288 <_dtoa_r+0x2e8>)
 80170b8:	2200      	movs	r2, #0
 80170ba:	4630      	mov	r0, r6
 80170bc:	4639      	mov	r1, r7
 80170be:	f7e9 f903 	bl	80002c8 <__aeabi_dsub>
 80170c2:	a365      	add	r3, pc, #404	; (adr r3, 8017258 <_dtoa_r+0x2b8>)
 80170c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c8:	f7e9 fab6 	bl	8000638 <__aeabi_dmul>
 80170cc:	a364      	add	r3, pc, #400	; (adr r3, 8017260 <_dtoa_r+0x2c0>)
 80170ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d2:	f7e9 f8fb 	bl	80002cc <__adddf3>
 80170d6:	4606      	mov	r6, r0
 80170d8:	4628      	mov	r0, r5
 80170da:	460f      	mov	r7, r1
 80170dc:	f7e9 fa42 	bl	8000564 <__aeabi_i2d>
 80170e0:	a361      	add	r3, pc, #388	; (adr r3, 8017268 <_dtoa_r+0x2c8>)
 80170e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170e6:	f7e9 faa7 	bl	8000638 <__aeabi_dmul>
 80170ea:	4602      	mov	r2, r0
 80170ec:	460b      	mov	r3, r1
 80170ee:	4630      	mov	r0, r6
 80170f0:	4639      	mov	r1, r7
 80170f2:	f7e9 f8eb 	bl	80002cc <__adddf3>
 80170f6:	4606      	mov	r6, r0
 80170f8:	460f      	mov	r7, r1
 80170fa:	f7e9 fd4d 	bl	8000b98 <__aeabi_d2iz>
 80170fe:	2200      	movs	r2, #0
 8017100:	9000      	str	r0, [sp, #0]
 8017102:	2300      	movs	r3, #0
 8017104:	4630      	mov	r0, r6
 8017106:	4639      	mov	r1, r7
 8017108:	f7e9 fd08 	bl	8000b1c <__aeabi_dcmplt>
 801710c:	b150      	cbz	r0, 8017124 <_dtoa_r+0x184>
 801710e:	9800      	ldr	r0, [sp, #0]
 8017110:	f7e9 fa28 	bl	8000564 <__aeabi_i2d>
 8017114:	4632      	mov	r2, r6
 8017116:	463b      	mov	r3, r7
 8017118:	f7e9 fcf6 	bl	8000b08 <__aeabi_dcmpeq>
 801711c:	b910      	cbnz	r0, 8017124 <_dtoa_r+0x184>
 801711e:	9b00      	ldr	r3, [sp, #0]
 8017120:	3b01      	subs	r3, #1
 8017122:	9300      	str	r3, [sp, #0]
 8017124:	9b00      	ldr	r3, [sp, #0]
 8017126:	2b16      	cmp	r3, #22
 8017128:	d85a      	bhi.n	80171e0 <_dtoa_r+0x240>
 801712a:	9a00      	ldr	r2, [sp, #0]
 801712c:	4b57      	ldr	r3, [pc, #348]	; (801728c <_dtoa_r+0x2ec>)
 801712e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017136:	ec51 0b19 	vmov	r0, r1, d9
 801713a:	f7e9 fcef 	bl	8000b1c <__aeabi_dcmplt>
 801713e:	2800      	cmp	r0, #0
 8017140:	d050      	beq.n	80171e4 <_dtoa_r+0x244>
 8017142:	9b00      	ldr	r3, [sp, #0]
 8017144:	3b01      	subs	r3, #1
 8017146:	9300      	str	r3, [sp, #0]
 8017148:	2300      	movs	r3, #0
 801714a:	930b      	str	r3, [sp, #44]	; 0x2c
 801714c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801714e:	1b5d      	subs	r5, r3, r5
 8017150:	1e6b      	subs	r3, r5, #1
 8017152:	9305      	str	r3, [sp, #20]
 8017154:	bf45      	ittet	mi
 8017156:	f1c5 0301 	rsbmi	r3, r5, #1
 801715a:	9304      	strmi	r3, [sp, #16]
 801715c:	2300      	movpl	r3, #0
 801715e:	2300      	movmi	r3, #0
 8017160:	bf4c      	ite	mi
 8017162:	9305      	strmi	r3, [sp, #20]
 8017164:	9304      	strpl	r3, [sp, #16]
 8017166:	9b00      	ldr	r3, [sp, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	db3d      	blt.n	80171e8 <_dtoa_r+0x248>
 801716c:	9b05      	ldr	r3, [sp, #20]
 801716e:	9a00      	ldr	r2, [sp, #0]
 8017170:	920a      	str	r2, [sp, #40]	; 0x28
 8017172:	4413      	add	r3, r2
 8017174:	9305      	str	r3, [sp, #20]
 8017176:	2300      	movs	r3, #0
 8017178:	9307      	str	r3, [sp, #28]
 801717a:	9b06      	ldr	r3, [sp, #24]
 801717c:	2b09      	cmp	r3, #9
 801717e:	f200 8089 	bhi.w	8017294 <_dtoa_r+0x2f4>
 8017182:	2b05      	cmp	r3, #5
 8017184:	bfc4      	itt	gt
 8017186:	3b04      	subgt	r3, #4
 8017188:	9306      	strgt	r3, [sp, #24]
 801718a:	9b06      	ldr	r3, [sp, #24]
 801718c:	f1a3 0302 	sub.w	r3, r3, #2
 8017190:	bfcc      	ite	gt
 8017192:	2500      	movgt	r5, #0
 8017194:	2501      	movle	r5, #1
 8017196:	2b03      	cmp	r3, #3
 8017198:	f200 8087 	bhi.w	80172aa <_dtoa_r+0x30a>
 801719c:	e8df f003 	tbb	[pc, r3]
 80171a0:	59383a2d 	.word	0x59383a2d
 80171a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80171a8:	441d      	add	r5, r3
 80171aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80171ae:	2b20      	cmp	r3, #32
 80171b0:	bfc1      	itttt	gt
 80171b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80171b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80171ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80171be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80171c2:	bfda      	itte	le
 80171c4:	f1c3 0320 	rsble	r3, r3, #32
 80171c8:	fa06 f003 	lslle.w	r0, r6, r3
 80171cc:	4318      	orrgt	r0, r3
 80171ce:	f7e9 f9b9 	bl	8000544 <__aeabi_ui2d>
 80171d2:	2301      	movs	r3, #1
 80171d4:	4606      	mov	r6, r0
 80171d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80171da:	3d01      	subs	r5, #1
 80171dc:	930e      	str	r3, [sp, #56]	; 0x38
 80171de:	e76a      	b.n	80170b6 <_dtoa_r+0x116>
 80171e0:	2301      	movs	r3, #1
 80171e2:	e7b2      	b.n	801714a <_dtoa_r+0x1aa>
 80171e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80171e6:	e7b1      	b.n	801714c <_dtoa_r+0x1ac>
 80171e8:	9b04      	ldr	r3, [sp, #16]
 80171ea:	9a00      	ldr	r2, [sp, #0]
 80171ec:	1a9b      	subs	r3, r3, r2
 80171ee:	9304      	str	r3, [sp, #16]
 80171f0:	4253      	negs	r3, r2
 80171f2:	9307      	str	r3, [sp, #28]
 80171f4:	2300      	movs	r3, #0
 80171f6:	930a      	str	r3, [sp, #40]	; 0x28
 80171f8:	e7bf      	b.n	801717a <_dtoa_r+0x1da>
 80171fa:	2300      	movs	r3, #0
 80171fc:	9308      	str	r3, [sp, #32]
 80171fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017200:	2b00      	cmp	r3, #0
 8017202:	dc55      	bgt.n	80172b0 <_dtoa_r+0x310>
 8017204:	2301      	movs	r3, #1
 8017206:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801720a:	461a      	mov	r2, r3
 801720c:	9209      	str	r2, [sp, #36]	; 0x24
 801720e:	e00c      	b.n	801722a <_dtoa_r+0x28a>
 8017210:	2301      	movs	r3, #1
 8017212:	e7f3      	b.n	80171fc <_dtoa_r+0x25c>
 8017214:	2300      	movs	r3, #0
 8017216:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017218:	9308      	str	r3, [sp, #32]
 801721a:	9b00      	ldr	r3, [sp, #0]
 801721c:	4413      	add	r3, r2
 801721e:	9302      	str	r3, [sp, #8]
 8017220:	3301      	adds	r3, #1
 8017222:	2b01      	cmp	r3, #1
 8017224:	9303      	str	r3, [sp, #12]
 8017226:	bfb8      	it	lt
 8017228:	2301      	movlt	r3, #1
 801722a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801722c:	2200      	movs	r2, #0
 801722e:	6042      	str	r2, [r0, #4]
 8017230:	2204      	movs	r2, #4
 8017232:	f102 0614 	add.w	r6, r2, #20
 8017236:	429e      	cmp	r6, r3
 8017238:	6841      	ldr	r1, [r0, #4]
 801723a:	d93d      	bls.n	80172b8 <_dtoa_r+0x318>
 801723c:	4620      	mov	r0, r4
 801723e:	f000 fdf9 	bl	8017e34 <_Balloc>
 8017242:	9001      	str	r0, [sp, #4]
 8017244:	2800      	cmp	r0, #0
 8017246:	d13b      	bne.n	80172c0 <_dtoa_r+0x320>
 8017248:	4b11      	ldr	r3, [pc, #68]	; (8017290 <_dtoa_r+0x2f0>)
 801724a:	4602      	mov	r2, r0
 801724c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017250:	e6c0      	b.n	8016fd4 <_dtoa_r+0x34>
 8017252:	2301      	movs	r3, #1
 8017254:	e7df      	b.n	8017216 <_dtoa_r+0x276>
 8017256:	bf00      	nop
 8017258:	636f4361 	.word	0x636f4361
 801725c:	3fd287a7 	.word	0x3fd287a7
 8017260:	8b60c8b3 	.word	0x8b60c8b3
 8017264:	3fc68a28 	.word	0x3fc68a28
 8017268:	509f79fb 	.word	0x509f79fb
 801726c:	3fd34413 	.word	0x3fd34413
 8017270:	080199be 	.word	0x080199be
 8017274:	080199d5 	.word	0x080199d5
 8017278:	7ff00000 	.word	0x7ff00000
 801727c:	080199ba 	.word	0x080199ba
 8017280:	080199b1 	.word	0x080199b1
 8017284:	0801988d 	.word	0x0801988d
 8017288:	3ff80000 	.word	0x3ff80000
 801728c:	08019ad0 	.word	0x08019ad0
 8017290:	08019a30 	.word	0x08019a30
 8017294:	2501      	movs	r5, #1
 8017296:	2300      	movs	r3, #0
 8017298:	9306      	str	r3, [sp, #24]
 801729a:	9508      	str	r5, [sp, #32]
 801729c:	f04f 33ff 	mov.w	r3, #4294967295
 80172a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80172a4:	2200      	movs	r2, #0
 80172a6:	2312      	movs	r3, #18
 80172a8:	e7b0      	b.n	801720c <_dtoa_r+0x26c>
 80172aa:	2301      	movs	r3, #1
 80172ac:	9308      	str	r3, [sp, #32]
 80172ae:	e7f5      	b.n	801729c <_dtoa_r+0x2fc>
 80172b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80172b6:	e7b8      	b.n	801722a <_dtoa_r+0x28a>
 80172b8:	3101      	adds	r1, #1
 80172ba:	6041      	str	r1, [r0, #4]
 80172bc:	0052      	lsls	r2, r2, #1
 80172be:	e7b8      	b.n	8017232 <_dtoa_r+0x292>
 80172c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80172c2:	9a01      	ldr	r2, [sp, #4]
 80172c4:	601a      	str	r2, [r3, #0]
 80172c6:	9b03      	ldr	r3, [sp, #12]
 80172c8:	2b0e      	cmp	r3, #14
 80172ca:	f200 809d 	bhi.w	8017408 <_dtoa_r+0x468>
 80172ce:	2d00      	cmp	r5, #0
 80172d0:	f000 809a 	beq.w	8017408 <_dtoa_r+0x468>
 80172d4:	9b00      	ldr	r3, [sp, #0]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	dd32      	ble.n	8017340 <_dtoa_r+0x3a0>
 80172da:	4ab7      	ldr	r2, [pc, #732]	; (80175b8 <_dtoa_r+0x618>)
 80172dc:	f003 030f 	and.w	r3, r3, #15
 80172e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80172e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80172e8:	9b00      	ldr	r3, [sp, #0]
 80172ea:	05d8      	lsls	r0, r3, #23
 80172ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80172f0:	d516      	bpl.n	8017320 <_dtoa_r+0x380>
 80172f2:	4bb2      	ldr	r3, [pc, #712]	; (80175bc <_dtoa_r+0x61c>)
 80172f4:	ec51 0b19 	vmov	r0, r1, d9
 80172f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80172fc:	f7e9 fac6 	bl	800088c <__aeabi_ddiv>
 8017300:	f007 070f 	and.w	r7, r7, #15
 8017304:	4682      	mov	sl, r0
 8017306:	468b      	mov	fp, r1
 8017308:	2503      	movs	r5, #3
 801730a:	4eac      	ldr	r6, [pc, #688]	; (80175bc <_dtoa_r+0x61c>)
 801730c:	b957      	cbnz	r7, 8017324 <_dtoa_r+0x384>
 801730e:	4642      	mov	r2, r8
 8017310:	464b      	mov	r3, r9
 8017312:	4650      	mov	r0, sl
 8017314:	4659      	mov	r1, fp
 8017316:	f7e9 fab9 	bl	800088c <__aeabi_ddiv>
 801731a:	4682      	mov	sl, r0
 801731c:	468b      	mov	fp, r1
 801731e:	e028      	b.n	8017372 <_dtoa_r+0x3d2>
 8017320:	2502      	movs	r5, #2
 8017322:	e7f2      	b.n	801730a <_dtoa_r+0x36a>
 8017324:	07f9      	lsls	r1, r7, #31
 8017326:	d508      	bpl.n	801733a <_dtoa_r+0x39a>
 8017328:	4640      	mov	r0, r8
 801732a:	4649      	mov	r1, r9
 801732c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017330:	f7e9 f982 	bl	8000638 <__aeabi_dmul>
 8017334:	3501      	adds	r5, #1
 8017336:	4680      	mov	r8, r0
 8017338:	4689      	mov	r9, r1
 801733a:	107f      	asrs	r7, r7, #1
 801733c:	3608      	adds	r6, #8
 801733e:	e7e5      	b.n	801730c <_dtoa_r+0x36c>
 8017340:	f000 809b 	beq.w	801747a <_dtoa_r+0x4da>
 8017344:	9b00      	ldr	r3, [sp, #0]
 8017346:	4f9d      	ldr	r7, [pc, #628]	; (80175bc <_dtoa_r+0x61c>)
 8017348:	425e      	negs	r6, r3
 801734a:	4b9b      	ldr	r3, [pc, #620]	; (80175b8 <_dtoa_r+0x618>)
 801734c:	f006 020f 	and.w	r2, r6, #15
 8017350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017358:	ec51 0b19 	vmov	r0, r1, d9
 801735c:	f7e9 f96c 	bl	8000638 <__aeabi_dmul>
 8017360:	1136      	asrs	r6, r6, #4
 8017362:	4682      	mov	sl, r0
 8017364:	468b      	mov	fp, r1
 8017366:	2300      	movs	r3, #0
 8017368:	2502      	movs	r5, #2
 801736a:	2e00      	cmp	r6, #0
 801736c:	d17a      	bne.n	8017464 <_dtoa_r+0x4c4>
 801736e:	2b00      	cmp	r3, #0
 8017370:	d1d3      	bne.n	801731a <_dtoa_r+0x37a>
 8017372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017374:	2b00      	cmp	r3, #0
 8017376:	f000 8082 	beq.w	801747e <_dtoa_r+0x4de>
 801737a:	4b91      	ldr	r3, [pc, #580]	; (80175c0 <_dtoa_r+0x620>)
 801737c:	2200      	movs	r2, #0
 801737e:	4650      	mov	r0, sl
 8017380:	4659      	mov	r1, fp
 8017382:	f7e9 fbcb 	bl	8000b1c <__aeabi_dcmplt>
 8017386:	2800      	cmp	r0, #0
 8017388:	d079      	beq.n	801747e <_dtoa_r+0x4de>
 801738a:	9b03      	ldr	r3, [sp, #12]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d076      	beq.n	801747e <_dtoa_r+0x4de>
 8017390:	9b02      	ldr	r3, [sp, #8]
 8017392:	2b00      	cmp	r3, #0
 8017394:	dd36      	ble.n	8017404 <_dtoa_r+0x464>
 8017396:	9b00      	ldr	r3, [sp, #0]
 8017398:	4650      	mov	r0, sl
 801739a:	4659      	mov	r1, fp
 801739c:	1e5f      	subs	r7, r3, #1
 801739e:	2200      	movs	r2, #0
 80173a0:	4b88      	ldr	r3, [pc, #544]	; (80175c4 <_dtoa_r+0x624>)
 80173a2:	f7e9 f949 	bl	8000638 <__aeabi_dmul>
 80173a6:	9e02      	ldr	r6, [sp, #8]
 80173a8:	4682      	mov	sl, r0
 80173aa:	468b      	mov	fp, r1
 80173ac:	3501      	adds	r5, #1
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7e9 f8d8 	bl	8000564 <__aeabi_i2d>
 80173b4:	4652      	mov	r2, sl
 80173b6:	465b      	mov	r3, fp
 80173b8:	f7e9 f93e 	bl	8000638 <__aeabi_dmul>
 80173bc:	4b82      	ldr	r3, [pc, #520]	; (80175c8 <_dtoa_r+0x628>)
 80173be:	2200      	movs	r2, #0
 80173c0:	f7e8 ff84 	bl	80002cc <__adddf3>
 80173c4:	46d0      	mov	r8, sl
 80173c6:	46d9      	mov	r9, fp
 80173c8:	4682      	mov	sl, r0
 80173ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80173ce:	2e00      	cmp	r6, #0
 80173d0:	d158      	bne.n	8017484 <_dtoa_r+0x4e4>
 80173d2:	4b7e      	ldr	r3, [pc, #504]	; (80175cc <_dtoa_r+0x62c>)
 80173d4:	2200      	movs	r2, #0
 80173d6:	4640      	mov	r0, r8
 80173d8:	4649      	mov	r1, r9
 80173da:	f7e8 ff75 	bl	80002c8 <__aeabi_dsub>
 80173de:	4652      	mov	r2, sl
 80173e0:	465b      	mov	r3, fp
 80173e2:	4680      	mov	r8, r0
 80173e4:	4689      	mov	r9, r1
 80173e6:	f7e9 fbb7 	bl	8000b58 <__aeabi_dcmpgt>
 80173ea:	2800      	cmp	r0, #0
 80173ec:	f040 8295 	bne.w	801791a <_dtoa_r+0x97a>
 80173f0:	4652      	mov	r2, sl
 80173f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80173f6:	4640      	mov	r0, r8
 80173f8:	4649      	mov	r1, r9
 80173fa:	f7e9 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 80173fe:	2800      	cmp	r0, #0
 8017400:	f040 8289 	bne.w	8017916 <_dtoa_r+0x976>
 8017404:	ec5b ab19 	vmov	sl, fp, d9
 8017408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801740a:	2b00      	cmp	r3, #0
 801740c:	f2c0 8148 	blt.w	80176a0 <_dtoa_r+0x700>
 8017410:	9a00      	ldr	r2, [sp, #0]
 8017412:	2a0e      	cmp	r2, #14
 8017414:	f300 8144 	bgt.w	80176a0 <_dtoa_r+0x700>
 8017418:	4b67      	ldr	r3, [pc, #412]	; (80175b8 <_dtoa_r+0x618>)
 801741a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801741e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017424:	2b00      	cmp	r3, #0
 8017426:	f280 80d5 	bge.w	80175d4 <_dtoa_r+0x634>
 801742a:	9b03      	ldr	r3, [sp, #12]
 801742c:	2b00      	cmp	r3, #0
 801742e:	f300 80d1 	bgt.w	80175d4 <_dtoa_r+0x634>
 8017432:	f040 826f 	bne.w	8017914 <_dtoa_r+0x974>
 8017436:	4b65      	ldr	r3, [pc, #404]	; (80175cc <_dtoa_r+0x62c>)
 8017438:	2200      	movs	r2, #0
 801743a:	4640      	mov	r0, r8
 801743c:	4649      	mov	r1, r9
 801743e:	f7e9 f8fb 	bl	8000638 <__aeabi_dmul>
 8017442:	4652      	mov	r2, sl
 8017444:	465b      	mov	r3, fp
 8017446:	f7e9 fb7d 	bl	8000b44 <__aeabi_dcmpge>
 801744a:	9e03      	ldr	r6, [sp, #12]
 801744c:	4637      	mov	r7, r6
 801744e:	2800      	cmp	r0, #0
 8017450:	f040 8245 	bne.w	80178de <_dtoa_r+0x93e>
 8017454:	9d01      	ldr	r5, [sp, #4]
 8017456:	2331      	movs	r3, #49	; 0x31
 8017458:	f805 3b01 	strb.w	r3, [r5], #1
 801745c:	9b00      	ldr	r3, [sp, #0]
 801745e:	3301      	adds	r3, #1
 8017460:	9300      	str	r3, [sp, #0]
 8017462:	e240      	b.n	80178e6 <_dtoa_r+0x946>
 8017464:	07f2      	lsls	r2, r6, #31
 8017466:	d505      	bpl.n	8017474 <_dtoa_r+0x4d4>
 8017468:	e9d7 2300 	ldrd	r2, r3, [r7]
 801746c:	f7e9 f8e4 	bl	8000638 <__aeabi_dmul>
 8017470:	3501      	adds	r5, #1
 8017472:	2301      	movs	r3, #1
 8017474:	1076      	asrs	r6, r6, #1
 8017476:	3708      	adds	r7, #8
 8017478:	e777      	b.n	801736a <_dtoa_r+0x3ca>
 801747a:	2502      	movs	r5, #2
 801747c:	e779      	b.n	8017372 <_dtoa_r+0x3d2>
 801747e:	9f00      	ldr	r7, [sp, #0]
 8017480:	9e03      	ldr	r6, [sp, #12]
 8017482:	e794      	b.n	80173ae <_dtoa_r+0x40e>
 8017484:	9901      	ldr	r1, [sp, #4]
 8017486:	4b4c      	ldr	r3, [pc, #304]	; (80175b8 <_dtoa_r+0x618>)
 8017488:	4431      	add	r1, r6
 801748a:	910d      	str	r1, [sp, #52]	; 0x34
 801748c:	9908      	ldr	r1, [sp, #32]
 801748e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017496:	2900      	cmp	r1, #0
 8017498:	d043      	beq.n	8017522 <_dtoa_r+0x582>
 801749a:	494d      	ldr	r1, [pc, #308]	; (80175d0 <_dtoa_r+0x630>)
 801749c:	2000      	movs	r0, #0
 801749e:	f7e9 f9f5 	bl	800088c <__aeabi_ddiv>
 80174a2:	4652      	mov	r2, sl
 80174a4:	465b      	mov	r3, fp
 80174a6:	f7e8 ff0f 	bl	80002c8 <__aeabi_dsub>
 80174aa:	9d01      	ldr	r5, [sp, #4]
 80174ac:	4682      	mov	sl, r0
 80174ae:	468b      	mov	fp, r1
 80174b0:	4649      	mov	r1, r9
 80174b2:	4640      	mov	r0, r8
 80174b4:	f7e9 fb70 	bl	8000b98 <__aeabi_d2iz>
 80174b8:	4606      	mov	r6, r0
 80174ba:	f7e9 f853 	bl	8000564 <__aeabi_i2d>
 80174be:	4602      	mov	r2, r0
 80174c0:	460b      	mov	r3, r1
 80174c2:	4640      	mov	r0, r8
 80174c4:	4649      	mov	r1, r9
 80174c6:	f7e8 feff 	bl	80002c8 <__aeabi_dsub>
 80174ca:	3630      	adds	r6, #48	; 0x30
 80174cc:	f805 6b01 	strb.w	r6, [r5], #1
 80174d0:	4652      	mov	r2, sl
 80174d2:	465b      	mov	r3, fp
 80174d4:	4680      	mov	r8, r0
 80174d6:	4689      	mov	r9, r1
 80174d8:	f7e9 fb20 	bl	8000b1c <__aeabi_dcmplt>
 80174dc:	2800      	cmp	r0, #0
 80174de:	d163      	bne.n	80175a8 <_dtoa_r+0x608>
 80174e0:	4642      	mov	r2, r8
 80174e2:	464b      	mov	r3, r9
 80174e4:	4936      	ldr	r1, [pc, #216]	; (80175c0 <_dtoa_r+0x620>)
 80174e6:	2000      	movs	r0, #0
 80174e8:	f7e8 feee 	bl	80002c8 <__aeabi_dsub>
 80174ec:	4652      	mov	r2, sl
 80174ee:	465b      	mov	r3, fp
 80174f0:	f7e9 fb14 	bl	8000b1c <__aeabi_dcmplt>
 80174f4:	2800      	cmp	r0, #0
 80174f6:	f040 80b5 	bne.w	8017664 <_dtoa_r+0x6c4>
 80174fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174fc:	429d      	cmp	r5, r3
 80174fe:	d081      	beq.n	8017404 <_dtoa_r+0x464>
 8017500:	4b30      	ldr	r3, [pc, #192]	; (80175c4 <_dtoa_r+0x624>)
 8017502:	2200      	movs	r2, #0
 8017504:	4650      	mov	r0, sl
 8017506:	4659      	mov	r1, fp
 8017508:	f7e9 f896 	bl	8000638 <__aeabi_dmul>
 801750c:	4b2d      	ldr	r3, [pc, #180]	; (80175c4 <_dtoa_r+0x624>)
 801750e:	4682      	mov	sl, r0
 8017510:	468b      	mov	fp, r1
 8017512:	4640      	mov	r0, r8
 8017514:	4649      	mov	r1, r9
 8017516:	2200      	movs	r2, #0
 8017518:	f7e9 f88e 	bl	8000638 <__aeabi_dmul>
 801751c:	4680      	mov	r8, r0
 801751e:	4689      	mov	r9, r1
 8017520:	e7c6      	b.n	80174b0 <_dtoa_r+0x510>
 8017522:	4650      	mov	r0, sl
 8017524:	4659      	mov	r1, fp
 8017526:	f7e9 f887 	bl	8000638 <__aeabi_dmul>
 801752a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801752c:	9d01      	ldr	r5, [sp, #4]
 801752e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017530:	4682      	mov	sl, r0
 8017532:	468b      	mov	fp, r1
 8017534:	4649      	mov	r1, r9
 8017536:	4640      	mov	r0, r8
 8017538:	f7e9 fb2e 	bl	8000b98 <__aeabi_d2iz>
 801753c:	4606      	mov	r6, r0
 801753e:	f7e9 f811 	bl	8000564 <__aeabi_i2d>
 8017542:	3630      	adds	r6, #48	; 0x30
 8017544:	4602      	mov	r2, r0
 8017546:	460b      	mov	r3, r1
 8017548:	4640      	mov	r0, r8
 801754a:	4649      	mov	r1, r9
 801754c:	f7e8 febc 	bl	80002c8 <__aeabi_dsub>
 8017550:	f805 6b01 	strb.w	r6, [r5], #1
 8017554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017556:	429d      	cmp	r5, r3
 8017558:	4680      	mov	r8, r0
 801755a:	4689      	mov	r9, r1
 801755c:	f04f 0200 	mov.w	r2, #0
 8017560:	d124      	bne.n	80175ac <_dtoa_r+0x60c>
 8017562:	4b1b      	ldr	r3, [pc, #108]	; (80175d0 <_dtoa_r+0x630>)
 8017564:	4650      	mov	r0, sl
 8017566:	4659      	mov	r1, fp
 8017568:	f7e8 feb0 	bl	80002cc <__adddf3>
 801756c:	4602      	mov	r2, r0
 801756e:	460b      	mov	r3, r1
 8017570:	4640      	mov	r0, r8
 8017572:	4649      	mov	r1, r9
 8017574:	f7e9 faf0 	bl	8000b58 <__aeabi_dcmpgt>
 8017578:	2800      	cmp	r0, #0
 801757a:	d173      	bne.n	8017664 <_dtoa_r+0x6c4>
 801757c:	4652      	mov	r2, sl
 801757e:	465b      	mov	r3, fp
 8017580:	4913      	ldr	r1, [pc, #76]	; (80175d0 <_dtoa_r+0x630>)
 8017582:	2000      	movs	r0, #0
 8017584:	f7e8 fea0 	bl	80002c8 <__aeabi_dsub>
 8017588:	4602      	mov	r2, r0
 801758a:	460b      	mov	r3, r1
 801758c:	4640      	mov	r0, r8
 801758e:	4649      	mov	r1, r9
 8017590:	f7e9 fac4 	bl	8000b1c <__aeabi_dcmplt>
 8017594:	2800      	cmp	r0, #0
 8017596:	f43f af35 	beq.w	8017404 <_dtoa_r+0x464>
 801759a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801759c:	1e6b      	subs	r3, r5, #1
 801759e:	930f      	str	r3, [sp, #60]	; 0x3c
 80175a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80175a4:	2b30      	cmp	r3, #48	; 0x30
 80175a6:	d0f8      	beq.n	801759a <_dtoa_r+0x5fa>
 80175a8:	9700      	str	r7, [sp, #0]
 80175aa:	e049      	b.n	8017640 <_dtoa_r+0x6a0>
 80175ac:	4b05      	ldr	r3, [pc, #20]	; (80175c4 <_dtoa_r+0x624>)
 80175ae:	f7e9 f843 	bl	8000638 <__aeabi_dmul>
 80175b2:	4680      	mov	r8, r0
 80175b4:	4689      	mov	r9, r1
 80175b6:	e7bd      	b.n	8017534 <_dtoa_r+0x594>
 80175b8:	08019ad0 	.word	0x08019ad0
 80175bc:	08019aa8 	.word	0x08019aa8
 80175c0:	3ff00000 	.word	0x3ff00000
 80175c4:	40240000 	.word	0x40240000
 80175c8:	401c0000 	.word	0x401c0000
 80175cc:	40140000 	.word	0x40140000
 80175d0:	3fe00000 	.word	0x3fe00000
 80175d4:	9d01      	ldr	r5, [sp, #4]
 80175d6:	4656      	mov	r6, sl
 80175d8:	465f      	mov	r7, fp
 80175da:	4642      	mov	r2, r8
 80175dc:	464b      	mov	r3, r9
 80175de:	4630      	mov	r0, r6
 80175e0:	4639      	mov	r1, r7
 80175e2:	f7e9 f953 	bl	800088c <__aeabi_ddiv>
 80175e6:	f7e9 fad7 	bl	8000b98 <__aeabi_d2iz>
 80175ea:	4682      	mov	sl, r0
 80175ec:	f7e8 ffba 	bl	8000564 <__aeabi_i2d>
 80175f0:	4642      	mov	r2, r8
 80175f2:	464b      	mov	r3, r9
 80175f4:	f7e9 f820 	bl	8000638 <__aeabi_dmul>
 80175f8:	4602      	mov	r2, r0
 80175fa:	460b      	mov	r3, r1
 80175fc:	4630      	mov	r0, r6
 80175fe:	4639      	mov	r1, r7
 8017600:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8017604:	f7e8 fe60 	bl	80002c8 <__aeabi_dsub>
 8017608:	f805 6b01 	strb.w	r6, [r5], #1
 801760c:	9e01      	ldr	r6, [sp, #4]
 801760e:	9f03      	ldr	r7, [sp, #12]
 8017610:	1bae      	subs	r6, r5, r6
 8017612:	42b7      	cmp	r7, r6
 8017614:	4602      	mov	r2, r0
 8017616:	460b      	mov	r3, r1
 8017618:	d135      	bne.n	8017686 <_dtoa_r+0x6e6>
 801761a:	f7e8 fe57 	bl	80002cc <__adddf3>
 801761e:	4642      	mov	r2, r8
 8017620:	464b      	mov	r3, r9
 8017622:	4606      	mov	r6, r0
 8017624:	460f      	mov	r7, r1
 8017626:	f7e9 fa97 	bl	8000b58 <__aeabi_dcmpgt>
 801762a:	b9d0      	cbnz	r0, 8017662 <_dtoa_r+0x6c2>
 801762c:	4642      	mov	r2, r8
 801762e:	464b      	mov	r3, r9
 8017630:	4630      	mov	r0, r6
 8017632:	4639      	mov	r1, r7
 8017634:	f7e9 fa68 	bl	8000b08 <__aeabi_dcmpeq>
 8017638:	b110      	cbz	r0, 8017640 <_dtoa_r+0x6a0>
 801763a:	f01a 0f01 	tst.w	sl, #1
 801763e:	d110      	bne.n	8017662 <_dtoa_r+0x6c2>
 8017640:	4620      	mov	r0, r4
 8017642:	ee18 1a10 	vmov	r1, s16
 8017646:	f000 fc35 	bl	8017eb4 <_Bfree>
 801764a:	2300      	movs	r3, #0
 801764c:	9800      	ldr	r0, [sp, #0]
 801764e:	702b      	strb	r3, [r5, #0]
 8017650:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017652:	3001      	adds	r0, #1
 8017654:	6018      	str	r0, [r3, #0]
 8017656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017658:	2b00      	cmp	r3, #0
 801765a:	f43f acf1 	beq.w	8017040 <_dtoa_r+0xa0>
 801765e:	601d      	str	r5, [r3, #0]
 8017660:	e4ee      	b.n	8017040 <_dtoa_r+0xa0>
 8017662:	9f00      	ldr	r7, [sp, #0]
 8017664:	462b      	mov	r3, r5
 8017666:	461d      	mov	r5, r3
 8017668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801766c:	2a39      	cmp	r2, #57	; 0x39
 801766e:	d106      	bne.n	801767e <_dtoa_r+0x6de>
 8017670:	9a01      	ldr	r2, [sp, #4]
 8017672:	429a      	cmp	r2, r3
 8017674:	d1f7      	bne.n	8017666 <_dtoa_r+0x6c6>
 8017676:	9901      	ldr	r1, [sp, #4]
 8017678:	2230      	movs	r2, #48	; 0x30
 801767a:	3701      	adds	r7, #1
 801767c:	700a      	strb	r2, [r1, #0]
 801767e:	781a      	ldrb	r2, [r3, #0]
 8017680:	3201      	adds	r2, #1
 8017682:	701a      	strb	r2, [r3, #0]
 8017684:	e790      	b.n	80175a8 <_dtoa_r+0x608>
 8017686:	4ba6      	ldr	r3, [pc, #664]	; (8017920 <_dtoa_r+0x980>)
 8017688:	2200      	movs	r2, #0
 801768a:	f7e8 ffd5 	bl	8000638 <__aeabi_dmul>
 801768e:	2200      	movs	r2, #0
 8017690:	2300      	movs	r3, #0
 8017692:	4606      	mov	r6, r0
 8017694:	460f      	mov	r7, r1
 8017696:	f7e9 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 801769a:	2800      	cmp	r0, #0
 801769c:	d09d      	beq.n	80175da <_dtoa_r+0x63a>
 801769e:	e7cf      	b.n	8017640 <_dtoa_r+0x6a0>
 80176a0:	9a08      	ldr	r2, [sp, #32]
 80176a2:	2a00      	cmp	r2, #0
 80176a4:	f000 80d7 	beq.w	8017856 <_dtoa_r+0x8b6>
 80176a8:	9a06      	ldr	r2, [sp, #24]
 80176aa:	2a01      	cmp	r2, #1
 80176ac:	f300 80ba 	bgt.w	8017824 <_dtoa_r+0x884>
 80176b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80176b2:	2a00      	cmp	r2, #0
 80176b4:	f000 80b2 	beq.w	801781c <_dtoa_r+0x87c>
 80176b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80176bc:	9e07      	ldr	r6, [sp, #28]
 80176be:	9d04      	ldr	r5, [sp, #16]
 80176c0:	9a04      	ldr	r2, [sp, #16]
 80176c2:	441a      	add	r2, r3
 80176c4:	9204      	str	r2, [sp, #16]
 80176c6:	9a05      	ldr	r2, [sp, #20]
 80176c8:	2101      	movs	r1, #1
 80176ca:	441a      	add	r2, r3
 80176cc:	4620      	mov	r0, r4
 80176ce:	9205      	str	r2, [sp, #20]
 80176d0:	f000 fca8 	bl	8018024 <__i2b>
 80176d4:	4607      	mov	r7, r0
 80176d6:	2d00      	cmp	r5, #0
 80176d8:	dd0c      	ble.n	80176f4 <_dtoa_r+0x754>
 80176da:	9b05      	ldr	r3, [sp, #20]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	dd09      	ble.n	80176f4 <_dtoa_r+0x754>
 80176e0:	42ab      	cmp	r3, r5
 80176e2:	9a04      	ldr	r2, [sp, #16]
 80176e4:	bfa8      	it	ge
 80176e6:	462b      	movge	r3, r5
 80176e8:	1ad2      	subs	r2, r2, r3
 80176ea:	9204      	str	r2, [sp, #16]
 80176ec:	9a05      	ldr	r2, [sp, #20]
 80176ee:	1aed      	subs	r5, r5, r3
 80176f0:	1ad3      	subs	r3, r2, r3
 80176f2:	9305      	str	r3, [sp, #20]
 80176f4:	9b07      	ldr	r3, [sp, #28]
 80176f6:	b31b      	cbz	r3, 8017740 <_dtoa_r+0x7a0>
 80176f8:	9b08      	ldr	r3, [sp, #32]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	f000 80af 	beq.w	801785e <_dtoa_r+0x8be>
 8017700:	2e00      	cmp	r6, #0
 8017702:	dd13      	ble.n	801772c <_dtoa_r+0x78c>
 8017704:	4639      	mov	r1, r7
 8017706:	4632      	mov	r2, r6
 8017708:	4620      	mov	r0, r4
 801770a:	f000 fd4b 	bl	80181a4 <__pow5mult>
 801770e:	ee18 2a10 	vmov	r2, s16
 8017712:	4601      	mov	r1, r0
 8017714:	4607      	mov	r7, r0
 8017716:	4620      	mov	r0, r4
 8017718:	f000 fc9a 	bl	8018050 <__multiply>
 801771c:	ee18 1a10 	vmov	r1, s16
 8017720:	4680      	mov	r8, r0
 8017722:	4620      	mov	r0, r4
 8017724:	f000 fbc6 	bl	8017eb4 <_Bfree>
 8017728:	ee08 8a10 	vmov	s16, r8
 801772c:	9b07      	ldr	r3, [sp, #28]
 801772e:	1b9a      	subs	r2, r3, r6
 8017730:	d006      	beq.n	8017740 <_dtoa_r+0x7a0>
 8017732:	ee18 1a10 	vmov	r1, s16
 8017736:	4620      	mov	r0, r4
 8017738:	f000 fd34 	bl	80181a4 <__pow5mult>
 801773c:	ee08 0a10 	vmov	s16, r0
 8017740:	2101      	movs	r1, #1
 8017742:	4620      	mov	r0, r4
 8017744:	f000 fc6e 	bl	8018024 <__i2b>
 8017748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801774a:	2b00      	cmp	r3, #0
 801774c:	4606      	mov	r6, r0
 801774e:	f340 8088 	ble.w	8017862 <_dtoa_r+0x8c2>
 8017752:	461a      	mov	r2, r3
 8017754:	4601      	mov	r1, r0
 8017756:	4620      	mov	r0, r4
 8017758:	f000 fd24 	bl	80181a4 <__pow5mult>
 801775c:	9b06      	ldr	r3, [sp, #24]
 801775e:	2b01      	cmp	r3, #1
 8017760:	4606      	mov	r6, r0
 8017762:	f340 8081 	ble.w	8017868 <_dtoa_r+0x8c8>
 8017766:	f04f 0800 	mov.w	r8, #0
 801776a:	6933      	ldr	r3, [r6, #16]
 801776c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017770:	6918      	ldr	r0, [r3, #16]
 8017772:	f000 fc07 	bl	8017f84 <__hi0bits>
 8017776:	f1c0 0020 	rsb	r0, r0, #32
 801777a:	9b05      	ldr	r3, [sp, #20]
 801777c:	4418      	add	r0, r3
 801777e:	f010 001f 	ands.w	r0, r0, #31
 8017782:	f000 8092 	beq.w	80178aa <_dtoa_r+0x90a>
 8017786:	f1c0 0320 	rsb	r3, r0, #32
 801778a:	2b04      	cmp	r3, #4
 801778c:	f340 808a 	ble.w	80178a4 <_dtoa_r+0x904>
 8017790:	f1c0 001c 	rsb	r0, r0, #28
 8017794:	9b04      	ldr	r3, [sp, #16]
 8017796:	4403      	add	r3, r0
 8017798:	9304      	str	r3, [sp, #16]
 801779a:	9b05      	ldr	r3, [sp, #20]
 801779c:	4403      	add	r3, r0
 801779e:	4405      	add	r5, r0
 80177a0:	9305      	str	r3, [sp, #20]
 80177a2:	9b04      	ldr	r3, [sp, #16]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	dd07      	ble.n	80177b8 <_dtoa_r+0x818>
 80177a8:	ee18 1a10 	vmov	r1, s16
 80177ac:	461a      	mov	r2, r3
 80177ae:	4620      	mov	r0, r4
 80177b0:	f000 fd52 	bl	8018258 <__lshift>
 80177b4:	ee08 0a10 	vmov	s16, r0
 80177b8:	9b05      	ldr	r3, [sp, #20]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	dd05      	ble.n	80177ca <_dtoa_r+0x82a>
 80177be:	4631      	mov	r1, r6
 80177c0:	461a      	mov	r2, r3
 80177c2:	4620      	mov	r0, r4
 80177c4:	f000 fd48 	bl	8018258 <__lshift>
 80177c8:	4606      	mov	r6, r0
 80177ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d06e      	beq.n	80178ae <_dtoa_r+0x90e>
 80177d0:	ee18 0a10 	vmov	r0, s16
 80177d4:	4631      	mov	r1, r6
 80177d6:	f000 fdaf 	bl	8018338 <__mcmp>
 80177da:	2800      	cmp	r0, #0
 80177dc:	da67      	bge.n	80178ae <_dtoa_r+0x90e>
 80177de:	9b00      	ldr	r3, [sp, #0]
 80177e0:	3b01      	subs	r3, #1
 80177e2:	ee18 1a10 	vmov	r1, s16
 80177e6:	9300      	str	r3, [sp, #0]
 80177e8:	220a      	movs	r2, #10
 80177ea:	2300      	movs	r3, #0
 80177ec:	4620      	mov	r0, r4
 80177ee:	f000 fb83 	bl	8017ef8 <__multadd>
 80177f2:	9b08      	ldr	r3, [sp, #32]
 80177f4:	ee08 0a10 	vmov	s16, r0
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	f000 81b1 	beq.w	8017b60 <_dtoa_r+0xbc0>
 80177fe:	2300      	movs	r3, #0
 8017800:	4639      	mov	r1, r7
 8017802:	220a      	movs	r2, #10
 8017804:	4620      	mov	r0, r4
 8017806:	f000 fb77 	bl	8017ef8 <__multadd>
 801780a:	9b02      	ldr	r3, [sp, #8]
 801780c:	2b00      	cmp	r3, #0
 801780e:	4607      	mov	r7, r0
 8017810:	f300 808e 	bgt.w	8017930 <_dtoa_r+0x990>
 8017814:	9b06      	ldr	r3, [sp, #24]
 8017816:	2b02      	cmp	r3, #2
 8017818:	dc51      	bgt.n	80178be <_dtoa_r+0x91e>
 801781a:	e089      	b.n	8017930 <_dtoa_r+0x990>
 801781c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801781e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017822:	e74b      	b.n	80176bc <_dtoa_r+0x71c>
 8017824:	9b03      	ldr	r3, [sp, #12]
 8017826:	1e5e      	subs	r6, r3, #1
 8017828:	9b07      	ldr	r3, [sp, #28]
 801782a:	42b3      	cmp	r3, r6
 801782c:	bfbf      	itttt	lt
 801782e:	9b07      	ldrlt	r3, [sp, #28]
 8017830:	9607      	strlt	r6, [sp, #28]
 8017832:	1af2      	sublt	r2, r6, r3
 8017834:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017836:	bfb6      	itet	lt
 8017838:	189b      	addlt	r3, r3, r2
 801783a:	1b9e      	subge	r6, r3, r6
 801783c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801783e:	9b03      	ldr	r3, [sp, #12]
 8017840:	bfb8      	it	lt
 8017842:	2600      	movlt	r6, #0
 8017844:	2b00      	cmp	r3, #0
 8017846:	bfb7      	itett	lt
 8017848:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801784c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017850:	1a9d      	sublt	r5, r3, r2
 8017852:	2300      	movlt	r3, #0
 8017854:	e734      	b.n	80176c0 <_dtoa_r+0x720>
 8017856:	9e07      	ldr	r6, [sp, #28]
 8017858:	9d04      	ldr	r5, [sp, #16]
 801785a:	9f08      	ldr	r7, [sp, #32]
 801785c:	e73b      	b.n	80176d6 <_dtoa_r+0x736>
 801785e:	9a07      	ldr	r2, [sp, #28]
 8017860:	e767      	b.n	8017732 <_dtoa_r+0x792>
 8017862:	9b06      	ldr	r3, [sp, #24]
 8017864:	2b01      	cmp	r3, #1
 8017866:	dc18      	bgt.n	801789a <_dtoa_r+0x8fa>
 8017868:	f1ba 0f00 	cmp.w	sl, #0
 801786c:	d115      	bne.n	801789a <_dtoa_r+0x8fa>
 801786e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017872:	b993      	cbnz	r3, 801789a <_dtoa_r+0x8fa>
 8017874:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017878:	0d1b      	lsrs	r3, r3, #20
 801787a:	051b      	lsls	r3, r3, #20
 801787c:	b183      	cbz	r3, 80178a0 <_dtoa_r+0x900>
 801787e:	9b04      	ldr	r3, [sp, #16]
 8017880:	3301      	adds	r3, #1
 8017882:	9304      	str	r3, [sp, #16]
 8017884:	9b05      	ldr	r3, [sp, #20]
 8017886:	3301      	adds	r3, #1
 8017888:	9305      	str	r3, [sp, #20]
 801788a:	f04f 0801 	mov.w	r8, #1
 801788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017890:	2b00      	cmp	r3, #0
 8017892:	f47f af6a 	bne.w	801776a <_dtoa_r+0x7ca>
 8017896:	2001      	movs	r0, #1
 8017898:	e76f      	b.n	801777a <_dtoa_r+0x7da>
 801789a:	f04f 0800 	mov.w	r8, #0
 801789e:	e7f6      	b.n	801788e <_dtoa_r+0x8ee>
 80178a0:	4698      	mov	r8, r3
 80178a2:	e7f4      	b.n	801788e <_dtoa_r+0x8ee>
 80178a4:	f43f af7d 	beq.w	80177a2 <_dtoa_r+0x802>
 80178a8:	4618      	mov	r0, r3
 80178aa:	301c      	adds	r0, #28
 80178ac:	e772      	b.n	8017794 <_dtoa_r+0x7f4>
 80178ae:	9b03      	ldr	r3, [sp, #12]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	dc37      	bgt.n	8017924 <_dtoa_r+0x984>
 80178b4:	9b06      	ldr	r3, [sp, #24]
 80178b6:	2b02      	cmp	r3, #2
 80178b8:	dd34      	ble.n	8017924 <_dtoa_r+0x984>
 80178ba:	9b03      	ldr	r3, [sp, #12]
 80178bc:	9302      	str	r3, [sp, #8]
 80178be:	9b02      	ldr	r3, [sp, #8]
 80178c0:	b96b      	cbnz	r3, 80178de <_dtoa_r+0x93e>
 80178c2:	4631      	mov	r1, r6
 80178c4:	2205      	movs	r2, #5
 80178c6:	4620      	mov	r0, r4
 80178c8:	f000 fb16 	bl	8017ef8 <__multadd>
 80178cc:	4601      	mov	r1, r0
 80178ce:	4606      	mov	r6, r0
 80178d0:	ee18 0a10 	vmov	r0, s16
 80178d4:	f000 fd30 	bl	8018338 <__mcmp>
 80178d8:	2800      	cmp	r0, #0
 80178da:	f73f adbb 	bgt.w	8017454 <_dtoa_r+0x4b4>
 80178de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178e0:	9d01      	ldr	r5, [sp, #4]
 80178e2:	43db      	mvns	r3, r3
 80178e4:	9300      	str	r3, [sp, #0]
 80178e6:	f04f 0800 	mov.w	r8, #0
 80178ea:	4631      	mov	r1, r6
 80178ec:	4620      	mov	r0, r4
 80178ee:	f000 fae1 	bl	8017eb4 <_Bfree>
 80178f2:	2f00      	cmp	r7, #0
 80178f4:	f43f aea4 	beq.w	8017640 <_dtoa_r+0x6a0>
 80178f8:	f1b8 0f00 	cmp.w	r8, #0
 80178fc:	d005      	beq.n	801790a <_dtoa_r+0x96a>
 80178fe:	45b8      	cmp	r8, r7
 8017900:	d003      	beq.n	801790a <_dtoa_r+0x96a>
 8017902:	4641      	mov	r1, r8
 8017904:	4620      	mov	r0, r4
 8017906:	f000 fad5 	bl	8017eb4 <_Bfree>
 801790a:	4639      	mov	r1, r7
 801790c:	4620      	mov	r0, r4
 801790e:	f000 fad1 	bl	8017eb4 <_Bfree>
 8017912:	e695      	b.n	8017640 <_dtoa_r+0x6a0>
 8017914:	2600      	movs	r6, #0
 8017916:	4637      	mov	r7, r6
 8017918:	e7e1      	b.n	80178de <_dtoa_r+0x93e>
 801791a:	9700      	str	r7, [sp, #0]
 801791c:	4637      	mov	r7, r6
 801791e:	e599      	b.n	8017454 <_dtoa_r+0x4b4>
 8017920:	40240000 	.word	0x40240000
 8017924:	9b08      	ldr	r3, [sp, #32]
 8017926:	2b00      	cmp	r3, #0
 8017928:	f000 80ca 	beq.w	8017ac0 <_dtoa_r+0xb20>
 801792c:	9b03      	ldr	r3, [sp, #12]
 801792e:	9302      	str	r3, [sp, #8]
 8017930:	2d00      	cmp	r5, #0
 8017932:	dd05      	ble.n	8017940 <_dtoa_r+0x9a0>
 8017934:	4639      	mov	r1, r7
 8017936:	462a      	mov	r2, r5
 8017938:	4620      	mov	r0, r4
 801793a:	f000 fc8d 	bl	8018258 <__lshift>
 801793e:	4607      	mov	r7, r0
 8017940:	f1b8 0f00 	cmp.w	r8, #0
 8017944:	d05b      	beq.n	80179fe <_dtoa_r+0xa5e>
 8017946:	6879      	ldr	r1, [r7, #4]
 8017948:	4620      	mov	r0, r4
 801794a:	f000 fa73 	bl	8017e34 <_Balloc>
 801794e:	4605      	mov	r5, r0
 8017950:	b928      	cbnz	r0, 801795e <_dtoa_r+0x9be>
 8017952:	4b87      	ldr	r3, [pc, #540]	; (8017b70 <_dtoa_r+0xbd0>)
 8017954:	4602      	mov	r2, r0
 8017956:	f240 21ea 	movw	r1, #746	; 0x2ea
 801795a:	f7ff bb3b 	b.w	8016fd4 <_dtoa_r+0x34>
 801795e:	693a      	ldr	r2, [r7, #16]
 8017960:	3202      	adds	r2, #2
 8017962:	0092      	lsls	r2, r2, #2
 8017964:	f107 010c 	add.w	r1, r7, #12
 8017968:	300c      	adds	r0, #12
 801796a:	f7fe fadf 	bl	8015f2c <memcpy>
 801796e:	2201      	movs	r2, #1
 8017970:	4629      	mov	r1, r5
 8017972:	4620      	mov	r0, r4
 8017974:	f000 fc70 	bl	8018258 <__lshift>
 8017978:	9b01      	ldr	r3, [sp, #4]
 801797a:	f103 0901 	add.w	r9, r3, #1
 801797e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017982:	4413      	add	r3, r2
 8017984:	9305      	str	r3, [sp, #20]
 8017986:	f00a 0301 	and.w	r3, sl, #1
 801798a:	46b8      	mov	r8, r7
 801798c:	9304      	str	r3, [sp, #16]
 801798e:	4607      	mov	r7, r0
 8017990:	4631      	mov	r1, r6
 8017992:	ee18 0a10 	vmov	r0, s16
 8017996:	f7ff fa77 	bl	8016e88 <quorem>
 801799a:	4641      	mov	r1, r8
 801799c:	9002      	str	r0, [sp, #8]
 801799e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80179a2:	ee18 0a10 	vmov	r0, s16
 80179a6:	f000 fcc7 	bl	8018338 <__mcmp>
 80179aa:	463a      	mov	r2, r7
 80179ac:	9003      	str	r0, [sp, #12]
 80179ae:	4631      	mov	r1, r6
 80179b0:	4620      	mov	r0, r4
 80179b2:	f000 fcdd 	bl	8018370 <__mdiff>
 80179b6:	68c2      	ldr	r2, [r0, #12]
 80179b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80179bc:	4605      	mov	r5, r0
 80179be:	bb02      	cbnz	r2, 8017a02 <_dtoa_r+0xa62>
 80179c0:	4601      	mov	r1, r0
 80179c2:	ee18 0a10 	vmov	r0, s16
 80179c6:	f000 fcb7 	bl	8018338 <__mcmp>
 80179ca:	4602      	mov	r2, r0
 80179cc:	4629      	mov	r1, r5
 80179ce:	4620      	mov	r0, r4
 80179d0:	9207      	str	r2, [sp, #28]
 80179d2:	f000 fa6f 	bl	8017eb4 <_Bfree>
 80179d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80179da:	ea43 0102 	orr.w	r1, r3, r2
 80179de:	9b04      	ldr	r3, [sp, #16]
 80179e0:	430b      	orrs	r3, r1
 80179e2:	464d      	mov	r5, r9
 80179e4:	d10f      	bne.n	8017a06 <_dtoa_r+0xa66>
 80179e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80179ea:	d02a      	beq.n	8017a42 <_dtoa_r+0xaa2>
 80179ec:	9b03      	ldr	r3, [sp, #12]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	dd02      	ble.n	80179f8 <_dtoa_r+0xa58>
 80179f2:	9b02      	ldr	r3, [sp, #8]
 80179f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80179f8:	f88b a000 	strb.w	sl, [fp]
 80179fc:	e775      	b.n	80178ea <_dtoa_r+0x94a>
 80179fe:	4638      	mov	r0, r7
 8017a00:	e7ba      	b.n	8017978 <_dtoa_r+0x9d8>
 8017a02:	2201      	movs	r2, #1
 8017a04:	e7e2      	b.n	80179cc <_dtoa_r+0xa2c>
 8017a06:	9b03      	ldr	r3, [sp, #12]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	db04      	blt.n	8017a16 <_dtoa_r+0xa76>
 8017a0c:	9906      	ldr	r1, [sp, #24]
 8017a0e:	430b      	orrs	r3, r1
 8017a10:	9904      	ldr	r1, [sp, #16]
 8017a12:	430b      	orrs	r3, r1
 8017a14:	d122      	bne.n	8017a5c <_dtoa_r+0xabc>
 8017a16:	2a00      	cmp	r2, #0
 8017a18:	ddee      	ble.n	80179f8 <_dtoa_r+0xa58>
 8017a1a:	ee18 1a10 	vmov	r1, s16
 8017a1e:	2201      	movs	r2, #1
 8017a20:	4620      	mov	r0, r4
 8017a22:	f000 fc19 	bl	8018258 <__lshift>
 8017a26:	4631      	mov	r1, r6
 8017a28:	ee08 0a10 	vmov	s16, r0
 8017a2c:	f000 fc84 	bl	8018338 <__mcmp>
 8017a30:	2800      	cmp	r0, #0
 8017a32:	dc03      	bgt.n	8017a3c <_dtoa_r+0xa9c>
 8017a34:	d1e0      	bne.n	80179f8 <_dtoa_r+0xa58>
 8017a36:	f01a 0f01 	tst.w	sl, #1
 8017a3a:	d0dd      	beq.n	80179f8 <_dtoa_r+0xa58>
 8017a3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017a40:	d1d7      	bne.n	80179f2 <_dtoa_r+0xa52>
 8017a42:	2339      	movs	r3, #57	; 0x39
 8017a44:	f88b 3000 	strb.w	r3, [fp]
 8017a48:	462b      	mov	r3, r5
 8017a4a:	461d      	mov	r5, r3
 8017a4c:	3b01      	subs	r3, #1
 8017a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017a52:	2a39      	cmp	r2, #57	; 0x39
 8017a54:	d071      	beq.n	8017b3a <_dtoa_r+0xb9a>
 8017a56:	3201      	adds	r2, #1
 8017a58:	701a      	strb	r2, [r3, #0]
 8017a5a:	e746      	b.n	80178ea <_dtoa_r+0x94a>
 8017a5c:	2a00      	cmp	r2, #0
 8017a5e:	dd07      	ble.n	8017a70 <_dtoa_r+0xad0>
 8017a60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017a64:	d0ed      	beq.n	8017a42 <_dtoa_r+0xaa2>
 8017a66:	f10a 0301 	add.w	r3, sl, #1
 8017a6a:	f88b 3000 	strb.w	r3, [fp]
 8017a6e:	e73c      	b.n	80178ea <_dtoa_r+0x94a>
 8017a70:	9b05      	ldr	r3, [sp, #20]
 8017a72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017a76:	4599      	cmp	r9, r3
 8017a78:	d047      	beq.n	8017b0a <_dtoa_r+0xb6a>
 8017a7a:	ee18 1a10 	vmov	r1, s16
 8017a7e:	2300      	movs	r3, #0
 8017a80:	220a      	movs	r2, #10
 8017a82:	4620      	mov	r0, r4
 8017a84:	f000 fa38 	bl	8017ef8 <__multadd>
 8017a88:	45b8      	cmp	r8, r7
 8017a8a:	ee08 0a10 	vmov	s16, r0
 8017a8e:	f04f 0300 	mov.w	r3, #0
 8017a92:	f04f 020a 	mov.w	r2, #10
 8017a96:	4641      	mov	r1, r8
 8017a98:	4620      	mov	r0, r4
 8017a9a:	d106      	bne.n	8017aaa <_dtoa_r+0xb0a>
 8017a9c:	f000 fa2c 	bl	8017ef8 <__multadd>
 8017aa0:	4680      	mov	r8, r0
 8017aa2:	4607      	mov	r7, r0
 8017aa4:	f109 0901 	add.w	r9, r9, #1
 8017aa8:	e772      	b.n	8017990 <_dtoa_r+0x9f0>
 8017aaa:	f000 fa25 	bl	8017ef8 <__multadd>
 8017aae:	4639      	mov	r1, r7
 8017ab0:	4680      	mov	r8, r0
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	220a      	movs	r2, #10
 8017ab6:	4620      	mov	r0, r4
 8017ab8:	f000 fa1e 	bl	8017ef8 <__multadd>
 8017abc:	4607      	mov	r7, r0
 8017abe:	e7f1      	b.n	8017aa4 <_dtoa_r+0xb04>
 8017ac0:	9b03      	ldr	r3, [sp, #12]
 8017ac2:	9302      	str	r3, [sp, #8]
 8017ac4:	9d01      	ldr	r5, [sp, #4]
 8017ac6:	ee18 0a10 	vmov	r0, s16
 8017aca:	4631      	mov	r1, r6
 8017acc:	f7ff f9dc 	bl	8016e88 <quorem>
 8017ad0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017ad4:	9b01      	ldr	r3, [sp, #4]
 8017ad6:	f805 ab01 	strb.w	sl, [r5], #1
 8017ada:	1aea      	subs	r2, r5, r3
 8017adc:	9b02      	ldr	r3, [sp, #8]
 8017ade:	4293      	cmp	r3, r2
 8017ae0:	dd09      	ble.n	8017af6 <_dtoa_r+0xb56>
 8017ae2:	ee18 1a10 	vmov	r1, s16
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	220a      	movs	r2, #10
 8017aea:	4620      	mov	r0, r4
 8017aec:	f000 fa04 	bl	8017ef8 <__multadd>
 8017af0:	ee08 0a10 	vmov	s16, r0
 8017af4:	e7e7      	b.n	8017ac6 <_dtoa_r+0xb26>
 8017af6:	9b02      	ldr	r3, [sp, #8]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	bfc8      	it	gt
 8017afc:	461d      	movgt	r5, r3
 8017afe:	9b01      	ldr	r3, [sp, #4]
 8017b00:	bfd8      	it	le
 8017b02:	2501      	movle	r5, #1
 8017b04:	441d      	add	r5, r3
 8017b06:	f04f 0800 	mov.w	r8, #0
 8017b0a:	ee18 1a10 	vmov	r1, s16
 8017b0e:	2201      	movs	r2, #1
 8017b10:	4620      	mov	r0, r4
 8017b12:	f000 fba1 	bl	8018258 <__lshift>
 8017b16:	4631      	mov	r1, r6
 8017b18:	ee08 0a10 	vmov	s16, r0
 8017b1c:	f000 fc0c 	bl	8018338 <__mcmp>
 8017b20:	2800      	cmp	r0, #0
 8017b22:	dc91      	bgt.n	8017a48 <_dtoa_r+0xaa8>
 8017b24:	d102      	bne.n	8017b2c <_dtoa_r+0xb8c>
 8017b26:	f01a 0f01 	tst.w	sl, #1
 8017b2a:	d18d      	bne.n	8017a48 <_dtoa_r+0xaa8>
 8017b2c:	462b      	mov	r3, r5
 8017b2e:	461d      	mov	r5, r3
 8017b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017b34:	2a30      	cmp	r2, #48	; 0x30
 8017b36:	d0fa      	beq.n	8017b2e <_dtoa_r+0xb8e>
 8017b38:	e6d7      	b.n	80178ea <_dtoa_r+0x94a>
 8017b3a:	9a01      	ldr	r2, [sp, #4]
 8017b3c:	429a      	cmp	r2, r3
 8017b3e:	d184      	bne.n	8017a4a <_dtoa_r+0xaaa>
 8017b40:	9b00      	ldr	r3, [sp, #0]
 8017b42:	3301      	adds	r3, #1
 8017b44:	9300      	str	r3, [sp, #0]
 8017b46:	2331      	movs	r3, #49	; 0x31
 8017b48:	7013      	strb	r3, [r2, #0]
 8017b4a:	e6ce      	b.n	80178ea <_dtoa_r+0x94a>
 8017b4c:	4b09      	ldr	r3, [pc, #36]	; (8017b74 <_dtoa_r+0xbd4>)
 8017b4e:	f7ff ba95 	b.w	801707c <_dtoa_r+0xdc>
 8017b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	f47f aa6e 	bne.w	8017036 <_dtoa_r+0x96>
 8017b5a:	4b07      	ldr	r3, [pc, #28]	; (8017b78 <_dtoa_r+0xbd8>)
 8017b5c:	f7ff ba8e 	b.w	801707c <_dtoa_r+0xdc>
 8017b60:	9b02      	ldr	r3, [sp, #8]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	dcae      	bgt.n	8017ac4 <_dtoa_r+0xb24>
 8017b66:	9b06      	ldr	r3, [sp, #24]
 8017b68:	2b02      	cmp	r3, #2
 8017b6a:	f73f aea8 	bgt.w	80178be <_dtoa_r+0x91e>
 8017b6e:	e7a9      	b.n	8017ac4 <_dtoa_r+0xb24>
 8017b70:	08019a30 	.word	0x08019a30
 8017b74:	0801988c 	.word	0x0801988c
 8017b78:	080199b1 	.word	0x080199b1

08017b7c <__sflush_r>:
 8017b7c:	898a      	ldrh	r2, [r1, #12]
 8017b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b82:	4605      	mov	r5, r0
 8017b84:	0710      	lsls	r0, r2, #28
 8017b86:	460c      	mov	r4, r1
 8017b88:	d458      	bmi.n	8017c3c <__sflush_r+0xc0>
 8017b8a:	684b      	ldr	r3, [r1, #4]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	dc05      	bgt.n	8017b9c <__sflush_r+0x20>
 8017b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	dc02      	bgt.n	8017b9c <__sflush_r+0x20>
 8017b96:	2000      	movs	r0, #0
 8017b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b9e:	2e00      	cmp	r6, #0
 8017ba0:	d0f9      	beq.n	8017b96 <__sflush_r+0x1a>
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017ba8:	682f      	ldr	r7, [r5, #0]
 8017baa:	602b      	str	r3, [r5, #0]
 8017bac:	d032      	beq.n	8017c14 <__sflush_r+0x98>
 8017bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017bb0:	89a3      	ldrh	r3, [r4, #12]
 8017bb2:	075a      	lsls	r2, r3, #29
 8017bb4:	d505      	bpl.n	8017bc2 <__sflush_r+0x46>
 8017bb6:	6863      	ldr	r3, [r4, #4]
 8017bb8:	1ac0      	subs	r0, r0, r3
 8017bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017bbc:	b10b      	cbz	r3, 8017bc2 <__sflush_r+0x46>
 8017bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017bc0:	1ac0      	subs	r0, r0, r3
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bc8:	6a21      	ldr	r1, [r4, #32]
 8017bca:	4628      	mov	r0, r5
 8017bcc:	47b0      	blx	r6
 8017bce:	1c43      	adds	r3, r0, #1
 8017bd0:	89a3      	ldrh	r3, [r4, #12]
 8017bd2:	d106      	bne.n	8017be2 <__sflush_r+0x66>
 8017bd4:	6829      	ldr	r1, [r5, #0]
 8017bd6:	291d      	cmp	r1, #29
 8017bd8:	d82c      	bhi.n	8017c34 <__sflush_r+0xb8>
 8017bda:	4a2a      	ldr	r2, [pc, #168]	; (8017c84 <__sflush_r+0x108>)
 8017bdc:	40ca      	lsrs	r2, r1
 8017bde:	07d6      	lsls	r6, r2, #31
 8017be0:	d528      	bpl.n	8017c34 <__sflush_r+0xb8>
 8017be2:	2200      	movs	r2, #0
 8017be4:	6062      	str	r2, [r4, #4]
 8017be6:	04d9      	lsls	r1, r3, #19
 8017be8:	6922      	ldr	r2, [r4, #16]
 8017bea:	6022      	str	r2, [r4, #0]
 8017bec:	d504      	bpl.n	8017bf8 <__sflush_r+0x7c>
 8017bee:	1c42      	adds	r2, r0, #1
 8017bf0:	d101      	bne.n	8017bf6 <__sflush_r+0x7a>
 8017bf2:	682b      	ldr	r3, [r5, #0]
 8017bf4:	b903      	cbnz	r3, 8017bf8 <__sflush_r+0x7c>
 8017bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8017bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bfa:	602f      	str	r7, [r5, #0]
 8017bfc:	2900      	cmp	r1, #0
 8017bfe:	d0ca      	beq.n	8017b96 <__sflush_r+0x1a>
 8017c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c04:	4299      	cmp	r1, r3
 8017c06:	d002      	beq.n	8017c0e <__sflush_r+0x92>
 8017c08:	4628      	mov	r0, r5
 8017c0a:	f7fe f9a5 	bl	8015f58 <_free_r>
 8017c0e:	2000      	movs	r0, #0
 8017c10:	6360      	str	r0, [r4, #52]	; 0x34
 8017c12:	e7c1      	b.n	8017b98 <__sflush_r+0x1c>
 8017c14:	6a21      	ldr	r1, [r4, #32]
 8017c16:	2301      	movs	r3, #1
 8017c18:	4628      	mov	r0, r5
 8017c1a:	47b0      	blx	r6
 8017c1c:	1c41      	adds	r1, r0, #1
 8017c1e:	d1c7      	bne.n	8017bb0 <__sflush_r+0x34>
 8017c20:	682b      	ldr	r3, [r5, #0]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d0c4      	beq.n	8017bb0 <__sflush_r+0x34>
 8017c26:	2b1d      	cmp	r3, #29
 8017c28:	d001      	beq.n	8017c2e <__sflush_r+0xb2>
 8017c2a:	2b16      	cmp	r3, #22
 8017c2c:	d101      	bne.n	8017c32 <__sflush_r+0xb6>
 8017c2e:	602f      	str	r7, [r5, #0]
 8017c30:	e7b1      	b.n	8017b96 <__sflush_r+0x1a>
 8017c32:	89a3      	ldrh	r3, [r4, #12]
 8017c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c38:	81a3      	strh	r3, [r4, #12]
 8017c3a:	e7ad      	b.n	8017b98 <__sflush_r+0x1c>
 8017c3c:	690f      	ldr	r7, [r1, #16]
 8017c3e:	2f00      	cmp	r7, #0
 8017c40:	d0a9      	beq.n	8017b96 <__sflush_r+0x1a>
 8017c42:	0793      	lsls	r3, r2, #30
 8017c44:	680e      	ldr	r6, [r1, #0]
 8017c46:	bf08      	it	eq
 8017c48:	694b      	ldreq	r3, [r1, #20]
 8017c4a:	600f      	str	r7, [r1, #0]
 8017c4c:	bf18      	it	ne
 8017c4e:	2300      	movne	r3, #0
 8017c50:	eba6 0807 	sub.w	r8, r6, r7
 8017c54:	608b      	str	r3, [r1, #8]
 8017c56:	f1b8 0f00 	cmp.w	r8, #0
 8017c5a:	dd9c      	ble.n	8017b96 <__sflush_r+0x1a>
 8017c5c:	6a21      	ldr	r1, [r4, #32]
 8017c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c60:	4643      	mov	r3, r8
 8017c62:	463a      	mov	r2, r7
 8017c64:	4628      	mov	r0, r5
 8017c66:	47b0      	blx	r6
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	dc06      	bgt.n	8017c7a <__sflush_r+0xfe>
 8017c6c:	89a3      	ldrh	r3, [r4, #12]
 8017c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c72:	81a3      	strh	r3, [r4, #12]
 8017c74:	f04f 30ff 	mov.w	r0, #4294967295
 8017c78:	e78e      	b.n	8017b98 <__sflush_r+0x1c>
 8017c7a:	4407      	add	r7, r0
 8017c7c:	eba8 0800 	sub.w	r8, r8, r0
 8017c80:	e7e9      	b.n	8017c56 <__sflush_r+0xda>
 8017c82:	bf00      	nop
 8017c84:	20400001 	.word	0x20400001

08017c88 <_fflush_r>:
 8017c88:	b538      	push	{r3, r4, r5, lr}
 8017c8a:	690b      	ldr	r3, [r1, #16]
 8017c8c:	4605      	mov	r5, r0
 8017c8e:	460c      	mov	r4, r1
 8017c90:	b913      	cbnz	r3, 8017c98 <_fflush_r+0x10>
 8017c92:	2500      	movs	r5, #0
 8017c94:	4628      	mov	r0, r5
 8017c96:	bd38      	pop	{r3, r4, r5, pc}
 8017c98:	b118      	cbz	r0, 8017ca2 <_fflush_r+0x1a>
 8017c9a:	6983      	ldr	r3, [r0, #24]
 8017c9c:	b90b      	cbnz	r3, 8017ca2 <_fflush_r+0x1a>
 8017c9e:	f7fe f87b 	bl	8015d98 <__sinit>
 8017ca2:	4b14      	ldr	r3, [pc, #80]	; (8017cf4 <_fflush_r+0x6c>)
 8017ca4:	429c      	cmp	r4, r3
 8017ca6:	d11b      	bne.n	8017ce0 <_fflush_r+0x58>
 8017ca8:	686c      	ldr	r4, [r5, #4]
 8017caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d0ef      	beq.n	8017c92 <_fflush_r+0xa>
 8017cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017cb4:	07d0      	lsls	r0, r2, #31
 8017cb6:	d404      	bmi.n	8017cc2 <_fflush_r+0x3a>
 8017cb8:	0599      	lsls	r1, r3, #22
 8017cba:	d402      	bmi.n	8017cc2 <_fflush_r+0x3a>
 8017cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cbe:	f7ed fbd9 	bl	8005474 <__retarget_lock_acquire_recursive>
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	4621      	mov	r1, r4
 8017cc6:	f7ff ff59 	bl	8017b7c <__sflush_r>
 8017cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ccc:	07da      	lsls	r2, r3, #31
 8017cce:	4605      	mov	r5, r0
 8017cd0:	d4e0      	bmi.n	8017c94 <_fflush_r+0xc>
 8017cd2:	89a3      	ldrh	r3, [r4, #12]
 8017cd4:	059b      	lsls	r3, r3, #22
 8017cd6:	d4dd      	bmi.n	8017c94 <_fflush_r+0xc>
 8017cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cda:	f7ed fbdf 	bl	800549c <__retarget_lock_release_recursive>
 8017cde:	e7d9      	b.n	8017c94 <_fflush_r+0xc>
 8017ce0:	4b05      	ldr	r3, [pc, #20]	; (8017cf8 <_fflush_r+0x70>)
 8017ce2:	429c      	cmp	r4, r3
 8017ce4:	d101      	bne.n	8017cea <_fflush_r+0x62>
 8017ce6:	68ac      	ldr	r4, [r5, #8]
 8017ce8:	e7df      	b.n	8017caa <_fflush_r+0x22>
 8017cea:	4b04      	ldr	r3, [pc, #16]	; (8017cfc <_fflush_r+0x74>)
 8017cec:	429c      	cmp	r4, r3
 8017cee:	bf08      	it	eq
 8017cf0:	68ec      	ldreq	r4, [r5, #12]
 8017cf2:	e7da      	b.n	8017caa <_fflush_r+0x22>
 8017cf4:	08019838 	.word	0x08019838
 8017cf8:	08019858 	.word	0x08019858
 8017cfc:	08019818 	.word	0x08019818

08017d00 <_localeconv_r>:
 8017d00:	4800      	ldr	r0, [pc, #0]	; (8017d04 <_localeconv_r+0x4>)
 8017d02:	4770      	bx	lr
 8017d04:	20000294 	.word	0x20000294

08017d08 <_lseek_r>:
 8017d08:	b538      	push	{r3, r4, r5, lr}
 8017d0a:	4d07      	ldr	r5, [pc, #28]	; (8017d28 <_lseek_r+0x20>)
 8017d0c:	4604      	mov	r4, r0
 8017d0e:	4608      	mov	r0, r1
 8017d10:	4611      	mov	r1, r2
 8017d12:	2200      	movs	r2, #0
 8017d14:	602a      	str	r2, [r5, #0]
 8017d16:	461a      	mov	r2, r3
 8017d18:	f7ec ff38 	bl	8004b8c <_lseek>
 8017d1c:	1c43      	adds	r3, r0, #1
 8017d1e:	d102      	bne.n	8017d26 <_lseek_r+0x1e>
 8017d20:	682b      	ldr	r3, [r5, #0]
 8017d22:	b103      	cbz	r3, 8017d26 <_lseek_r+0x1e>
 8017d24:	6023      	str	r3, [r4, #0]
 8017d26:	bd38      	pop	{r3, r4, r5, pc}
 8017d28:	2000705c 	.word	0x2000705c

08017d2c <__swhatbuf_r>:
 8017d2c:	b570      	push	{r4, r5, r6, lr}
 8017d2e:	460e      	mov	r6, r1
 8017d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d34:	2900      	cmp	r1, #0
 8017d36:	b096      	sub	sp, #88	; 0x58
 8017d38:	4614      	mov	r4, r2
 8017d3a:	461d      	mov	r5, r3
 8017d3c:	da08      	bge.n	8017d50 <__swhatbuf_r+0x24>
 8017d3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017d42:	2200      	movs	r2, #0
 8017d44:	602a      	str	r2, [r5, #0]
 8017d46:	061a      	lsls	r2, r3, #24
 8017d48:	d410      	bmi.n	8017d6c <__swhatbuf_r+0x40>
 8017d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d4e:	e00e      	b.n	8017d6e <__swhatbuf_r+0x42>
 8017d50:	466a      	mov	r2, sp
 8017d52:	f000 fdb3 	bl	80188bc <_fstat_r>
 8017d56:	2800      	cmp	r0, #0
 8017d58:	dbf1      	blt.n	8017d3e <__swhatbuf_r+0x12>
 8017d5a:	9a01      	ldr	r2, [sp, #4]
 8017d5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017d60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017d64:	425a      	negs	r2, r3
 8017d66:	415a      	adcs	r2, r3
 8017d68:	602a      	str	r2, [r5, #0]
 8017d6a:	e7ee      	b.n	8017d4a <__swhatbuf_r+0x1e>
 8017d6c:	2340      	movs	r3, #64	; 0x40
 8017d6e:	2000      	movs	r0, #0
 8017d70:	6023      	str	r3, [r4, #0]
 8017d72:	b016      	add	sp, #88	; 0x58
 8017d74:	bd70      	pop	{r4, r5, r6, pc}
	...

08017d78 <__smakebuf_r>:
 8017d78:	898b      	ldrh	r3, [r1, #12]
 8017d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017d7c:	079d      	lsls	r5, r3, #30
 8017d7e:	4606      	mov	r6, r0
 8017d80:	460c      	mov	r4, r1
 8017d82:	d507      	bpl.n	8017d94 <__smakebuf_r+0x1c>
 8017d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017d88:	6023      	str	r3, [r4, #0]
 8017d8a:	6123      	str	r3, [r4, #16]
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	6163      	str	r3, [r4, #20]
 8017d90:	b002      	add	sp, #8
 8017d92:	bd70      	pop	{r4, r5, r6, pc}
 8017d94:	ab01      	add	r3, sp, #4
 8017d96:	466a      	mov	r2, sp
 8017d98:	f7ff ffc8 	bl	8017d2c <__swhatbuf_r>
 8017d9c:	9900      	ldr	r1, [sp, #0]
 8017d9e:	4605      	mov	r5, r0
 8017da0:	4630      	mov	r0, r6
 8017da2:	f7fe f945 	bl	8016030 <_malloc_r>
 8017da6:	b948      	cbnz	r0, 8017dbc <__smakebuf_r+0x44>
 8017da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dac:	059a      	lsls	r2, r3, #22
 8017dae:	d4ef      	bmi.n	8017d90 <__smakebuf_r+0x18>
 8017db0:	f023 0303 	bic.w	r3, r3, #3
 8017db4:	f043 0302 	orr.w	r3, r3, #2
 8017db8:	81a3      	strh	r3, [r4, #12]
 8017dba:	e7e3      	b.n	8017d84 <__smakebuf_r+0xc>
 8017dbc:	4b0d      	ldr	r3, [pc, #52]	; (8017df4 <__smakebuf_r+0x7c>)
 8017dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8017dc0:	89a3      	ldrh	r3, [r4, #12]
 8017dc2:	6020      	str	r0, [r4, #0]
 8017dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017dc8:	81a3      	strh	r3, [r4, #12]
 8017dca:	9b00      	ldr	r3, [sp, #0]
 8017dcc:	6163      	str	r3, [r4, #20]
 8017dce:	9b01      	ldr	r3, [sp, #4]
 8017dd0:	6120      	str	r0, [r4, #16]
 8017dd2:	b15b      	cbz	r3, 8017dec <__smakebuf_r+0x74>
 8017dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017dd8:	4630      	mov	r0, r6
 8017dda:	f000 fd81 	bl	80188e0 <_isatty_r>
 8017dde:	b128      	cbz	r0, 8017dec <__smakebuf_r+0x74>
 8017de0:	89a3      	ldrh	r3, [r4, #12]
 8017de2:	f023 0303 	bic.w	r3, r3, #3
 8017de6:	f043 0301 	orr.w	r3, r3, #1
 8017dea:	81a3      	strh	r3, [r4, #12]
 8017dec:	89a0      	ldrh	r0, [r4, #12]
 8017dee:	4305      	orrs	r5, r0
 8017df0:	81a5      	strh	r5, [r4, #12]
 8017df2:	e7cd      	b.n	8017d90 <__smakebuf_r+0x18>
 8017df4:	08015d31 	.word	0x08015d31

08017df8 <__ascii_mbtowc>:
 8017df8:	b082      	sub	sp, #8
 8017dfa:	b901      	cbnz	r1, 8017dfe <__ascii_mbtowc+0x6>
 8017dfc:	a901      	add	r1, sp, #4
 8017dfe:	b142      	cbz	r2, 8017e12 <__ascii_mbtowc+0x1a>
 8017e00:	b14b      	cbz	r3, 8017e16 <__ascii_mbtowc+0x1e>
 8017e02:	7813      	ldrb	r3, [r2, #0]
 8017e04:	600b      	str	r3, [r1, #0]
 8017e06:	7812      	ldrb	r2, [r2, #0]
 8017e08:	1e10      	subs	r0, r2, #0
 8017e0a:	bf18      	it	ne
 8017e0c:	2001      	movne	r0, #1
 8017e0e:	b002      	add	sp, #8
 8017e10:	4770      	bx	lr
 8017e12:	4610      	mov	r0, r2
 8017e14:	e7fb      	b.n	8017e0e <__ascii_mbtowc+0x16>
 8017e16:	f06f 0001 	mvn.w	r0, #1
 8017e1a:	e7f8      	b.n	8017e0e <__ascii_mbtowc+0x16>

08017e1c <__malloc_lock>:
 8017e1c:	4801      	ldr	r0, [pc, #4]	; (8017e24 <__malloc_lock+0x8>)
 8017e1e:	f7ed bb29 	b.w	8005474 <__retarget_lock_acquire_recursive>
 8017e22:	bf00      	nop
 8017e24:	200007ac 	.word	0x200007ac

08017e28 <__malloc_unlock>:
 8017e28:	4801      	ldr	r0, [pc, #4]	; (8017e30 <__malloc_unlock+0x8>)
 8017e2a:	f7ed bb37 	b.w	800549c <__retarget_lock_release_recursive>
 8017e2e:	bf00      	nop
 8017e30:	200007ac 	.word	0x200007ac

08017e34 <_Balloc>:
 8017e34:	b570      	push	{r4, r5, r6, lr}
 8017e36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017e38:	4604      	mov	r4, r0
 8017e3a:	460d      	mov	r5, r1
 8017e3c:	b976      	cbnz	r6, 8017e5c <_Balloc+0x28>
 8017e3e:	2010      	movs	r0, #16
 8017e40:	f7fe f86c 	bl	8015f1c <malloc>
 8017e44:	4602      	mov	r2, r0
 8017e46:	6260      	str	r0, [r4, #36]	; 0x24
 8017e48:	b920      	cbnz	r0, 8017e54 <_Balloc+0x20>
 8017e4a:	4b18      	ldr	r3, [pc, #96]	; (8017eac <_Balloc+0x78>)
 8017e4c:	4818      	ldr	r0, [pc, #96]	; (8017eb0 <_Balloc+0x7c>)
 8017e4e:	2166      	movs	r1, #102	; 0x66
 8017e50:	f000 fd04 	bl	801885c <__assert_func>
 8017e54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017e58:	6006      	str	r6, [r0, #0]
 8017e5a:	60c6      	str	r6, [r0, #12]
 8017e5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017e5e:	68f3      	ldr	r3, [r6, #12]
 8017e60:	b183      	cbz	r3, 8017e84 <_Balloc+0x50>
 8017e62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e64:	68db      	ldr	r3, [r3, #12]
 8017e66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017e6a:	b9b8      	cbnz	r0, 8017e9c <_Balloc+0x68>
 8017e6c:	2101      	movs	r1, #1
 8017e6e:	fa01 f605 	lsl.w	r6, r1, r5
 8017e72:	1d72      	adds	r2, r6, #5
 8017e74:	0092      	lsls	r2, r2, #2
 8017e76:	4620      	mov	r0, r4
 8017e78:	f000 fb60 	bl	801853c <_calloc_r>
 8017e7c:	b160      	cbz	r0, 8017e98 <_Balloc+0x64>
 8017e7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017e82:	e00e      	b.n	8017ea2 <_Balloc+0x6e>
 8017e84:	2221      	movs	r2, #33	; 0x21
 8017e86:	2104      	movs	r1, #4
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f000 fb57 	bl	801853c <_calloc_r>
 8017e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e90:	60f0      	str	r0, [r6, #12]
 8017e92:	68db      	ldr	r3, [r3, #12]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d1e4      	bne.n	8017e62 <_Balloc+0x2e>
 8017e98:	2000      	movs	r0, #0
 8017e9a:	bd70      	pop	{r4, r5, r6, pc}
 8017e9c:	6802      	ldr	r2, [r0, #0]
 8017e9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017ea8:	e7f7      	b.n	8017e9a <_Balloc+0x66>
 8017eaa:	bf00      	nop
 8017eac:	080199be 	.word	0x080199be
 8017eb0:	08019a4b 	.word	0x08019a4b

08017eb4 <_Bfree>:
 8017eb4:	b570      	push	{r4, r5, r6, lr}
 8017eb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017eb8:	4605      	mov	r5, r0
 8017eba:	460c      	mov	r4, r1
 8017ebc:	b976      	cbnz	r6, 8017edc <_Bfree+0x28>
 8017ebe:	2010      	movs	r0, #16
 8017ec0:	f7fe f82c 	bl	8015f1c <malloc>
 8017ec4:	4602      	mov	r2, r0
 8017ec6:	6268      	str	r0, [r5, #36]	; 0x24
 8017ec8:	b920      	cbnz	r0, 8017ed4 <_Bfree+0x20>
 8017eca:	4b09      	ldr	r3, [pc, #36]	; (8017ef0 <_Bfree+0x3c>)
 8017ecc:	4809      	ldr	r0, [pc, #36]	; (8017ef4 <_Bfree+0x40>)
 8017ece:	218a      	movs	r1, #138	; 0x8a
 8017ed0:	f000 fcc4 	bl	801885c <__assert_func>
 8017ed4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017ed8:	6006      	str	r6, [r0, #0]
 8017eda:	60c6      	str	r6, [r0, #12]
 8017edc:	b13c      	cbz	r4, 8017eee <_Bfree+0x3a>
 8017ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017ee0:	6862      	ldr	r2, [r4, #4]
 8017ee2:	68db      	ldr	r3, [r3, #12]
 8017ee4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ee8:	6021      	str	r1, [r4, #0]
 8017eea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017eee:	bd70      	pop	{r4, r5, r6, pc}
 8017ef0:	080199be 	.word	0x080199be
 8017ef4:	08019a4b 	.word	0x08019a4b

08017ef8 <__multadd>:
 8017ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017efc:	690d      	ldr	r5, [r1, #16]
 8017efe:	4607      	mov	r7, r0
 8017f00:	460c      	mov	r4, r1
 8017f02:	461e      	mov	r6, r3
 8017f04:	f101 0c14 	add.w	ip, r1, #20
 8017f08:	2000      	movs	r0, #0
 8017f0a:	f8dc 3000 	ldr.w	r3, [ip]
 8017f0e:	b299      	uxth	r1, r3
 8017f10:	fb02 6101 	mla	r1, r2, r1, r6
 8017f14:	0c1e      	lsrs	r6, r3, #16
 8017f16:	0c0b      	lsrs	r3, r1, #16
 8017f18:	fb02 3306 	mla	r3, r2, r6, r3
 8017f1c:	b289      	uxth	r1, r1
 8017f1e:	3001      	adds	r0, #1
 8017f20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017f24:	4285      	cmp	r5, r0
 8017f26:	f84c 1b04 	str.w	r1, [ip], #4
 8017f2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017f2e:	dcec      	bgt.n	8017f0a <__multadd+0x12>
 8017f30:	b30e      	cbz	r6, 8017f76 <__multadd+0x7e>
 8017f32:	68a3      	ldr	r3, [r4, #8]
 8017f34:	42ab      	cmp	r3, r5
 8017f36:	dc19      	bgt.n	8017f6c <__multadd+0x74>
 8017f38:	6861      	ldr	r1, [r4, #4]
 8017f3a:	4638      	mov	r0, r7
 8017f3c:	3101      	adds	r1, #1
 8017f3e:	f7ff ff79 	bl	8017e34 <_Balloc>
 8017f42:	4680      	mov	r8, r0
 8017f44:	b928      	cbnz	r0, 8017f52 <__multadd+0x5a>
 8017f46:	4602      	mov	r2, r0
 8017f48:	4b0c      	ldr	r3, [pc, #48]	; (8017f7c <__multadd+0x84>)
 8017f4a:	480d      	ldr	r0, [pc, #52]	; (8017f80 <__multadd+0x88>)
 8017f4c:	21b5      	movs	r1, #181	; 0xb5
 8017f4e:	f000 fc85 	bl	801885c <__assert_func>
 8017f52:	6922      	ldr	r2, [r4, #16]
 8017f54:	3202      	adds	r2, #2
 8017f56:	f104 010c 	add.w	r1, r4, #12
 8017f5a:	0092      	lsls	r2, r2, #2
 8017f5c:	300c      	adds	r0, #12
 8017f5e:	f7fd ffe5 	bl	8015f2c <memcpy>
 8017f62:	4621      	mov	r1, r4
 8017f64:	4638      	mov	r0, r7
 8017f66:	f7ff ffa5 	bl	8017eb4 <_Bfree>
 8017f6a:	4644      	mov	r4, r8
 8017f6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017f70:	3501      	adds	r5, #1
 8017f72:	615e      	str	r6, [r3, #20]
 8017f74:	6125      	str	r5, [r4, #16]
 8017f76:	4620      	mov	r0, r4
 8017f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f7c:	08019a30 	.word	0x08019a30
 8017f80:	08019a4b 	.word	0x08019a4b

08017f84 <__hi0bits>:
 8017f84:	0c03      	lsrs	r3, r0, #16
 8017f86:	041b      	lsls	r3, r3, #16
 8017f88:	b9d3      	cbnz	r3, 8017fc0 <__hi0bits+0x3c>
 8017f8a:	0400      	lsls	r0, r0, #16
 8017f8c:	2310      	movs	r3, #16
 8017f8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017f92:	bf04      	itt	eq
 8017f94:	0200      	lsleq	r0, r0, #8
 8017f96:	3308      	addeq	r3, #8
 8017f98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017f9c:	bf04      	itt	eq
 8017f9e:	0100      	lsleq	r0, r0, #4
 8017fa0:	3304      	addeq	r3, #4
 8017fa2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017fa6:	bf04      	itt	eq
 8017fa8:	0080      	lsleq	r0, r0, #2
 8017faa:	3302      	addeq	r3, #2
 8017fac:	2800      	cmp	r0, #0
 8017fae:	db05      	blt.n	8017fbc <__hi0bits+0x38>
 8017fb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017fb4:	f103 0301 	add.w	r3, r3, #1
 8017fb8:	bf08      	it	eq
 8017fba:	2320      	moveq	r3, #32
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	4770      	bx	lr
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	e7e4      	b.n	8017f8e <__hi0bits+0xa>

08017fc4 <__lo0bits>:
 8017fc4:	6803      	ldr	r3, [r0, #0]
 8017fc6:	f013 0207 	ands.w	r2, r3, #7
 8017fca:	4601      	mov	r1, r0
 8017fcc:	d00b      	beq.n	8017fe6 <__lo0bits+0x22>
 8017fce:	07da      	lsls	r2, r3, #31
 8017fd0:	d423      	bmi.n	801801a <__lo0bits+0x56>
 8017fd2:	0798      	lsls	r0, r3, #30
 8017fd4:	bf49      	itett	mi
 8017fd6:	085b      	lsrmi	r3, r3, #1
 8017fd8:	089b      	lsrpl	r3, r3, #2
 8017fda:	2001      	movmi	r0, #1
 8017fdc:	600b      	strmi	r3, [r1, #0]
 8017fde:	bf5c      	itt	pl
 8017fe0:	600b      	strpl	r3, [r1, #0]
 8017fe2:	2002      	movpl	r0, #2
 8017fe4:	4770      	bx	lr
 8017fe6:	b298      	uxth	r0, r3
 8017fe8:	b9a8      	cbnz	r0, 8018016 <__lo0bits+0x52>
 8017fea:	0c1b      	lsrs	r3, r3, #16
 8017fec:	2010      	movs	r0, #16
 8017fee:	b2da      	uxtb	r2, r3
 8017ff0:	b90a      	cbnz	r2, 8017ff6 <__lo0bits+0x32>
 8017ff2:	3008      	adds	r0, #8
 8017ff4:	0a1b      	lsrs	r3, r3, #8
 8017ff6:	071a      	lsls	r2, r3, #28
 8017ff8:	bf04      	itt	eq
 8017ffa:	091b      	lsreq	r3, r3, #4
 8017ffc:	3004      	addeq	r0, #4
 8017ffe:	079a      	lsls	r2, r3, #30
 8018000:	bf04      	itt	eq
 8018002:	089b      	lsreq	r3, r3, #2
 8018004:	3002      	addeq	r0, #2
 8018006:	07da      	lsls	r2, r3, #31
 8018008:	d403      	bmi.n	8018012 <__lo0bits+0x4e>
 801800a:	085b      	lsrs	r3, r3, #1
 801800c:	f100 0001 	add.w	r0, r0, #1
 8018010:	d005      	beq.n	801801e <__lo0bits+0x5a>
 8018012:	600b      	str	r3, [r1, #0]
 8018014:	4770      	bx	lr
 8018016:	4610      	mov	r0, r2
 8018018:	e7e9      	b.n	8017fee <__lo0bits+0x2a>
 801801a:	2000      	movs	r0, #0
 801801c:	4770      	bx	lr
 801801e:	2020      	movs	r0, #32
 8018020:	4770      	bx	lr
	...

08018024 <__i2b>:
 8018024:	b510      	push	{r4, lr}
 8018026:	460c      	mov	r4, r1
 8018028:	2101      	movs	r1, #1
 801802a:	f7ff ff03 	bl	8017e34 <_Balloc>
 801802e:	4602      	mov	r2, r0
 8018030:	b928      	cbnz	r0, 801803e <__i2b+0x1a>
 8018032:	4b05      	ldr	r3, [pc, #20]	; (8018048 <__i2b+0x24>)
 8018034:	4805      	ldr	r0, [pc, #20]	; (801804c <__i2b+0x28>)
 8018036:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801803a:	f000 fc0f 	bl	801885c <__assert_func>
 801803e:	2301      	movs	r3, #1
 8018040:	6144      	str	r4, [r0, #20]
 8018042:	6103      	str	r3, [r0, #16]
 8018044:	bd10      	pop	{r4, pc}
 8018046:	bf00      	nop
 8018048:	08019a30 	.word	0x08019a30
 801804c:	08019a4b 	.word	0x08019a4b

08018050 <__multiply>:
 8018050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018054:	4691      	mov	r9, r2
 8018056:	690a      	ldr	r2, [r1, #16]
 8018058:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801805c:	429a      	cmp	r2, r3
 801805e:	bfb8      	it	lt
 8018060:	460b      	movlt	r3, r1
 8018062:	460c      	mov	r4, r1
 8018064:	bfbc      	itt	lt
 8018066:	464c      	movlt	r4, r9
 8018068:	4699      	movlt	r9, r3
 801806a:	6927      	ldr	r7, [r4, #16]
 801806c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018070:	68a3      	ldr	r3, [r4, #8]
 8018072:	6861      	ldr	r1, [r4, #4]
 8018074:	eb07 060a 	add.w	r6, r7, sl
 8018078:	42b3      	cmp	r3, r6
 801807a:	b085      	sub	sp, #20
 801807c:	bfb8      	it	lt
 801807e:	3101      	addlt	r1, #1
 8018080:	f7ff fed8 	bl	8017e34 <_Balloc>
 8018084:	b930      	cbnz	r0, 8018094 <__multiply+0x44>
 8018086:	4602      	mov	r2, r0
 8018088:	4b44      	ldr	r3, [pc, #272]	; (801819c <__multiply+0x14c>)
 801808a:	4845      	ldr	r0, [pc, #276]	; (80181a0 <__multiply+0x150>)
 801808c:	f240 115d 	movw	r1, #349	; 0x15d
 8018090:	f000 fbe4 	bl	801885c <__assert_func>
 8018094:	f100 0514 	add.w	r5, r0, #20
 8018098:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801809c:	462b      	mov	r3, r5
 801809e:	2200      	movs	r2, #0
 80180a0:	4543      	cmp	r3, r8
 80180a2:	d321      	bcc.n	80180e8 <__multiply+0x98>
 80180a4:	f104 0314 	add.w	r3, r4, #20
 80180a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80180ac:	f109 0314 	add.w	r3, r9, #20
 80180b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80180b4:	9202      	str	r2, [sp, #8]
 80180b6:	1b3a      	subs	r2, r7, r4
 80180b8:	3a15      	subs	r2, #21
 80180ba:	f022 0203 	bic.w	r2, r2, #3
 80180be:	3204      	adds	r2, #4
 80180c0:	f104 0115 	add.w	r1, r4, #21
 80180c4:	428f      	cmp	r7, r1
 80180c6:	bf38      	it	cc
 80180c8:	2204      	movcc	r2, #4
 80180ca:	9201      	str	r2, [sp, #4]
 80180cc:	9a02      	ldr	r2, [sp, #8]
 80180ce:	9303      	str	r3, [sp, #12]
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d80c      	bhi.n	80180ee <__multiply+0x9e>
 80180d4:	2e00      	cmp	r6, #0
 80180d6:	dd03      	ble.n	80180e0 <__multiply+0x90>
 80180d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d05a      	beq.n	8018196 <__multiply+0x146>
 80180e0:	6106      	str	r6, [r0, #16]
 80180e2:	b005      	add	sp, #20
 80180e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180e8:	f843 2b04 	str.w	r2, [r3], #4
 80180ec:	e7d8      	b.n	80180a0 <__multiply+0x50>
 80180ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80180f2:	f1ba 0f00 	cmp.w	sl, #0
 80180f6:	d024      	beq.n	8018142 <__multiply+0xf2>
 80180f8:	f104 0e14 	add.w	lr, r4, #20
 80180fc:	46a9      	mov	r9, r5
 80180fe:	f04f 0c00 	mov.w	ip, #0
 8018102:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018106:	f8d9 1000 	ldr.w	r1, [r9]
 801810a:	fa1f fb82 	uxth.w	fp, r2
 801810e:	b289      	uxth	r1, r1
 8018110:	fb0a 110b 	mla	r1, sl, fp, r1
 8018114:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018118:	f8d9 2000 	ldr.w	r2, [r9]
 801811c:	4461      	add	r1, ip
 801811e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018122:	fb0a c20b 	mla	r2, sl, fp, ip
 8018126:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801812a:	b289      	uxth	r1, r1
 801812c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018130:	4577      	cmp	r7, lr
 8018132:	f849 1b04 	str.w	r1, [r9], #4
 8018136:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801813a:	d8e2      	bhi.n	8018102 <__multiply+0xb2>
 801813c:	9a01      	ldr	r2, [sp, #4]
 801813e:	f845 c002 	str.w	ip, [r5, r2]
 8018142:	9a03      	ldr	r2, [sp, #12]
 8018144:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018148:	3304      	adds	r3, #4
 801814a:	f1b9 0f00 	cmp.w	r9, #0
 801814e:	d020      	beq.n	8018192 <__multiply+0x142>
 8018150:	6829      	ldr	r1, [r5, #0]
 8018152:	f104 0c14 	add.w	ip, r4, #20
 8018156:	46ae      	mov	lr, r5
 8018158:	f04f 0a00 	mov.w	sl, #0
 801815c:	f8bc b000 	ldrh.w	fp, [ip]
 8018160:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018164:	fb09 220b 	mla	r2, r9, fp, r2
 8018168:	4492      	add	sl, r2
 801816a:	b289      	uxth	r1, r1
 801816c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018170:	f84e 1b04 	str.w	r1, [lr], #4
 8018174:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018178:	f8be 1000 	ldrh.w	r1, [lr]
 801817c:	0c12      	lsrs	r2, r2, #16
 801817e:	fb09 1102 	mla	r1, r9, r2, r1
 8018182:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8018186:	4567      	cmp	r7, ip
 8018188:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801818c:	d8e6      	bhi.n	801815c <__multiply+0x10c>
 801818e:	9a01      	ldr	r2, [sp, #4]
 8018190:	50a9      	str	r1, [r5, r2]
 8018192:	3504      	adds	r5, #4
 8018194:	e79a      	b.n	80180cc <__multiply+0x7c>
 8018196:	3e01      	subs	r6, #1
 8018198:	e79c      	b.n	80180d4 <__multiply+0x84>
 801819a:	bf00      	nop
 801819c:	08019a30 	.word	0x08019a30
 80181a0:	08019a4b 	.word	0x08019a4b

080181a4 <__pow5mult>:
 80181a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181a8:	4615      	mov	r5, r2
 80181aa:	f012 0203 	ands.w	r2, r2, #3
 80181ae:	4606      	mov	r6, r0
 80181b0:	460f      	mov	r7, r1
 80181b2:	d007      	beq.n	80181c4 <__pow5mult+0x20>
 80181b4:	4c25      	ldr	r4, [pc, #148]	; (801824c <__pow5mult+0xa8>)
 80181b6:	3a01      	subs	r2, #1
 80181b8:	2300      	movs	r3, #0
 80181ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80181be:	f7ff fe9b 	bl	8017ef8 <__multadd>
 80181c2:	4607      	mov	r7, r0
 80181c4:	10ad      	asrs	r5, r5, #2
 80181c6:	d03d      	beq.n	8018244 <__pow5mult+0xa0>
 80181c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80181ca:	b97c      	cbnz	r4, 80181ec <__pow5mult+0x48>
 80181cc:	2010      	movs	r0, #16
 80181ce:	f7fd fea5 	bl	8015f1c <malloc>
 80181d2:	4602      	mov	r2, r0
 80181d4:	6270      	str	r0, [r6, #36]	; 0x24
 80181d6:	b928      	cbnz	r0, 80181e4 <__pow5mult+0x40>
 80181d8:	4b1d      	ldr	r3, [pc, #116]	; (8018250 <__pow5mult+0xac>)
 80181da:	481e      	ldr	r0, [pc, #120]	; (8018254 <__pow5mult+0xb0>)
 80181dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80181e0:	f000 fb3c 	bl	801885c <__assert_func>
 80181e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80181e8:	6004      	str	r4, [r0, #0]
 80181ea:	60c4      	str	r4, [r0, #12]
 80181ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80181f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80181f4:	b94c      	cbnz	r4, 801820a <__pow5mult+0x66>
 80181f6:	f240 2171 	movw	r1, #625	; 0x271
 80181fa:	4630      	mov	r0, r6
 80181fc:	f7ff ff12 	bl	8018024 <__i2b>
 8018200:	2300      	movs	r3, #0
 8018202:	f8c8 0008 	str.w	r0, [r8, #8]
 8018206:	4604      	mov	r4, r0
 8018208:	6003      	str	r3, [r0, #0]
 801820a:	f04f 0900 	mov.w	r9, #0
 801820e:	07eb      	lsls	r3, r5, #31
 8018210:	d50a      	bpl.n	8018228 <__pow5mult+0x84>
 8018212:	4639      	mov	r1, r7
 8018214:	4622      	mov	r2, r4
 8018216:	4630      	mov	r0, r6
 8018218:	f7ff ff1a 	bl	8018050 <__multiply>
 801821c:	4639      	mov	r1, r7
 801821e:	4680      	mov	r8, r0
 8018220:	4630      	mov	r0, r6
 8018222:	f7ff fe47 	bl	8017eb4 <_Bfree>
 8018226:	4647      	mov	r7, r8
 8018228:	106d      	asrs	r5, r5, #1
 801822a:	d00b      	beq.n	8018244 <__pow5mult+0xa0>
 801822c:	6820      	ldr	r0, [r4, #0]
 801822e:	b938      	cbnz	r0, 8018240 <__pow5mult+0x9c>
 8018230:	4622      	mov	r2, r4
 8018232:	4621      	mov	r1, r4
 8018234:	4630      	mov	r0, r6
 8018236:	f7ff ff0b 	bl	8018050 <__multiply>
 801823a:	6020      	str	r0, [r4, #0]
 801823c:	f8c0 9000 	str.w	r9, [r0]
 8018240:	4604      	mov	r4, r0
 8018242:	e7e4      	b.n	801820e <__pow5mult+0x6a>
 8018244:	4638      	mov	r0, r7
 8018246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801824a:	bf00      	nop
 801824c:	08019b98 	.word	0x08019b98
 8018250:	080199be 	.word	0x080199be
 8018254:	08019a4b 	.word	0x08019a4b

08018258 <__lshift>:
 8018258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801825c:	460c      	mov	r4, r1
 801825e:	6849      	ldr	r1, [r1, #4]
 8018260:	6923      	ldr	r3, [r4, #16]
 8018262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018266:	68a3      	ldr	r3, [r4, #8]
 8018268:	4607      	mov	r7, r0
 801826a:	4691      	mov	r9, r2
 801826c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018270:	f108 0601 	add.w	r6, r8, #1
 8018274:	42b3      	cmp	r3, r6
 8018276:	db0b      	blt.n	8018290 <__lshift+0x38>
 8018278:	4638      	mov	r0, r7
 801827a:	f7ff fddb 	bl	8017e34 <_Balloc>
 801827e:	4605      	mov	r5, r0
 8018280:	b948      	cbnz	r0, 8018296 <__lshift+0x3e>
 8018282:	4602      	mov	r2, r0
 8018284:	4b2a      	ldr	r3, [pc, #168]	; (8018330 <__lshift+0xd8>)
 8018286:	482b      	ldr	r0, [pc, #172]	; (8018334 <__lshift+0xdc>)
 8018288:	f240 11d9 	movw	r1, #473	; 0x1d9
 801828c:	f000 fae6 	bl	801885c <__assert_func>
 8018290:	3101      	adds	r1, #1
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	e7ee      	b.n	8018274 <__lshift+0x1c>
 8018296:	2300      	movs	r3, #0
 8018298:	f100 0114 	add.w	r1, r0, #20
 801829c:	f100 0210 	add.w	r2, r0, #16
 80182a0:	4618      	mov	r0, r3
 80182a2:	4553      	cmp	r3, sl
 80182a4:	db37      	blt.n	8018316 <__lshift+0xbe>
 80182a6:	6920      	ldr	r0, [r4, #16]
 80182a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80182ac:	f104 0314 	add.w	r3, r4, #20
 80182b0:	f019 091f 	ands.w	r9, r9, #31
 80182b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80182b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80182bc:	d02f      	beq.n	801831e <__lshift+0xc6>
 80182be:	f1c9 0e20 	rsb	lr, r9, #32
 80182c2:	468a      	mov	sl, r1
 80182c4:	f04f 0c00 	mov.w	ip, #0
 80182c8:	681a      	ldr	r2, [r3, #0]
 80182ca:	fa02 f209 	lsl.w	r2, r2, r9
 80182ce:	ea42 020c 	orr.w	r2, r2, ip
 80182d2:	f84a 2b04 	str.w	r2, [sl], #4
 80182d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80182da:	4298      	cmp	r0, r3
 80182dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80182e0:	d8f2      	bhi.n	80182c8 <__lshift+0x70>
 80182e2:	1b03      	subs	r3, r0, r4
 80182e4:	3b15      	subs	r3, #21
 80182e6:	f023 0303 	bic.w	r3, r3, #3
 80182ea:	3304      	adds	r3, #4
 80182ec:	f104 0215 	add.w	r2, r4, #21
 80182f0:	4290      	cmp	r0, r2
 80182f2:	bf38      	it	cc
 80182f4:	2304      	movcc	r3, #4
 80182f6:	f841 c003 	str.w	ip, [r1, r3]
 80182fa:	f1bc 0f00 	cmp.w	ip, #0
 80182fe:	d001      	beq.n	8018304 <__lshift+0xac>
 8018300:	f108 0602 	add.w	r6, r8, #2
 8018304:	3e01      	subs	r6, #1
 8018306:	4638      	mov	r0, r7
 8018308:	612e      	str	r6, [r5, #16]
 801830a:	4621      	mov	r1, r4
 801830c:	f7ff fdd2 	bl	8017eb4 <_Bfree>
 8018310:	4628      	mov	r0, r5
 8018312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018316:	f842 0f04 	str.w	r0, [r2, #4]!
 801831a:	3301      	adds	r3, #1
 801831c:	e7c1      	b.n	80182a2 <__lshift+0x4a>
 801831e:	3904      	subs	r1, #4
 8018320:	f853 2b04 	ldr.w	r2, [r3], #4
 8018324:	f841 2f04 	str.w	r2, [r1, #4]!
 8018328:	4298      	cmp	r0, r3
 801832a:	d8f9      	bhi.n	8018320 <__lshift+0xc8>
 801832c:	e7ea      	b.n	8018304 <__lshift+0xac>
 801832e:	bf00      	nop
 8018330:	08019a30 	.word	0x08019a30
 8018334:	08019a4b 	.word	0x08019a4b

08018338 <__mcmp>:
 8018338:	b530      	push	{r4, r5, lr}
 801833a:	6902      	ldr	r2, [r0, #16]
 801833c:	690c      	ldr	r4, [r1, #16]
 801833e:	1b12      	subs	r2, r2, r4
 8018340:	d10e      	bne.n	8018360 <__mcmp+0x28>
 8018342:	f100 0314 	add.w	r3, r0, #20
 8018346:	3114      	adds	r1, #20
 8018348:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801834c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018350:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018354:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018358:	42a5      	cmp	r5, r4
 801835a:	d003      	beq.n	8018364 <__mcmp+0x2c>
 801835c:	d305      	bcc.n	801836a <__mcmp+0x32>
 801835e:	2201      	movs	r2, #1
 8018360:	4610      	mov	r0, r2
 8018362:	bd30      	pop	{r4, r5, pc}
 8018364:	4283      	cmp	r3, r0
 8018366:	d3f3      	bcc.n	8018350 <__mcmp+0x18>
 8018368:	e7fa      	b.n	8018360 <__mcmp+0x28>
 801836a:	f04f 32ff 	mov.w	r2, #4294967295
 801836e:	e7f7      	b.n	8018360 <__mcmp+0x28>

08018370 <__mdiff>:
 8018370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018374:	460c      	mov	r4, r1
 8018376:	4606      	mov	r6, r0
 8018378:	4611      	mov	r1, r2
 801837a:	4620      	mov	r0, r4
 801837c:	4690      	mov	r8, r2
 801837e:	f7ff ffdb 	bl	8018338 <__mcmp>
 8018382:	1e05      	subs	r5, r0, #0
 8018384:	d110      	bne.n	80183a8 <__mdiff+0x38>
 8018386:	4629      	mov	r1, r5
 8018388:	4630      	mov	r0, r6
 801838a:	f7ff fd53 	bl	8017e34 <_Balloc>
 801838e:	b930      	cbnz	r0, 801839e <__mdiff+0x2e>
 8018390:	4b3a      	ldr	r3, [pc, #232]	; (801847c <__mdiff+0x10c>)
 8018392:	4602      	mov	r2, r0
 8018394:	f240 2132 	movw	r1, #562	; 0x232
 8018398:	4839      	ldr	r0, [pc, #228]	; (8018480 <__mdiff+0x110>)
 801839a:	f000 fa5f 	bl	801885c <__assert_func>
 801839e:	2301      	movs	r3, #1
 80183a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80183a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183a8:	bfa4      	itt	ge
 80183aa:	4643      	movge	r3, r8
 80183ac:	46a0      	movge	r8, r4
 80183ae:	4630      	mov	r0, r6
 80183b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80183b4:	bfa6      	itte	ge
 80183b6:	461c      	movge	r4, r3
 80183b8:	2500      	movge	r5, #0
 80183ba:	2501      	movlt	r5, #1
 80183bc:	f7ff fd3a 	bl	8017e34 <_Balloc>
 80183c0:	b920      	cbnz	r0, 80183cc <__mdiff+0x5c>
 80183c2:	4b2e      	ldr	r3, [pc, #184]	; (801847c <__mdiff+0x10c>)
 80183c4:	4602      	mov	r2, r0
 80183c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80183ca:	e7e5      	b.n	8018398 <__mdiff+0x28>
 80183cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80183d0:	6926      	ldr	r6, [r4, #16]
 80183d2:	60c5      	str	r5, [r0, #12]
 80183d4:	f104 0914 	add.w	r9, r4, #20
 80183d8:	f108 0514 	add.w	r5, r8, #20
 80183dc:	f100 0e14 	add.w	lr, r0, #20
 80183e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80183e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80183e8:	f108 0210 	add.w	r2, r8, #16
 80183ec:	46f2      	mov	sl, lr
 80183ee:	2100      	movs	r1, #0
 80183f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80183f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80183f8:	fa1f f883 	uxth.w	r8, r3
 80183fc:	fa11 f18b 	uxtah	r1, r1, fp
 8018400:	0c1b      	lsrs	r3, r3, #16
 8018402:	eba1 0808 	sub.w	r8, r1, r8
 8018406:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801840a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801840e:	fa1f f888 	uxth.w	r8, r8
 8018412:	1419      	asrs	r1, r3, #16
 8018414:	454e      	cmp	r6, r9
 8018416:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801841a:	f84a 3b04 	str.w	r3, [sl], #4
 801841e:	d8e7      	bhi.n	80183f0 <__mdiff+0x80>
 8018420:	1b33      	subs	r3, r6, r4
 8018422:	3b15      	subs	r3, #21
 8018424:	f023 0303 	bic.w	r3, r3, #3
 8018428:	3304      	adds	r3, #4
 801842a:	3415      	adds	r4, #21
 801842c:	42a6      	cmp	r6, r4
 801842e:	bf38      	it	cc
 8018430:	2304      	movcc	r3, #4
 8018432:	441d      	add	r5, r3
 8018434:	4473      	add	r3, lr
 8018436:	469e      	mov	lr, r3
 8018438:	462e      	mov	r6, r5
 801843a:	4566      	cmp	r6, ip
 801843c:	d30e      	bcc.n	801845c <__mdiff+0xec>
 801843e:	f10c 0203 	add.w	r2, ip, #3
 8018442:	1b52      	subs	r2, r2, r5
 8018444:	f022 0203 	bic.w	r2, r2, #3
 8018448:	3d03      	subs	r5, #3
 801844a:	45ac      	cmp	ip, r5
 801844c:	bf38      	it	cc
 801844e:	2200      	movcc	r2, #0
 8018450:	441a      	add	r2, r3
 8018452:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8018456:	b17b      	cbz	r3, 8018478 <__mdiff+0x108>
 8018458:	6107      	str	r7, [r0, #16]
 801845a:	e7a3      	b.n	80183a4 <__mdiff+0x34>
 801845c:	f856 8b04 	ldr.w	r8, [r6], #4
 8018460:	fa11 f288 	uxtah	r2, r1, r8
 8018464:	1414      	asrs	r4, r2, #16
 8018466:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801846a:	b292      	uxth	r2, r2
 801846c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018470:	f84e 2b04 	str.w	r2, [lr], #4
 8018474:	1421      	asrs	r1, r4, #16
 8018476:	e7e0      	b.n	801843a <__mdiff+0xca>
 8018478:	3f01      	subs	r7, #1
 801847a:	e7ea      	b.n	8018452 <__mdiff+0xe2>
 801847c:	08019a30 	.word	0x08019a30
 8018480:	08019a4b 	.word	0x08019a4b

08018484 <__d2b>:
 8018484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018488:	4689      	mov	r9, r1
 801848a:	2101      	movs	r1, #1
 801848c:	ec57 6b10 	vmov	r6, r7, d0
 8018490:	4690      	mov	r8, r2
 8018492:	f7ff fccf 	bl	8017e34 <_Balloc>
 8018496:	4604      	mov	r4, r0
 8018498:	b930      	cbnz	r0, 80184a8 <__d2b+0x24>
 801849a:	4602      	mov	r2, r0
 801849c:	4b25      	ldr	r3, [pc, #148]	; (8018534 <__d2b+0xb0>)
 801849e:	4826      	ldr	r0, [pc, #152]	; (8018538 <__d2b+0xb4>)
 80184a0:	f240 310a 	movw	r1, #778	; 0x30a
 80184a4:	f000 f9da 	bl	801885c <__assert_func>
 80184a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80184ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80184b0:	bb35      	cbnz	r5, 8018500 <__d2b+0x7c>
 80184b2:	2e00      	cmp	r6, #0
 80184b4:	9301      	str	r3, [sp, #4]
 80184b6:	d028      	beq.n	801850a <__d2b+0x86>
 80184b8:	4668      	mov	r0, sp
 80184ba:	9600      	str	r6, [sp, #0]
 80184bc:	f7ff fd82 	bl	8017fc4 <__lo0bits>
 80184c0:	9900      	ldr	r1, [sp, #0]
 80184c2:	b300      	cbz	r0, 8018506 <__d2b+0x82>
 80184c4:	9a01      	ldr	r2, [sp, #4]
 80184c6:	f1c0 0320 	rsb	r3, r0, #32
 80184ca:	fa02 f303 	lsl.w	r3, r2, r3
 80184ce:	430b      	orrs	r3, r1
 80184d0:	40c2      	lsrs	r2, r0
 80184d2:	6163      	str	r3, [r4, #20]
 80184d4:	9201      	str	r2, [sp, #4]
 80184d6:	9b01      	ldr	r3, [sp, #4]
 80184d8:	61a3      	str	r3, [r4, #24]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	bf14      	ite	ne
 80184de:	2202      	movne	r2, #2
 80184e0:	2201      	moveq	r2, #1
 80184e2:	6122      	str	r2, [r4, #16]
 80184e4:	b1d5      	cbz	r5, 801851c <__d2b+0x98>
 80184e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80184ea:	4405      	add	r5, r0
 80184ec:	f8c9 5000 	str.w	r5, [r9]
 80184f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80184f4:	f8c8 0000 	str.w	r0, [r8]
 80184f8:	4620      	mov	r0, r4
 80184fa:	b003      	add	sp, #12
 80184fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018504:	e7d5      	b.n	80184b2 <__d2b+0x2e>
 8018506:	6161      	str	r1, [r4, #20]
 8018508:	e7e5      	b.n	80184d6 <__d2b+0x52>
 801850a:	a801      	add	r0, sp, #4
 801850c:	f7ff fd5a 	bl	8017fc4 <__lo0bits>
 8018510:	9b01      	ldr	r3, [sp, #4]
 8018512:	6163      	str	r3, [r4, #20]
 8018514:	2201      	movs	r2, #1
 8018516:	6122      	str	r2, [r4, #16]
 8018518:	3020      	adds	r0, #32
 801851a:	e7e3      	b.n	80184e4 <__d2b+0x60>
 801851c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018520:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018524:	f8c9 0000 	str.w	r0, [r9]
 8018528:	6918      	ldr	r0, [r3, #16]
 801852a:	f7ff fd2b 	bl	8017f84 <__hi0bits>
 801852e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018532:	e7df      	b.n	80184f4 <__d2b+0x70>
 8018534:	08019a30 	.word	0x08019a30
 8018538:	08019a4b 	.word	0x08019a4b

0801853c <_calloc_r>:
 801853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801853e:	fba1 2402 	umull	r2, r4, r1, r2
 8018542:	b94c      	cbnz	r4, 8018558 <_calloc_r+0x1c>
 8018544:	4611      	mov	r1, r2
 8018546:	9201      	str	r2, [sp, #4]
 8018548:	f7fd fd72 	bl	8016030 <_malloc_r>
 801854c:	9a01      	ldr	r2, [sp, #4]
 801854e:	4605      	mov	r5, r0
 8018550:	b930      	cbnz	r0, 8018560 <_calloc_r+0x24>
 8018552:	4628      	mov	r0, r5
 8018554:	b003      	add	sp, #12
 8018556:	bd30      	pop	{r4, r5, pc}
 8018558:	220c      	movs	r2, #12
 801855a:	6002      	str	r2, [r0, #0]
 801855c:	2500      	movs	r5, #0
 801855e:	e7f8      	b.n	8018552 <_calloc_r+0x16>
 8018560:	4621      	mov	r1, r4
 8018562:	f7fd fcf1 	bl	8015f48 <memset>
 8018566:	e7f4      	b.n	8018552 <_calloc_r+0x16>

08018568 <__sfputc_r>:
 8018568:	6893      	ldr	r3, [r2, #8]
 801856a:	3b01      	subs	r3, #1
 801856c:	2b00      	cmp	r3, #0
 801856e:	b410      	push	{r4}
 8018570:	6093      	str	r3, [r2, #8]
 8018572:	da08      	bge.n	8018586 <__sfputc_r+0x1e>
 8018574:	6994      	ldr	r4, [r2, #24]
 8018576:	42a3      	cmp	r3, r4
 8018578:	db01      	blt.n	801857e <__sfputc_r+0x16>
 801857a:	290a      	cmp	r1, #10
 801857c:	d103      	bne.n	8018586 <__sfputc_r+0x1e>
 801857e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018582:	f7fe bb9f 	b.w	8016cc4 <__swbuf_r>
 8018586:	6813      	ldr	r3, [r2, #0]
 8018588:	1c58      	adds	r0, r3, #1
 801858a:	6010      	str	r0, [r2, #0]
 801858c:	7019      	strb	r1, [r3, #0]
 801858e:	4608      	mov	r0, r1
 8018590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018594:	4770      	bx	lr

08018596 <__sfputs_r>:
 8018596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018598:	4606      	mov	r6, r0
 801859a:	460f      	mov	r7, r1
 801859c:	4614      	mov	r4, r2
 801859e:	18d5      	adds	r5, r2, r3
 80185a0:	42ac      	cmp	r4, r5
 80185a2:	d101      	bne.n	80185a8 <__sfputs_r+0x12>
 80185a4:	2000      	movs	r0, #0
 80185a6:	e007      	b.n	80185b8 <__sfputs_r+0x22>
 80185a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185ac:	463a      	mov	r2, r7
 80185ae:	4630      	mov	r0, r6
 80185b0:	f7ff ffda 	bl	8018568 <__sfputc_r>
 80185b4:	1c43      	adds	r3, r0, #1
 80185b6:	d1f3      	bne.n	80185a0 <__sfputs_r+0xa>
 80185b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080185bc <_vfiprintf_r>:
 80185bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185c0:	460d      	mov	r5, r1
 80185c2:	b09d      	sub	sp, #116	; 0x74
 80185c4:	4614      	mov	r4, r2
 80185c6:	4698      	mov	r8, r3
 80185c8:	4606      	mov	r6, r0
 80185ca:	b118      	cbz	r0, 80185d4 <_vfiprintf_r+0x18>
 80185cc:	6983      	ldr	r3, [r0, #24]
 80185ce:	b90b      	cbnz	r3, 80185d4 <_vfiprintf_r+0x18>
 80185d0:	f7fd fbe2 	bl	8015d98 <__sinit>
 80185d4:	4b89      	ldr	r3, [pc, #548]	; (80187fc <_vfiprintf_r+0x240>)
 80185d6:	429d      	cmp	r5, r3
 80185d8:	d11b      	bne.n	8018612 <_vfiprintf_r+0x56>
 80185da:	6875      	ldr	r5, [r6, #4]
 80185dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185de:	07d9      	lsls	r1, r3, #31
 80185e0:	d405      	bmi.n	80185ee <_vfiprintf_r+0x32>
 80185e2:	89ab      	ldrh	r3, [r5, #12]
 80185e4:	059a      	lsls	r2, r3, #22
 80185e6:	d402      	bmi.n	80185ee <_vfiprintf_r+0x32>
 80185e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185ea:	f7ec ff43 	bl	8005474 <__retarget_lock_acquire_recursive>
 80185ee:	89ab      	ldrh	r3, [r5, #12]
 80185f0:	071b      	lsls	r3, r3, #28
 80185f2:	d501      	bpl.n	80185f8 <_vfiprintf_r+0x3c>
 80185f4:	692b      	ldr	r3, [r5, #16]
 80185f6:	b9eb      	cbnz	r3, 8018634 <_vfiprintf_r+0x78>
 80185f8:	4629      	mov	r1, r5
 80185fa:	4630      	mov	r0, r6
 80185fc:	f7fe fbc6 	bl	8016d8c <__swsetup_r>
 8018600:	b1c0      	cbz	r0, 8018634 <_vfiprintf_r+0x78>
 8018602:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018604:	07dc      	lsls	r4, r3, #31
 8018606:	d50e      	bpl.n	8018626 <_vfiprintf_r+0x6a>
 8018608:	f04f 30ff 	mov.w	r0, #4294967295
 801860c:	b01d      	add	sp, #116	; 0x74
 801860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018612:	4b7b      	ldr	r3, [pc, #492]	; (8018800 <_vfiprintf_r+0x244>)
 8018614:	429d      	cmp	r5, r3
 8018616:	d101      	bne.n	801861c <_vfiprintf_r+0x60>
 8018618:	68b5      	ldr	r5, [r6, #8]
 801861a:	e7df      	b.n	80185dc <_vfiprintf_r+0x20>
 801861c:	4b79      	ldr	r3, [pc, #484]	; (8018804 <_vfiprintf_r+0x248>)
 801861e:	429d      	cmp	r5, r3
 8018620:	bf08      	it	eq
 8018622:	68f5      	ldreq	r5, [r6, #12]
 8018624:	e7da      	b.n	80185dc <_vfiprintf_r+0x20>
 8018626:	89ab      	ldrh	r3, [r5, #12]
 8018628:	0598      	lsls	r0, r3, #22
 801862a:	d4ed      	bmi.n	8018608 <_vfiprintf_r+0x4c>
 801862c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801862e:	f7ec ff35 	bl	800549c <__retarget_lock_release_recursive>
 8018632:	e7e9      	b.n	8018608 <_vfiprintf_r+0x4c>
 8018634:	2300      	movs	r3, #0
 8018636:	9309      	str	r3, [sp, #36]	; 0x24
 8018638:	2320      	movs	r3, #32
 801863a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801863e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018642:	2330      	movs	r3, #48	; 0x30
 8018644:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018808 <_vfiprintf_r+0x24c>
 8018648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801864c:	f04f 0901 	mov.w	r9, #1
 8018650:	4623      	mov	r3, r4
 8018652:	469a      	mov	sl, r3
 8018654:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018658:	b10a      	cbz	r2, 801865e <_vfiprintf_r+0xa2>
 801865a:	2a25      	cmp	r2, #37	; 0x25
 801865c:	d1f9      	bne.n	8018652 <_vfiprintf_r+0x96>
 801865e:	ebba 0b04 	subs.w	fp, sl, r4
 8018662:	d00b      	beq.n	801867c <_vfiprintf_r+0xc0>
 8018664:	465b      	mov	r3, fp
 8018666:	4622      	mov	r2, r4
 8018668:	4629      	mov	r1, r5
 801866a:	4630      	mov	r0, r6
 801866c:	f7ff ff93 	bl	8018596 <__sfputs_r>
 8018670:	3001      	adds	r0, #1
 8018672:	f000 80aa 	beq.w	80187ca <_vfiprintf_r+0x20e>
 8018676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018678:	445a      	add	r2, fp
 801867a:	9209      	str	r2, [sp, #36]	; 0x24
 801867c:	f89a 3000 	ldrb.w	r3, [sl]
 8018680:	2b00      	cmp	r3, #0
 8018682:	f000 80a2 	beq.w	80187ca <_vfiprintf_r+0x20e>
 8018686:	2300      	movs	r3, #0
 8018688:	f04f 32ff 	mov.w	r2, #4294967295
 801868c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018690:	f10a 0a01 	add.w	sl, sl, #1
 8018694:	9304      	str	r3, [sp, #16]
 8018696:	9307      	str	r3, [sp, #28]
 8018698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801869c:	931a      	str	r3, [sp, #104]	; 0x68
 801869e:	4654      	mov	r4, sl
 80186a0:	2205      	movs	r2, #5
 80186a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186a6:	4858      	ldr	r0, [pc, #352]	; (8018808 <_vfiprintf_r+0x24c>)
 80186a8:	f7e7 fdba 	bl	8000220 <memchr>
 80186ac:	9a04      	ldr	r2, [sp, #16]
 80186ae:	b9d8      	cbnz	r0, 80186e8 <_vfiprintf_r+0x12c>
 80186b0:	06d1      	lsls	r1, r2, #27
 80186b2:	bf44      	itt	mi
 80186b4:	2320      	movmi	r3, #32
 80186b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186ba:	0713      	lsls	r3, r2, #28
 80186bc:	bf44      	itt	mi
 80186be:	232b      	movmi	r3, #43	; 0x2b
 80186c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186c4:	f89a 3000 	ldrb.w	r3, [sl]
 80186c8:	2b2a      	cmp	r3, #42	; 0x2a
 80186ca:	d015      	beq.n	80186f8 <_vfiprintf_r+0x13c>
 80186cc:	9a07      	ldr	r2, [sp, #28]
 80186ce:	4654      	mov	r4, sl
 80186d0:	2000      	movs	r0, #0
 80186d2:	f04f 0c0a 	mov.w	ip, #10
 80186d6:	4621      	mov	r1, r4
 80186d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186dc:	3b30      	subs	r3, #48	; 0x30
 80186de:	2b09      	cmp	r3, #9
 80186e0:	d94e      	bls.n	8018780 <_vfiprintf_r+0x1c4>
 80186e2:	b1b0      	cbz	r0, 8018712 <_vfiprintf_r+0x156>
 80186e4:	9207      	str	r2, [sp, #28]
 80186e6:	e014      	b.n	8018712 <_vfiprintf_r+0x156>
 80186e8:	eba0 0308 	sub.w	r3, r0, r8
 80186ec:	fa09 f303 	lsl.w	r3, r9, r3
 80186f0:	4313      	orrs	r3, r2
 80186f2:	9304      	str	r3, [sp, #16]
 80186f4:	46a2      	mov	sl, r4
 80186f6:	e7d2      	b.n	801869e <_vfiprintf_r+0xe2>
 80186f8:	9b03      	ldr	r3, [sp, #12]
 80186fa:	1d19      	adds	r1, r3, #4
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	9103      	str	r1, [sp, #12]
 8018700:	2b00      	cmp	r3, #0
 8018702:	bfbb      	ittet	lt
 8018704:	425b      	neglt	r3, r3
 8018706:	f042 0202 	orrlt.w	r2, r2, #2
 801870a:	9307      	strge	r3, [sp, #28]
 801870c:	9307      	strlt	r3, [sp, #28]
 801870e:	bfb8      	it	lt
 8018710:	9204      	strlt	r2, [sp, #16]
 8018712:	7823      	ldrb	r3, [r4, #0]
 8018714:	2b2e      	cmp	r3, #46	; 0x2e
 8018716:	d10c      	bne.n	8018732 <_vfiprintf_r+0x176>
 8018718:	7863      	ldrb	r3, [r4, #1]
 801871a:	2b2a      	cmp	r3, #42	; 0x2a
 801871c:	d135      	bne.n	801878a <_vfiprintf_r+0x1ce>
 801871e:	9b03      	ldr	r3, [sp, #12]
 8018720:	1d1a      	adds	r2, r3, #4
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	9203      	str	r2, [sp, #12]
 8018726:	2b00      	cmp	r3, #0
 8018728:	bfb8      	it	lt
 801872a:	f04f 33ff 	movlt.w	r3, #4294967295
 801872e:	3402      	adds	r4, #2
 8018730:	9305      	str	r3, [sp, #20]
 8018732:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018818 <_vfiprintf_r+0x25c>
 8018736:	7821      	ldrb	r1, [r4, #0]
 8018738:	2203      	movs	r2, #3
 801873a:	4650      	mov	r0, sl
 801873c:	f7e7 fd70 	bl	8000220 <memchr>
 8018740:	b140      	cbz	r0, 8018754 <_vfiprintf_r+0x198>
 8018742:	2340      	movs	r3, #64	; 0x40
 8018744:	eba0 000a 	sub.w	r0, r0, sl
 8018748:	fa03 f000 	lsl.w	r0, r3, r0
 801874c:	9b04      	ldr	r3, [sp, #16]
 801874e:	4303      	orrs	r3, r0
 8018750:	3401      	adds	r4, #1
 8018752:	9304      	str	r3, [sp, #16]
 8018754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018758:	482c      	ldr	r0, [pc, #176]	; (801880c <_vfiprintf_r+0x250>)
 801875a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801875e:	2206      	movs	r2, #6
 8018760:	f7e7 fd5e 	bl	8000220 <memchr>
 8018764:	2800      	cmp	r0, #0
 8018766:	d03f      	beq.n	80187e8 <_vfiprintf_r+0x22c>
 8018768:	4b29      	ldr	r3, [pc, #164]	; (8018810 <_vfiprintf_r+0x254>)
 801876a:	bb1b      	cbnz	r3, 80187b4 <_vfiprintf_r+0x1f8>
 801876c:	9b03      	ldr	r3, [sp, #12]
 801876e:	3307      	adds	r3, #7
 8018770:	f023 0307 	bic.w	r3, r3, #7
 8018774:	3308      	adds	r3, #8
 8018776:	9303      	str	r3, [sp, #12]
 8018778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801877a:	443b      	add	r3, r7
 801877c:	9309      	str	r3, [sp, #36]	; 0x24
 801877e:	e767      	b.n	8018650 <_vfiprintf_r+0x94>
 8018780:	fb0c 3202 	mla	r2, ip, r2, r3
 8018784:	460c      	mov	r4, r1
 8018786:	2001      	movs	r0, #1
 8018788:	e7a5      	b.n	80186d6 <_vfiprintf_r+0x11a>
 801878a:	2300      	movs	r3, #0
 801878c:	3401      	adds	r4, #1
 801878e:	9305      	str	r3, [sp, #20]
 8018790:	4619      	mov	r1, r3
 8018792:	f04f 0c0a 	mov.w	ip, #10
 8018796:	4620      	mov	r0, r4
 8018798:	f810 2b01 	ldrb.w	r2, [r0], #1
 801879c:	3a30      	subs	r2, #48	; 0x30
 801879e:	2a09      	cmp	r2, #9
 80187a0:	d903      	bls.n	80187aa <_vfiprintf_r+0x1ee>
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d0c5      	beq.n	8018732 <_vfiprintf_r+0x176>
 80187a6:	9105      	str	r1, [sp, #20]
 80187a8:	e7c3      	b.n	8018732 <_vfiprintf_r+0x176>
 80187aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80187ae:	4604      	mov	r4, r0
 80187b0:	2301      	movs	r3, #1
 80187b2:	e7f0      	b.n	8018796 <_vfiprintf_r+0x1da>
 80187b4:	ab03      	add	r3, sp, #12
 80187b6:	9300      	str	r3, [sp, #0]
 80187b8:	462a      	mov	r2, r5
 80187ba:	4b16      	ldr	r3, [pc, #88]	; (8018814 <_vfiprintf_r+0x258>)
 80187bc:	a904      	add	r1, sp, #16
 80187be:	4630      	mov	r0, r6
 80187c0:	f7fd fd4a 	bl	8016258 <_printf_float>
 80187c4:	4607      	mov	r7, r0
 80187c6:	1c78      	adds	r0, r7, #1
 80187c8:	d1d6      	bne.n	8018778 <_vfiprintf_r+0x1bc>
 80187ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187cc:	07d9      	lsls	r1, r3, #31
 80187ce:	d405      	bmi.n	80187dc <_vfiprintf_r+0x220>
 80187d0:	89ab      	ldrh	r3, [r5, #12]
 80187d2:	059a      	lsls	r2, r3, #22
 80187d4:	d402      	bmi.n	80187dc <_vfiprintf_r+0x220>
 80187d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187d8:	f7ec fe60 	bl	800549c <__retarget_lock_release_recursive>
 80187dc:	89ab      	ldrh	r3, [r5, #12]
 80187de:	065b      	lsls	r3, r3, #25
 80187e0:	f53f af12 	bmi.w	8018608 <_vfiprintf_r+0x4c>
 80187e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187e6:	e711      	b.n	801860c <_vfiprintf_r+0x50>
 80187e8:	ab03      	add	r3, sp, #12
 80187ea:	9300      	str	r3, [sp, #0]
 80187ec:	462a      	mov	r2, r5
 80187ee:	4b09      	ldr	r3, [pc, #36]	; (8018814 <_vfiprintf_r+0x258>)
 80187f0:	a904      	add	r1, sp, #16
 80187f2:	4630      	mov	r0, r6
 80187f4:	f7fd ffd4 	bl	80167a0 <_printf_i>
 80187f8:	e7e4      	b.n	80187c4 <_vfiprintf_r+0x208>
 80187fa:	bf00      	nop
 80187fc:	08019838 	.word	0x08019838
 8018800:	08019858 	.word	0x08019858
 8018804:	08019818 	.word	0x08019818
 8018808:	08019ba4 	.word	0x08019ba4
 801880c:	08019bae 	.word	0x08019bae
 8018810:	08016259 	.word	0x08016259
 8018814:	08018597 	.word	0x08018597
 8018818:	08019baa 	.word	0x08019baa

0801881c <_read_r>:
 801881c:	b538      	push	{r3, r4, r5, lr}
 801881e:	4d07      	ldr	r5, [pc, #28]	; (801883c <_read_r+0x20>)
 8018820:	4604      	mov	r4, r0
 8018822:	4608      	mov	r0, r1
 8018824:	4611      	mov	r1, r2
 8018826:	2200      	movs	r2, #0
 8018828:	602a      	str	r2, [r5, #0]
 801882a:	461a      	mov	r2, r3
 801882c:	f7ec f96a 	bl	8004b04 <_read>
 8018830:	1c43      	adds	r3, r0, #1
 8018832:	d102      	bne.n	801883a <_read_r+0x1e>
 8018834:	682b      	ldr	r3, [r5, #0]
 8018836:	b103      	cbz	r3, 801883a <_read_r+0x1e>
 8018838:	6023      	str	r3, [r4, #0]
 801883a:	bd38      	pop	{r3, r4, r5, pc}
 801883c:	2000705c 	.word	0x2000705c

08018840 <__ascii_wctomb>:
 8018840:	b149      	cbz	r1, 8018856 <__ascii_wctomb+0x16>
 8018842:	2aff      	cmp	r2, #255	; 0xff
 8018844:	bf85      	ittet	hi
 8018846:	238a      	movhi	r3, #138	; 0x8a
 8018848:	6003      	strhi	r3, [r0, #0]
 801884a:	700a      	strbls	r2, [r1, #0]
 801884c:	f04f 30ff 	movhi.w	r0, #4294967295
 8018850:	bf98      	it	ls
 8018852:	2001      	movls	r0, #1
 8018854:	4770      	bx	lr
 8018856:	4608      	mov	r0, r1
 8018858:	4770      	bx	lr
	...

0801885c <__assert_func>:
 801885c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801885e:	4614      	mov	r4, r2
 8018860:	461a      	mov	r2, r3
 8018862:	4b09      	ldr	r3, [pc, #36]	; (8018888 <__assert_func+0x2c>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	4605      	mov	r5, r0
 8018868:	68d8      	ldr	r0, [r3, #12]
 801886a:	b14c      	cbz	r4, 8018880 <__assert_func+0x24>
 801886c:	4b07      	ldr	r3, [pc, #28]	; (801888c <__assert_func+0x30>)
 801886e:	9100      	str	r1, [sp, #0]
 8018870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018874:	4906      	ldr	r1, [pc, #24]	; (8018890 <__assert_func+0x34>)
 8018876:	462b      	mov	r3, r5
 8018878:	f000 f80e 	bl	8018898 <fiprintf>
 801887c:	f000 f840 	bl	8018900 <abort>
 8018880:	4b04      	ldr	r3, [pc, #16]	; (8018894 <__assert_func+0x38>)
 8018882:	461c      	mov	r4, r3
 8018884:	e7f3      	b.n	801886e <__assert_func+0x12>
 8018886:	bf00      	nop
 8018888:	20000140 	.word	0x20000140
 801888c:	08019bb5 	.word	0x08019bb5
 8018890:	08019bc2 	.word	0x08019bc2
 8018894:	08019bf0 	.word	0x08019bf0

08018898 <fiprintf>:
 8018898:	b40e      	push	{r1, r2, r3}
 801889a:	b503      	push	{r0, r1, lr}
 801889c:	4601      	mov	r1, r0
 801889e:	ab03      	add	r3, sp, #12
 80188a0:	4805      	ldr	r0, [pc, #20]	; (80188b8 <fiprintf+0x20>)
 80188a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80188a6:	6800      	ldr	r0, [r0, #0]
 80188a8:	9301      	str	r3, [sp, #4]
 80188aa:	f7ff fe87 	bl	80185bc <_vfiprintf_r>
 80188ae:	b002      	add	sp, #8
 80188b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80188b4:	b003      	add	sp, #12
 80188b6:	4770      	bx	lr
 80188b8:	20000140 	.word	0x20000140

080188bc <_fstat_r>:
 80188bc:	b538      	push	{r3, r4, r5, lr}
 80188be:	4d07      	ldr	r5, [pc, #28]	; (80188dc <_fstat_r+0x20>)
 80188c0:	2300      	movs	r3, #0
 80188c2:	4604      	mov	r4, r0
 80188c4:	4608      	mov	r0, r1
 80188c6:	4611      	mov	r1, r2
 80188c8:	602b      	str	r3, [r5, #0]
 80188ca:	f7ec f944 	bl	8004b56 <_fstat>
 80188ce:	1c43      	adds	r3, r0, #1
 80188d0:	d102      	bne.n	80188d8 <_fstat_r+0x1c>
 80188d2:	682b      	ldr	r3, [r5, #0]
 80188d4:	b103      	cbz	r3, 80188d8 <_fstat_r+0x1c>
 80188d6:	6023      	str	r3, [r4, #0]
 80188d8:	bd38      	pop	{r3, r4, r5, pc}
 80188da:	bf00      	nop
 80188dc:	2000705c 	.word	0x2000705c

080188e0 <_isatty_r>:
 80188e0:	b538      	push	{r3, r4, r5, lr}
 80188e2:	4d06      	ldr	r5, [pc, #24]	; (80188fc <_isatty_r+0x1c>)
 80188e4:	2300      	movs	r3, #0
 80188e6:	4604      	mov	r4, r0
 80188e8:	4608      	mov	r0, r1
 80188ea:	602b      	str	r3, [r5, #0]
 80188ec:	f7ec f943 	bl	8004b76 <_isatty>
 80188f0:	1c43      	adds	r3, r0, #1
 80188f2:	d102      	bne.n	80188fa <_isatty_r+0x1a>
 80188f4:	682b      	ldr	r3, [r5, #0]
 80188f6:	b103      	cbz	r3, 80188fa <_isatty_r+0x1a>
 80188f8:	6023      	str	r3, [r4, #0]
 80188fa:	bd38      	pop	{r3, r4, r5, pc}
 80188fc:	2000705c 	.word	0x2000705c

08018900 <abort>:
 8018900:	b508      	push	{r3, lr}
 8018902:	2006      	movs	r0, #6
 8018904:	f000 f82c 	bl	8018960 <raise>
 8018908:	2001      	movs	r0, #1
 801890a:	f7ec f8f1 	bl	8004af0 <_exit>

0801890e <_raise_r>:
 801890e:	291f      	cmp	r1, #31
 8018910:	b538      	push	{r3, r4, r5, lr}
 8018912:	4604      	mov	r4, r0
 8018914:	460d      	mov	r5, r1
 8018916:	d904      	bls.n	8018922 <_raise_r+0x14>
 8018918:	2316      	movs	r3, #22
 801891a:	6003      	str	r3, [r0, #0]
 801891c:	f04f 30ff 	mov.w	r0, #4294967295
 8018920:	bd38      	pop	{r3, r4, r5, pc}
 8018922:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018924:	b112      	cbz	r2, 801892c <_raise_r+0x1e>
 8018926:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801892a:	b94b      	cbnz	r3, 8018940 <_raise_r+0x32>
 801892c:	4620      	mov	r0, r4
 801892e:	f000 f831 	bl	8018994 <_getpid_r>
 8018932:	462a      	mov	r2, r5
 8018934:	4601      	mov	r1, r0
 8018936:	4620      	mov	r0, r4
 8018938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801893c:	f000 b818 	b.w	8018970 <_kill_r>
 8018940:	2b01      	cmp	r3, #1
 8018942:	d00a      	beq.n	801895a <_raise_r+0x4c>
 8018944:	1c59      	adds	r1, r3, #1
 8018946:	d103      	bne.n	8018950 <_raise_r+0x42>
 8018948:	2316      	movs	r3, #22
 801894a:	6003      	str	r3, [r0, #0]
 801894c:	2001      	movs	r0, #1
 801894e:	e7e7      	b.n	8018920 <_raise_r+0x12>
 8018950:	2400      	movs	r4, #0
 8018952:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018956:	4628      	mov	r0, r5
 8018958:	4798      	blx	r3
 801895a:	2000      	movs	r0, #0
 801895c:	e7e0      	b.n	8018920 <_raise_r+0x12>
	...

08018960 <raise>:
 8018960:	4b02      	ldr	r3, [pc, #8]	; (801896c <raise+0xc>)
 8018962:	4601      	mov	r1, r0
 8018964:	6818      	ldr	r0, [r3, #0]
 8018966:	f7ff bfd2 	b.w	801890e <_raise_r>
 801896a:	bf00      	nop
 801896c:	20000140 	.word	0x20000140

08018970 <_kill_r>:
 8018970:	b538      	push	{r3, r4, r5, lr}
 8018972:	4d07      	ldr	r5, [pc, #28]	; (8018990 <_kill_r+0x20>)
 8018974:	2300      	movs	r3, #0
 8018976:	4604      	mov	r4, r0
 8018978:	4608      	mov	r0, r1
 801897a:	4611      	mov	r1, r2
 801897c:	602b      	str	r3, [r5, #0]
 801897e:	f7ec f8a7 	bl	8004ad0 <_kill>
 8018982:	1c43      	adds	r3, r0, #1
 8018984:	d102      	bne.n	801898c <_kill_r+0x1c>
 8018986:	682b      	ldr	r3, [r5, #0]
 8018988:	b103      	cbz	r3, 801898c <_kill_r+0x1c>
 801898a:	6023      	str	r3, [r4, #0]
 801898c:	bd38      	pop	{r3, r4, r5, pc}
 801898e:	bf00      	nop
 8018990:	2000705c 	.word	0x2000705c

08018994 <_getpid_r>:
 8018994:	f7ec b894 	b.w	8004ac0 <_getpid>

08018998 <sqrt>:
 8018998:	b538      	push	{r3, r4, r5, lr}
 801899a:	ed2d 8b02 	vpush	{d8}
 801899e:	ec55 4b10 	vmov	r4, r5, d0
 80189a2:	f000 f87d 	bl	8018aa0 <__ieee754_sqrt>
 80189a6:	4622      	mov	r2, r4
 80189a8:	462b      	mov	r3, r5
 80189aa:	4620      	mov	r0, r4
 80189ac:	4629      	mov	r1, r5
 80189ae:	eeb0 8a40 	vmov.f32	s16, s0
 80189b2:	eef0 8a60 	vmov.f32	s17, s1
 80189b6:	f7e8 f8d9 	bl	8000b6c <__aeabi_dcmpun>
 80189ba:	b990      	cbnz	r0, 80189e2 <sqrt+0x4a>
 80189bc:	2200      	movs	r2, #0
 80189be:	2300      	movs	r3, #0
 80189c0:	4620      	mov	r0, r4
 80189c2:	4629      	mov	r1, r5
 80189c4:	f7e8 f8aa 	bl	8000b1c <__aeabi_dcmplt>
 80189c8:	b158      	cbz	r0, 80189e2 <sqrt+0x4a>
 80189ca:	f7fd f987 	bl	8015cdc <__errno>
 80189ce:	2321      	movs	r3, #33	; 0x21
 80189d0:	6003      	str	r3, [r0, #0]
 80189d2:	2200      	movs	r2, #0
 80189d4:	2300      	movs	r3, #0
 80189d6:	4610      	mov	r0, r2
 80189d8:	4619      	mov	r1, r3
 80189da:	f7e7 ff57 	bl	800088c <__aeabi_ddiv>
 80189de:	ec41 0b18 	vmov	d8, r0, r1
 80189e2:	eeb0 0a48 	vmov.f32	s0, s16
 80189e6:	eef0 0a68 	vmov.f32	s1, s17
 80189ea:	ecbd 8b02 	vpop	{d8}
 80189ee:	bd38      	pop	{r3, r4, r5, pc}

080189f0 <powf>:
 80189f0:	b508      	push	{r3, lr}
 80189f2:	ed2d 8b04 	vpush	{d8-d9}
 80189f6:	eeb0 8a60 	vmov.f32	s16, s1
 80189fa:	eeb0 9a40 	vmov.f32	s18, s0
 80189fe:	f000 f901 	bl	8018c04 <__ieee754_powf>
 8018a02:	eeb4 8a48 	vcmp.f32	s16, s16
 8018a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a0a:	eef0 8a40 	vmov.f32	s17, s0
 8018a0e:	d63e      	bvs.n	8018a8e <powf+0x9e>
 8018a10:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a18:	d112      	bne.n	8018a40 <powf+0x50>
 8018a1a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a22:	d039      	beq.n	8018a98 <powf+0xa8>
 8018a24:	eeb0 0a48 	vmov.f32	s0, s16
 8018a28:	f000 fbe7 	bl	80191fa <finitef>
 8018a2c:	b378      	cbz	r0, 8018a8e <powf+0x9e>
 8018a2e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a36:	d52a      	bpl.n	8018a8e <powf+0x9e>
 8018a38:	f7fd f950 	bl	8015cdc <__errno>
 8018a3c:	2322      	movs	r3, #34	; 0x22
 8018a3e:	e014      	b.n	8018a6a <powf+0x7a>
 8018a40:	f000 fbdb 	bl	80191fa <finitef>
 8018a44:	b998      	cbnz	r0, 8018a6e <powf+0x7e>
 8018a46:	eeb0 0a49 	vmov.f32	s0, s18
 8018a4a:	f000 fbd6 	bl	80191fa <finitef>
 8018a4e:	b170      	cbz	r0, 8018a6e <powf+0x7e>
 8018a50:	eeb0 0a48 	vmov.f32	s0, s16
 8018a54:	f000 fbd1 	bl	80191fa <finitef>
 8018a58:	b148      	cbz	r0, 8018a6e <powf+0x7e>
 8018a5a:	eef4 8a68 	vcmp.f32	s17, s17
 8018a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a62:	d7e9      	bvc.n	8018a38 <powf+0x48>
 8018a64:	f7fd f93a 	bl	8015cdc <__errno>
 8018a68:	2321      	movs	r3, #33	; 0x21
 8018a6a:	6003      	str	r3, [r0, #0]
 8018a6c:	e00f      	b.n	8018a8e <powf+0x9e>
 8018a6e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a76:	d10a      	bne.n	8018a8e <powf+0x9e>
 8018a78:	eeb0 0a49 	vmov.f32	s0, s18
 8018a7c:	f000 fbbd 	bl	80191fa <finitef>
 8018a80:	b128      	cbz	r0, 8018a8e <powf+0x9e>
 8018a82:	eeb0 0a48 	vmov.f32	s0, s16
 8018a86:	f000 fbb8 	bl	80191fa <finitef>
 8018a8a:	2800      	cmp	r0, #0
 8018a8c:	d1d4      	bne.n	8018a38 <powf+0x48>
 8018a8e:	eeb0 0a68 	vmov.f32	s0, s17
 8018a92:	ecbd 8b04 	vpop	{d8-d9}
 8018a96:	bd08      	pop	{r3, pc}
 8018a98:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018a9c:	e7f7      	b.n	8018a8e <powf+0x9e>
	...

08018aa0 <__ieee754_sqrt>:
 8018aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018aa4:	ec55 4b10 	vmov	r4, r5, d0
 8018aa8:	4e55      	ldr	r6, [pc, #340]	; (8018c00 <__ieee754_sqrt+0x160>)
 8018aaa:	43ae      	bics	r6, r5
 8018aac:	ee10 0a10 	vmov	r0, s0
 8018ab0:	ee10 3a10 	vmov	r3, s0
 8018ab4:	462a      	mov	r2, r5
 8018ab6:	4629      	mov	r1, r5
 8018ab8:	d110      	bne.n	8018adc <__ieee754_sqrt+0x3c>
 8018aba:	ee10 2a10 	vmov	r2, s0
 8018abe:	462b      	mov	r3, r5
 8018ac0:	f7e7 fdba 	bl	8000638 <__aeabi_dmul>
 8018ac4:	4602      	mov	r2, r0
 8018ac6:	460b      	mov	r3, r1
 8018ac8:	4620      	mov	r0, r4
 8018aca:	4629      	mov	r1, r5
 8018acc:	f7e7 fbfe 	bl	80002cc <__adddf3>
 8018ad0:	4604      	mov	r4, r0
 8018ad2:	460d      	mov	r5, r1
 8018ad4:	ec45 4b10 	vmov	d0, r4, r5
 8018ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018adc:	2d00      	cmp	r5, #0
 8018ade:	dc10      	bgt.n	8018b02 <__ieee754_sqrt+0x62>
 8018ae0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018ae4:	4330      	orrs	r0, r6
 8018ae6:	d0f5      	beq.n	8018ad4 <__ieee754_sqrt+0x34>
 8018ae8:	b15d      	cbz	r5, 8018b02 <__ieee754_sqrt+0x62>
 8018aea:	ee10 2a10 	vmov	r2, s0
 8018aee:	462b      	mov	r3, r5
 8018af0:	ee10 0a10 	vmov	r0, s0
 8018af4:	f7e7 fbe8 	bl	80002c8 <__aeabi_dsub>
 8018af8:	4602      	mov	r2, r0
 8018afa:	460b      	mov	r3, r1
 8018afc:	f7e7 fec6 	bl	800088c <__aeabi_ddiv>
 8018b00:	e7e6      	b.n	8018ad0 <__ieee754_sqrt+0x30>
 8018b02:	1512      	asrs	r2, r2, #20
 8018b04:	d074      	beq.n	8018bf0 <__ieee754_sqrt+0x150>
 8018b06:	07d4      	lsls	r4, r2, #31
 8018b08:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018b0c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018b10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018b14:	bf5e      	ittt	pl
 8018b16:	0fda      	lsrpl	r2, r3, #31
 8018b18:	005b      	lslpl	r3, r3, #1
 8018b1a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018b1e:	2400      	movs	r4, #0
 8018b20:	0fda      	lsrs	r2, r3, #31
 8018b22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018b26:	107f      	asrs	r7, r7, #1
 8018b28:	005b      	lsls	r3, r3, #1
 8018b2a:	2516      	movs	r5, #22
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8018b32:	1886      	adds	r6, r0, r2
 8018b34:	428e      	cmp	r6, r1
 8018b36:	bfde      	ittt	le
 8018b38:	1b89      	suble	r1, r1, r6
 8018b3a:	18b0      	addle	r0, r6, r2
 8018b3c:	18a4      	addle	r4, r4, r2
 8018b3e:	0049      	lsls	r1, r1, #1
 8018b40:	3d01      	subs	r5, #1
 8018b42:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8018b46:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018b4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018b4e:	d1f0      	bne.n	8018b32 <__ieee754_sqrt+0x92>
 8018b50:	462a      	mov	r2, r5
 8018b52:	f04f 0e20 	mov.w	lr, #32
 8018b56:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018b5a:	4281      	cmp	r1, r0
 8018b5c:	eb06 0c05 	add.w	ip, r6, r5
 8018b60:	dc02      	bgt.n	8018b68 <__ieee754_sqrt+0xc8>
 8018b62:	d113      	bne.n	8018b8c <__ieee754_sqrt+0xec>
 8018b64:	459c      	cmp	ip, r3
 8018b66:	d811      	bhi.n	8018b8c <__ieee754_sqrt+0xec>
 8018b68:	f1bc 0f00 	cmp.w	ip, #0
 8018b6c:	eb0c 0506 	add.w	r5, ip, r6
 8018b70:	da43      	bge.n	8018bfa <__ieee754_sqrt+0x15a>
 8018b72:	2d00      	cmp	r5, #0
 8018b74:	db41      	blt.n	8018bfa <__ieee754_sqrt+0x15a>
 8018b76:	f100 0801 	add.w	r8, r0, #1
 8018b7a:	1a09      	subs	r1, r1, r0
 8018b7c:	459c      	cmp	ip, r3
 8018b7e:	bf88      	it	hi
 8018b80:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8018b84:	eba3 030c 	sub.w	r3, r3, ip
 8018b88:	4432      	add	r2, r6
 8018b8a:	4640      	mov	r0, r8
 8018b8c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8018b90:	f1be 0e01 	subs.w	lr, lr, #1
 8018b94:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8018b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018b9c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018ba0:	d1db      	bne.n	8018b5a <__ieee754_sqrt+0xba>
 8018ba2:	430b      	orrs	r3, r1
 8018ba4:	d006      	beq.n	8018bb4 <__ieee754_sqrt+0x114>
 8018ba6:	1c50      	adds	r0, r2, #1
 8018ba8:	bf13      	iteet	ne
 8018baa:	3201      	addne	r2, #1
 8018bac:	3401      	addeq	r4, #1
 8018bae:	4672      	moveq	r2, lr
 8018bb0:	f022 0201 	bicne.w	r2, r2, #1
 8018bb4:	1063      	asrs	r3, r4, #1
 8018bb6:	0852      	lsrs	r2, r2, #1
 8018bb8:	07e1      	lsls	r1, r4, #31
 8018bba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8018bbe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8018bc2:	bf48      	it	mi
 8018bc4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8018bc8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8018bcc:	4614      	mov	r4, r2
 8018bce:	e781      	b.n	8018ad4 <__ieee754_sqrt+0x34>
 8018bd0:	0ad9      	lsrs	r1, r3, #11
 8018bd2:	3815      	subs	r0, #21
 8018bd4:	055b      	lsls	r3, r3, #21
 8018bd6:	2900      	cmp	r1, #0
 8018bd8:	d0fa      	beq.n	8018bd0 <__ieee754_sqrt+0x130>
 8018bda:	02cd      	lsls	r5, r1, #11
 8018bdc:	d50a      	bpl.n	8018bf4 <__ieee754_sqrt+0x154>
 8018bde:	f1c2 0420 	rsb	r4, r2, #32
 8018be2:	fa23 f404 	lsr.w	r4, r3, r4
 8018be6:	1e55      	subs	r5, r2, #1
 8018be8:	4093      	lsls	r3, r2
 8018bea:	4321      	orrs	r1, r4
 8018bec:	1b42      	subs	r2, r0, r5
 8018bee:	e78a      	b.n	8018b06 <__ieee754_sqrt+0x66>
 8018bf0:	4610      	mov	r0, r2
 8018bf2:	e7f0      	b.n	8018bd6 <__ieee754_sqrt+0x136>
 8018bf4:	0049      	lsls	r1, r1, #1
 8018bf6:	3201      	adds	r2, #1
 8018bf8:	e7ef      	b.n	8018bda <__ieee754_sqrt+0x13a>
 8018bfa:	4680      	mov	r8, r0
 8018bfc:	e7bd      	b.n	8018b7a <__ieee754_sqrt+0xda>
 8018bfe:	bf00      	nop
 8018c00:	7ff00000 	.word	0x7ff00000

08018c04 <__ieee754_powf>:
 8018c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c08:	ee10 4a90 	vmov	r4, s1
 8018c0c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8018c10:	ed2d 8b02 	vpush	{d8}
 8018c14:	ee10 6a10 	vmov	r6, s0
 8018c18:	eeb0 8a40 	vmov.f32	s16, s0
 8018c1c:	eef0 8a60 	vmov.f32	s17, s1
 8018c20:	d10c      	bne.n	8018c3c <__ieee754_powf+0x38>
 8018c22:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8018c26:	0076      	lsls	r6, r6, #1
 8018c28:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8018c2c:	f240 8296 	bls.w	801915c <__ieee754_powf+0x558>
 8018c30:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018c34:	ecbd 8b02 	vpop	{d8}
 8018c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c3c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8018c40:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8018c44:	dcf4      	bgt.n	8018c30 <__ieee754_powf+0x2c>
 8018c46:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018c4a:	dd08      	ble.n	8018c5e <__ieee754_powf+0x5a>
 8018c4c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8018c50:	d1ee      	bne.n	8018c30 <__ieee754_powf+0x2c>
 8018c52:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8018c56:	0064      	lsls	r4, r4, #1
 8018c58:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8018c5c:	e7e6      	b.n	8018c2c <__ieee754_powf+0x28>
 8018c5e:	2e00      	cmp	r6, #0
 8018c60:	da20      	bge.n	8018ca4 <__ieee754_powf+0xa0>
 8018c62:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8018c66:	da2d      	bge.n	8018cc4 <__ieee754_powf+0xc0>
 8018c68:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018c6c:	f2c0 827f 	blt.w	801916e <__ieee754_powf+0x56a>
 8018c70:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8018c74:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018c78:	fa48 f703 	asr.w	r7, r8, r3
 8018c7c:	fa07 f303 	lsl.w	r3, r7, r3
 8018c80:	4543      	cmp	r3, r8
 8018c82:	f040 8274 	bne.w	801916e <__ieee754_powf+0x56a>
 8018c86:	f007 0701 	and.w	r7, r7, #1
 8018c8a:	f1c7 0702 	rsb	r7, r7, #2
 8018c8e:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018c92:	d11f      	bne.n	8018cd4 <__ieee754_powf+0xd0>
 8018c94:	2c00      	cmp	r4, #0
 8018c96:	f280 8267 	bge.w	8019168 <__ieee754_powf+0x564>
 8018c9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018c9e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018ca2:	e7c7      	b.n	8018c34 <__ieee754_powf+0x30>
 8018ca4:	2700      	movs	r7, #0
 8018ca6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018caa:	d1f0      	bne.n	8018c8e <__ieee754_powf+0x8a>
 8018cac:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8018cb0:	f000 8254 	beq.w	801915c <__ieee754_powf+0x558>
 8018cb4:	dd08      	ble.n	8018cc8 <__ieee754_powf+0xc4>
 8018cb6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8018fc0 <__ieee754_powf+0x3bc>
 8018cba:	2c00      	cmp	r4, #0
 8018cbc:	bfa8      	it	ge
 8018cbe:	eeb0 0a68 	vmovge.f32	s0, s17
 8018cc2:	e7b7      	b.n	8018c34 <__ieee754_powf+0x30>
 8018cc4:	2702      	movs	r7, #2
 8018cc6:	e7ee      	b.n	8018ca6 <__ieee754_powf+0xa2>
 8018cc8:	2c00      	cmp	r4, #0
 8018cca:	f280 824a 	bge.w	8019162 <__ieee754_powf+0x55e>
 8018cce:	eeb1 0a68 	vneg.f32	s0, s17
 8018cd2:	e7af      	b.n	8018c34 <__ieee754_powf+0x30>
 8018cd4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8018cd8:	d102      	bne.n	8018ce0 <__ieee754_powf+0xdc>
 8018cda:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018cde:	e7a9      	b.n	8018c34 <__ieee754_powf+0x30>
 8018ce0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8018ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8018ce8:	d107      	bne.n	8018cfa <__ieee754_powf+0xf6>
 8018cea:	2e00      	cmp	r6, #0
 8018cec:	db05      	blt.n	8018cfa <__ieee754_powf+0xf6>
 8018cee:	ecbd 8b02 	vpop	{d8}
 8018cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cf6:	f000 ba53 	b.w	80191a0 <__ieee754_sqrtf>
 8018cfa:	f000 fa77 	bl	80191ec <fabsf>
 8018cfe:	b125      	cbz	r5, 8018d0a <__ieee754_powf+0x106>
 8018d00:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8018d04:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018d08:	d116      	bne.n	8018d38 <__ieee754_powf+0x134>
 8018d0a:	2c00      	cmp	r4, #0
 8018d0c:	bfbc      	itt	lt
 8018d0e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8018d12:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018d16:	2e00      	cmp	r6, #0
 8018d18:	da8c      	bge.n	8018c34 <__ieee754_powf+0x30>
 8018d1a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8018d1e:	ea55 0307 	orrs.w	r3, r5, r7
 8018d22:	d104      	bne.n	8018d2e <__ieee754_powf+0x12a>
 8018d24:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018d28:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018d2c:	e782      	b.n	8018c34 <__ieee754_powf+0x30>
 8018d2e:	2f01      	cmp	r7, #1
 8018d30:	d180      	bne.n	8018c34 <__ieee754_powf+0x30>
 8018d32:	eeb1 0a40 	vneg.f32	s0, s0
 8018d36:	e77d      	b.n	8018c34 <__ieee754_powf+0x30>
 8018d38:	0ff0      	lsrs	r0, r6, #31
 8018d3a:	3801      	subs	r0, #1
 8018d3c:	ea57 0300 	orrs.w	r3, r7, r0
 8018d40:	d104      	bne.n	8018d4c <__ieee754_powf+0x148>
 8018d42:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018d46:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018d4a:	e773      	b.n	8018c34 <__ieee754_powf+0x30>
 8018d4c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8018d50:	dd74      	ble.n	8018e3c <__ieee754_powf+0x238>
 8018d52:	4b9c      	ldr	r3, [pc, #624]	; (8018fc4 <__ieee754_powf+0x3c0>)
 8018d54:	429d      	cmp	r5, r3
 8018d56:	dc08      	bgt.n	8018d6a <__ieee754_powf+0x166>
 8018d58:	2c00      	cmp	r4, #0
 8018d5a:	da0b      	bge.n	8018d74 <__ieee754_powf+0x170>
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	ecbd 8b02 	vpop	{d8}
 8018d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d66:	f000 ba3b 	b.w	80191e0 <__math_oflowf>
 8018d6a:	4b97      	ldr	r3, [pc, #604]	; (8018fc8 <__ieee754_powf+0x3c4>)
 8018d6c:	429d      	cmp	r5, r3
 8018d6e:	dd08      	ble.n	8018d82 <__ieee754_powf+0x17e>
 8018d70:	2c00      	cmp	r4, #0
 8018d72:	dcf3      	bgt.n	8018d5c <__ieee754_powf+0x158>
 8018d74:	2000      	movs	r0, #0
 8018d76:	ecbd 8b02 	vpop	{d8}
 8018d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d7e:	f000 ba29 	b.w	80191d4 <__math_uflowf>
 8018d82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018d86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d8a:	eddf 6a90 	vldr	s13, [pc, #576]	; 8018fcc <__ieee754_powf+0x3c8>
 8018d8e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018d92:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018d96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018d9a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018d9e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018da6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8018fd0 <__ieee754_powf+0x3cc>
 8018daa:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8018dae:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8018fd4 <__ieee754_powf+0x3d0>
 8018db2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018db6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8018fd8 <__ieee754_powf+0x3d4>
 8018dba:	eef0 6a67 	vmov.f32	s13, s15
 8018dbe:	eee0 6a07 	vfma.f32	s13, s0, s14
 8018dc2:	ee16 3a90 	vmov	r3, s13
 8018dc6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018dca:	f023 030f 	bic.w	r3, r3, #15
 8018dce:	ee00 3a90 	vmov	s1, r3
 8018dd2:	eee0 0a47 	vfms.f32	s1, s0, s14
 8018dd6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018dda:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8018dde:	f024 040f 	bic.w	r4, r4, #15
 8018de2:	ee07 4a10 	vmov	s14, r4
 8018de6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018dea:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018dee:	ee07 3a90 	vmov	s15, r3
 8018df2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8018df6:	3f01      	subs	r7, #1
 8018df8:	ea57 0200 	orrs.w	r2, r7, r0
 8018dfc:	ee07 4a10 	vmov	s14, r4
 8018e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018e04:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018e08:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018e0c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018e10:	ee17 4a10 	vmov	r4, s14
 8018e14:	bf08      	it	eq
 8018e16:	eeb0 8a40 	vmoveq.f32	s16, s0
 8018e1a:	2c00      	cmp	r4, #0
 8018e1c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018e20:	f340 817e 	ble.w	8019120 <__ieee754_powf+0x51c>
 8018e24:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8018e28:	f340 80f8 	ble.w	801901c <__ieee754_powf+0x418>
 8018e2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e34:	bf4c      	ite	mi
 8018e36:	2001      	movmi	r0, #1
 8018e38:	2000      	movpl	r0, #0
 8018e3a:	e790      	b.n	8018d5e <__ieee754_powf+0x15a>
 8018e3c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8018e40:	bf01      	itttt	eq
 8018e42:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8018fdc <__ieee754_powf+0x3d8>
 8018e46:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018e4a:	f06f 0217 	mvneq.w	r2, #23
 8018e4e:	ee17 5a90 	vmoveq	r5, s15
 8018e52:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018e56:	bf18      	it	ne
 8018e58:	2200      	movne	r2, #0
 8018e5a:	3b7f      	subs	r3, #127	; 0x7f
 8018e5c:	4413      	add	r3, r2
 8018e5e:	4a60      	ldr	r2, [pc, #384]	; (8018fe0 <__ieee754_powf+0x3dc>)
 8018e60:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8018e64:	4295      	cmp	r5, r2
 8018e66:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8018e6a:	dd06      	ble.n	8018e7a <__ieee754_powf+0x276>
 8018e6c:	4a5d      	ldr	r2, [pc, #372]	; (8018fe4 <__ieee754_powf+0x3e0>)
 8018e6e:	4295      	cmp	r5, r2
 8018e70:	f340 80a4 	ble.w	8018fbc <__ieee754_powf+0x3b8>
 8018e74:	3301      	adds	r3, #1
 8018e76:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018e7a:	2500      	movs	r5, #0
 8018e7c:	4a5a      	ldr	r2, [pc, #360]	; (8018fe8 <__ieee754_powf+0x3e4>)
 8018e7e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8018e82:	ee07 1a90 	vmov	s15, r1
 8018e86:	ed92 7a00 	vldr	s14, [r2]
 8018e8a:	4a58      	ldr	r2, [pc, #352]	; (8018fec <__ieee754_powf+0x3e8>)
 8018e8c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018e90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018e94:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018e98:	1049      	asrs	r1, r1, #1
 8018e9a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8018e9e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8018ea2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8018ea6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8018eaa:	ee06 1a10 	vmov	s12, r1
 8018eae:	ee65 4a26 	vmul.f32	s9, s10, s13
 8018eb2:	ee36 7a47 	vsub.f32	s14, s12, s14
 8018eb6:	ee14 6a90 	vmov	r6, s9
 8018eba:	4016      	ands	r6, r2
 8018ebc:	ee05 6a90 	vmov	s11, r6
 8018ec0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8018ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ec8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8018ff0 <__ieee754_powf+0x3ec>
 8018ecc:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8018ed0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8018ed4:	ee25 6a26 	vmul.f32	s12, s10, s13
 8018ed8:	eddf 6a46 	vldr	s13, [pc, #280]	; 8018ff4 <__ieee754_powf+0x3f0>
 8018edc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018ee0:	eddf 6a45 	vldr	s13, [pc, #276]	; 8018ff8 <__ieee754_powf+0x3f4>
 8018ee4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018ee8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8018fcc <__ieee754_powf+0x3c8>
 8018eec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018ef0:	eddf 6a42 	vldr	s13, [pc, #264]	; 8018ffc <__ieee754_powf+0x3f8>
 8018ef4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018ef8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019000 <__ieee754_powf+0x3fc>
 8018efc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018f00:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8018f04:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8018f08:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018f0c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8018f10:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8018f14:	eef0 7a45 	vmov.f32	s15, s10
 8018f18:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8018f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f20:	ee17 1a90 	vmov	r1, s15
 8018f24:	4011      	ands	r1, r2
 8018f26:	ee07 1a90 	vmov	s15, r1
 8018f2a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8018f2e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8018f32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018f36:	ee27 7a24 	vmul.f32	s14, s14, s9
 8018f3a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018f3e:	eeb0 6a47 	vmov.f32	s12, s14
 8018f42:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018f46:	ee16 1a10 	vmov	r1, s12
 8018f4a:	4011      	ands	r1, r2
 8018f4c:	ee06 1a90 	vmov	s13, r1
 8018f50:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8018f54:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019004 <__ieee754_powf+0x400>
 8018f58:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8019008 <__ieee754_powf+0x404>
 8018f5c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018f60:	ee06 1a10 	vmov	s12, r1
 8018f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018f68:	eddf 7a28 	vldr	s15, [pc, #160]	; 801900c <__ieee754_powf+0x408>
 8018f6c:	4928      	ldr	r1, [pc, #160]	; (8019010 <__ieee754_powf+0x40c>)
 8018f6e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018f72:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8018f76:	edd1 7a00 	vldr	s15, [r1]
 8018f7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f7e:	ee07 3a90 	vmov	s15, r3
 8018f82:	4b24      	ldr	r3, [pc, #144]	; (8019014 <__ieee754_powf+0x410>)
 8018f84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018f88:	eef0 7a47 	vmov.f32	s15, s14
 8018f8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018f90:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8018f94:	edd5 0a00 	vldr	s1, [r5]
 8018f98:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018fa0:	ee17 3a90 	vmov	r3, s15
 8018fa4:	4013      	ands	r3, r2
 8018fa6:	ee07 3a90 	vmov	s15, r3
 8018faa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8018fae:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8018fb2:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018fb6:	ee77 7a66 	vsub.f32	s15, s14, s13
 8018fba:	e70e      	b.n	8018dda <__ieee754_powf+0x1d6>
 8018fbc:	2501      	movs	r5, #1
 8018fbe:	e75d      	b.n	8018e7c <__ieee754_powf+0x278>
 8018fc0:	00000000 	.word	0x00000000
 8018fc4:	3f7ffff3 	.word	0x3f7ffff3
 8018fc8:	3f800007 	.word	0x3f800007
 8018fcc:	3eaaaaab 	.word	0x3eaaaaab
 8018fd0:	3fb8aa3b 	.word	0x3fb8aa3b
 8018fd4:	36eca570 	.word	0x36eca570
 8018fd8:	3fb8aa00 	.word	0x3fb8aa00
 8018fdc:	4b800000 	.word	0x4b800000
 8018fe0:	001cc471 	.word	0x001cc471
 8018fe4:	005db3d6 	.word	0x005db3d6
 8018fe8:	08019bf4 	.word	0x08019bf4
 8018fec:	fffff000 	.word	0xfffff000
 8018ff0:	3e6c3255 	.word	0x3e6c3255
 8018ff4:	3e53f142 	.word	0x3e53f142
 8018ff8:	3e8ba305 	.word	0x3e8ba305
 8018ffc:	3edb6db7 	.word	0x3edb6db7
 8019000:	3f19999a 	.word	0x3f19999a
 8019004:	3f76384f 	.word	0x3f76384f
 8019008:	3f763800 	.word	0x3f763800
 801900c:	369dc3a0 	.word	0x369dc3a0
 8019010:	08019c04 	.word	0x08019c04
 8019014:	08019bfc 	.word	0x08019bfc
 8019018:	3338aa3c 	.word	0x3338aa3c
 801901c:	f040 8095 	bne.w	801914a <__ieee754_powf+0x546>
 8019020:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019018 <__ieee754_powf+0x414>
 8019024:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019028:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801902c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019034:	f73f aefa 	bgt.w	8018e2c <__ieee754_powf+0x228>
 8019038:	15db      	asrs	r3, r3, #23
 801903a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801903e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019042:	4103      	asrs	r3, r0
 8019044:	4423      	add	r3, r4
 8019046:	494b      	ldr	r1, [pc, #300]	; (8019174 <__ieee754_powf+0x570>)
 8019048:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801904c:	3a7f      	subs	r2, #127	; 0x7f
 801904e:	4111      	asrs	r1, r2
 8019050:	ea23 0101 	bic.w	r1, r3, r1
 8019054:	ee07 1a10 	vmov	s14, r1
 8019058:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801905c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019060:	f1c2 0217 	rsb	r2, r2, #23
 8019064:	4110      	asrs	r0, r2
 8019066:	2c00      	cmp	r4, #0
 8019068:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801906c:	bfb8      	it	lt
 801906e:	4240      	neglt	r0, r0
 8019070:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019074:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8019178 <__ieee754_powf+0x574>
 8019078:	eddf 6a40 	vldr	s13, [pc, #256]	; 801917c <__ieee754_powf+0x578>
 801907c:	ee17 3a10 	vmov	r3, s14
 8019080:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019084:	f023 030f 	bic.w	r3, r3, #15
 8019088:	ee07 3a10 	vmov	s14, r3
 801908c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019090:	ee27 0a00 	vmul.f32	s0, s14, s0
 8019094:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019098:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019180 <__ieee754_powf+0x57c>
 801909c:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80190a0:	eef0 7a40 	vmov.f32	s15, s0
 80190a4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80190a8:	eeb0 6a67 	vmov.f32	s12, s15
 80190ac:	eea7 6a66 	vfms.f32	s12, s14, s13
 80190b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80190b4:	ee30 0a46 	vsub.f32	s0, s0, s12
 80190b8:	eddf 6a32 	vldr	s13, [pc, #200]	; 8019184 <__ieee754_powf+0x580>
 80190bc:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8019188 <__ieee754_powf+0x584>
 80190c0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80190c4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 801918c <__ieee754_powf+0x588>
 80190c8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80190cc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019190 <__ieee754_powf+0x58c>
 80190d0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80190d4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019194 <__ieee754_powf+0x590>
 80190d8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80190dc:	eef0 6a67 	vmov.f32	s13, s15
 80190e0:	eee6 6a47 	vfms.f32	s13, s12, s14
 80190e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80190e8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80190ec:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80190f0:	eea7 0a80 	vfma.f32	s0, s15, s0
 80190f4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80190f8:	ee37 0a40 	vsub.f32	s0, s14, s0
 80190fc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019100:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019104:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019108:	ee10 3a10 	vmov	r3, s0
 801910c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019110:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019114:	da1f      	bge.n	8019156 <__ieee754_powf+0x552>
 8019116:	f000 f87d 	bl	8019214 <scalbnf>
 801911a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801911e:	e589      	b.n	8018c34 <__ieee754_powf+0x30>
 8019120:	4a1d      	ldr	r2, [pc, #116]	; (8019198 <__ieee754_powf+0x594>)
 8019122:	4293      	cmp	r3, r2
 8019124:	dd07      	ble.n	8019136 <__ieee754_powf+0x532>
 8019126:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801912a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801912e:	bf4c      	ite	mi
 8019130:	2001      	movmi	r0, #1
 8019132:	2000      	movpl	r0, #0
 8019134:	e61f      	b.n	8018d76 <__ieee754_powf+0x172>
 8019136:	d108      	bne.n	801914a <__ieee754_powf+0x546>
 8019138:	ee37 7a67 	vsub.f32	s14, s14, s15
 801913c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019144:	f6ff af78 	blt.w	8019038 <__ieee754_powf+0x434>
 8019148:	e7ed      	b.n	8019126 <__ieee754_powf+0x522>
 801914a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801914e:	f73f af73 	bgt.w	8019038 <__ieee754_powf+0x434>
 8019152:	2000      	movs	r0, #0
 8019154:	e78c      	b.n	8019070 <__ieee754_powf+0x46c>
 8019156:	ee00 3a10 	vmov	s0, r3
 801915a:	e7de      	b.n	801911a <__ieee754_powf+0x516>
 801915c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019160:	e568      	b.n	8018c34 <__ieee754_powf+0x30>
 8019162:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801919c <__ieee754_powf+0x598>
 8019166:	e565      	b.n	8018c34 <__ieee754_powf+0x30>
 8019168:	eeb0 0a48 	vmov.f32	s0, s16
 801916c:	e562      	b.n	8018c34 <__ieee754_powf+0x30>
 801916e:	2700      	movs	r7, #0
 8019170:	e58d      	b.n	8018c8e <__ieee754_powf+0x8a>
 8019172:	bf00      	nop
 8019174:	007fffff 	.word	0x007fffff
 8019178:	35bfbe8c 	.word	0x35bfbe8c
 801917c:	3f317200 	.word	0x3f317200
 8019180:	3f317218 	.word	0x3f317218
 8019184:	b5ddea0e 	.word	0xb5ddea0e
 8019188:	3331bb4c 	.word	0x3331bb4c
 801918c:	388ab355 	.word	0x388ab355
 8019190:	bb360b61 	.word	0xbb360b61
 8019194:	3e2aaaab 	.word	0x3e2aaaab
 8019198:	43160000 	.word	0x43160000
 801919c:	00000000 	.word	0x00000000

080191a0 <__ieee754_sqrtf>:
 80191a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80191a4:	4770      	bx	lr

080191a6 <with_errnof>:
 80191a6:	b513      	push	{r0, r1, r4, lr}
 80191a8:	4604      	mov	r4, r0
 80191aa:	ed8d 0a01 	vstr	s0, [sp, #4]
 80191ae:	f7fc fd95 	bl	8015cdc <__errno>
 80191b2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80191b6:	6004      	str	r4, [r0, #0]
 80191b8:	b002      	add	sp, #8
 80191ba:	bd10      	pop	{r4, pc}

080191bc <xflowf>:
 80191bc:	b130      	cbz	r0, 80191cc <xflowf+0x10>
 80191be:	eef1 7a40 	vneg.f32	s15, s0
 80191c2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80191c6:	2022      	movs	r0, #34	; 0x22
 80191c8:	f7ff bfed 	b.w	80191a6 <with_errnof>
 80191cc:	eef0 7a40 	vmov.f32	s15, s0
 80191d0:	e7f7      	b.n	80191c2 <xflowf+0x6>
	...

080191d4 <__math_uflowf>:
 80191d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80191dc <__math_uflowf+0x8>
 80191d8:	f7ff bff0 	b.w	80191bc <xflowf>
 80191dc:	10000000 	.word	0x10000000

080191e0 <__math_oflowf>:
 80191e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80191e8 <__math_oflowf+0x8>
 80191e4:	f7ff bfea 	b.w	80191bc <xflowf>
 80191e8:	70000000 	.word	0x70000000

080191ec <fabsf>:
 80191ec:	ee10 3a10 	vmov	r3, s0
 80191f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191f4:	ee00 3a10 	vmov	s0, r3
 80191f8:	4770      	bx	lr

080191fa <finitef>:
 80191fa:	b082      	sub	sp, #8
 80191fc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019200:	9801      	ldr	r0, [sp, #4]
 8019202:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019206:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801920a:	bfac      	ite	ge
 801920c:	2000      	movge	r0, #0
 801920e:	2001      	movlt	r0, #1
 8019210:	b002      	add	sp, #8
 8019212:	4770      	bx	lr

08019214 <scalbnf>:
 8019214:	ee10 3a10 	vmov	r3, s0
 8019218:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801921c:	d025      	beq.n	801926a <scalbnf+0x56>
 801921e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019222:	d302      	bcc.n	801922a <scalbnf+0x16>
 8019224:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019228:	4770      	bx	lr
 801922a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801922e:	d122      	bne.n	8019276 <scalbnf+0x62>
 8019230:	4b2a      	ldr	r3, [pc, #168]	; (80192dc <scalbnf+0xc8>)
 8019232:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80192e0 <scalbnf+0xcc>
 8019236:	4298      	cmp	r0, r3
 8019238:	ee20 0a27 	vmul.f32	s0, s0, s15
 801923c:	db16      	blt.n	801926c <scalbnf+0x58>
 801923e:	ee10 3a10 	vmov	r3, s0
 8019242:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019246:	3a19      	subs	r2, #25
 8019248:	4402      	add	r2, r0
 801924a:	2afe      	cmp	r2, #254	; 0xfe
 801924c:	dd15      	ble.n	801927a <scalbnf+0x66>
 801924e:	ee10 3a10 	vmov	r3, s0
 8019252:	eddf 7a24 	vldr	s15, [pc, #144]	; 80192e4 <scalbnf+0xd0>
 8019256:	eddf 6a24 	vldr	s13, [pc, #144]	; 80192e8 <scalbnf+0xd4>
 801925a:	2b00      	cmp	r3, #0
 801925c:	eeb0 7a67 	vmov.f32	s14, s15
 8019260:	bfb8      	it	lt
 8019262:	eef0 7a66 	vmovlt.f32	s15, s13
 8019266:	ee27 0a27 	vmul.f32	s0, s14, s15
 801926a:	4770      	bx	lr
 801926c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80192ec <scalbnf+0xd8>
 8019270:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019274:	4770      	bx	lr
 8019276:	0dd2      	lsrs	r2, r2, #23
 8019278:	e7e6      	b.n	8019248 <scalbnf+0x34>
 801927a:	2a00      	cmp	r2, #0
 801927c:	dd06      	ble.n	801928c <scalbnf+0x78>
 801927e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019282:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8019286:	ee00 3a10 	vmov	s0, r3
 801928a:	4770      	bx	lr
 801928c:	f112 0f16 	cmn.w	r2, #22
 8019290:	da1a      	bge.n	80192c8 <scalbnf+0xb4>
 8019292:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019296:	4298      	cmp	r0, r3
 8019298:	ee10 3a10 	vmov	r3, s0
 801929c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80192a0:	dd0a      	ble.n	80192b8 <scalbnf+0xa4>
 80192a2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80192e4 <scalbnf+0xd0>
 80192a6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80192e8 <scalbnf+0xd4>
 80192aa:	eef0 7a40 	vmov.f32	s15, s0
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	bf18      	it	ne
 80192b2:	eeb0 0a47 	vmovne.f32	s0, s14
 80192b6:	e7db      	b.n	8019270 <scalbnf+0x5c>
 80192b8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80192ec <scalbnf+0xd8>
 80192bc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80192f0 <scalbnf+0xdc>
 80192c0:	eef0 7a40 	vmov.f32	s15, s0
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	e7f3      	b.n	80192b0 <scalbnf+0x9c>
 80192c8:	3219      	adds	r2, #25
 80192ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80192ce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80192d2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80192f4 <scalbnf+0xe0>
 80192d6:	ee07 3a10 	vmov	s14, r3
 80192da:	e7c4      	b.n	8019266 <scalbnf+0x52>
 80192dc:	ffff3cb0 	.word	0xffff3cb0
 80192e0:	4c000000 	.word	0x4c000000
 80192e4:	7149f2ca 	.word	0x7149f2ca
 80192e8:	f149f2ca 	.word	0xf149f2ca
 80192ec:	0da24260 	.word	0x0da24260
 80192f0:	8da24260 	.word	0x8da24260
 80192f4:	33000000 	.word	0x33000000

080192f8 <_init>:
 80192f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192fa:	bf00      	nop
 80192fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80192fe:	bc08      	pop	{r3}
 8019300:	469e      	mov	lr, r3
 8019302:	4770      	bx	lr

08019304 <_fini>:
 8019304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019306:	bf00      	nop
 8019308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801930a:	bc08      	pop	{r3}
 801930c:	469e      	mov	lr, r3
 801930e:	4770      	bx	lr
