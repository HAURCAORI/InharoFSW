
Inharo_FSW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001250c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  080126dc  080126dc  000226dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bc0  08012bc0  00030188  2**0
                  CONTENTS
  4 .ARM          00000008  08012bc0  08012bc0  00022bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bc8  08012bc8  00030188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bc8  08012bc8  00022bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bcc  08012bcc  00022bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08012bd0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000699c  20000188  08012d58  00030188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006b24  08012d58  00036b24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034e61  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c68  00000000  00000000  00065019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028b0  00000000  00000000  0006cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002550  00000000  00000000  0006f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000efa5  00000000  00000000  00071a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003adaf  00000000  00000000  00080a2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbd96  00000000  00000000  000bb7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7572  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0a0  00000000  00000000  001b75c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000188 	.word	0x20000188
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080126c4 	.word	0x080126c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000018c 	.word	0x2000018c
 800020c:	080126c4 	.word	0x080126c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b974 	b.w	8000928 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468e      	mov	lr, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14d      	bne.n	8000702 <__udivmoddi4+0xaa>
 8000666:	428a      	cmp	r2, r1
 8000668:	4694      	mov	ip, r2
 800066a:	d969      	bls.n	8000740 <__udivmoddi4+0xe8>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b152      	cbz	r2, 8000688 <__udivmoddi4+0x30>
 8000672:	fa01 f302 	lsl.w	r3, r1, r2
 8000676:	f1c2 0120 	rsb	r1, r2, #32
 800067a:	fa20 f101 	lsr.w	r1, r0, r1
 800067e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000682:	ea41 0e03 	orr.w	lr, r1, r3
 8000686:	4094      	lsls	r4, r2
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	0c21      	lsrs	r1, r4, #16
 800068e:	fbbe f6f8 	udiv	r6, lr, r8
 8000692:	fa1f f78c 	uxth.w	r7, ip
 8000696:	fb08 e316 	mls	r3, r8, r6, lr
 800069a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069e:	fb06 f107 	mul.w	r1, r6, r7
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x64>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ae:	f080 811f 	bcs.w	80008f0 <__udivmoddi4+0x298>
 80006b2:	4299      	cmp	r1, r3
 80006b4:	f240 811c 	bls.w	80008f0 <__udivmoddi4+0x298>
 80006b8:	3e02      	subs	r6, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c4:	fb08 3310 	mls	r3, r8, r0, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb00 f707 	mul.w	r7, r0, r7
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x92>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006dc:	f080 810a 	bcs.w	80008f4 <__udivmoddi4+0x29c>
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	f240 8107 	bls.w	80008f4 <__udivmoddi4+0x29c>
 80006e6:	4464      	add	r4, ip
 80006e8:	3802      	subs	r0, #2
 80006ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ee:	1be4      	subs	r4, r4, r7
 80006f0:	2600      	movs	r6, #0
 80006f2:	b11d      	cbz	r5, 80006fc <__udivmoddi4+0xa4>
 80006f4:	40d4      	lsrs	r4, r2
 80006f6:	2300      	movs	r3, #0
 80006f8:	e9c5 4300 	strd	r4, r3, [r5]
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	428b      	cmp	r3, r1
 8000704:	d909      	bls.n	800071a <__udivmoddi4+0xc2>
 8000706:	2d00      	cmp	r5, #0
 8000708:	f000 80ef 	beq.w	80008ea <__udivmoddi4+0x292>
 800070c:	2600      	movs	r6, #0
 800070e:	e9c5 0100 	strd	r0, r1, [r5]
 8000712:	4630      	mov	r0, r6
 8000714:	4631      	mov	r1, r6
 8000716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071a:	fab3 f683 	clz	r6, r3
 800071e:	2e00      	cmp	r6, #0
 8000720:	d14a      	bne.n	80007b8 <__udivmoddi4+0x160>
 8000722:	428b      	cmp	r3, r1
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xd4>
 8000726:	4282      	cmp	r2, r0
 8000728:	f200 80f9 	bhi.w	800091e <__udivmoddi4+0x2c6>
 800072c:	1a84      	subs	r4, r0, r2
 800072e:	eb61 0303 	sbc.w	r3, r1, r3
 8000732:	2001      	movs	r0, #1
 8000734:	469e      	mov	lr, r3
 8000736:	2d00      	cmp	r5, #0
 8000738:	d0e0      	beq.n	80006fc <__udivmoddi4+0xa4>
 800073a:	e9c5 4e00 	strd	r4, lr, [r5]
 800073e:	e7dd      	b.n	80006fc <__udivmoddi4+0xa4>
 8000740:	b902      	cbnz	r2, 8000744 <__udivmoddi4+0xec>
 8000742:	deff      	udf	#255	; 0xff
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	2a00      	cmp	r2, #0
 800074a:	f040 8092 	bne.w	8000872 <__udivmoddi4+0x21a>
 800074e:	eba1 010c 	sub.w	r1, r1, ip
 8000752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000756:	fa1f fe8c 	uxth.w	lr, ip
 800075a:	2601      	movs	r6, #1
 800075c:	0c20      	lsrs	r0, r4, #16
 800075e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000762:	fb07 1113 	mls	r1, r7, r3, r1
 8000766:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800076a:	fb0e f003 	mul.w	r0, lr, r3
 800076e:	4288      	cmp	r0, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x12c>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f103 38ff 	add.w	r8, r3, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x12a>
 800077c:	4288      	cmp	r0, r1
 800077e:	f200 80cb 	bhi.w	8000918 <__udivmoddi4+0x2c0>
 8000782:	4643      	mov	r3, r8
 8000784:	1a09      	subs	r1, r1, r0
 8000786:	b2a4      	uxth	r4, r4
 8000788:	fbb1 f0f7 	udiv	r0, r1, r7
 800078c:	fb07 1110 	mls	r1, r7, r0, r1
 8000790:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000794:	fb0e fe00 	mul.w	lr, lr, r0
 8000798:	45a6      	cmp	lr, r4
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x156>
 800079c:	eb1c 0404 	adds.w	r4, ip, r4
 80007a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a4:	d202      	bcs.n	80007ac <__udivmoddi4+0x154>
 80007a6:	45a6      	cmp	lr, r4
 80007a8:	f200 80bb 	bhi.w	8000922 <__udivmoddi4+0x2ca>
 80007ac:	4608      	mov	r0, r1
 80007ae:	eba4 040e 	sub.w	r4, r4, lr
 80007b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b6:	e79c      	b.n	80006f2 <__udivmoddi4+0x9a>
 80007b8:	f1c6 0720 	rsb	r7, r6, #32
 80007bc:	40b3      	lsls	r3, r6
 80007be:	fa22 fc07 	lsr.w	ip, r2, r7
 80007c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ca:	fa01 f306 	lsl.w	r3, r1, r6
 80007ce:	431c      	orrs	r4, r3
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d6:	fa00 f306 	lsl.w	r3, r0, r6
 80007da:	fbb1 f8f9 	udiv	r8, r1, r9
 80007de:	0c20      	lsrs	r0, r4, #16
 80007e0:	fa1f fe8c 	uxth.w	lr, ip
 80007e4:	fb09 1118 	mls	r1, r9, r8, r1
 80007e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ec:	fb08 f00e 	mul.w	r0, r8, lr
 80007f0:	4288      	cmp	r0, r1
 80007f2:	fa02 f206 	lsl.w	r2, r2, r6
 80007f6:	d90b      	bls.n	8000810 <__udivmoddi4+0x1b8>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000800:	f080 8088 	bcs.w	8000914 <__udivmoddi4+0x2bc>
 8000804:	4288      	cmp	r0, r1
 8000806:	f240 8085 	bls.w	8000914 <__udivmoddi4+0x2bc>
 800080a:	f1a8 0802 	sub.w	r8, r8, #2
 800080e:	4461      	add	r1, ip
 8000810:	1a09      	subs	r1, r1, r0
 8000812:	b2a4      	uxth	r4, r4
 8000814:	fbb1 f0f9 	udiv	r0, r1, r9
 8000818:	fb09 1110 	mls	r1, r9, r0, r1
 800081c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000820:	fb00 fe0e 	mul.w	lr, r0, lr
 8000824:	458e      	cmp	lr, r1
 8000826:	d908      	bls.n	800083a <__udivmoddi4+0x1e2>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000830:	d26c      	bcs.n	800090c <__udivmoddi4+0x2b4>
 8000832:	458e      	cmp	lr, r1
 8000834:	d96a      	bls.n	800090c <__udivmoddi4+0x2b4>
 8000836:	3802      	subs	r0, #2
 8000838:	4461      	add	r1, ip
 800083a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083e:	fba0 9402 	umull	r9, r4, r0, r2
 8000842:	eba1 010e 	sub.w	r1, r1, lr
 8000846:	42a1      	cmp	r1, r4
 8000848:	46c8      	mov	r8, r9
 800084a:	46a6      	mov	lr, r4
 800084c:	d356      	bcc.n	80008fc <__udivmoddi4+0x2a4>
 800084e:	d053      	beq.n	80008f8 <__udivmoddi4+0x2a0>
 8000850:	b15d      	cbz	r5, 800086a <__udivmoddi4+0x212>
 8000852:	ebb3 0208 	subs.w	r2, r3, r8
 8000856:	eb61 010e 	sbc.w	r1, r1, lr
 800085a:	fa01 f707 	lsl.w	r7, r1, r7
 800085e:	fa22 f306 	lsr.w	r3, r2, r6
 8000862:	40f1      	lsrs	r1, r6
 8000864:	431f      	orrs	r7, r3
 8000866:	e9c5 7100 	strd	r7, r1, [r5]
 800086a:	2600      	movs	r6, #0
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	fa21 f303 	lsr.w	r3, r1, r3
 8000880:	4091      	lsls	r1, r2
 8000882:	4301      	orrs	r1, r0
 8000884:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000888:	fa1f fe8c 	uxth.w	lr, ip
 800088c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000890:	fb07 3610 	mls	r6, r7, r0, r3
 8000894:	0c0b      	lsrs	r3, r1, #16
 8000896:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800089a:	fb00 f60e 	mul.w	r6, r0, lr
 800089e:	429e      	cmp	r6, r3
 80008a0:	fa04 f402 	lsl.w	r4, r4, r2
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x260>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ae:	d22f      	bcs.n	8000910 <__udivmoddi4+0x2b8>
 80008b0:	429e      	cmp	r6, r3
 80008b2:	d92d      	bls.n	8000910 <__udivmoddi4+0x2b8>
 80008b4:	3802      	subs	r0, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1b9b      	subs	r3, r3, r6
 80008ba:	b289      	uxth	r1, r1
 80008bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008c0:	fb07 3316 	mls	r3, r7, r6, r3
 80008c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c8:	fb06 f30e 	mul.w	r3, r6, lr
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x28a>
 80008d0:	eb1c 0101 	adds.w	r1, ip, r1
 80008d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d8:	d216      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d914      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008de:	3e02      	subs	r6, #2
 80008e0:	4461      	add	r1, ip
 80008e2:	1ac9      	subs	r1, r1, r3
 80008e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e8:	e738      	b.n	800075c <__udivmoddi4+0x104>
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e705      	b.n	80006fc <__udivmoddi4+0xa4>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e3      	b.n	80006bc <__udivmoddi4+0x64>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6f8      	b.n	80006ea <__udivmoddi4+0x92>
 80008f8:	454b      	cmp	r3, r9
 80008fa:	d2a9      	bcs.n	8000850 <__udivmoddi4+0x1f8>
 80008fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000900:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000904:	3801      	subs	r0, #1
 8000906:	e7a3      	b.n	8000850 <__udivmoddi4+0x1f8>
 8000908:	4646      	mov	r6, r8
 800090a:	e7ea      	b.n	80008e2 <__udivmoddi4+0x28a>
 800090c:	4620      	mov	r0, r4
 800090e:	e794      	b.n	800083a <__udivmoddi4+0x1e2>
 8000910:	4640      	mov	r0, r8
 8000912:	e7d1      	b.n	80008b8 <__udivmoddi4+0x260>
 8000914:	46d0      	mov	r8, sl
 8000916:	e77b      	b.n	8000810 <__udivmoddi4+0x1b8>
 8000918:	3b02      	subs	r3, #2
 800091a:	4461      	add	r1, ip
 800091c:	e732      	b.n	8000784 <__udivmoddi4+0x12c>
 800091e:	4630      	mov	r0, r6
 8000920:	e709      	b.n	8000736 <__udivmoddi4+0xde>
 8000922:	4464      	add	r4, ip
 8000924:	3802      	subs	r0, #2
 8000926:	e742      	b.n	80007ae <__udivmoddi4+0x156>

08000928 <__aeabi_idiv0>:
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000934:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000938:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d013      	beq.n	800096c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000944:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000948:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800094c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00b      	beq.n	800096c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000954:	e000      	b.n	8000958 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000956:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000958:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0f9      	beq.n	8000956 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000962:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <_write>:
#include "stdarg.h"

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

int _write(int file, char *ptr, int len)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	b29b      	uxth	r3, r3
 800098a:	4619      	mov	r1, r3
 800098c:	68b8      	ldr	r0, [r7, #8]
 800098e:	f010 f8fb 	bl	8010b88 <CDC_Transmit_FS>
	for(int i = 0; i < len; i++)
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	e009      	b.n	80009ac <_write+0x32>
	{
		ITM_SendChar(*ptr++);
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	60ba      	str	r2, [r7, #8]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ffc3 	bl	800092c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3301      	adds	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	dbf1      	blt.n	8000998 <_write+0x1e>

	}
	return len;
 80009b4:	687b      	ldr	r3, [r7, #4]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <log_format>:

static RTC_TimeTypeDef sTime;
static RTC_DateTypeDef sDate;
static uint32_t g_SubSeconds;

void log_format(const char* tag, const char* message, va_list args) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	g_SubSeconds = ((255-(uint32_t)(hrtc.Instance->SSR))*1000L)/(255+1); // ms
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <log_format+0x74>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <log_format+0x78>)
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	f503 3379 	add.w	r3, r3, #254976	; 0x3e400
 80009dc:	3318      	adds	r3, #24
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <log_format+0x7c>)
 80009e2:	6013      	str	r3, [r2, #0]
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80009e4:	2200      	movs	r2, #0
 80009e6:	4916      	ldr	r1, [pc, #88]	; (8000a40 <log_format+0x80>)
 80009e8:	4812      	ldr	r0, [pc, #72]	; (8000a34 <log_format+0x74>)
 80009ea:	f006 fdf1 	bl	80075d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80009ee:	2200      	movs	r2, #0
 80009f0:	4914      	ldr	r1, [pc, #80]	; (8000a44 <log_format+0x84>)
 80009f2:	4810      	ldr	r0, [pc, #64]	; (8000a34 <log_format+0x74>)
 80009f4:	f006 fece 	bl	8007794 <HAL_RTC_GetDate>

	printf("%02d:%02d:%02d,%03lu[%s] ", sTime.Hours, sTime.Minutes, sTime.Seconds, g_SubSeconds, tag);
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <log_format+0x80>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <log_format+0x80>)
 8000a00:	785b      	ldrb	r3, [r3, #1]
 8000a02:	4618      	mov	r0, r3
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <log_format+0x80>)
 8000a06:	789b      	ldrb	r3, [r3, #2]
 8000a08:	461c      	mov	r4, r3
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <log_format+0x7c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	9201      	str	r2, [sp, #4]
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	4623      	mov	r3, r4
 8000a16:	4602      	mov	r2, r0
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <log_format+0x88>)
 8000a1a:	f010 ffa5 	bl	8011968 <iprintf>
	vprintf(message, args);
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	68b8      	ldr	r0, [r7, #8]
 8000a22:	f011 f8ed 	bl	8011c00 <viprintf>
	printf("\r\n");
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <log_format+0x8c>)
 8000a28:	f011 f824 	bl	8011a74 <puts>
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	200002e4 	.word	0x200002e4
 8000a38:	fffffc18 	.word	0xfffffc18
 8000a3c:	200001bc 	.word	0x200001bc
 8000a40:	200001a4 	.word	0x200001a4
 8000a44:	200001b8 	.word	0x200001b8
 8000a48:	080126dc 	.word	0x080126dc
 8000a4c:	080126f8 	.word	0x080126f8

08000a50 <logi>:

void logi(const char* message, ...) {
 8000a50:	b40f      	push	{r0, r1, r2, r3}
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	607b      	str	r3, [r7, #4]
	log_format("INFO", message, args);
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	6939      	ldr	r1, [r7, #16]
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <logi+0x28>)
 8000a64:	f7ff ffac 	bl	80009c0 <log_format>
	va_end(args);
}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a72:	b004      	add	sp, #16
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	080126fc 	.word	0x080126fc

08000a7c <logd>:

void logd(const char* message, ...) {
 8000a7c:	b40f      	push	{r0, r1, r2, r3}
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	607b      	str	r3, [r7, #4]
	log_format("DEBUG", message, args);
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	6939      	ldr	r1, [r7, #16]
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <logd+0x28>)
 8000a90:	f7ff ff96 	bl	80009c0 <log_format>
	va_end(args);
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a9e:	b004      	add	sp, #16
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	08012704 	.word	0x08012704

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aac:	f001 fe98 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab0:	f000 fd58 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab4:	f000 fdc4 	bl	8001640 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ab8:	f000 fcf2 	bl	80014a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000abc:	f000 fe68 	bl	8001790 <MX_I2C1_Init>
  MX_RTC_Init();
 8000ac0:	f000 fe94 	bl	80017ec <MX_RTC_Init>
  MX_SPI2_Init();
 8000ac4:	f000 feec 	bl	80018a0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000ac8:	f000 ff20 	bl	800190c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000acc:	f000 ffaa 	bl	8001a24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ad0:	f000 ffd2 	bl	8001a78 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 fffa 	bl	8001acc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000ad8:	f00a fbcc 	bl	800b274 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000adc:	f00c fcc6 	bl	800d46c <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Telemetry */
  TelemetryHandle = osTimerNew(TelemetrySend, osTimerPeriodic, NULL, &Telemetry_attributes);
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <main+0x8c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <main+0x90>)
 8000ae8:	f00c fdcc 	bl	800d684 <osTimerNew>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <main+0x94>)
 8000af0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(TelemetryHandle, 3000);
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <main+0x94>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00c fe3e 	bl	800d77c <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Main */
  MainHandle = osThreadNew(MainTask, NULL, &Main_attributes);
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <main+0x98>)
 8000b02:	2100      	movs	r1, #0
 8000b04:	480f      	ldr	r0, [pc, #60]	; (8000b44 <main+0x9c>)
 8000b06:	f00c fcfb 	bl	800d500 <osThreadNew>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <main+0xa0>)
 8000b0e:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(CommunicationTask, NULL, &Communication_attributes);
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <main+0xa4>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	480e      	ldr	r0, [pc, #56]	; (8000b50 <main+0xa8>)
 8000b16:	f00c fcf3 	bl	800d500 <osThreadNew>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <main+0xac>)
 8000b1e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of EventReceived */
  EventReceivedHandle = osEventFlagsNew(&EventReceived_attributes);
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <main+0xb0>)
 8000b22:	f00c fe59 	bl	800d7d8 <osEventFlagsNew>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <main+0xb4>)
 8000b2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b2c:	f00c fcc2 	bl	800d4b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <main+0x88>
 8000b32:	bf00      	nop
 8000b34:	08012af0 	.word	0x08012af0
 8000b38:	08000d31 	.word	0x08000d31
 8000b3c:	200001c8 	.word	0x200001c8
 8000b40:	08012aa8 	.word	0x08012aa8
 8000b44:	08000b75 	.word	0x08000b75
 8000b48:	200001c0 	.word	0x200001c0
 8000b4c:	08012acc 	.word	0x08012acc
 8000b50:	08000bed 	.word	0x08000bed
 8000b54:	200001c4 	.word	0x200001c4
 8000b58:	08012b00 	.word	0x08012b00
 8000b5c:	200001cc 	.word	0x200001cc

08000b60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//uint8_t buffer[14] = {};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart3, (uint8_t *)buffer, sizeof(buffer));
    printf("%s\n",buffer);
    printf("receive\n");
    */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <MainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_MainTask */
void MainTask(void *argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b7c:	f00f ff16 	bl	80109ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  //HAL_UART_Receive_IT(&huart3, (uint8_t *) buffer, sizeof(buffer));
  //uint8_t data[]= {0x7E, 0x00, 0x0A, 0x01, 0x01, 0xCC, 0xCC, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x71};
  logi("Initializing...");
 8000b80:	4814      	ldr	r0, [pc, #80]	; (8000bd4 <MainTask+0x60>)
 8000b82:	f7ff ff65 	bl	8000a50 <logi>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8c:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <MainTask+0x64>)
 8000b8e:	f002 fc07 	bl	80033a0 <HAL_GPIO_WritePin>
  Init_BMP390();
 8000b92:	f001 fc6f 	bl	8002474 <Init_BMP390>
  Init_BNO055();
 8000b96:	f001 fce1 	bl	800255c <Init_BNO055>
  Init_SD();
 8000b9a:	f001 fced 	bl	8002578 <Init_SD>
  Init_Servo(&hservo1, &hservo2, &hservo3);
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <MainTask+0x68>)
 8000ba0:	490f      	ldr	r1, [pc, #60]	; (8000be0 <MainTask+0x6c>)
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <MainTask+0x70>)
 8000ba4:	f001 fcf0 	bl	8002588 <Init_Servo>
  osDelay(100);
 8000ba8:	2064      	movs	r0, #100	; 0x64
 8000baa:	f00c fd3b 	bl	800d624 <osDelay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MainTask+0x64>)
 8000bb6:	f002 fbf3 	bl	80033a0 <HAL_GPIO_WritePin>
  logi("Initialized");
 8000bba:	480b      	ldr	r0, [pc, #44]	; (8000be8 <MainTask+0x74>)
 8000bbc:	f7ff ff48 	bl	8000a50 <logi>
  for(;;)
  {
    osDelay(1000);
 8000bc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc4:	f00c fd2e 	bl	800d624 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000bc8:	2120      	movs	r1, #32
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MainTask+0x64>)
 8000bcc:	f002 fc01 	bl	80033d2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000bd0:	e7f6      	b.n	8000bc0 <MainTask+0x4c>
 8000bd2:	bf00      	nop
 8000bd4:	08012748 	.word	0x08012748
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	200001e0 	.word	0x200001e0
 8000be0:	200001d8 	.word	0x200001d8
 8000be4:	200001d0 	.word	0x200001d0
 8000be8:	08012758 	.word	0x08012758

08000bec <CommunicationTask>:
* @brief Function implementing the Communication thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommunicationTask */
void CommunicationTask(void *argument) {
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	b088      	sub	sp, #32
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CommunicationTask */
	/* Infinite loop */
	uint32_t event_flag;
	uint32_t buffer;
	uint16_t cmd = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef status;
	for (;;) {
		event_flag = osEventFlagsWait(EventReceivedHandle, RECEIVED_USB,
 8000bf8:	4b43      	ldr	r3, [pc, #268]	; (8000d08 <CommunicationTask+0x11c>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	2200      	movs	r2, #0
 8000c02:	2101      	movs	r1, #1
 8000c04:	f00c fe6c 	bl	800d8e0 <osEventFlagsWait>
 8000c08:	6178      	str	r0, [r7, #20]
				osFlagsWaitAny, 1000);
		if (event_flag & RECEIVED_USB) {
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d076      	beq.n	8000d02 <CommunicationTask+0x116>
			Buzzer_Once();
 8000c14:	f001 fc1a 	bl	800244c <Buzzer_Once>
 8000c18:	4b3c      	ldr	r3, [pc, #240]	; (8000d0c <CommunicationTask+0x120>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
			memcpy(&cmd, usb_rx_buffer.buffer, DEBUG_CMD_SIZE);
 8000c1c:	817b      	strh	r3, [r7, #10]
			switch (cmd) {
 8000c1e:	897b      	ldrh	r3, [r7, #10]
 8000c20:	f647 2262 	movw	r2, #31330	; 0x7a62
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d00c      	beq.n	8000c42 <CommunicationTask+0x56>
 8000c28:	f647 2262 	movw	r2, #31330	; 0x7a62
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	dce3      	bgt.n	8000bf8 <CommunicationTask+0xc>
 8000c30:	f646 4263 	movw	r2, #27747	; 0x6c63
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d012      	beq.n	8000c5e <CommunicationTask+0x72>
 8000c38:	f247 2270 	movw	r2, #29296	; 0x7270
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d01d      	beq.n	8000c7c <CommunicationTask+0x90>
 8000c40:	e060      	b.n	8000d04 <CommunicationTask+0x118>
			case DEBUG_CMD_BUZZER:
				logd("Buzzer");
 8000c42:	4833      	ldr	r0, [pc, #204]	; (8000d10 <CommunicationTask+0x124>)
 8000c44:	f7ff ff1a 	bl	8000a7c <logd>
				osDelay(100);
 8000c48:	2064      	movs	r0, #100	; 0x64
 8000c4a:	f00c fceb 	bl	800d624 <osDelay>
				Buzzer_Once();
 8000c4e:	f001 fbfd 	bl	800244c <Buzzer_Once>
				osDelay(100);
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f00c fce6 	bl	800d624 <osDelay>
				Buzzer_Once();
 8000c58:	f001 fbf8 	bl	800244c <Buzzer_Once>
				break;
 8000c5c:	e052      	b.n	8000d04 <CommunicationTask+0x118>
			case DEBUG_CMD_CALIBRATION:
				status = BMP390_ReadCalibration();
 8000c5e:	f001 f883 	bl	8001d68 <BMP390_ReadCalibration>
 8000c62:	4603      	mov	r3, r0
 8000c64:	74fb      	strb	r3, [r7, #19]
				if(status == HAL_OK) {
 8000c66:	7cfb      	ldrb	r3, [r7, #19]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d103      	bne.n	8000c74 <CommunicationTask+0x88>
				  logi("BMP390 CAL Complete.");
 8000c6c:	4829      	ldr	r0, [pc, #164]	; (8000d14 <CommunicationTask+0x128>)
 8000c6e:	f7ff feef 	bl	8000a50 <logi>
				} else {
					logi("BMP390 CAL Fail.");
				}
				break;
 8000c72:	e047      	b.n	8000d04 <CommunicationTask+0x118>
					logi("BMP390 CAL Fail.");
 8000c74:	4828      	ldr	r0, [pc, #160]	; (8000d18 <CommunicationTask+0x12c>)
 8000c76:	f7ff feeb 	bl	8000a50 <logi>
				break;
 8000c7a:	e043      	b.n	8000d04 <CommunicationTask+0x118>
			case DEBUG_CMD_PRESSURE:
				logd("Pressure");
 8000c7c:	4827      	ldr	r0, [pc, #156]	; (8000d1c <CommunicationTask+0x130>)
 8000c7e:	f7ff fefd 	bl	8000a7c <logd>

				if(BMP390_ReadRawPressure(&buffer, 10) != HAL_OK) {
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	210a      	movs	r1, #10
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 f9bb 	bl	8002004 <BMP390_ReadRawPressure>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <CommunicationTask+0xae>
					logi("BMP Read Pressure Error.");
 8000c94:	4822      	ldr	r0, [pc, #136]	; (8000d20 <CommunicationTask+0x134>)
 8000c96:	f7ff fedb 	bl	8000a50 <logi>
				}
				sensor_data.pressure = BMP390_CompensatePressure(buffer);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 ff85 	bl	8001bac <BMP390_CompensatePressure>
 8000ca2:	eef0 7a40 	vmov.f32	s15, s0
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <CommunicationTask+0x138>)
 8000ca8:	edc3 7a00 	vstr	s15, [r3]

				if(BMP390_ReadRawTemperature(&buffer, 10) != HAL_OK) {
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	210a      	movs	r1, #10
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 f9c8 	bl	8002048 <BMP390_ReadRawTemperature>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <CommunicationTask+0xd8>
					logi("BMP Read Temperature Error.");
 8000cbe:	481a      	ldr	r0, [pc, #104]	; (8000d28 <CommunicationTask+0x13c>)
 8000cc0:	f7ff fec6 	bl	8000a50 <logi>
				}
				sensor_data.temperature =  BMP390_CompensateTemperature(buffer);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 ff3a 	bl	8001b40 <BMP390_CompensateTemperature>
 8000ccc:	eef0 7a40 	vmov.f32	s15, s0
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <CommunicationTask+0x138>)
 8000cd2:	edc3 7a01 	vstr	s15, [r3, #4]

				logd("Temperature %f / pressure %f", sensor_data.temperature, sensor_data.pressure);
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <CommunicationTask+0x138>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fc4c 	bl	8000578 <__aeabi_f2d>
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460d      	mov	r5, r1
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <CommunicationTask+0x138>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc45 	bl	8000578 <__aeabi_f2d>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	e9cd 2300 	strd	r2, r3, [sp]
 8000cf6:	4622      	mov	r2, r4
 8000cf8:	462b      	mov	r3, r5
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <CommunicationTask+0x140>)
 8000cfc:	f7ff febe 	bl	8000a7c <logd>

				break;
 8000d00:	e000      	b.n	8000d04 <CommunicationTask+0x118>
			}
		}
 8000d02:	bf00      	nop
		event_flag = osEventFlagsWait(EventReceivedHandle, RECEIVED_USB,
 8000d04:	e778      	b.n	8000bf8 <CommunicationTask+0xc>
 8000d06:	bf00      	nop
 8000d08:	200001cc 	.word	0x200001cc
 8000d0c:	200001e8 	.word	0x200001e8
 8000d10:	08012764 	.word	0x08012764
 8000d14:	0801276c 	.word	0x0801276c
 8000d18:	08012784 	.word	0x08012784
 8000d1c:	08012798 	.word	0x08012798
 8000d20:	080127a4 	.word	0x080127a4
 8000d24:	200001f4 	.word	0x200001f4
 8000d28:	080127c0 	.word	0x080127c0
 8000d2c:	080127dc 	.word	0x080127dc

08000d30 <TelemetrySend>:
	/* USER CODE END CommunicationTask */
}

/* TelemetrySend function */
void TelemetrySend(void *argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TelemetrySend */
	logd("Telemetry");
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <TelemetrySend+0x18>)
 8000d3a:	f7ff fe9f 	bl	8000a7c <logd>
  /* USER CODE END TelemetrySend */
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0801272c 	.word	0x0801272c

08000d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5e:	f001 fd61 	bl	8002824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40001000 	.word	0x40001000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  printf("Error_Handler\r\n");
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <Error_Handler+0x14>)
 8000d76:	f010 fe7d 	bl	8011a74 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7a:	b672      	cpsid	i
}
 8000d7c:	bf00      	nop
  __disable_irq();

  while (1)
  {
	  break;
 8000d7e:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	080127fc 	.word	0x080127fc

08000d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_MspInit+0x54>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <HAL_MspInit+0x54>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x54>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_MspInit+0x54>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_MspInit+0x54>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x54>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	210f      	movs	r1, #15
 8000dca:	f06f 0001 	mvn.w	r0, #1
 8000dce:	f002 f897 	bl	8002f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_ADC_MspInit+0x7c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d127      	bne.n	8000e52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a15      	ldr	r2, [pc, #84]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_ADC_MspInit+0x80>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_ADC_MspInit+0x84>)
 8000e4e:	f002 f913 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40012000 	.word	0x40012000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_I2C_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12c      	bne.n	8000ee4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000e94:	f043 0302 	orr.w	r3, r3, #2
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eac:	2312      	movs	r3, #18
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <HAL_I2C_MspInit+0x8c>)
 8000ec4:	f002 f8d8 	bl	8003078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000ed2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_I2C_MspInit+0x88>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09a      	sub	sp, #104	; 0x68
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	225c      	movs	r2, #92	; 0x5c
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f010 fc45 	bl	8011798 <memset>
  if(hrtc->Instance==RTC)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <HAL_RTC_MspInit+0x4c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d111      	bne.n	8000f3c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f18:	2320      	movs	r3, #32
 8000f1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f20:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4618      	mov	r0, r3
 8000f28:	f005 fad0 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000f32:	f7ff ff1d 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_RTC_MspInit+0x50>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3768      	adds	r7, #104	; 0x68
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40002800 	.word	0x40002800
 8000f48:	42470e3c 	.word	0x42470e3c

08000f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_SPI_MspInit+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12c      	bne.n	8000fc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fa6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb8:	2305      	movs	r3, #5
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000fc4:	f002 f858 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40003800 	.word	0x40003800
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <HAL_TIM_Base_MspInit+0x3c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10d      	bne.n	800100a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_TIM_Base_MspInit+0x40>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40000400 	.word	0x40000400
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a12      	ldr	r2, [pc, #72]	; (8001088 <HAL_TIM_MspPostInit+0x68>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11e      	bne.n	8001080 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_TIM_MspPostInit+0x6c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800105e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001062:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001070:	2302      	movs	r3, #2
 8001072:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_TIM_MspPostInit+0x70>)
 800107c:	f001 fffc 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40000400 	.word	0x40000400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_UART_MspInit+0x15c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12c      	bne.n	8001110 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
 80010ba:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a4d      	ldr	r2, [pc, #308]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	623b      	str	r3, [r7, #32]
 80010d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a46      	ldr	r2, [pc, #280]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ee:	23c0      	movs	r3, #192	; 0xc0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010fe:	2307      	movs	r3, #7
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	483b      	ldr	r0, [pc, #236]	; (80011f8 <HAL_UART_MspInit+0x164>)
 800110a:	f001 ffb5 	bl	8003078 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800110e:	e06b      	b.n	80011e8 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a39      	ldr	r2, [pc, #228]	; (80011fc <HAL_UART_MspInit+0x168>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12c      	bne.n	8001174 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <HAL_UART_MspInit+0x160>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a34      	ldr	r2, [pc, #208]	; (80011f4 <HAL_UART_MspInit+0x160>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <HAL_UART_MspInit+0x160>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_UART_MspInit+0x160>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <HAL_UART_MspInit+0x160>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <HAL_UART_MspInit+0x160>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001152:	230c      	movs	r3, #12
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001162:	2307      	movs	r3, #7
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	4824      	ldr	r0, [pc, #144]	; (8001200 <HAL_UART_MspInit+0x16c>)
 800116e:	f001 ff83 	bl	8003078 <HAL_GPIO_Init>
}
 8001172:	e039      	b.n	80011e8 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_UART_MspInit+0x170>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d134      	bne.n	80011e8 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART3_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_UART_MspInit+0x160>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_UART_MspInit+0x160>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_UART_MspInit+0x160>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_UART_MspInit+0x160>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011c8:	2307      	movs	r3, #7
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	4619      	mov	r1, r3
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <HAL_UART_MspInit+0x174>)
 80011d4:	f001 ff50 	bl	8003078 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2105      	movs	r1, #5
 80011dc:	2027      	movs	r0, #39	; 0x27
 80011de:	f001 fe8f 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011e2:	2027      	movs	r0, #39	; 0x27
 80011e4:	f001 fea8 	bl	8002f38 <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40011000 	.word	0x40011000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40004400 	.word	0x40004400
 8001200:	40020000 	.word	0x40020000
 8001204:	40004800 	.word	0x40004800
 8001208:	40020800 	.word	0x40020800

0800120c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	; 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_InitTick+0xe4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a32      	ldr	r2, [pc, #200]	; (80012f0 <HAL_InitTick+0xe4>)
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_InitTick+0xe4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001238:	f107 0210 	add.w	r2, r7, #16
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f005 f910 	bl	8006468 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124e:	2b00      	cmp	r3, #0
 8001250:	d103      	bne.n	800125a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001252:	f005 f8e1 	bl	8006418 <HAL_RCC_GetPCLK1Freq>
 8001256:	6378      	str	r0, [r7, #52]	; 0x34
 8001258:	e004      	b.n	8001264 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800125a:	f005 f8dd 	bl	8006418 <HAL_RCC_GetPCLK1Freq>
 800125e:	4603      	mov	r3, r0
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001266:	4a23      	ldr	r2, [pc, #140]	; (80012f4 <HAL_InitTick+0xe8>)
 8001268:	fba2 2303 	umull	r2, r3, r2, r3
 800126c:	0c9b      	lsrs	r3, r3, #18
 800126e:	3b01      	subs	r3, #1
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_InitTick+0xec>)
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <HAL_InitTick+0xf0>)
 8001276:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_InitTick+0xec>)
 800127a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001280:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <HAL_InitTick+0xec>)
 8001282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001284:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001286:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <HAL_InitTick+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_InitTick+0xec>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <HAL_InitTick+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001298:	4817      	ldr	r0, [pc, #92]	; (80012f8 <HAL_InitTick+0xec>)
 800129a:	f006 fc10 	bl	8007abe <HAL_TIM_Base_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11b      	bne.n	80012e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <HAL_InitTick+0xec>)
 80012ae:	f006 fc55 	bl	8007b5c <HAL_TIM_Base_Start_IT>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d111      	bne.n	80012e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012c0:	2036      	movs	r0, #54	; 0x36
 80012c2:	f001 fe39 	bl	8002f38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d808      	bhi.n	80012de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	2036      	movs	r0, #54	; 0x36
 80012d2:	f001 fe15 	bl	8002f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_InitTick+0xf4>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e002      	b.n	80012e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3738      	adds	r7, #56	; 0x38
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40023800 	.word	0x40023800
 80012f4:	431bde83 	.word	0x431bde83
 80012f8:	200001fc 	.word	0x200001fc
 80012fc:	40001000 	.word	0x40001000
 8001300:	20000004 	.word	0x20000004

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001308:	e7fe      	b.n	8001308 <NMI_Handler+0x4>

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <USART3_IRQHandler+0x10>)
 8001336:	f007 fc99 	bl	8008c6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000042c 	.word	0x2000042c

08001344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM6_DAC_IRQHandler+0x10>)
 800134a:	f006 fde7 	bl	8007f1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001fc 	.word	0x200001fc

08001358 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <OTG_FS_IRQHandler+0x10>)
 800135e:	f003 fdf7 	bl	8004f50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200063ec 	.word	0x200063ec

0800136c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	e00a      	b.n	8001394 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137e:	f3af 8000 	nop.w
 8001382:	4601      	mov	r1, r0
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	60ba      	str	r2, [r7, #8]
 800138a:	b2ca      	uxtb	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	697a      	ldr	r2, [r7, #20]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	429a      	cmp	r2, r3
 800139a:	dbf0      	blt.n	800137e <_read+0x12>
  }

  return len;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ce:	605a      	str	r2, [r3, #4]
  return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <_isatty>:

int _isatty(int file)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f010 f874 	bl	801152c <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20020000 	.word	0x20020000
 8001470:	00000400 	.word	0x00000400
 8001474:	20000244 	.word	0x20000244
 8001478:	20006b28 	.word	0x20006b28

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014b4:	4a29      	ldr	r2, [pc, #164]	; (800155c <MX_ADC1_Init+0xbc>)
 80014b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80014c4:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80014d0:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <MX_ADC1_Init+0xc0>)
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_ADC1_Init+0xb8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_ADC1_Init+0xb8>)
 8001500:	2201      	movs	r2, #1
 8001502:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <MX_ADC1_Init+0xb8>)
 8001506:	f001 f9d1 	bl	80028ac <HAL_ADC_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001510:	f7ff fc2e 	bl	8000d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_ADC1_Init+0xb8>)
 8001526:	f001 fa05 	bl	8002934 <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001530:	f7ff fc1e 	bl	8000d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001534:	2301      	movs	r3, #1
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001538:	2302      	movs	r3, #2
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_ADC1_Init+0xb8>)
 8001542:	f001 f9f7 	bl	8002934 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800154c:	f7ff fc10 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000248 	.word	0x20000248
 800155c:	40012000 	.word	0x40012000
 8001560:	0f000001 	.word	0x0f000001

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b094      	sub	sp, #80	; 0x50
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	2234      	movs	r2, #52	; 0x34
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f010 f910 	bl	8011798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <SystemClock_Config+0xd4>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a29      	ldr	r2, [pc, #164]	; (8001638 <SystemClock_Config+0xd4>)
 8001592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <SystemClock_Config+0xd4>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <SystemClock_Config+0xd8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015b0:	4a22      	ldr	r2, [pc, #136]	; (800163c <SystemClock_Config+0xd8>)
 80015b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <SystemClock_Config+0xd8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80015c4:	2305      	movs	r3, #5
 80015c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ce:	2301      	movs	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 6;
 80015dc:	2306      	movs	r3, #6
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015e0:	2348      	movs	r3, #72	; 0x48
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015e8:	2303      	movs	r3, #3
 80015ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ec:	2302      	movs	r3, #2
 80015ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4618      	mov	r0, r3
 80015f6:	f005 fc3d 	bl	8006e74 <HAL_RCC_OscConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001600:	f7ff fbb6 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001604:	230f      	movs	r3, #15
 8001606:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001608:	2302      	movs	r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	2102      	movs	r1, #2
 8001620:	4618      	mov	r0, r3
 8001622:	f004 fe07 	bl	8006234 <HAL_RCC_ClockConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800162c:	f7ff fba0 	bl	8000d70 <Error_Handler>
  }
}
 8001630:	bf00      	nop
 8001632:	3750      	adds	r7, #80	; 0x50
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40023800 	.word	0x40023800
 800163c:	40007000 	.word	0x40007000

08001640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <MX_GPIO_Init+0x140>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a48      	ldr	r2, [pc, #288]	; (8001780 <MX_GPIO_Init+0x140>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <MX_GPIO_Init+0x140>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <MX_GPIO_Init+0x140>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a41      	ldr	r2, [pc, #260]	; (8001780 <MX_GPIO_Init+0x140>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <MX_GPIO_Init+0x140>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <MX_GPIO_Init+0x140>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a3a      	ldr	r2, [pc, #232]	; (8001780 <MX_GPIO_Init+0x140>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <MX_GPIO_Init+0x140>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <MX_GPIO_Init+0x140>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a33      	ldr	r2, [pc, #204]	; (8001780 <MX_GPIO_Init+0x140>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <MX_GPIO_Init+0x140>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZ_Pin|CM1_Pin|CM2_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	210e      	movs	r1, #14
 80016ca:	482e      	ldr	r0, [pc, #184]	; (8001784 <MX_GPIO_Init+0x144>)
 80016cc:	f001 fe68 	bl	80033a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|USB_IO_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80016d6:	482c      	ldr	r0, [pc, #176]	; (8001788 <MX_GPIO_Init+0x148>)
 80016d8:	f001 fe62 	bl	80033a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e2:	482a      	ldr	r0, [pc, #168]	; (800178c <MX_GPIO_Init+0x14c>)
 80016e4:	f001 fe5c 	bl	80033a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4821      	ldr	r0, [pc, #132]	; (8001784 <MX_GPIO_Init+0x144>)
 8001700:	f001 fcba 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001704:	2302      	movs	r3, #2
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	481a      	ldr	r0, [pc, #104]	; (8001784 <MX_GPIO_Init+0x144>)
 800171c:	f001 fcac 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : CM1_Pin CM2_Pin */
  GPIO_InitStruct.Pin = CM1_Pin|CM2_Pin;
 8001720:	230c      	movs	r3, #12
 8001722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172c:	2303      	movs	r3, #3
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4813      	ldr	r0, [pc, #76]	; (8001784 <MX_GPIO_Init+0x144>)
 8001738:	f001 fc9e 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin USB_IO_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|USB_IO_Pin;
 800173c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_GPIO_Init+0x148>)
 8001756:	f001 fc8f 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800175a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_GPIO_Init+0x14c>)
 8001774:	f001 fc80 	bl	8003078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40023800 	.word	0x40023800
 8001784:	40020800 	.word	0x40020800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400

08001790 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_I2C1_Init+0x50>)
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <MX_I2C1_Init+0x54>)
 8001798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_I2C1_Init+0x50>)
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <MX_I2C1_Init+0x58>)
 800179e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_I2C1_Init+0x50>)
 80017ce:	f001 fe1b 	bl	8003408 <HAL_I2C_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d8:	f7ff faca 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000290 	.word	0x20000290
 80017e4:	40005400 	.word	0x40005400
 80017e8:	00061a80 	.word	0x00061a80

080017ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001800:	2300      	movs	r3, #0
 8001802:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <MX_RTC_Init+0xac>)
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <MX_RTC_Init+0xb0>)
 8001808:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <MX_RTC_Init+0xac>)
 800180c:	2200      	movs	r2, #0
 800180e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_RTC_Init+0xac>)
 8001812:	227f      	movs	r2, #127	; 0x7f
 8001814:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <MX_RTC_Init+0xac>)
 8001818:	22ff      	movs	r2, #255	; 0xff
 800181a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <MX_RTC_Init+0xac>)
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_RTC_Init+0xac>)
 8001824:	2200      	movs	r2, #0
 8001826:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <MX_RTC_Init+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800182e:	481a      	ldr	r0, [pc, #104]	; (8001898 <MX_RTC_Init+0xac>)
 8001830:	f005 fdbe 	bl	80073b0 <HAL_RTC_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800183a:	f7ff fa99 	bl	8000d70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800183e:	2300      	movs	r3, #0
 8001840:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001842:	2300      	movs	r3, #0
 8001844:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001846:	2300      	movs	r3, #0
 8001848:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2201      	movs	r2, #1
 8001856:	4619      	mov	r1, r3
 8001858:	480f      	ldr	r0, [pc, #60]	; (8001898 <MX_RTC_Init+0xac>)
 800185a:	f005 fe1f 	bl	800749c <HAL_RTC_SetTime>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001864:	f7ff fa84 	bl	8000d70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001868:	2301      	movs	r3, #1
 800186a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800186c:	2301      	movs	r3, #1
 800186e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001870:	2301      	movs	r3, #1
 8001872:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001874:	2300      	movs	r3, #0
 8001876:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	2201      	movs	r2, #1
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	; (8001898 <MX_RTC_Init+0xac>)
 8001880:	f005 ff04 	bl	800768c <HAL_RTC_SetDate>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800188a:	f7ff fa71 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200002e4 	.word	0x200002e4
 800189c:	40002800 	.word	0x40002800

080018a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_SPI2_Init+0x64>)
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <MX_SPI2_Init+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_SPI2_Init+0x64>)
 80018ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_SPI2_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_SPI2_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_SPI2_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_SPI2_Init+0x64>)
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_SPI2_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_SPI2_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_SPI2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MX_SPI2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_SPI2_Init+0x64>)
 80018ec:	220a      	movs	r2, #10
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_SPI2_Init+0x64>)
 80018f2:	f006 f85b 	bl	80079ac <HAL_SPI_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018fc:	f7ff fa38 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000304 	.word	0x20000304
 8001908:	40003800 	.word	0x40003800

0800190c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
 8001938:	615a      	str	r2, [r3, #20]
 800193a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <MX_TIM3_Init+0x110>)
 800193e:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <MX_TIM3_Init+0x114>)
 8001940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001944:	2247      	movs	r2, #71	; 0x47
 8001946:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <MX_TIM3_Init+0x110>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800194e:	4b33      	ldr	r3, [pc, #204]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001954:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <MX_TIM3_Init+0x110>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001962:	482e      	ldr	r0, [pc, #184]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001964:	f006 f8ab 	bl	8007abe <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800196e:	f7ff f9ff 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001978:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197c:	4619      	mov	r1, r3
 800197e:	4827      	ldr	r0, [pc, #156]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001980:	f006 fc96 	bl	80082b0 <HAL_TIM_ConfigClockSource>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800198a:	f7ff f9f1 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001990:	f006 f954 	bl	8007c3c <HAL_TIM_PWM_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800199a:	f7ff f9e9 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019a6:	f107 0320 	add.w	r3, r7, #32
 80019aa:	4619      	mov	r1, r3
 80019ac:	481b      	ldr	r0, [pc, #108]	; (8001a1c <MX_TIM3_Init+0x110>)
 80019ae:	f007 f87f 	bl	8008ab0 <HAL_TIMEx_MasterConfigSynchronization>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019b8:	f7ff f9da 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019bc:	2360      	movs	r3, #96	; 0x60
 80019be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4812      	ldr	r0, [pc, #72]	; (8001a1c <MX_TIM3_Init+0x110>)
 80019d4:	f006 fbaa 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019de:	f7ff f9c7 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2204      	movs	r2, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	480c      	ldr	r0, [pc, #48]	; (8001a1c <MX_TIM3_Init+0x110>)
 80019ea:	f006 fb9f 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019f4:	f7ff f9bc 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2208      	movs	r2, #8
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001a00:	f006 fb94 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001a0a:	f7ff f9b1 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM3_Init+0x110>)
 8001a10:	f7ff fb06 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3738      	adds	r7, #56	; 0x38
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000035c 	.word	0x2000035c
 8001a20:	40000400 	.word	0x40000400

08001a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <MX_USART1_UART_Init+0x50>)
 8001a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_USART1_UART_Init+0x4c>)
 8001a5c:	f007 f8b8 	bl	8008bd0 <HAL_UART_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a66:	f7ff f983 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200003a4 	.word	0x200003a4
 8001a74:	40011000 	.word	0x40011000

08001a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f007 f88e 	bl	8008bd0 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f7ff f959 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200003e8 	.word	0x200003e8
 8001ac8:	40004400 	.word	0x40004400

08001acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad0:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad2:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_USART3_UART_Init+0x50>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_USART3_UART_Init+0x4c>)
 8001b04:	f007 f864 	bl	8008bd0 <HAL_UART_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b0e:	f7ff f92f 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000042c 	.word	0x2000042c
 8001b1c:	40004800 	.word	0x40004800

08001b20 <BMP390_AssignI2C>:
// variables
I2C_HandleTypeDef *bmp390_phi2c;
static BMP390_CalibrationTypeDef Bmp390calib;

// functions implement
void BMP390_AssignI2C(I2C_HandleTypeDef *phi2c){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	bmp390_phi2c = phi2c;
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <BMP390_AssignI2C+0x1c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000470 	.word	0x20000470

08001b40 <BMP390_CompensateTemperature>:
	if ( result != HAL_OK ) return result;
	*PressurePtr = BMP390_CompensatePressure(buf);

	return HAL_OK;
}
float BMP390_CompensateTemperature( uint32_t RawTemp ){
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	float pd1, pd2;	// partial data
	pd1 = ( float ) ( RawTemp - Bmp390calib.par_t1 );
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <BMP390_CompensateTemperature+0x68>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	edc7 7a03 	vstr	s15, [r7, #12]
	pd2 = ( float ) ( pd1 * Bmp390calib.par_t2);
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <BMP390_CompensateTemperature+0x68>)
 8001b62:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b66:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	edc7 7a02 	vstr	s15, [r7, #8]
	Bmp390calib.t_lin = pd2 + ( pd1 * pd1 ) * Bmp390calib.par_t3;
 8001b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <BMP390_CompensateTemperature+0x68>)
 8001b7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <BMP390_CompensateTemperature+0x68>)
 8001b8e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	return Bmp390calib.t_lin;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <BMP390_CompensateTemperature+0x68>)
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	ee07 3a90 	vmov	s15, r3
}
 8001b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	20000474 	.word	0x20000474

08001bac <BMP390_CompensatePressure>:
float BMP390_CompensatePressure( uint32_t RawPres ){
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	float pd1, pd2, pd3;
	float po1, po2, po3;	// partial out

	// independent from pressure
	pd1 = Bmp390calib.par_p6 *  Bmp390calib.t_lin;
 8001bb4:	4b6b      	ldr	r3, [pc, #428]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bb6:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bba:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bbc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc4:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p7 * (Bmp390calib.t_lin * Bmp390calib.t_lin);
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bca:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001bce:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bd0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001bd4:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bd6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	edc7 7a06 	vstr	s15, [r7, #24]
	pd3 = Bmp390calib.par_p8 * (Bmp390calib.t_lin * Bmp390calib.t_lin * Bmp390calib.t_lin);
 8001be6:	4b5f      	ldr	r3, [pc, #380]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001be8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001bec:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bee:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bf4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bfc:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001bfe:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0a:	edc7 7a05 	vstr	s15, [r7, #20]
	po1 = Bmp390calib.par_p5 +  pd1 + pd2 + pd3;
 8001c0e:	4b55      	ldr	r3, [pc, #340]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c10:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c14:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c24:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	edc7 7a04 	vstr	s15, [r7, #16]

	// linear to pressure
	pd1 = Bmp390calib.par_p2 *  Bmp390calib.t_lin;
 8001c30:	4b4c      	ldr	r3, [pc, #304]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c32:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c36:	4b4b      	ldr	r3, [pc, #300]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c38:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c40:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p3 * (Bmp390calib.t_lin * Bmp390calib.t_lin);
 8001c44:	4b47      	ldr	r3, [pc, #284]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c46:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c4a:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c4c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001c50:	4b44      	ldr	r3, [pc, #272]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c52:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	edc7 7a06 	vstr	s15, [r7, #24]
	pd3 = Bmp390calib.par_p4 * (Bmp390calib.t_lin * Bmp390calib.t_lin * Bmp390calib.t_lin);
 8001c62:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c64:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c68:	4b3e      	ldr	r3, [pc, #248]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c6a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001c6e:	4b3d      	ldr	r3, [pc, #244]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c70:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c7a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c86:	edc7 7a05 	vstr	s15, [r7, #20]
	po2 = ( float ) RawPres * (Bmp390calib.par_p1 + pd1 + pd2 + pd3);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001c96:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb6:	edc7 7a03 	vstr	s15, [r7, #12]

	// power 2
	pd1 = (float) RawPres     * (float) RawPres;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd2:	edc7 7a07 	vstr	s15, [r7, #28]
	pd2 = Bmp390calib.par_p9 +  Bmp390calib.par_p10 * Bmp390calib.t_lin;
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001cd8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001cde:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001ce4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	edc7 7a06 	vstr	s15, [r7, #24]
	po3 = pd1 * pd2;
 8001cf4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	edc7 7a02 	vstr	s15, [r7, #8]

	// power 3
	pd3 = ((float) RawPres * (float) RawPres * (float) RawPres) * Bmp390calib.par_p11;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <BMP390_CompensatePressure+0x1b8>)
 8001d2c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d34:	edc7 7a05 	vstr	s15, [r7, #20]

	return po1 + po2 + po3 + pd3;
 8001d38:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000474 	.word	0x20000474

08001d68 <BMP390_ReadCalibration>:
HAL_StatusTypeDef BMP390_ReadCalibration(void){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0
	// declare
	uint16_t	nvm_par_t1 = 0, nvm_par_t2 = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001d72:	2300      	movs	r3, #0
 8001d74:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int8_t		nvm_par_t3 = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	int16_t		nvm_par_p1 = 0, nvm_par_p2 = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001d80:	2300      	movs	r3, #0
 8001d82:	84fb      	strh	r3, [r7, #38]	; 0x26
	int8_t		nvm_par_p3 = 0, nvm_par_p4 = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint16_t	nvm_par_p5 = 0, nvm_par_p6 = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d94:	2300      	movs	r3, #0
 8001d96:	843b      	strh	r3, [r7, #32]
	int8_t		nvm_par_p7 = 0, nvm_par_p8 = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	77fb      	strb	r3, [r7, #31]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	77bb      	strb	r3, [r7, #30]
	int16_t		nvm_par_p9 = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	83bb      	strh	r3, [r7, #28]
	int8_t		nvm_par_p10 = 0, nvm_par_p11 = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	76fb      	strb	r3, [r7, #27]
 8001da8:	2300      	movs	r3, #0
 8001daa:	76bb      	strb	r3, [r7, #26]

	uint8_t buf[21];
	HAL_StatusTypeDef result;

	// read
	result = BMP390_Read(BMP390_REG_NVMPAR, buf, sizeof(buf), 10);
 8001dac:	1d39      	adds	r1, r7, #4
 8001dae:	230a      	movs	r3, #10
 8001db0:	2215      	movs	r2, #21
 8001db2:	2031      	movs	r0, #49	; 0x31
 8001db4:	f000 f99a 	bl	80020ec <BMP390_Read>
 8001db8:	4603      	mov	r3, r0
 8001dba:	767b      	strb	r3, [r7, #25]
	if ( result != HAL_OK) return result;
 8001dbc:	7e7b      	ldrb	r3, [r7, #25]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <BMP390_ReadCalibration+0x5e>
 8001dc2:	7e7b      	ldrb	r3, [r7, #25]
 8001dc4:	e100      	b.n	8001fc8 <BMP390_ReadCalibration+0x260>
	nvm_par_t1 	= ((uint16_t) buf[1] ) 	<< 8 | (uint16_t)buf[0];
 8001dc6:	797b      	ldrb	r3, [r7, #5]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	b21a      	sxth	r2, r3
 8001dcc:	793b      	ldrb	r3, [r7, #4]
 8001dce:	b21b      	sxth	r3, r3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	nvm_par_t2 	= ((uint16_t) buf[3]) 	<< 8 | (uint16_t)buf[2];
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	b21a      	sxth	r2, r3
 8001ddc:	79bb      	ldrb	r3, [r7, #6]
 8001dde:	b21b      	sxth	r3, r3
 8001de0:	4313      	orrs	r3, r2
 8001de2:	b21b      	sxth	r3, r3
 8001de4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	nvm_par_t3 	=  (int8_t)   buf[4];
 8001de6:	7a3b      	ldrb	r3, [r7, #8]
 8001de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	nvm_par_p1 	= ((int16_t)  buf[6])	<< 8 |  (int16_t)buf[5];
 8001dec:	7abb      	ldrb	r3, [r7, #10]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	7a7b      	ldrb	r3, [r7, #9]
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	853b      	strh	r3, [r7, #40]	; 0x28
	nvm_par_p2 	= ((int16_t)  buf[8])	<< 8 |  (int16_t)buf[7];
 8001dfa:	7b3b      	ldrb	r3, [r7, #12]
 8001dfc:	021b      	lsls	r3, r3, #8
 8001dfe:	b21a      	sxth	r2, r3
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	b21b      	sxth	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	84fb      	strh	r3, [r7, #38]	; 0x26
	nvm_par_p3 	=  (int8_t)   buf[9];
 8001e08:	7b7b      	ldrb	r3, [r7, #13]
 8001e0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	nvm_par_p4 	=  (int8_t)   buf[10];
 8001e0e:	7bbb      	ldrb	r3, [r7, #14]
 8001e10:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	nvm_par_p5 	= ((uint16_t) buf[12]) 	<< 8 | (uint16_t)buf[11];
 8001e14:	7c3b      	ldrb	r3, [r7, #16]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	b21a      	sxth	r2, r3
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	847b      	strh	r3, [r7, #34]	; 0x22
	nvm_par_p6 	= ((uint16_t) buf[14]) 	<< 8 | (uint16_t)buf[13];
 8001e24:	7cbb      	ldrb	r3, [r7, #18]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	7c7b      	ldrb	r3, [r7, #17]
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	843b      	strh	r3, [r7, #32]
	nvm_par_p7 	=  (int8_t)   buf[15];
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	77fb      	strb	r3, [r7, #31]
	nvm_par_p8 	=  (int8_t)	  buf[16];
 8001e38:	7d3b      	ldrb	r3, [r7, #20]
 8001e3a:	77bb      	strb	r3, [r7, #30]
	nvm_par_p9 	= ((int16_t)  buf[18]) 	<< 8 |  (int16_t)buf[17];
 8001e3c:	7dbb      	ldrb	r3, [r7, #22]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	b21a      	sxth	r2, r3
 8001e42:	7d7b      	ldrb	r3, [r7, #21]
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	83bb      	strh	r3, [r7, #28]
	nvm_par_p10 =  (int8_t)   buf[19];
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	76fb      	strb	r3, [r7, #27]
	nvm_par_p11 =  (int8_t)   buf[20];
 8001e4e:	7e3b      	ldrb	r3, [r7, #24]
 8001e50:	76bb      	strb	r3, [r7, #26]

	// calculate actual value
	Bmp390calib.par_t1 	= ( float ) 	nvm_par_t1 				/ 0.00390625f;
 8001e52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e5c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8001fd0 <BMP390_ReadCalibration+0x268>
 8001e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e64:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001e66:	edc3 7a00 	vstr	s15, [r3]
	Bmp390calib.par_t2 	= ( float ) 	nvm_par_t2 				/ 1073741824.f;
 8001e6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e74:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001fd8 <BMP390_ReadCalibration+0x270>
 8001e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7c:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001e7e:	edc3 7a01 	vstr	s15, [r3, #4]
	Bmp390calib.par_t3 	= ( float ) 	nvm_par_t3 				/ 281474976710656.f;
 8001e82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	eddf 6a53 	vldr	s13, [pc, #332]	; 8001fdc <BMP390_ReadCalibration+0x274>
 8001e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e96:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001e98:	edc3 7a02 	vstr	s15, [r3, #8]
	Bmp390calib.par_p1 	= ( float ) (	nvm_par_p1 - 16384.f) 	/ 1048576.f;
 8001e9c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ea8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001fe0 <BMP390_ReadCalibration+0x278>
 8001eac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001eb0:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8001fe4 <BMP390_ReadCalibration+0x27c>
 8001eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb8:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001eba:	edc3 7a03 	vstr	s15, [r3, #12]
	Bmp390calib.par_p2 	= ( float ) (	nvm_par_p2 - 16384.f) 	/ 536870912.f;
 8001ebe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001fe0 <BMP390_ReadCalibration+0x278>
 8001ece:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001ed2:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001fe8 <BMP390_ReadCalibration+0x280>
 8001ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eda:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001edc:	edc3 7a04 	vstr	s15, [r3, #16]
	Bmp390calib.par_p3 	= ( float ) 	nvm_par_p3				/ 4294967296.f;
 8001ee0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eec:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001fec <BMP390_ReadCalibration+0x284>
 8001ef0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001ef6:	edc3 7a05 	vstr	s15, [r3, #20]
	Bmp390calib.par_p4 	= ( float ) 	nvm_par_p4				/ 137438953472.f;
 8001efa:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f06:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001ff0 <BMP390_ReadCalibration+0x288>
 8001f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001f10:	edc3 7a06 	vstr	s15, [r3, #24]
	Bmp390calib.par_p5 	= ( float ) 	nvm_par_p5				/ 0.125f;
 8001f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f1e:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
 8001f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001f28:	edc3 7a07 	vstr	s15, [r3, #28]
	Bmp390calib.par_p6 	= ( float ) 	nvm_par_p6				/ 64.f;
 8001f2c:	8c3b      	ldrh	r3, [r7, #32]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f36:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001ff4 <BMP390_ReadCalibration+0x28c>
 8001f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001f40:	edc3 7a08 	vstr	s15, [r3, #32]
	Bmp390calib.par_p7 	= ( float ) 	nvm_par_p7				/ 256.f;
 8001f44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f50:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001ff8 <BMP390_ReadCalibration+0x290>
 8001f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001f5a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	Bmp390calib.par_p8 	= ( float ) 	nvm_par_p8				/ 32768.f;
 8001f5e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001ffc <BMP390_ReadCalibration+0x294>
 8001f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001f74:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	Bmp390calib.par_p9		= ( float ) 	nvm_par_p9				/ 281474976710656.f;
 8001f78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f84:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001fdc <BMP390_ReadCalibration+0x274>
 8001f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001f8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	Bmp390calib.par_p10	= ( float ) 	nvm_par_p10				/ 281474976710656.f;
 8001f92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9e:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001fdc <BMP390_ReadCalibration+0x274>
 8001fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001fa8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	Bmp390calib.par_p11	= ( float ) 	nvm_par_p11				/ 36893488147419103232.f;
 8001fac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb8:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002000 <BMP390_ReadCalibration+0x298>
 8001fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <BMP390_ReadCalibration+0x26c>)
 8001fc2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	3b800000 	.word	0x3b800000
 8001fd4:	20000474 	.word	0x20000474
 8001fd8:	4e800000 	.word	0x4e800000
 8001fdc:	57800000 	.word	0x57800000
 8001fe0:	46800000 	.word	0x46800000
 8001fe4:	49800000 	.word	0x49800000
 8001fe8:	4e000000 	.word	0x4e000000
 8001fec:	4f800000 	.word	0x4f800000
 8001ff0:	52000000 	.word	0x52000000
 8001ff4:	42800000 	.word	0x42800000
 8001ff8:	43800000 	.word	0x43800000
 8001ffc:	47000000 	.word	0x47000000
 8002000:	60000000 	.word	0x60000000

08002004 <BMP390_ReadRawPressure>:
HAL_StatusTypeDef BMP390_ReadRawPressure( uint32_t *Buf, uint32_t Timeout){
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef result = BMP390_Read(BMP390_REG_PRES, buffer, sizeof(buffer), Timeout);
 800200e:	f107 010c 	add.w	r1, r7, #12
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	2203      	movs	r2, #3
 8002016:	2004      	movs	r0, #4
 8002018:	f000 f868 	bl	80020ec <BMP390_Read>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
	if ( result != HAL_OK ) return result;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <BMP390_ReadRawPressure+0x26>
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	e00a      	b.n	8002040 <BMP390_ReadRawPressure+0x3c>
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	7b7b      	ldrb	r3, [r7, #13]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	4313      	orrs	r3, r2
 8002034:	7b3a      	ldrb	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	461a      	mov	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <BMP390_ReadRawTemperature>:
HAL_StatusTypeDef BMP390_ReadRawTemperature( uint32_t *Buf, uint32_t Timeout){
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	uint8_t buffer[3];
	HAL_StatusTypeDef result = BMP390_Read(BMP390_REG_TEMP, buffer, sizeof(buffer), Timeout);
 8002052:	f107 010c 	add.w	r1, r7, #12
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2203      	movs	r2, #3
 800205a:	2007      	movs	r0, #7
 800205c:	f000 f846 	bl	80020ec <BMP390_Read>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
	if ( result != HAL_OK ) return result;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <BMP390_ReadRawTemperature+0x26>
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	e00a      	b.n	8002084 <BMP390_ReadRawTemperature+0x3c>
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	4313      	orrs	r3, r2
 8002078:	7b3a      	ldrb	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	601a      	str	r2, [r3, #0]

	return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <BMP390_SoftReset>:
	if ( result != HAL_OK ) return result;
	*Buf = ( buffer[2] << 16 ) | ( buffer[1] << 8 ) | buffer[0];

	return HAL_OK;
}
HAL_StatusTypeDef BMP390_SoftReset( uint32_t Timeout ){
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint8_t Buf = BMP390_CMD_SFTRST;
 8002094:	23b6      	movs	r3, #182	; 0xb6
 8002096:	73fb      	strb	r3, [r7, #15]
	return BMP390_Write( BMP390_REG_CMD, &Buf, 1, Timeout );
 8002098:	f107 010f 	add.w	r1, r7, #15
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	207e      	movs	r0, #126	; 0x7e
 80020a2:	f000 f805 	bl	80020b0 <BMP390_Write>
 80020a6:	4603      	mov	r3, r0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <BMP390_Write>:
HAL_StatusTypeDef BMP390_Write(uint8_t MemAddress, uint8_t *Buf, uint16_t Size, uint32_t Timeout){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	4613      	mov	r3, r2
 80020c0:	81bb      	strh	r3, [r7, #12]
	return HAL_I2C_Mem_Write(bmp390_phi2c, BMP390_ADDRESS, MemAddress, I2C_MEMADD_SIZE_8BIT, Buf, Size, Timeout);
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <BMP390_Write+0x38>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	89bb      	ldrh	r3, [r7, #12]
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2301      	movs	r3, #1
 80020d8:	21ee      	movs	r1, #238	; 0xee
 80020da:	f001 fdfd 	bl	8003cd8 <HAL_I2C_Mem_Write>
 80020de:	4603      	mov	r3, r0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000470 	.word	0x20000470

080020ec <BMP390_Read>:
HAL_StatusTypeDef BMP390_Read(uint8_t MemAddress, uint8_t *Buf, uint16_t Size, uint32_t Timeout){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af04      	add	r7, sp, #16
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	4603      	mov	r3, r0
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	4613      	mov	r3, r2
 80020fc:	81bb      	strh	r3, [r7, #12]
	return HAL_I2C_Mem_Read(bmp390_phi2c, BMP390_ADDRESS, MemAddress, I2C_MEMADD_SIZE_8BIT, Buf, Size, Timeout);
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <BMP390_Read+0x38>)
 8002100:	6818      	ldr	r0, [r3, #0]
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	89bb      	ldrh	r3, [r7, #12]
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	21ee      	movs	r1, #238	; 0xee
 8002116:	f001 fed9 	bl	8003ecc <HAL_I2C_Mem_Read>
 800211a:	4603      	mov	r3, r0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000470 	.word	0x20000470

08002128 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	4619      	mov	r1, r3
 8002136:	2007      	movs	r0, #7
 8002138:	f000 f87a 	bl	8002230 <bno055_writeData>
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4619      	mov	r1, r3
 8002152:	203d      	movs	r0, #61	; 0x3d
 8002154:	f000 f86c 	bl	8002230 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d103      	bne.n	8002166 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800215e:	2013      	movs	r0, #19
 8002160:	f000 f85a 	bl	8002218 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8002164:	e002      	b.n	800216c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8002166:	2007      	movs	r0, #7
 8002168:	f000 f856 	bl	8002218 <bno055_delay>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8002178:	2000      	movs	r0, #0
 800217a:	f7ff ffe3 	bl	8002144 <bno055_setOperationMode>
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}

08002182 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8002182:	b580      	push	{r7, lr}
 8002184:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8002186:	200c      	movs	r0, #12
 8002188:	f7ff ffdc 	bl	8002144 <bno055_setOperationMode>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}

08002190 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(1); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(0); }

void bno055_reset() {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002194:	2120      	movs	r1, #32
 8002196:	203f      	movs	r0, #63	; 0x3f
 8002198:	f000 f84a 	bl	8002230 <bno055_writeData>
  bno055_delay(700);
 800219c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80021a0:	f000 f83a 	bl	8002218 <bno055_delay>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  bno055_reset();
 80021ae:	f7ff ffef 	bl	8002190 <bno055_reset>

  uint8_t id = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	2201      	movs	r2, #1
 80021ba:	4619      	mov	r1, r3
 80021bc:	2000      	movs	r0, #0
 80021be:	f000 f923 	bl	8002408 <bno055_readData>
  if (id != BNO055_ID) {
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2ba0      	cmp	r3, #160	; 0xa0
 80021c6:	d004      	beq.n	80021d2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <bno055_setup+0x4c>)
 80021ce:	f00f fbcb 	bl	8011968 <iprintf>
  }
  bno055_setPage(0);
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff ffa8 	bl	8002128 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80021d8:	2100      	movs	r1, #0
 80021da:	203f      	movs	r0, #63	; 0x3f
 80021dc:	f000 f828 	bl	8002230 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80021e0:	f7ff ffc8 	bl	8002174 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80021e4:	200a      	movs	r0, #10
 80021e6:	f000 f817 	bl	8002218 <bno055_delay>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	0801280c 	.word	0x0801280c

080021f8 <bno055_assignI2C>:
#include <module/bno055_stm32.h>

I2C_HandleTypeDef *_bno055_i2c_port;

// Functions
void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <bno055_assignI2C+0x1c>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	200004b0 	.word	0x200004b0

08002218 <bno055_delay>:

void bno055_delay(int time) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fb1e 	bl	8002864 <HAL_Delay>
#endif
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af02      	add	r7, sp, #8
 8002236:	4603      	mov	r3, r0
 8002238:	460a      	mov	r2, r1
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	733b      	strb	r3, [r7, #12]
 8002244:	79bb      	ldrb	r3, [r7, #6]
 8002246:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002248:	4b5a      	ldr	r3, [pc, #360]	; (80023b4 <bno055_writeData+0x184>)
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f107 020c 	add.w	r2, r7, #12
 8002250:	230a      	movs	r3, #10
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2302      	movs	r3, #2
 8002256:	2150      	movs	r1, #80	; 0x50
 8002258:	f001 fa1a 	bl	8003690 <HAL_I2C_Master_Transmit>
 800225c:	4603      	mov	r3, r0
 800225e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80a0 	beq.w	80023a8 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d103      	bne.n	8002276 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800226e:	4852      	ldr	r0, [pc, #328]	; (80023b8 <bno055_writeData+0x188>)
 8002270:	f00f fc00 	bl	8011a74 <puts>
 8002274:	e012      	b.n	800229c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002276:	7dfb      	ldrb	r3, [r7, #23]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d103      	bne.n	8002284 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800227c:	484f      	ldr	r0, [pc, #316]	; (80023bc <bno055_writeData+0x18c>)
 800227e:	f00f fbf9 	bl	8011a74 <puts>
 8002282:	e00b      	b.n	800229c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d103      	bne.n	8002292 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800228a:	484d      	ldr	r0, [pc, #308]	; (80023c0 <bno055_writeData+0x190>)
 800228c:	f00f fbf2 	bl	8011a74 <puts>
 8002290:	e004      	b.n	800229c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	4619      	mov	r1, r3
 8002296:	484b      	ldr	r0, [pc, #300]	; (80023c4 <bno055_writeData+0x194>)
 8002298:	f00f fb66 	bl	8011968 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800229c:	4b45      	ldr	r3, [pc, #276]	; (80023b4 <bno055_writeData+0x184>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 f847 	bl	8004334 <HAL_I2C_GetError>
 80022a6:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d07e      	beq.n	80023ac <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d103      	bne.n	80022bc <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80022b4:	4844      	ldr	r0, [pc, #272]	; (80023c8 <bno055_writeData+0x198>)
 80022b6:	f00f fbdd 	bl	8011a74 <puts>
 80022ba:	e021      	b.n	8002300 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d103      	bne.n	80022ca <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80022c2:	4842      	ldr	r0, [pc, #264]	; (80023cc <bno055_writeData+0x19c>)
 80022c4:	f00f fbd6 	bl	8011a74 <puts>
 80022c8:	e01a      	b.n	8002300 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d103      	bne.n	80022d8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80022d0:	483f      	ldr	r0, [pc, #252]	; (80023d0 <bno055_writeData+0x1a0>)
 80022d2:	f00f fbcf 	bl	8011a74 <puts>
 80022d6:	e013      	b.n	8002300 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d103      	bne.n	80022e6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80022de:	483d      	ldr	r0, [pc, #244]	; (80023d4 <bno055_writeData+0x1a4>)
 80022e0:	f00f fbc8 	bl	8011a74 <puts>
 80022e4:	e00c      	b.n	8002300 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d103      	bne.n	80022f4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80022ec:	483a      	ldr	r0, [pc, #232]	; (80023d8 <bno055_writeData+0x1a8>)
 80022ee:	f00f fbc1 	bl	8011a74 <puts>
 80022f2:	e005      	b.n	8002300 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	2b20      	cmp	r3, #32
 80022f8:	d102      	bne.n	8002300 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80022fa:	4838      	ldr	r0, [pc, #224]	; (80023dc <bno055_writeData+0x1ac>)
 80022fc:	f00f fbba 	bl	8011a74 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002300:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <bno055_writeData+0x184>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f002 f807 	bl	8004318 <HAL_I2C_GetState>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002314:	4832      	ldr	r0, [pc, #200]	; (80023e0 <bno055_writeData+0x1b0>)
 8002316:	f00f fbad 	bl	8011a74 <puts>
 800231a:	e048      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	2b20      	cmp	r3, #32
 8002320:	d103      	bne.n	800232a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002322:	482f      	ldr	r0, [pc, #188]	; (80023e0 <bno055_writeData+0x1b0>)
 8002324:	f00f fba6 	bl	8011a74 <puts>
 8002328:	e041      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b24      	cmp	r3, #36	; 0x24
 800232e:	d103      	bne.n	8002338 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002330:	482c      	ldr	r0, [pc, #176]	; (80023e4 <bno055_writeData+0x1b4>)
 8002332:	f00f fb9f 	bl	8011a74 <puts>
 8002336:	e03a      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b21      	cmp	r3, #33	; 0x21
 800233c:	d103      	bne.n	8002346 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800233e:	482a      	ldr	r0, [pc, #168]	; (80023e8 <bno055_writeData+0x1b8>)
 8002340:	f00f fb98 	bl	8011a74 <puts>
 8002344:	e033      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b22      	cmp	r3, #34	; 0x22
 800234a:	d103      	bne.n	8002354 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800234c:	4827      	ldr	r0, [pc, #156]	; (80023ec <bno055_writeData+0x1bc>)
 800234e:	f00f fb91 	bl	8011a74 <puts>
 8002352:	e02c      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	2b28      	cmp	r3, #40	; 0x28
 8002358:	d103      	bne.n	8002362 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800235a:	4825      	ldr	r0, [pc, #148]	; (80023f0 <bno055_writeData+0x1c0>)
 800235c:	f00f fb8a 	bl	8011a74 <puts>
 8002360:	e025      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b29      	cmp	r3, #41	; 0x29
 8002366:	d103      	bne.n	8002370 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002368:	4822      	ldr	r0, [pc, #136]	; (80023f4 <bno055_writeData+0x1c4>)
 800236a:	f00f fb83 	bl	8011a74 <puts>
 800236e:	e01e      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b2a      	cmp	r3, #42	; 0x2a
 8002374:	d103      	bne.n	800237e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002376:	4820      	ldr	r0, [pc, #128]	; (80023f8 <bno055_writeData+0x1c8>)
 8002378:	f00f fb7c 	bl	8011a74 <puts>
 800237c:	e017      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b60      	cmp	r3, #96	; 0x60
 8002382:	d103      	bne.n	800238c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002384:	481d      	ldr	r0, [pc, #116]	; (80023fc <bno055_writeData+0x1cc>)
 8002386:	f00f fb75 	bl	8011a74 <puts>
 800238a:	e010      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2ba0      	cmp	r3, #160	; 0xa0
 8002390:	d103      	bne.n	800239a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002392:	481b      	ldr	r0, [pc, #108]	; (8002400 <bno055_writeData+0x1d0>)
 8002394:	f00f fb6e 	bl	8011a74 <puts>
 8002398:	e009      	b.n	80023ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	2be0      	cmp	r3, #224	; 0xe0
 800239e:	d106      	bne.n	80023ae <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80023a0:	4818      	ldr	r0, [pc, #96]	; (8002404 <bno055_writeData+0x1d4>)
 80023a2:	f00f fb67 	bl	8011a74 <puts>
 80023a6:	e002      	b.n	80023ae <bno055_writeData+0x17e>
    return;
 80023a8:	bf00      	nop
 80023aa:	e000      	b.n	80023ae <bno055_writeData+0x17e>
    return;
 80023ac:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200004b0 	.word	0x200004b0
 80023b8:	08012848 	.word	0x08012848
 80023bc:	0801286c 	.word	0x0801286c
 80023c0:	08012894 	.word	0x08012894
 80023c4:	080128b8 	.word	0x080128b8
 80023c8:	080128d0 	.word	0x080128d0
 80023cc:	080128e4 	.word	0x080128e4
 80023d0:	080128f8 	.word	0x080128f8
 80023d4:	0801290c 	.word	0x0801290c
 80023d8:	08012920 	.word	0x08012920
 80023dc:	08012934 	.word	0x08012934
 80023e0:	0801294c 	.word	0x0801294c
 80023e4:	08012964 	.word	0x08012964
 80023e8:	08012978 	.word	0x08012978
 80023ec:	08012990 	.word	0x08012990
 80023f0:	080129a8 	.word	0x080129a8
 80023f4:	080129c0 	.word	0x080129c0
 80023f8:	080129e0 	.word	0x080129e0
 80023fc:	08012a00 	.word	0x08012a00
 8002400:	08012a18 	.word	0x08012a18
 8002404:	08012a30 	.word	0x08012a30

08002408 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af02      	add	r7, sp, #8
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
 8002414:	4613      	mov	r3, r2
 8002416:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002418:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <bno055_readData+0x40>)
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	1dfa      	adds	r2, r7, #7
 800241e:	2364      	movs	r3, #100	; 0x64
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2301      	movs	r3, #1
 8002424:	2150      	movs	r1, #80	; 0x50
 8002426:	f001 f933 	bl	8003690 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <bno055_readData+0x40>)
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	79bb      	ldrb	r3, [r7, #6]
 8002430:	b29b      	uxth	r3, r3
 8002432:	2264      	movs	r2, #100	; 0x64
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	2150      	movs	r1, #80	; 0x50
 800243a:	f001 fa27 	bl	800388c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200004b0 	.word	0x200004b0

0800244c <Buzzer_Once>:
#ifndef SRC_MODULE_BUZZER_C_
#define SRC_MODULE_BUZZER_C_

#include "module/buzzer.h"

void Buzzer_Once() {
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	2102      	movs	r1, #2
 8002454:	4806      	ldr	r0, [pc, #24]	; (8002470 <Buzzer_Once+0x24>)
 8002456:	f000 ffa3 	bl	80033a0 <HAL_GPIO_WritePin>
	osDelay(100);
 800245a:	2064      	movs	r0, #100	; 0x64
 800245c:	f00b f8e2 	bl	800d624 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002460:	2200      	movs	r2, #0
 8002462:	2102      	movs	r1, #2
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <Buzzer_Once+0x24>)
 8002466:	f000 ff9b 	bl	80033a0 <HAL_GPIO_WritePin>
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40020800 	.word	0x40020800

08002474 <Init_BMP390>:

#include <module/init_sensor.h>



void Init_BMP390(void){
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res1, res2, res3, res4, res5, res6, res7;

	BMP390_AssignI2C(&hi2c1);
 800247a:	4837      	ldr	r0, [pc, #220]	; (8002558 <Init_BMP390+0xe4>)
 800247c:	f7ff fb50 	bl	8001b20 <BMP390_AssignI2C>

	/* Check whether the sensor is ready */
	/*	if ( HAL_I2C_IsDeviceReady(bmp390_phi2c, BMP390_ADDRESS, 10, 10\) != HAL_OK ) Error_Handler();*/

	/* Soft reset */
	res1 = BMP390_SoftReset(1000);
 8002480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002484:	f7ff fe02 	bl	800208c <BMP390_SoftReset>
 8002488:	4603      	mov	r3, r0
 800248a:	73fb      	strb	r3, [r7, #15]
	if ( BMP390_SoftReset(1000) != HAL_OK ) Error_Handler();
 800248c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002490:	f7ff fdfc 	bl	800208c <BMP390_SoftReset>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <Init_BMP390+0x2a>
 800249a:	f7fe fc69 	bl	8000d70 <Error_Handler>

	/* Set sensor configuration buffers  */
	uint8_t bmp390PWR = BMP390_PWR_ALL_NORMAL;
 800249e:	2333      	movs	r3, #51	; 0x33
 80024a0:	723b      	strb	r3, [r7, #8]
	uint8_t bmp390OSR = BMP390_OSR_PX08;
 80024a2:	2318      	movs	r3, #24
 80024a4:	71fb      	strb	r3, [r7, #7]
	uint8_t bmp390ODR = BMP390_ODR_50;
 80024a6:	2302      	movs	r3, #2
 80024a8:	71bb      	strb	r3, [r7, #6]
	uint8_t bmp390CFG = BMP390_CFG_IIR1;
 80024aa:	2302      	movs	r3, #2
 80024ac:	717b      	strb	r3, [r7, #5]

	/* Initial setting */
	if ( (res2 = BMP390_Write(BMP390_REG_OSR, &bmp390OSR, sizeof(bmp390OSR), 10)) != HAL_OK ) Error_Handler();
 80024ae:	1df9      	adds	r1, r7, #7
 80024b0:	230a      	movs	r3, #10
 80024b2:	2201      	movs	r2, #1
 80024b4:	201c      	movs	r0, #28
 80024b6:	f7ff fdfb 	bl	80020b0 <BMP390_Write>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73bb      	strb	r3, [r7, #14]
 80024be:	7bbb      	ldrb	r3, [r7, #14]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <Init_BMP390+0x54>
 80024c4:	f7fe fc54 	bl	8000d70 <Error_Handler>
	if ( (res3 = BMP390_Write(BMP390_REG_ODR, &bmp390ODR, sizeof(bmp390ODR), 10)) != HAL_OK ) Error_Handler();
 80024c8:	1db9      	adds	r1, r7, #6
 80024ca:	230a      	movs	r3, #10
 80024cc:	2201      	movs	r2, #1
 80024ce:	201d      	movs	r0, #29
 80024d0:	f7ff fdee 	bl	80020b0 <BMP390_Write>
 80024d4:	4603      	mov	r3, r0
 80024d6:	737b      	strb	r3, [r7, #13]
 80024d8:	7b7b      	ldrb	r3, [r7, #13]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <Init_BMP390+0x6e>
 80024de:	f7fe fc47 	bl	8000d70 <Error_Handler>
	if ( (res4 = BMP390_Write(BMP390_REG_CFG, &bmp390CFG, sizeof(bmp390CFG), 10)) != HAL_OK ) Error_Handler();
 80024e2:	1d79      	adds	r1, r7, #5
 80024e4:	230a      	movs	r3, #10
 80024e6:	2201      	movs	r2, #1
 80024e8:	201f      	movs	r0, #31
 80024ea:	f7ff fde1 	bl	80020b0 <BMP390_Write>
 80024ee:	4603      	mov	r3, r0
 80024f0:	733b      	strb	r3, [r7, #12]
 80024f2:	7b3b      	ldrb	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <Init_BMP390+0x88>
 80024f8:	f7fe fc3a 	bl	8000d70 <Error_Handler>

	/* Don't know why, but it seems like the PWR_CTRL register need to be set\
	 *  twice */
	if ( (res5 = BMP390_Write(BMP390_REG_PWR, &bmp390PWR, sizeof(bmp390PWR), 10)) != HAL_OK ) Error_Handler();
 80024fc:	f107 0108 	add.w	r1, r7, #8
 8002500:	230a      	movs	r3, #10
 8002502:	2201      	movs	r2, #1
 8002504:	201b      	movs	r0, #27
 8002506:	f7ff fdd3 	bl	80020b0 <BMP390_Write>
 800250a:	4603      	mov	r3, r0
 800250c:	72fb      	strb	r3, [r7, #11]
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <Init_BMP390+0xa4>
 8002514:	f7fe fc2c 	bl	8000d70 <Error_Handler>
	if ( (res6 = BMP390_Write(BMP390_REG_PWR, &bmp390PWR, sizeof(bmp390PWR), 10)) != HAL_OK ) Error_Handler();
 8002518:	f107 0108 	add.w	r1, r7, #8
 800251c:	230a      	movs	r3, #10
 800251e:	2201      	movs	r2, #1
 8002520:	201b      	movs	r0, #27
 8002522:	f7ff fdc5 	bl	80020b0 <BMP390_Write>
 8002526:	4603      	mov	r3, r0
 8002528:	72bb      	strb	r3, [r7, #10]
 800252a:	7abb      	ldrb	r3, [r7, #10]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <Init_BMP390+0xc0>
 8002530:	f7fe fc1e 	bl	8000d70 <Error_Handler>

	osDelay(1000);
 8002534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002538:	f00b f874 	bl	800d624 <osDelay>

	if ( (res7 = BMP390_ReadCalibration()) != HAL_OK) Error_Handler();
 800253c:	f7ff fc14 	bl	8001d68 <BMP390_ReadCalibration>
 8002540:	4603      	mov	r3, r0
 8002542:	727b      	strb	r3, [r7, #9]
 8002544:	7a7b      	ldrb	r3, [r7, #9]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <Init_BMP390+0xdc>
 800254a:	f7fe fc11 	bl	8000d70 <Error_Handler>

	return;
 800254e:	bf00      	nop
 8002550:	bf00      	nop
}
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000290 	.word	0x20000290

0800255c <Init_BNO055>:

void Init_BNO055(void){
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c1);
 8002560:	4804      	ldr	r0, [pc, #16]	; (8002574 <Init_BNO055+0x18>)
 8002562:	f7ff fe49 	bl	80021f8 <bno055_assignI2C>
	bno055_setup();
 8002566:	f7ff fe1f 	bl	80021a8 <bno055_setup>
	bno055_setOperationModeNDOF();
 800256a:	f7ff fe0a 	bl	8002182 <bno055_setOperationModeNDOF>
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000290 	.word	0x20000290

08002578 <Init_SD>:

void Init_SD(void){
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
	//SD_Assign(&hspi2);
	//retUSER = f_mount(&USERFatFS, USERPath, 1);
	//if ( retUSER != FR_OK ) Error_Handler();
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <Init_Servo>:

void Init_Servo(Servo_HandleTypeDef* servo1, Servo_HandleTypeDef* servo2, Servo_HandleTypeDef* servo3){
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
	Servo_Attach(servo1, &htim3, TIM_CHANNEL_1);
 8002594:	2200      	movs	r2, #0
 8002596:	490f      	ldr	r1, [pc, #60]	; (80025d4 <Init_Servo+0x4c>)
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f81d 	bl	80025d8 <Servo_Attach>
	Servo_Attach(servo2, &htim3, TIM_CHANNEL_2);
 800259e:	2204      	movs	r2, #4
 80025a0:	490c      	ldr	r1, [pc, #48]	; (80025d4 <Init_Servo+0x4c>)
 80025a2:	68b8      	ldr	r0, [r7, #8]
 80025a4:	f000 f818 	bl	80025d8 <Servo_Attach>
	Servo_Attach(servo3, &htim3, TIM_CHANNEL_3);
 80025a8:	2208      	movs	r2, #8
 80025aa:	490a      	ldr	r1, [pc, #40]	; (80025d4 <Init_Servo+0x4c>)
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f813 	bl	80025d8 <Servo_Attach>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80025b2:	2100      	movs	r1, #0
 80025b4:	4807      	ldr	r0, [pc, #28]	; (80025d4 <Init_Servo+0x4c>)
 80025b6:	f005 fb9b 	bl	8007cf0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 80025ba:	2104      	movs	r1, #4
 80025bc:	4805      	ldr	r0, [pc, #20]	; (80025d4 <Init_Servo+0x4c>)
 80025be:	f005 fb97 	bl	8007cf0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 80025c2:	2108      	movs	r1, #8
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <Init_Servo+0x4c>)
 80025c6:	f005 fb93 	bl	8007cf0 <HAL_TIM_PWM_Start_IT>
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000035c 	.word	0x2000035c

080025d8 <Servo_Attach>:
#include "servo/servo.h"

void Servo_Attach(Servo_HandleTypeDef *servo, TIM_HandleTypeDef *htim, uint32_t channel){
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
	servo->htim 	= htim;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	601a      	str	r2, [r3, #0]
	servo->channel 	= channel;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	605a      	str	r2, [r3, #4]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002600:	480d      	ldr	r0, [pc, #52]	; (8002638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002602:	490e      	ldr	r1, [pc, #56]	; (800263c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002618:	4c0b      	ldr	r4, [pc, #44]	; (8002648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002626:	f7fe ff29 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800262a:	f00f f87b 	bl	8011724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7fe fa3b 	bl	8000aa8 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8002640:	08012bd0 	.word	0x08012bd0
  ldr r2, =_sbss
 8002644:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8002648:	20006b24 	.word	0x20006b24

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>

0800264e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d104      	bne.n	8002666 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
}
 800265e:	bf00      	nop
 8002660:	f7fe fb86 	bl	8000d70 <Error_Handler>
 8002664:	e7fe      	b.n	8002664 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	e007      	b.n	800267c <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	2100      	movs	r1, #0
 8002672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3301      	adds	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d9f4      	bls.n	800266c <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	721a      	strb	r2, [r3, #8]
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d104      	bne.n	80026a8 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800269e:	b672      	cpsid	i
}
 80026a0:	bf00      	nop
 80026a2:	f7fe fb65 	bl	8000d70 <Error_Handler>
 80026a6:	e7fe      	b.n	80026a6 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	7a1b      	ldrb	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d904      	bls.n	80026ba <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80026b0:	b672      	cpsid	i
}
 80026b2:	bf00      	nop
 80026b4:	f7fe fb5c 	bl	8000d70 <Error_Handler>
 80026b8:	e7fe      	b.n	80026b8 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7a1b      	ldrb	r3, [r3, #8]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	b2d1      	uxtb	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	7211      	strb	r1, [r2, #8]
 80026c6:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026c8:	f3ef 8211 	mrs	r2, BASEPRI
 80026cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	60fa      	str	r2, [r7, #12]
 80026de:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d104      	bne.n	8002708 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80026fe:	b672      	cpsid	i
}
 8002700:	bf00      	nop
 8002702:	f7fe fb35 	bl	8000d70 <Error_Handler>
 8002706:	e7fe      	b.n	8002706 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7a1b      	ldrb	r3, [r3, #8]
 800270c:	3b01      	subs	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7a1b      	ldrb	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d904      	bls.n	8002726 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800271c:	b672      	cpsid	i
}
 800271e:	bf00      	nop
 8002720:	f7fe fb26 	bl	8000d70 <Error_Handler>
 8002724:	e7fe      	b.n	8002724 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7a1b      	ldrb	r3, [r3, #8]
 800272a:	461a      	mov	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002732:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800273a:	bf00      	nop
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d105      	bne.n	800275e <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002752:	f00e feeb 	bl	801152c <__errno>
 8002756:	4603      	mov	r3, r0
 8002758:	2216      	movs	r2, #22
 800275a:	601a      	str	r2, [r3, #0]
    return;
 800275c:	e015      	b.n	800278a <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800275e:	200c      	movs	r0, #12
 8002760:	f00f f804 	bl	801176c <malloc>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff68 	bl	800264e <stm32_lock_init>
    return;
 800277e:	e004      	b.n	800278a <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002784:	f7fe faf4 	bl	8000d70 <Error_Handler>
 8002788:	e7fe      	b.n	8002788 <__retarget_lock_init_recursive+0x44>
}
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d104      	bne.n	80027a8 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800279e:	b672      	cpsid	i
}
 80027a0:	bf00      	nop
 80027a2:	f7fe fae5 	bl	8000d70 <Error_Handler>
 80027a6:	e7fe      	b.n	80027a6 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff70 	bl	8002690 <stm32_lock_acquire>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80027c6:	b672      	cpsid	i
}
 80027c8:	bf00      	nop
 80027ca:	f7fe fad1 	bl	8000d70 <Error_Handler>
 80027ce:	e7fe      	b.n	80027ce <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff8c 	bl	80026f0 <stm32_lock_release>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 fb6e 	bl	8002eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	200f      	movs	r0, #15
 8002810:	f7fe fcfc 	bl	800120c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7fe fab8 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x20>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x24>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_IncTick+0x24>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000008 	.word	0x20000008
 8002848:	200004d8 	.word	0x200004d8

0800284c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_GetTick+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	200004d8 	.word	0x200004d8

08002864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff ffee 	bl	800284c <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d005      	beq.n	800288a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <HAL_Delay+0x44>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800288a:	bf00      	nop
 800288c:	f7ff ffde 	bl	800284c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	429a      	cmp	r2, r3
 800289a:	d8f7      	bhi.n	800288c <HAL_Delay+0x28>
  {
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000008 	.word	0x20000008

080028ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e033      	b.n	800292a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fe fa88 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d118      	bne.n	800291c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f2:	f023 0302 	bic.w	r3, r3, #2
 80028f6:	f043 0202 	orr.w	r2, r3, #2
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f94a 	bl	8002b98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f023 0303 	bic.w	r3, r3, #3
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
 800291a:	e001      	b.n	8002920 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x1c>
 800294c:	2302      	movs	r3, #2
 800294e:	e113      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x244>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b09      	cmp	r3, #9
 800295e:	d925      	bls.n	80029ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68d9      	ldr	r1, [r3, #12]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	3b1e      	subs	r3, #30
 8002976:	2207      	movs	r2, #7
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43da      	mvns	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	400a      	ands	r2, r1
 8002984:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68d9      	ldr	r1, [r3, #12]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	4603      	mov	r3, r0
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4403      	add	r3, r0
 800299e:	3b1e      	subs	r3, #30
 80029a0:	409a      	lsls	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	e022      	b.n	80029f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6919      	ldr	r1, [r3, #16]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	4613      	mov	r3, r2
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	4413      	add	r3, r2
 80029c0:	2207      	movs	r2, #7
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	400a      	ands	r2, r1
 80029ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6919      	ldr	r1, [r3, #16]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	4603      	mov	r3, r0
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4403      	add	r3, r0
 80029e8:	409a      	lsls	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b06      	cmp	r3, #6
 80029f8:	d824      	bhi.n	8002a44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b05      	subs	r3, #5
 8002a0c:	221f      	movs	r2, #31
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	400a      	ands	r2, r1
 8002a1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4618      	mov	r0, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	3b05      	subs	r3, #5
 8002a36:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	635a      	str	r2, [r3, #52]	; 0x34
 8002a42:	e04c      	b.n	8002ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b0c      	cmp	r3, #12
 8002a4a:	d824      	bhi.n	8002a96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b23      	subs	r3, #35	; 0x23
 8002a5e:	221f      	movs	r2, #31
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43da      	mvns	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b23      	subs	r3, #35	; 0x23
 8002a88:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
 8002a94:	e023      	b.n	8002ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3b41      	subs	r3, #65	; 0x41
 8002aa8:	221f      	movs	r2, #31
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b41      	subs	r3, #65	; 0x41
 8002ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <HAL_ADC_ConfigChannel+0x250>)
 8002ae0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a28      	ldr	r2, [pc, #160]	; (8002b88 <HAL_ADC_ConfigChannel+0x254>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10f      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1d8>
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b12      	cmp	r3, #18
 8002af2:	d10b      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_ADC_ConfigChannel+0x254>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d12b      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x23a>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_ADC_ConfigChannel+0x258>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x1f4>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b11      	cmp	r3, #17
 8002b26:	d122      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_ADC_ConfigChannel+0x258>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d111      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <HAL_ADC_ConfigChannel+0x25c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a11      	ldr	r2, [pc, #68]	; (8002b94 <HAL_ADC_ConfigChannel+0x260>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	0c9a      	lsrs	r2, r3, #18
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b60:	e002      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3b01      	subs	r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f9      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	40012300 	.word	0x40012300
 8002b88:	40012000 	.word	0x40012000
 8002b8c:	10000012 	.word	0x10000012
 8002b90:	20000000 	.word	0x20000000
 8002b94:	431bde83 	.word	0x431bde83

08002b98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba0:	4b79      	ldr	r3, [pc, #484]	; (8002d88 <ADC_Init+0x1f0>)
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	021a      	lsls	r2, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6859      	ldr	r1, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6899      	ldr	r1, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <ADC_Init+0x1f4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d022      	beq.n	8002c76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
 8002c74:	e00f      	b.n	8002c96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0202 	bic.w	r2, r2, #2
 8002ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6899      	ldr	r1, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7e1b      	ldrb	r3, [r3, #24]
 8002cb0:	005a      	lsls	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d01b      	beq.n	8002cfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ce2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	035a      	lsls	r2, r3, #13
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	e007      	b.n	8002d0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	051a      	lsls	r2, r3, #20
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6899      	ldr	r1, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d4e:	025a      	lsls	r2, r3, #9
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6899      	ldr	r1, [r3, #8]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	029a      	lsls	r2, r3, #10
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	40012300 	.word	0x40012300
 8002d8c:	0f000001 	.word	0x0f000001

08002d90 <__NVIC_SetPriorityGrouping>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_GetPriorityGrouping>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0307 	and.w	r3, r3, #7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_EnableIRQ>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db0b      	blt.n	8002e1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <__NVIC_EnableIRQ+0x38>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ff4c 	bl	8002d90 <__NVIC_SetPriorityGrouping>
}
 8002ef8:	bf00      	nop
 8002efa:	3708      	adds	r7, #8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f12:	f7ff ff61 	bl	8002dd8 <__NVIC_GetPriorityGrouping>
 8002f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	6978      	ldr	r0, [r7, #20]
 8002f1e:	f7ff ffb1 	bl	8002e84 <NVIC_EncodePriority>
 8002f22:	4602      	mov	r2, r0
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff80 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff54 	bl	8002df4 <__NVIC_EnableIRQ>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f62:	f7ff fc73 	bl	800284c <HAL_GetTick>
 8002f66:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d008      	beq.n	8002f86 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e052      	b.n	800302c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0216 	bic.w	r2, r2, #22
 8002f94:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_DMA_Abort+0x62>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d007      	beq.n	8002fc6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0208 	bic.w	r2, r2, #8
 8002fc4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd6:	e013      	b.n	8003000 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fd8:	f7ff fc38 	bl	800284c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d90c      	bls.n	8003000 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2203      	movs	r2, #3
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e015      	b.n	800302c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e4      	bne.n	8002fd8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	223f      	movs	r2, #63	; 0x3f
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d004      	beq.n	8003052 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e00c      	b.n	800306c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2205      	movs	r2, #5
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e165      	b.n	8003360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003094:	2201      	movs	r2, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f040 8154 	bne.w	800335a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d005      	beq.n	80030ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d130      	bne.n	800312c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	2203      	movs	r2, #3
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 0201 	and.w	r2, r3, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	2b03      	cmp	r3, #3
 8003136:	d017      	beq.n	8003168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d123      	bne.n	80031bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	08da      	lsrs	r2, r3, #3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3208      	adds	r2, #8
 800317c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	69b9      	ldr	r1, [r7, #24]
 80031b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	2203      	movs	r2, #3
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0203 	and.w	r2, r3, #3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80ae 	beq.w	800335a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b5d      	ldr	r3, [pc, #372]	; (8003378 <HAL_GPIO_Init+0x300>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a5c      	ldr	r2, [pc, #368]	; (8003378 <HAL_GPIO_Init+0x300>)
 8003208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b5a      	ldr	r3, [pc, #360]	; (8003378 <HAL_GPIO_Init+0x300>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800321a:	4a58      	ldr	r2, [pc, #352]	; (800337c <HAL_GPIO_Init+0x304>)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	3302      	adds	r3, #2
 8003222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	220f      	movs	r2, #15
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	43db      	mvns	r3, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4013      	ands	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a4f      	ldr	r2, [pc, #316]	; (8003380 <HAL_GPIO_Init+0x308>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d025      	beq.n	8003292 <HAL_GPIO_Init+0x21a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a4e      	ldr	r2, [pc, #312]	; (8003384 <HAL_GPIO_Init+0x30c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <HAL_GPIO_Init+0x216>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a4d      	ldr	r2, [pc, #308]	; (8003388 <HAL_GPIO_Init+0x310>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d019      	beq.n	800328a <HAL_GPIO_Init+0x212>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a4c      	ldr	r2, [pc, #304]	; (800338c <HAL_GPIO_Init+0x314>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0x20e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_GPIO_Init+0x318>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00d      	beq.n	8003282 <HAL_GPIO_Init+0x20a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <HAL_GPIO_Init+0x31c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <HAL_GPIO_Init+0x206>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a49      	ldr	r2, [pc, #292]	; (8003398 <HAL_GPIO_Init+0x320>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_GPIO_Init+0x202>
 8003276:	2306      	movs	r3, #6
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800327a:	2307      	movs	r3, #7
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x21c>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a4:	4935      	ldr	r1, [pc, #212]	; (800337c <HAL_GPIO_Init+0x304>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b2:	4b3a      	ldr	r3, [pc, #232]	; (800339c <HAL_GPIO_Init+0x324>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d6:	4a31      	ldr	r2, [pc, #196]	; (800339c <HAL_GPIO_Init+0x324>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032dc:	4b2f      	ldr	r3, [pc, #188]	; (800339c <HAL_GPIO_Init+0x324>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003300:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_GPIO_Init+0x324>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003306:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_GPIO_Init+0x324>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <HAL_GPIO_Init+0x324>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003330:	4b1a      	ldr	r3, [pc, #104]	; (800339c <HAL_GPIO_Init+0x324>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <HAL_GPIO_Init+0x324>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae96 	bls.w	8003094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40013800 	.word	0x40013800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400
 8003388:	40020800 	.word	0x40020800
 800338c:	40020c00 	.word	0x40020c00
 8003390:	40021000 	.word	0x40021000
 8003394:	40021400 	.word	0x40021400
 8003398:	40021800 	.word	0x40021800
 800339c:	40013c00 	.word	0x40013c00

080033a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
 80033ac:	4613      	mov	r3, r2
 80033ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b0:	787b      	ldrb	r3, [r7, #1]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033bc:	e003      	b.n	80033c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	041a      	lsls	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	619a      	str	r2, [r3, #24]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033e4:	887a      	ldrh	r2, [r7, #2]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4013      	ands	r3, r2
 80033ea:	041a      	lsls	r2, r3, #16
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	400b      	ands	r3, r1
 80033f4:	431a      	orrs	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e12b      	b.n	8003672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fd1a 	bl	8000e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0201 	bic.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800346c:	f002 ffd4 	bl	8006418 <HAL_RCC_GetPCLK1Freq>
 8003470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a81      	ldr	r2, [pc, #516]	; (800367c <HAL_I2C_Init+0x274>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d807      	bhi.n	800348c <HAL_I2C_Init+0x84>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4a80      	ldr	r2, [pc, #512]	; (8003680 <HAL_I2C_Init+0x278>)
 8003480:	4293      	cmp	r3, r2
 8003482:	bf94      	ite	ls
 8003484:	2301      	movls	r3, #1
 8003486:	2300      	movhi	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e006      	b.n	800349a <HAL_I2C_Init+0x92>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4a7d      	ldr	r2, [pc, #500]	; (8003684 <HAL_I2C_Init+0x27c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	bf94      	ite	ls
 8003494:	2301      	movls	r3, #1
 8003496:	2300      	movhi	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0e7      	b.n	8003672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4a78      	ldr	r2, [pc, #480]	; (8003688 <HAL_I2C_Init+0x280>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	0c9b      	lsrs	r3, r3, #18
 80034ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a6a      	ldr	r2, [pc, #424]	; (800367c <HAL_I2C_Init+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d802      	bhi.n	80034dc <HAL_I2C_Init+0xd4>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	3301      	adds	r3, #1
 80034da:	e009      	b.n	80034f0 <HAL_I2C_Init+0xe8>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	4a69      	ldr	r2, [pc, #420]	; (800368c <HAL_I2C_Init+0x284>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	3301      	adds	r3, #1
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	495c      	ldr	r1, [pc, #368]	; (800367c <HAL_I2C_Init+0x274>)
 800350c:	428b      	cmp	r3, r1
 800350e:	d819      	bhi.n	8003544 <HAL_I2C_Init+0x13c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	1e59      	subs	r1, r3, #1
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	fbb1 f3f3 	udiv	r3, r1, r3
 800351e:	1c59      	adds	r1, r3, #1
 8003520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003524:	400b      	ands	r3, r1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_I2C_Init+0x138>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1e59      	subs	r1, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	fbb1 f3f3 	udiv	r3, r1, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353e:	e051      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003540:	2304      	movs	r3, #4
 8003542:	e04f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d111      	bne.n	8003570 <HAL_I2C_Init+0x168>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	440b      	add	r3, r1
 800355a:	fbb0 f3f3 	udiv	r3, r0, r3
 800355e:	3301      	adds	r3, #1
 8003560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003564:	2b00      	cmp	r3, #0
 8003566:	bf0c      	ite	eq
 8003568:	2301      	moveq	r3, #1
 800356a:	2300      	movne	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e012      	b.n	8003596 <HAL_I2C_Init+0x18e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1e58      	subs	r0, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6859      	ldr	r1, [r3, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	0099      	lsls	r1, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	fbb0 f3f3 	udiv	r3, r0, r3
 8003586:	3301      	adds	r3, #1
 8003588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Init+0x196>
 800359a:	2301      	movs	r3, #1
 800359c:	e022      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10e      	bne.n	80035c4 <HAL_I2C_Init+0x1bc>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1e58      	subs	r0, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6859      	ldr	r1, [r3, #4]
 80035ae:	460b      	mov	r3, r1
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	440b      	add	r3, r1
 80035b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b8:	3301      	adds	r3, #1
 80035ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c2:	e00f      	b.n	80035e4 <HAL_I2C_Init+0x1dc>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	0099      	lsls	r1, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	6809      	ldr	r1, [r1, #0]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6911      	ldr	r1, [r2, #16]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68d2      	ldr	r2, [r2, #12]
 800361e:	4311      	orrs	r1, r2
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	430b      	orrs	r3, r1
 8003626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	000186a0 	.word	0x000186a0
 8003680:	001e847f 	.word	0x001e847f
 8003684:	003d08ff 	.word	0x003d08ff
 8003688:	431bde83 	.word	0x431bde83
 800368c:	10624dd3 	.word	0x10624dd3

08003690 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	461a      	mov	r2, r3
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
 80036a0:	4613      	mov	r3, r2
 80036a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036a4:	f7ff f8d2 	bl	800284c <HAL_GetTick>
 80036a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	f040 80e0 	bne.w	8003878 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2319      	movs	r3, #25
 80036be:	2201      	movs	r2, #1
 80036c0:	4970      	ldr	r1, [pc, #448]	; (8003884 <HAL_I2C_Master_Transmit+0x1f4>)
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f001 f910 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
 80036d0:	e0d3      	b.n	800387a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_I2C_Master_Transmit+0x50>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0cc      	b.n	800387a <HAL_I2C_Master_Transmit+0x1ea>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d007      	beq.n	8003706 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003714:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2221      	movs	r2, #33	; 0x21
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2210      	movs	r2, #16
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	893a      	ldrh	r2, [r7, #8]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a50      	ldr	r2, [pc, #320]	; (8003888 <HAL_I2C_Master_Transmit+0x1f8>)
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	6a3a      	ldr	r2, [r7, #32]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fdfc 	bl	800434c <I2C_MasterRequestWrite>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e08d      	b.n	800387a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003774:	e066      	b.n	8003844 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	6a39      	ldr	r1, [r7, #32]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f001 f98a 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00d      	beq.n	80037a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b04      	cmp	r3, #4
 800378c:	d107      	bne.n	800379e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e06b      	b.n	800387a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_I2C_Master_Transmit+0x188>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d017      	beq.n	8003818 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	6a39      	ldr	r1, [r7, #32]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f001 f97a 	bl	8004b16 <I2C_WaitOnBTFFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	2b04      	cmp	r3, #4
 800382e:	d107      	bne.n	8003840 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e01a      	b.n	800387a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003848:	2b00      	cmp	r3, #0
 800384a:	d194      	bne.n	8003776 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	00100002 	.word	0x00100002
 8003888:	ffff0000 	.word	0xffff0000

0800388c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	461a      	mov	r2, r3
 8003898:	460b      	mov	r3, r1
 800389a:	817b      	strh	r3, [r7, #10]
 800389c:	4613      	mov	r3, r2
 800389e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038a0:	f7fe ffd4 	bl	800284c <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	f040 820b 	bne.w	8003cca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2319      	movs	r3, #25
 80038ba:	2201      	movs	r2, #1
 80038bc:	497c      	ldr	r1, [pc, #496]	; (8003ab0 <HAL_I2C_Master_Receive+0x224>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f001 f812 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
 80038cc:	e1fe      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_I2C_Master_Receive+0x50>
 80038d8:	2302      	movs	r3, #2
 80038da:	e1f7      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d007      	beq.n	8003902 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003910:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2222      	movs	r2, #34	; 0x22
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2210      	movs	r2, #16
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	893a      	ldrh	r2, [r7, #8]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a5c      	ldr	r2, [pc, #368]	; (8003ab4 <HAL_I2C_Master_Receive+0x228>)
 8003942:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003944:	8979      	ldrh	r1, [r7, #10]
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fd80 	bl	8004450 <I2C_MasterRequestRead>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1b8      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	2b00      	cmp	r3, #0
 8003960:	d113      	bne.n	800398a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	623b      	str	r3, [r7, #32]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	e18c      	b.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	2b01      	cmp	r3, #1
 8003990:	d11b      	bne.n	80039ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	e16c      	b.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d11b      	bne.n	8003a0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	61bb      	str	r3, [r7, #24]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	e14c      	b.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a30:	e138      	b.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	f200 80f1 	bhi.w	8003c1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d123      	bne.n	8003a8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f001 f8a5 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e139      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a8a:	e10b      	b.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d14e      	bne.n	8003b32 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4906      	ldr	r1, [pc, #24]	; (8003ab8 <HAL_I2C_Master_Receive+0x22c>)
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 ff22 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e10e      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
 8003aae:	bf00      	nop
 8003ab0:	00100002 	.word	0x00100002
 8003ab4:	ffff0000 	.word	0xffff0000
 8003ab8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b30:	e0b8      	b.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	2200      	movs	r2, #0
 8003b3a:	4966      	ldr	r1, [pc, #408]	; (8003cd4 <HAL_I2C_Master_Receive+0x448>)
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fed3 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0bf      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	2200      	movs	r2, #0
 8003b96:	494f      	ldr	r1, [pc, #316]	; (8003cd4 <HAL_I2C_Master_Receive+0x448>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fea5 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e091      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c1c:	e042      	b.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 ffb8 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e04c      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d118      	bne.n	8003ca4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f47f aec2 	bne.w	8003a32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003cca:	2302      	movs	r3, #2
  }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3728      	adds	r7, #40	; 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	00010004 	.word	0x00010004

08003cd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	817b      	strh	r3, [r7, #10]
 8003cea:	460b      	mov	r3, r1
 8003cec:	813b      	strh	r3, [r7, #8]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf2:	f7fe fdab 	bl	800284c <HAL_GetTick>
 8003cf6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	f040 80d9 	bne.w	8003eb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2319      	movs	r3, #25
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	496d      	ldr	r1, [pc, #436]	; (8003ec4 <HAL_I2C_Mem_Write+0x1ec>)
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fde9 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e0cc      	b.n	8003eba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Mem_Write+0x56>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0c5      	b.n	8003eba <HAL_I2C_Mem_Write+0x1e2>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d007      	beq.n	8003d54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2221      	movs	r2, #33	; 0x21
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a3a      	ldr	r2, [r7, #32]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a4d      	ldr	r2, [pc, #308]	; (8003ec8 <HAL_I2C_Mem_Write+0x1f0>)
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d96:	88f8      	ldrh	r0, [r7, #6]
 8003d98:	893a      	ldrh	r2, [r7, #8]
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4603      	mov	r3, r0
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fc20 	bl	80045ec <I2C_RequestMemoryWrite>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d052      	beq.n	8003e58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e081      	b.n	8003eba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fe6a 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d107      	bne.n	8003dde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ddc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e06b      	b.n	8003eba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d11b      	bne.n	8003e58 <HAL_I2C_Mem_Write+0x180>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d017      	beq.n	8003e58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1aa      	bne.n	8003db6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fe56 	bl	8004b16 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00d      	beq.n	8003e8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d107      	bne.n	8003e88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e016      	b.n	8003eba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	00100002 	.word	0x00100002
 8003ec8:	ffff0000 	.word	0xffff0000

08003ecc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	; 0x30
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4603      	mov	r3, r0
 8003edc:	817b      	strh	r3, [r7, #10]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	813b      	strh	r3, [r7, #8]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ee6:	f7fe fcb1 	bl	800284c <HAL_GetTick>
 8003eea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	f040 8208 	bne.w	800430a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2319      	movs	r3, #25
 8003f00:	2201      	movs	r2, #1
 8003f02:	497b      	ldr	r1, [pc, #492]	; (80040f0 <HAL_I2C_Mem_Read+0x224>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fcef 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
 8003f12:	e1fb      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_I2C_Mem_Read+0x56>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e1f4      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d007      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2222      	movs	r2, #34	; 0x22
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4a5b      	ldr	r2, [pc, #364]	; (80040f4 <HAL_I2C_Mem_Read+0x228>)
 8003f88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f8a:	88f8      	ldrh	r0, [r7, #6]
 8003f8c:	893a      	ldrh	r2, [r7, #8]
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4603      	mov	r3, r0
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fbbc 	bl	8004718 <I2C_RequestMemoryRead>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1b0      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d113      	bne.n	8003fda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e184      	b.n	80042e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d11b      	bne.n	800401a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e164      	b.n	80042e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	2b02      	cmp	r3, #2
 8004020:	d11b      	bne.n	800405a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004040:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	61bb      	str	r3, [r7, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	e144      	b.n	80042e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004070:	e138      	b.n	80042e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004076:	2b03      	cmp	r3, #3
 8004078:	f200 80f1 	bhi.w	800425e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	2b01      	cmp	r3, #1
 8004082:	d123      	bne.n	80040cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fd85 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e139      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040ca:	e10b      	b.n	80042e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d14e      	bne.n	8004172 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	2200      	movs	r2, #0
 80040dc:	4906      	ldr	r1, [pc, #24]	; (80040f8 <HAL_I2C_Mem_Read+0x22c>)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 fc02 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e10e      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
 80040ee:	bf00      	nop
 80040f0:	00100002 	.word	0x00100002
 80040f4:	ffff0000 	.word	0xffff0000
 80040f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800410a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691a      	ldr	r2, [r3, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	1c5a      	adds	r2, r3, #1
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004170:	e0b8      	b.n	80042e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004178:	2200      	movs	r2, #0
 800417a:	4966      	ldr	r1, [pc, #408]	; (8004314 <HAL_I2C_Mem_Read+0x448>)
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fbb3 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0bf      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	2200      	movs	r2, #0
 80041d6:	494f      	ldr	r1, [pc, #316]	; (8004314 <HAL_I2C_Mem_Read+0x448>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fb85 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e091      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800425c:	e042      	b.n	80042e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fc98 	bl	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e04c      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d118      	bne.n	80042e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f aec2 	bne.w	8004072 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	00010004 	.word	0x00010004

08004318 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004326:	b2db      	uxtb	r3, r3
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	460b      	mov	r3, r1
 800435a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d006      	beq.n	8004376 <I2C_MasterRequestWrite+0x2a>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d003      	beq.n	8004376 <I2C_MasterRequestWrite+0x2a>
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004374:	d108      	bne.n	8004388 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	e00b      	b.n	80043a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	2b12      	cmp	r3, #18
 800438e:	d107      	bne.n	80043a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fa9b 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00d      	beq.n	80043d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043c6:	d103      	bne.n	80043d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e035      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043dc:	d108      	bne.n	80043f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043ec:	611a      	str	r2, [r3, #16]
 80043ee:	e01b      	b.n	8004428 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	11db      	asrs	r3, r3, #7
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0306 	and.w	r3, r3, #6
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f063 030f 	orn	r3, r3, #15
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <I2C_MasterRequestWrite+0xfc>)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fac1 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e010      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4907      	ldr	r1, [pc, #28]	; (800444c <I2C_MasterRequestWrite+0x100>)
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fab1 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	00010008 	.word	0x00010008
 800444c:	00010002 	.word	0x00010002

08004450 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
 800445c:	460b      	mov	r3, r1
 800445e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004474:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d006      	beq.n	800448a <I2C_MasterRequestRead+0x3a>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d003      	beq.n	800448a <I2C_MasterRequestRead+0x3a>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004488:	d108      	bne.n	800449c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004498:	601a      	str	r2, [r3, #0]
 800449a:	e00b      	b.n	80044b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	2b11      	cmp	r3, #17
 80044a2:	d107      	bne.n	80044b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 fa11 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00d      	beq.n	80044e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044da:	d103      	bne.n	80044e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e079      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f0:	d108      	bne.n	8004504 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044f2:	897b      	ldrh	r3, [r7, #10]
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e05f      	b.n	80045c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004504:	897b      	ldrh	r3, [r7, #10]
 8004506:	11db      	asrs	r3, r3, #7
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 0306 	and.w	r3, r3, #6
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f063 030f 	orn	r3, r3, #15
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	4930      	ldr	r1, [pc, #192]	; (80045e4 <I2C_MasterRequestRead+0x194>)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fa37 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e054      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004532:	897b      	ldrh	r3, [r7, #10]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4929      	ldr	r1, [pc, #164]	; (80045e8 <I2C_MasterRequestRead+0x198>)
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa27 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e044      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	613b      	str	r3, [r7, #16]
 8004566:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004576:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f9af 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459e:	d103      	bne.n	80045a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e017      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045ac:	897b      	ldrh	r3, [r7, #10]
 80045ae:	11db      	asrs	r3, r3, #7
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0306 	and.w	r3, r3, #6
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f063 030e 	orn	r3, r3, #14
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4907      	ldr	r1, [pc, #28]	; (80045e8 <I2C_MasterRequestRead+0x198>)
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 f9e3 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	00010008 	.word	0x00010008
 80045e8:	00010002 	.word	0x00010002

080045ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	460b      	mov	r3, r1
 8004600:	813b      	strh	r3, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004614:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	2200      	movs	r2, #0
 800461e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f960 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463c:	d103      	bne.n	8004646 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e05f      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800464a:	897b      	ldrh	r3, [r7, #10]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004658:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	6a3a      	ldr	r2, [r7, #32]
 800465e:	492d      	ldr	r1, [pc, #180]	; (8004714 <I2C_RequestMemoryWrite+0x128>)
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f998 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e04c      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004688:	6a39      	ldr	r1, [r7, #32]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fa02 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00d      	beq.n	80046b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	2b04      	cmp	r3, #4
 800469c:	d107      	bne.n	80046ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e02b      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b8:	893b      	ldrh	r3, [r7, #8]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]
 80046c2:	e021      	b.n	8004708 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046c4:	893b      	ldrh	r3, [r7, #8]
 80046c6:	0a1b      	lsrs	r3, r3, #8
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	6a39      	ldr	r1, [r7, #32]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f9dc 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00d      	beq.n	80046fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d107      	bne.n	80046fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e005      	b.n	800470a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046fe:	893b      	ldrh	r3, [r7, #8]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	00010002 	.word	0x00010002

08004718 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af02      	add	r7, sp, #8
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	4608      	mov	r0, r1
 8004722:	4611      	mov	r1, r2
 8004724:	461a      	mov	r2, r3
 8004726:	4603      	mov	r3, r0
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	460b      	mov	r3, r1
 800472c:	813b      	strh	r3, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004740:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004750:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	2200      	movs	r2, #0
 800475a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f8c2 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00d      	beq.n	8004786 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004778:	d103      	bne.n	8004782 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004780:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0aa      	b.n	80048dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004786:	897b      	ldrh	r3, [r7, #10]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004794:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	4952      	ldr	r1, [pc, #328]	; (80048e4 <I2C_RequestMemoryRead+0x1cc>)
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f8fa 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e097      	b.n	80048dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	6a39      	ldr	r1, [r7, #32]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f964 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d107      	bne.n	80047ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e076      	b.n	80048dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047f4:	893b      	ldrh	r3, [r7, #8]
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	611a      	str	r2, [r3, #16]
 80047fe:	e021      	b.n	8004844 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004800:	893b      	ldrh	r3, [r7, #8]
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	b29b      	uxth	r3, r3
 8004806:	b2da      	uxtb	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	6a39      	ldr	r1, [r7, #32]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f93e 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00d      	beq.n	800483a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b04      	cmp	r3, #4
 8004824:	d107      	bne.n	8004836 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004834:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e050      	b.n	80048dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800483a:	893b      	ldrh	r3, [r7, #8]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	6a39      	ldr	r1, [r7, #32]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f923 	bl	8004a94 <I2C_WaitOnTXEFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00d      	beq.n	8004870 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b04      	cmp	r3, #4
 800485a:	d107      	bne.n	800486c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e035      	b.n	80048dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2200      	movs	r2, #0
 8004888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f82b 	bl	80048e8 <I2C_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00d      	beq.n	80048b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a6:	d103      	bne.n	80048b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e013      	b.n	80048dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048b4:	897b      	ldrh	r3, [r7, #10]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	4906      	ldr	r1, [pc, #24]	; (80048e4 <I2C_RequestMemoryRead+0x1cc>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f863 	bl	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	00010002 	.word	0x00010002

080048e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	603b      	str	r3, [r7, #0]
 80048f4:	4613      	mov	r3, r2
 80048f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f8:	e025      	b.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d021      	beq.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fd ffa3 	bl	800284c <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d302      	bcc.n	8004918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e023      	b.n	800498e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10d      	bne.n	800496c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	43da      	mvns	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	e00c      	b.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	4013      	ands	r3, r2
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	429a      	cmp	r2, r3
 800498a:	d0b6      	beq.n	80048fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a4:	e051      	b.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049b4:	d123      	bne.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0204 	orr.w	r2, r3, #4
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e046      	b.n	8004a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d021      	beq.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fd ff21 	bl	800284c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d116      	bne.n	8004a4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f043 0220 	orr.w	r2, r3, #32
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e020      	b.n	8004a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10c      	bne.n	8004a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	e00b      	b.n	8004a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	43da      	mvns	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d18d      	bne.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aa0:	e02d      	b.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8ce 	bl	8004c44 <I2C_IsAcknowledgeFailed>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e02d      	b.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d021      	beq.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fd fec7 	bl	800284c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d116      	bne.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e007      	b.n	8004b0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b80      	cmp	r3, #128	; 0x80
 8004b0a:	d1ca      	bne.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b22:	e02d      	b.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f88d 	bl	8004c44 <I2C_IsAcknowledgeFailed>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e02d      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d021      	beq.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3c:	f7fd fe86 	bl	800284c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d116      	bne.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e007      	b.n	8004b90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d1ca      	bne.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ba4:	e042      	b.n	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d119      	bne.n	8004be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0210 	mvn.w	r2, #16
 8004bbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e029      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be8:	f7fd fe30 	bl	800284c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d302      	bcc.n	8004bfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e007      	b.n	8004c3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d1b5      	bne.n	8004ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d11b      	bne.n	8004c94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f043 0204 	orr.w	r2, r3, #4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca4:	b08f      	sub	sp, #60	; 0x3c
 8004ca6:	af0a      	add	r7, sp, #40	; 0x28
 8004ca8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e116      	b.n	8004ee2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f00c f8b4 	bl	8010e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 ff8b 	bl	8009c0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	687e      	ldr	r6, [r7, #4]
 8004d00:	466d      	mov	r5, sp
 8004d02:	f106 0410 	add.w	r4, r6, #16
 8004d06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d12:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d16:	1d33      	adds	r3, r6, #4
 8004d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1a:	6838      	ldr	r0, [r7, #0]
 8004d1c:	f004 fe62 	bl	80099e4 <USB_CoreInit>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0d7      	b.n	8004ee2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2100      	movs	r1, #0
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f004 ff79 	bl	8009c30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
 8004d42:	e04a      	b.n	8004dda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d44:	7bfa      	ldrb	r2, [r7, #15]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	333d      	adds	r3, #61	; 0x3d
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d58:	7bfa      	ldrb	r2, [r7, #15]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	333c      	adds	r3, #60	; 0x3c
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d6c:	7bfa      	ldrb	r2, [r7, #15]
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	b298      	uxth	r0, r3
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	3344      	adds	r3, #68	; 0x44
 8004d80:	4602      	mov	r2, r0
 8004d82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	3340      	adds	r3, #64	; 0x40
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d98:	7bfa      	ldrb	r2, [r7, #15]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	3348      	adds	r3, #72	; 0x48
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004dac:	7bfa      	ldrb	r2, [r7, #15]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4413      	add	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	334c      	adds	r3, #76	; 0x4c
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dc0:	7bfa      	ldrb	r2, [r7, #15]
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	3354      	adds	r3, #84	; 0x54
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
 8004dda:	7bfa      	ldrb	r2, [r7, #15]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d3af      	bcc.n	8004d44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de4:	2300      	movs	r3, #0
 8004de6:	73fb      	strb	r3, [r7, #15]
 8004de8:	e044      	b.n	8004e74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004dea:	7bfa      	ldrb	r2, [r7, #15]
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e00:	7bfa      	ldrb	r2, [r7, #15]
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e12:	7bfa      	ldrb	r2, [r7, #15]
 8004e14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e16:	7bfa      	ldrb	r2, [r7, #15]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	440b      	add	r3, r1
 8004e24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e2c:	7bfa      	ldrb	r2, [r7, #15]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	4613      	mov	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e58:	7bfa      	ldrb	r2, [r7, #15]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	3301      	adds	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3b5      	bcc.n	8004dea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	687e      	ldr	r6, [r7, #4]
 8004e86:	466d      	mov	r5, sp
 8004e88:	f106 0410 	add.w	r4, r6, #16
 8004e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e98:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e9c:	1d33      	adds	r3, r6, #4
 8004e9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ea0:	6838      	ldr	r0, [r7, #0]
 8004ea2:	f004 ff11 	bl	8009cc8 <USB_DevInit>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e014      	b.n	8004ee2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d102      	bne.n	8004ed6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 f98b 	bl	80061ec <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f006 f853 	bl	800af86 <USB_DevDisconnect>

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_PCD_Start+0x1c>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e020      	b.n	8004f48 <HAL_PCD_Start+0x5e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d109      	bne.n	8004f2a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d005      	beq.n	8004f2a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f004 fe5c 	bl	8009bec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f006 f803 	bl	800af44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b08d      	sub	sp, #52	; 0x34
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f006 f8c1 	bl	800b0ee <USB_GetMode>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 84b7 	bne.w	80058e2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f006 f825 	bl	800afc8 <USB_ReadInterrupts>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 84ad 	beq.w	80058e0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0a1b      	lsrs	r3, r3, #8
 8004f90:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f006 f812 	bl	800afc8 <USB_ReadInterrupts>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d107      	bne.n	8004fbe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f002 0202 	and.w	r2, r2, #2
 8004fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f006 f800 	bl	800afc8 <USB_ReadInterrupts>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d161      	bne.n	8005096 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699a      	ldr	r2, [r3, #24]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0210 	bic.w	r2, r2, #16
 8004fe0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	4613      	mov	r3, r2
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3304      	adds	r3, #4
 8005000:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	0c5b      	lsrs	r3, r3, #17
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	2b02      	cmp	r3, #2
 800500c:	d124      	bne.n	8005058 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005014:	4013      	ands	r3, r2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d035      	beq.n	8005086 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005028:	b29b      	uxth	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	6a38      	ldr	r0, [r7, #32]
 800502e:	f005 fe37 	bl	800aca0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800503e:	441a      	add	r2, r3
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005050:	441a      	add	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
 8005056:	e016      	b.n	8005086 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	0c5b      	lsrs	r3, r3, #17
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	2b06      	cmp	r3, #6
 8005062:	d110      	bne.n	8005086 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800506a:	2208      	movs	r2, #8
 800506c:	4619      	mov	r1, r3
 800506e:	6a38      	ldr	r0, [r7, #32]
 8005070:	f005 fe16 	bl	800aca0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005080:	441a      	add	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0210 	orr.w	r2, r2, #16
 8005094:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f005 ff94 	bl	800afc8 <USB_ReadInterrupts>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050aa:	f040 80a7 	bne.w	80051fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f005 ff99 	bl	800afee <USB_ReadDevAllOutEpInterrupt>
 80050bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80050be:	e099      	b.n	80051f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 808e 	beq.w	80051e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f005 ffbd 	bl	800b056 <USB_ReadDevOutEPInterrupt>
 80050dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 feef 	bl	8005ee0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	461a      	mov	r2, r3
 800511a:	2308      	movs	r3, #8
 800511c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800511e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 ffc5 	bl	80060b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	461a      	mov	r2, r3
 800513e:	2310      	movs	r3, #16
 8005140:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d030      	beq.n	80051ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d109      	bne.n	800516c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800516a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800516c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516e:	4613      	mov	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	4413      	add	r3, r2
 800517e:	3304      	adds	r3, #4
 8005180:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	78db      	ldrb	r3, [r3, #3]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d108      	bne.n	800519c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2200      	movs	r2, #0
 800518e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	b2db      	uxtb	r3, r3
 8005194:	4619      	mov	r1, r3
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f00b ff6c 	bl	8011074 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	461a      	mov	r2, r3
 80051aa:	2302      	movs	r3, #2
 80051ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	461a      	mov	r2, r3
 80051c6:	2320      	movs	r3, #32
 80051c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e0:	461a      	mov	r2, r3
 80051e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	3301      	adds	r3, #1
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f47f af62 	bne.w	80050c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f005 fee1 	bl	800afc8 <USB_ReadInterrupts>
 8005206:	4603      	mov	r3, r0
 8005208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005210:	f040 80db 	bne.w	80053ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f005 ff02 	bl	800b022 <USB_ReadDevAllInEpInterrupt>
 800521e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005224:	e0cd      	b.n	80053c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 80c2 	beq.w	80053b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	4611      	mov	r1, r2
 800523c:	4618      	mov	r0, r3
 800523e:	f005 ff28 	bl	800b092 <USB_ReadDevInEPInterrupt>
 8005242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d057      	beq.n	80052fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	2201      	movs	r2, #1
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	43db      	mvns	r3, r3
 8005268:	69f9      	ldr	r1, [r7, #28]
 800526a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526e:	4013      	ands	r3, r2
 8005270:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527e:	461a      	mov	r2, r3
 8005280:	2301      	movs	r3, #1
 8005282:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d132      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	334c      	adds	r3, #76	; 0x4c
 800529c:	6819      	ldr	r1, [r3, #0]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4403      	add	r3, r0
 80052ac:	3348      	adds	r3, #72	; 0x48
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4419      	add	r1, r3
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b6:	4613      	mov	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4403      	add	r3, r0
 80052c0:	334c      	adds	r3, #76	; 0x4c
 80052c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d113      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x3a2>
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	4613      	mov	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	4413      	add	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3354      	adds	r3, #84	; 0x54
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052ea:	461a      	mov	r2, r3
 80052ec:	2101      	movs	r1, #1
 80052ee:	f005 ff2f 	bl	800b150 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	4619      	mov	r1, r3
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f00b fe36 	bl	8010f6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005314:	461a      	mov	r2, r3
 8005316:	2308      	movs	r3, #8
 8005318:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f003 0310 	and.w	r3, r3, #16
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	461a      	mov	r2, r3
 8005332:	2310      	movs	r3, #16
 8005334:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	461a      	mov	r2, r3
 800534e:	2340      	movs	r3, #64	; 0x40
 8005350:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d023      	beq.n	80053a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800535c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800535e:	6a38      	ldr	r0, [r7, #32]
 8005360:	f004 fe10 	bl	8009f84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	4613      	mov	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	3338      	adds	r3, #56	; 0x38
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4413      	add	r3, r2
 8005374:	3304      	adds	r3, #4
 8005376:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	78db      	ldrb	r3, [r3, #3]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d108      	bne.n	8005392 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2200      	movs	r2, #0
 8005384:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	b2db      	uxtb	r3, r3
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f00b fe83 	bl	8011098 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	461a      	mov	r2, r3
 80053a0:	2302      	movs	r3, #2
 80053a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80053ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fd08 	bl	8005dc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	3301      	adds	r3, #1
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f47f af2e 	bne.w	8005226 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f005 fdfa 	bl	800afc8 <USB_ReadInterrupts>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053de:	d122      	bne.n	8005426 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d108      	bne.n	8005410 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005406:	2100      	movs	r1, #0
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f00b fffd 	bl	8011408 <HAL_PCDEx_LPM_Callback>
 800540e:	e002      	b.n	8005416 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f00b fe21 	bl	8011058 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f005 fdcc 	bl	800afc8 <USB_ReadInterrupts>
 8005430:	4603      	mov	r3, r0
 8005432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543a:	d112      	bne.n	8005462 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0301 	and.w	r3, r3, #1
 8005448:	2b01      	cmp	r3, #1
 800544a:	d102      	bne.n	8005452 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f00b fddd 	bl	801100c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005460:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f005 fdae 	bl	800afc8 <USB_ReadInterrupts>
 800546c:	4603      	mov	r3, r0
 800546e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005476:	d121      	bne.n	80054bc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005486:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d111      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80054ac:	2101      	movs	r1, #1
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f00b ffaa 	bl	8011408 <HAL_PCDEx_LPM_Callback>
 80054b4:	e002      	b.n	80054bc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f00b fda8 	bl	801100c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f005 fd81 	bl	800afc8 <USB_ReadInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d0:	f040 80b7 	bne.w	8005642 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2110      	movs	r1, #16
 80054ee:	4618      	mov	r0, r3
 80054f0:	f004 fd48 	bl	8009f84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f8:	e046      	b.n	8005588 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005506:	461a      	mov	r2, r3
 8005508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800550c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	4413      	add	r3, r2
 8005516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800551e:	0151      	lsls	r1, r2, #5
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	440a      	add	r2, r1
 8005524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005528:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800552c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	461a      	mov	r2, r3
 800553c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005540:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005560:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800557c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005580:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	3301      	adds	r3, #1
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558e:	429a      	cmp	r2, r3
 8005590:	d3b3      	bcc.n	80054fa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80055a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d016      	beq.n	80055dc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055be:	f043 030b 	orr.w	r3, r3, #11
 80055c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d4:	f043 030b 	orr.w	r3, r3, #11
 80055d8:	6453      	str	r3, [r2, #68]	; 0x44
 80055da:	e015      	b.n	8005608 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	69fa      	ldr	r2, [r7, #28]
 80055e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005602:	f043 030b 	orr.w	r3, r3, #11
 8005606:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	69fa      	ldr	r2, [r7, #28]
 8005612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005616:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800561a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800562c:	461a      	mov	r2, r3
 800562e:	f005 fd8f 	bl	800b150 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695a      	ldr	r2, [r3, #20]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4618      	mov	r0, r3
 8005648:	f005 fcbe 	bl	800afc8 <USB_ReadInterrupts>
 800564c:	4603      	mov	r3, r0
 800564e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005656:	d124      	bne.n	80056a2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f005 fd54 	bl	800b10a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f004 fd09 	bl	800a07e <USB_GetDevSpeed>
 800566c:	4603      	mov	r3, r0
 800566e:	461a      	mov	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681c      	ldr	r4, [r3, #0]
 8005678:	f000 fec2 	bl	8006400 <HAL_RCC_GetHCLKFreq>
 800567c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	4620      	mov	r0, r4
 8005688:	f004 fa0e 	bl	8009aa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f00b fc94 	bl	8010fba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80056a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f005 fc8e 	bl	800afc8 <USB_ReadInterrupts>
 80056ac:	4603      	mov	r3, r0
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d10a      	bne.n	80056cc <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f00b fc71 	bl	8010f9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695a      	ldr	r2, [r3, #20]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f002 0208 	and.w	r2, r2, #8
 80056ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4618      	mov	r0, r3
 80056d2:	f005 fc79 	bl	800afc8 <USB_ReadInterrupts>
 80056d6:	4603      	mov	r3, r0
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b80      	cmp	r3, #128	; 0x80
 80056de:	d122      	bne.n	8005726 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056ec:	2301      	movs	r3, #1
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
 80056f0:	e014      	b.n	800571c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	4613      	mov	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	440b      	add	r3, r1
 8005700:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d105      	bne.n	8005716 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	b2db      	uxtb	r3, r3
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb27 	bl	8005d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	429a      	cmp	r2, r3
 8005724:	d3e5      	bcc.n	80056f2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f005 fc4c 	bl	800afc8 <USB_ReadInterrupts>
 8005730:	4603      	mov	r3, r0
 8005732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573a:	d13b      	bne.n	80057b4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800573c:	2301      	movs	r3, #1
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
 8005740:	e02b      	b.n	800579a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005756:	4613      	mov	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	4413      	add	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	440b      	add	r3, r1
 8005760:	3340      	adds	r3, #64	; 0x40
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d115      	bne.n	8005794 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005768:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800576a:	2b00      	cmp	r3, #0
 800576c:	da12      	bge.n	8005794 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800576e:	6879      	ldr	r1, [r7, #4]
 8005770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005772:	4613      	mov	r3, r2
 8005774:	00db      	lsls	r3, r3, #3
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	440b      	add	r3, r1
 800577c:	333f      	adds	r3, #63	; 0x3f
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	b2db      	uxtb	r3, r3
 8005786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800578a:	b2db      	uxtb	r3, r3
 800578c:	4619      	mov	r1, r3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fae8 	bl	8005d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	3301      	adds	r3, #1
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d3ce      	bcc.n	8005742 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80057b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f005 fc05 	bl	800afc8 <USB_ReadInterrupts>
 80057be:	4603      	mov	r3, r0
 80057c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c8:	d155      	bne.n	8005876 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ca:	2301      	movs	r3, #1
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
 80057ce:	e045      	b.n	800585c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	4613      	mov	r3, r2
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	440b      	add	r3, r1
 80057ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d12e      	bne.n	8005856 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da2b      	bge.n	8005856 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800580a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800580e:	429a      	cmp	r2, r3
 8005810:	d121      	bne.n	8005856 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005816:	4613      	mov	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005852:	6053      	str	r3, [r2, #4]
            break;
 8005854:	e007      	b.n	8005866 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	3301      	adds	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	; 0x24
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	429a      	cmp	r2, r3
 8005864:	d3b4      	bcc.n	80057d0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f005 fba4 	bl	800afc8 <USB_ReadInterrupts>
 8005880:	4603      	mov	r3, r0
 8005882:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588a:	d10a      	bne.n	80058a2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f00b fc15 	bl	80110bc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695a      	ldr	r2, [r3, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80058a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f005 fb8e 	bl	800afc8 <USB_ReadInterrupts>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f003 0304 	and.w	r3, r3, #4
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d115      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f00b fc05 	bl	80110d8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6859      	ldr	r1, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	e000      	b.n	80058e2 <HAL_PCD_IRQHandler+0x992>
      return;
 80058e0:	bf00      	nop
    }
  }
}
 80058e2:	3734      	adds	r7, #52	; 0x34
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd90      	pop	{r4, r7, pc}

080058e8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_PCD_SetAddress+0x1a>
 80058fe:	2302      	movs	r3, #2
 8005900:	e013      	b.n	800592a <HAL_PCD_SetAddress+0x42>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f005 faec 	bl	800aef8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b084      	sub	sp, #16
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	4608      	mov	r0, r1
 800593c:	4611      	mov	r1, r2
 800593e:	461a      	mov	r2, r3
 8005940:	4603      	mov	r3, r0
 8005942:	70fb      	strb	r3, [r7, #3]
 8005944:	460b      	mov	r3, r1
 8005946:	803b      	strh	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005954:	2b00      	cmp	r3, #0
 8005956:	da0f      	bge.n	8005978 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	4613      	mov	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	3338      	adds	r3, #56	; 0x38
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	4413      	add	r3, r2
 800596c:	3304      	adds	r3, #4
 800596e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	705a      	strb	r2, [r3, #1]
 8005976:	e00f      	b.n	8005998 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	f003 020f 	and.w	r2, r3, #15
 800597e:	4613      	mov	r3, r2
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	4413      	add	r3, r2
 800598e:	3304      	adds	r3, #4
 8005990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80059a4:	883a      	ldrh	r2, [r7, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	78ba      	ldrb	r2, [r7, #2]
 80059ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	785b      	ldrb	r3, [r3, #1]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d004      	beq.n	80059c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059c2:	78bb      	ldrb	r3, [r7, #2]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d102      	bne.n	80059ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_PCD_EP_Open+0xaa>
 80059d8:	2302      	movs	r3, #2
 80059da:	e00e      	b.n	80059fa <HAL_PCD_EP_Open+0xc8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68f9      	ldr	r1, [r7, #12]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f004 fb6c 	bl	800a0c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059f8:	7afb      	ldrb	r3, [r7, #11]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	da0f      	bge.n	8005a36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	3338      	adds	r3, #56	; 0x38
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	4413      	add	r3, r2
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	705a      	strb	r2, [r3, #1]
 8005a34:	e00f      	b.n	8005a56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	f003 020f 	and.w	r2, r3, #15
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_PCD_EP_Close+0x6e>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e00e      	b.n	8005a8e <HAL_PCD_EP_Close+0x8c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68f9      	ldr	r1, [r7, #12]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f004 fbaa 	bl	800a1d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa6:	7afb      	ldrb	r3, [r7, #11]
 8005aa8:	f003 020f 	and.w	r2, r3, #15
 8005aac:	4613      	mov	r3, r2
 8005aae:	00db      	lsls	r3, r3, #3
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4413      	add	r3, r2
 8005abc:	3304      	adds	r3, #4
 8005abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad8:	7afb      	ldrb	r3, [r7, #11]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d102      	bne.n	8005af2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005af2:	7afb      	ldrb	r3, [r7, #11]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	f004 fe89 	bl	800a820 <USB_EP0StartXfer>
 8005b0e:	e008      	b.n	8005b22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	f004 fc37 	bl	800a390 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	f003 020f 	and.w	r2, r3, #15
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b4e:	681b      	ldr	r3, [r3, #0]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b6c:	7afb      	ldrb	r3, [r7, #11]
 8005b6e:	f003 020f 	and.w	r2, r3, #15
 8005b72:	4613      	mov	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	3338      	adds	r3, #56	; 0x38
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	3304      	adds	r3, #4
 8005b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2200      	movs	r2, #0
 8005b94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b9c:	7afb      	ldrb	r3, [r7, #11]
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d102      	bne.n	8005bb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bb6:	7afb      	ldrb	r3, [r7, #11]
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6818      	ldr	r0, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	f004 fe27 	bl	800a820 <USB_EP0StartXfer>
 8005bd2:	e008      	b.n	8005be6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6818      	ldr	r0, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	461a      	mov	r2, r3
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	f004 fbd5 	bl	800a390 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	f003 020f 	and.w	r2, r3, #15
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d901      	bls.n	8005c0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e050      	b.n	8005cb0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da0f      	bge.n	8005c36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c16:	78fb      	ldrb	r3, [r7, #3]
 8005c18:	f003 020f 	and.w	r2, r3, #15
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	4413      	add	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	3338      	adds	r3, #56	; 0x38
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	4413      	add	r3, r2
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	705a      	strb	r2, [r3, #1]
 8005c34:	e00d      	b.n	8005c52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	4413      	add	r3, r2
 8005c48:	3304      	adds	r3, #4
 8005c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_PCD_EP_SetStall+0x82>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e01e      	b.n	8005cb0 <HAL_PCD_EP_SetStall+0xc0>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68f9      	ldr	r1, [r7, #12]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f005 f865 	bl	800ad50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	b2d9      	uxtb	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f005 fa55 	bl	800b150 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	f003 020f 	and.w	r2, r3, #15
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d901      	bls.n	8005cd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e042      	b.n	8005d5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da0f      	bge.n	8005cfe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	3338      	adds	r3, #56	; 0x38
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	705a      	strb	r2, [r3, #1]
 8005cfc:	e00f      	b.n	8005d1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	4613      	mov	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4413      	add	r3, r2
 8005d14:	3304      	adds	r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_PCD_EP_ClrStall+0x86>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e00e      	b.n	8005d5c <HAL_PCD_EP_ClrStall+0xa4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f005 f86d 	bl	800ae2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da0c      	bge.n	8005d92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	3338      	adds	r3, #56	; 0x38
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e00c      	b.n	8005dac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 020f 	and.w	r2, r3, #15
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	3304      	adds	r3, #4
 8005daa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68f9      	ldr	r1, [r7, #12]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f004 fe8c 	bl	800aad0 <USB_EPStopXfer>
 8005db8:	4603      	mov	r3, r0
 8005dba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b08a      	sub	sp, #40	; 0x28
 8005dca:	af02      	add	r7, sp, #8
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	3338      	adds	r3, #56	; 0x38
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	3304      	adds	r3, #4
 8005dec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d901      	bls.n	8005dfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e06c      	b.n	8005ed8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d902      	bls.n	8005e1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e22:	e02b      	b.n	8005e7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	699a      	ldr	r2, [r3, #24]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d902      	bls.n	8005e40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3303      	adds	r3, #3
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6919      	ldr	r1, [r3, #16]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	6978      	ldr	r0, [r7, #20]
 8005e60:	f004 fee0 	bl	800ac24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	441a      	add	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1a      	ldr	r2, [r3, #32]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	441a      	add	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d809      	bhi.n	8005ea6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1a      	ldr	r2, [r3, #32]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d203      	bcs.n	8005ea6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1be      	bne.n	8005e24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d811      	bhi.n	8005ed6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	2201      	movs	r2, #1
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	6939      	ldr	r1, [r7, #16]
 8005ece:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	333c      	adds	r3, #60	; 0x3c
 8005ef8:	3304      	adds	r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d17b      	bne.n	800600e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4a61      	ldr	r2, [pc, #388]	; (80060a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	f240 80b9 	bls.w	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80b3 	beq.w	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	461a      	mov	r2, r3
 8005f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f48:	6093      	str	r3, [r2, #8]
 8005f4a:	e0a7      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	2320      	movs	r3, #32
 8005f66:	6093      	str	r3, [r2, #8]
 8005f68:	e098      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 8093 	bne.w	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4a4b      	ldr	r2, [pc, #300]	; (80060a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d90f      	bls.n	8005f9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	461a      	mov	r2, r3
 8005f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f9a:	6093      	str	r3, [r2, #8]
 8005f9c:	e07e      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	0159      	lsls	r1, r3, #5
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d114      	bne.n	8006000 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2101      	movs	r1, #1
 8005fec:	f005 f8b0 	bl	800b150 <USB_EP0_OutStart>
 8005ff0:	e006      	b.n	8006000 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f00a ff94 	bl	8010f34 <HAL_PCD_DataOutStageCallback>
 800600c:	e046      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4a26      	ldr	r2, [pc, #152]	; (80060ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d124      	bne.n	8006060 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	461a      	mov	r2, r3
 800602e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006032:	6093      	str	r3, [r2, #8]
 8006034:	e032      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	461a      	mov	r2, r3
 800604e:	2320      	movs	r3, #32
 8006050:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f00a ff6b 	bl	8010f34 <HAL_PCD_DataOutStageCallback>
 800605e:	e01d      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d114      	bne.n	8006090 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d108      	bne.n	8006090 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006088:	461a      	mov	r2, r3
 800608a:	2100      	movs	r1, #0
 800608c:	f005 f860 	bl	800b150 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f00a ff4c 	bl	8010f34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	4f54300a 	.word	0x4f54300a
 80060ac:	4f54310a 	.word	0x4f54310a

080060b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	333c      	adds	r3, #60	; 0x3c
 80060c8:	3304      	adds	r3, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a15      	ldr	r2, [pc, #84]	; (8006138 <PCD_EP_OutSetupPacket_int+0x88>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d90e      	bls.n	8006104 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d009      	beq.n	8006104 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060fc:	461a      	mov	r2, r3
 80060fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006102:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f00a ff03 	bl	8010f10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a0a      	ldr	r2, [pc, #40]	; (8006138 <PCD_EP_OutSetupPacket_int+0x88>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d90c      	bls.n	800612c <PCD_EP_OutSetupPacket_int+0x7c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d108      	bne.n	800612c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006124:	461a      	mov	r2, r3
 8006126:	2101      	movs	r1, #1
 8006128:	f005 f812 	bl	800b150 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	4f54300a 	.word	0x4f54300a

0800613c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
 8006148:	4613      	mov	r3, r2
 800614a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800615a:	883b      	ldrh	r3, [r7, #0]
 800615c:	0419      	lsls	r1, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	430a      	orrs	r2, r1
 8006166:	629a      	str	r2, [r3, #40]	; 0x28
 8006168:	e028      	b.n	80061bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	4413      	add	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]
 800617c:	e00d      	b.n	800619a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	3340      	adds	r3, #64	; 0x40
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	3301      	adds	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	3b01      	subs	r3, #1
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3ec      	bcc.n	800617e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061a4:	883b      	ldrh	r3, [r7, #0]
 80061a6:	0418      	lsls	r0, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	4302      	orrs	r2, r0
 80061b4:	3340      	adds	r3, #64	; 0x40
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	887a      	ldrh	r2, [r7, #2]
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621e:	f043 0303 	orr.w	r3, r3, #3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0cc      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006248:	4b68      	ldr	r3, [pc, #416]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d90c      	bls.n	8006270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b65      	ldr	r3, [pc, #404]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b63      	ldr	r3, [pc, #396]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0b8      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d020      	beq.n	80062be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006288:	4b59      	ldr	r3, [pc, #356]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4a58      	ldr	r2, [pc, #352]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062a0:	4b53      	ldr	r3, [pc, #332]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4a52      	ldr	r2, [pc, #328]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ac:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	494d      	ldr	r1, [pc, #308]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d044      	beq.n	8006354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d107      	bne.n	80062e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b47      	ldr	r3, [pc, #284]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d119      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d003      	beq.n	80062f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d107      	bne.n	8006302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f2:	4b3f      	ldr	r3, [pc, #252]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e06f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006302:	4b3b      	ldr	r3, [pc, #236]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e067      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006312:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f023 0203 	bic.w	r2, r3, #3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4934      	ldr	r1, [pc, #208]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	4313      	orrs	r3, r2
 8006322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006324:	f7fc fa92 	bl	800284c <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	e00a      	b.n	8006342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800632c:	f7fc fa8e 	bl	800284c <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	; 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e04f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 020c 	and.w	r2, r3, #12
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	429a      	cmp	r2, r3
 8006352:	d1eb      	bne.n	800632c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006354:	4b25      	ldr	r3, [pc, #148]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d20c      	bcs.n	800637c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006362:	4b22      	ldr	r3, [pc, #136]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b20      	ldr	r3, [pc, #128]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e032      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006388:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4916      	ldr	r1, [pc, #88]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	490e      	ldr	r1, [pc, #56]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ba:	f000 fbb1 	bl	8006b20 <HAL_RCC_GetSysClockFreq>
 80063be:	4602      	mov	r2, r0
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	490a      	ldr	r1, [pc, #40]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	5ccb      	ldrb	r3, [r1, r3]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_RCC_ClockConfig+0x1c8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fa ff16 	bl	800120c <HAL_InitTick>

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40023c00 	.word	0x40023c00
 80063f0:	40023800 	.word	0x40023800
 80063f4:	08012b10 	.word	0x08012b10
 80063f8:	20000000 	.word	0x20000000
 80063fc:	20000004 	.word	0x20000004

08006400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006404:	4b03      	ldr	r3, [pc, #12]	; (8006414 <HAL_RCC_GetHCLKFreq+0x14>)
 8006406:	681b      	ldr	r3, [r3, #0]
}
 8006408:	4618      	mov	r0, r3
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000000 	.word	0x20000000

08006418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800641c:	f7ff fff0 	bl	8006400 <HAL_RCC_GetHCLKFreq>
 8006420:	4602      	mov	r2, r0
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	0a9b      	lsrs	r3, r3, #10
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	4903      	ldr	r1, [pc, #12]	; (800643c <HAL_RCC_GetPCLK1Freq+0x24>)
 800642e:	5ccb      	ldrb	r3, [r1, r3]
 8006430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006434:	4618      	mov	r0, r3
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40023800 	.word	0x40023800
 800643c:	08012b20 	.word	0x08012b20

08006440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006444:	f7ff ffdc 	bl	8006400 <HAL_RCC_GetHCLKFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	0b5b      	lsrs	r3, r3, #13
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	4903      	ldr	r1, [pc, #12]	; (8006464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006456:	5ccb      	ldrb	r3, [r1, r3]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40023800 	.word	0x40023800
 8006464:	08012b20 	.word	0x08012b20

08006468 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	220f      	movs	r2, #15
 8006476:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006478:	4b12      	ldr	r3, [pc, #72]	; (80064c4 <HAL_RCC_GetClockConfig+0x5c>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0203 	and.w	r2, r3, #3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006490:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <HAL_RCC_GetClockConfig+0x5c>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <HAL_RCC_GetClockConfig+0x5c>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	08db      	lsrs	r3, r3, #3
 80064a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <HAL_RCC_GetClockConfig+0x60>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 020f 	and.w	r2, r3, #15
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	601a      	str	r2, [r3, #0]
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40023800 	.word	0x40023800
 80064c8:	40023c00 	.word	0x40023c00

080064cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08c      	sub	sp, #48	; 0x30
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d010      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006504:	4b6f      	ldr	r3, [pc, #444]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800650a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006512:	496c      	ldr	r1, [pc, #432]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006522:	2301      	movs	r3, #1
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b00      	cmp	r3, #0
 8006530:	d010      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006532:	4b64      	ldr	r3, [pc, #400]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006538:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	4960      	ldr	r1, [pc, #384]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006550:	2301      	movs	r3, #1
 8006552:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006560:	4b58      	ldr	r3, [pc, #352]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	4955      	ldr	r1, [pc, #340]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006570:	4313      	orrs	r3, r2
 8006572:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657e:	d101      	bne.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006580:	2301      	movs	r3, #1
 8006582:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800658c:	2301      	movs	r3, #1
 800658e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d017      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800659c:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800659e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	4946      	ldr	r1, [pc, #280]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ba:	d101      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80065bc:	2301      	movs	r3, #1
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80065c8:	2301      	movs	r3, #1
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 808a 	beq.w	80066ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	4a38      	ldr	r2, [pc, #224]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e8:	6413      	str	r3, [r2, #64]	; 0x40
 80065ea:	4b36      	ldr	r3, [pc, #216]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80065f6:	4b34      	ldr	r3, [pc, #208]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a33      	ldr	r2, [pc, #204]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80065fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006600:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006602:	f7fc f923 	bl	800284c <HAL_GetTick>
 8006606:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800660a:	f7fc f91f 	bl	800284c <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e278      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800661c:	4b2a      	ldr	r3, [pc, #168]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0f0      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006628:	4b26      	ldr	r3, [pc, #152]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006630:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d02f      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	429a      	cmp	r2, r3
 8006644:	d028      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006646:	4b1f      	ldr	r3, [pc, #124]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006650:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006656:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800665c:	4a19      	ldr	r2, [pc, #100]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006662:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d114      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800666e:	f7fc f8ed 	bl	800284c <HAL_GetTick>
 8006672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006674:	e00a      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006676:	f7fc f8e9 	bl	800284c <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	f241 3288 	movw	r2, #5000	; 0x1388
 8006684:	4293      	cmp	r3, r2
 8006686:	d901      	bls.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e240      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d0ee      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a4:	d114      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80066a6:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80066b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ba:	4902      	ldr	r1, [pc, #8]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	608b      	str	r3, [r1, #8]
 80066c0:	e00c      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80066c2:	bf00      	nop
 80066c4:	40023800 	.word	0x40023800
 80066c8:	40007000 	.word	0x40007000
 80066cc:	42470e40 	.word	0x42470e40
 80066d0:	4b4a      	ldr	r3, [pc, #296]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	4a49      	ldr	r2, [pc, #292]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066da:	6093      	str	r3, [r2, #8]
 80066dc:	4b47      	ldr	r3, [pc, #284]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e8:	4944      	ldr	r1, [pc, #272]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006702:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006710:	4b3a      	ldr	r3, [pc, #232]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671e:	4937      	ldr	r1, [pc, #220]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006732:	4b32      	ldr	r3, [pc, #200]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006738:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006740:	492e      	ldr	r1, [pc, #184]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006750:	2b00      	cmp	r3, #0
 8006752:	d011      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006754:	4b29      	ldr	r3, [pc, #164]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800675a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	4926      	ldr	r1, [pc, #152]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800676e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006772:	d101      	bne.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006774:	2301      	movs	r3, #1
 8006776:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006784:	4b1d      	ldr	r3, [pc, #116]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800678a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	491a      	ldr	r1, [pc, #104]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d011      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067b4:	4911      	ldr	r1, [pc, #68]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c4:	d101      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80067c6:	2301      	movs	r3, #1
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80067ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d005      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d8:	f040 80ff 	bne.w	80069da <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067e2:	f7fc f833 	bl	800284c <HAL_GetTick>
 80067e6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067e8:	e00e      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067ea:	f7fc f82f 	bl	800284c <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d907      	bls.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e188      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80067fc:	40023800 	.word	0x40023800
 8006800:	424711e0 	.word	0x424711e0
 8006804:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006808:	4b7e      	ldr	r3, [pc, #504]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1ea      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d003      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006830:	2b00      	cmp	r3, #0
 8006832:	d028      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d124      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800683c:	4b71      	ldr	r3, [pc, #452]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800683e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	f003 0303 	and.w	r3, r3, #3
 8006848:	3301      	adds	r3, #1
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800684e:	4b6d      	ldr	r3, [pc, #436]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006854:	0e1b      	lsrs	r3, r3, #24
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	019b      	lsls	r3, r3, #6
 8006866:	431a      	orrs	r2, r3
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	3b01      	subs	r3, #1
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	431a      	orrs	r2, r3
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	061b      	lsls	r3, r3, #24
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	071b      	lsls	r3, r3, #28
 800687e:	4961      	ldr	r1, [pc, #388]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006880:	4313      	orrs	r3, r2
 8006882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d035      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b0:	d130      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80068b2:	4b54      	ldr	r3, [pc, #336]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	3301      	adds	r3, #1
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068c4:	4b4f      	ldr	r3, [pc, #316]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ca:	0f1b      	lsrs	r3, r3, #28
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	019b      	lsls	r3, r3, #6
 80068dc:	431a      	orrs	r2, r3
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	3b01      	subs	r3, #1
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	431a      	orrs	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	071b      	lsls	r3, r3, #28
 80068f4:	4943      	ldr	r1, [pc, #268]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068fc:	4b41      	ldr	r3, [pc, #260]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80068fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006902:	f023 021f 	bic.w	r2, r3, #31
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	3b01      	subs	r3, #1
 800690c:	493d      	ldr	r1, [pc, #244]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691c:	2b00      	cmp	r3, #0
 800691e:	d029      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006928:	d124      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800692a:	4b36      	ldr	r3, [pc, #216]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800692c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	3301      	adds	r3, #1
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800693c:	4b31      	ldr	r3, [pc, #196]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800693e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006942:	0f1b      	lsrs	r3, r3, #28
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	019b      	lsls	r3, r3, #6
 8006954:	431a      	orrs	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	3b01      	subs	r3, #1
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	431a      	orrs	r2, r3
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	431a      	orrs	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	071b      	lsls	r3, r3, #28
 800696c:	4925      	ldr	r1, [pc, #148]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800696e:	4313      	orrs	r3, r2
 8006970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697c:	2b00      	cmp	r3, #0
 800697e:	d016      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	085b      	lsrs	r3, r3, #1
 8006992:	3b01      	subs	r3, #1
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	061b      	lsls	r3, r3, #24
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	071b      	lsls	r3, r3, #28
 80069a6:	4917      	ldr	r1, [pc, #92]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069ae:	4b16      	ldr	r3, [pc, #88]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069b4:	f7fb ff4a 	bl	800284c <HAL_GetTick>
 80069b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ba:	e008      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069bc:	f7fb ff46 	bl	800284c <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d901      	bls.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e09f      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ce:	4b0d      	ldr	r3, [pc, #52]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0f0      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	2b01      	cmp	r3, #1
 80069de:	f040 8095 	bne.w	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069e8:	f7fb ff30 	bl	800284c <HAL_GetTick>
 80069ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80069ee:	e00f      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80069f0:	f7fb ff2c 	bl	800284c <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d908      	bls.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e085      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006a02:	bf00      	nop
 8006a04:	40023800 	.word	0x40023800
 8006a08:	42470068 	.word	0x42470068
 8006a0c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a10:	4b41      	ldr	r3, [pc, #260]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a1c:	d0e8      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d009      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02b      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d127      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006a46:	4b34      	ldr	r3, [pc, #208]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4c:	0c1b      	lsrs	r3, r3, #16
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	3301      	adds	r3, #1
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	019b      	lsls	r3, r3, #6
 8006a62:	431a      	orrs	r2, r3
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	061b      	lsls	r3, r3, #24
 8006a74:	4928      	ldr	r1, [pc, #160]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a7c:	4b26      	ldr	r3, [pc, #152]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	4922      	ldr	r1, [pc, #136]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d01d      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aaa:	d118      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006aac:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab2:	0e1b      	lsrs	r3, r3, #24
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	019b      	lsls	r3, r3, #6
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	085b      	lsrs	r3, r3, #1
 8006acc:	3b01      	subs	r3, #1
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	061b      	lsls	r3, r3, #24
 8006ad6:	4910      	ldr	r1, [pc, #64]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ae4:	f7fb feb2 	bl	800284c <HAL_GetTick>
 8006ae8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006aea:	e008      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006aec:	f7fb feae 	bl	800284c <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e007      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006afe:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0a:	d1ef      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3730      	adds	r7, #48	; 0x30
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	42470070 	.word	0x42470070

08006b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b24:	b0a6      	sub	sp, #152	; 0x98
 8006b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b46:	4bc8      	ldr	r3, [pc, #800]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b0c      	cmp	r3, #12
 8006b50:	f200 817e 	bhi.w	8006e50 <HAL_RCC_GetSysClockFreq+0x330>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b91 	.word	0x08006b91
 8006b60:	08006e51 	.word	0x08006e51
 8006b64:	08006e51 	.word	0x08006e51
 8006b68:	08006e51 	.word	0x08006e51
 8006b6c:	08006b99 	.word	0x08006b99
 8006b70:	08006e51 	.word	0x08006e51
 8006b74:	08006e51 	.word	0x08006e51
 8006b78:	08006e51 	.word	0x08006e51
 8006b7c:	08006ba1 	.word	0x08006ba1
 8006b80:	08006e51 	.word	0x08006e51
 8006b84:	08006e51 	.word	0x08006e51
 8006b88:	08006e51 	.word	0x08006e51
 8006b8c:	08006d0b 	.word	0x08006d0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b90:	4bb6      	ldr	r3, [pc, #728]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8006b96:	e15f      	b.n	8006e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b98:	4bb5      	ldr	r3, [pc, #724]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8006b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006b9e:	e15b      	b.n	8006e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ba0:	4bb1      	ldr	r3, [pc, #708]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ba8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bac:	4bae      	ldr	r3, [pc, #696]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d031      	beq.n	8006c1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bb8:	4bab      	ldr	r3, [pc, #684]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	099b      	lsrs	r3, r3, #6
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bca:	663b      	str	r3, [r7, #96]	; 0x60
 8006bcc:	2300      	movs	r3, #0
 8006bce:	667b      	str	r3, [r7, #100]	; 0x64
 8006bd0:	4ba7      	ldr	r3, [pc, #668]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8006bd2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006bd6:	462a      	mov	r2, r5
 8006bd8:	fb03 f202 	mul.w	r2, r3, r2
 8006bdc:	2300      	movs	r3, #0
 8006bde:	4621      	mov	r1, r4
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	4413      	add	r3, r2
 8006be6:	4aa2      	ldr	r2, [pc, #648]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8006be8:	4621      	mov	r1, r4
 8006bea:	fba1 1202 	umull	r1, r2, r1, r2
 8006bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006bf0:	460a      	mov	r2, r1
 8006bf2:	67ba      	str	r2, [r7, #120]	; 0x78
 8006bf4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006bf6:	4413      	add	r3, r2
 8006bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bfe:	2200      	movs	r2, #0
 8006c00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8006c0c:	f7f9 fd0c 	bl	8000628 <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4613      	mov	r3, r2
 8006c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c1a:	e064      	b.n	8006ce6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c1c:	4b92      	ldr	r3, [pc, #584]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	099b      	lsrs	r3, r3, #6
 8006c22:	2200      	movs	r2, #0
 8006c24:	653b      	str	r3, [r7, #80]	; 0x50
 8006c26:	657a      	str	r2, [r7, #84]	; 0x54
 8006c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c30:	2300      	movs	r3, #0
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8006c38:	4622      	mov	r2, r4
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	f04f 0000 	mov.w	r0, #0
 8006c40:	f04f 0100 	mov.w	r1, #0
 8006c44:	0159      	lsls	r1, r3, #5
 8006c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c4a:	0150      	lsls	r0, r2, #5
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4621      	mov	r1, r4
 8006c52:	1a51      	subs	r1, r2, r1
 8006c54:	6139      	str	r1, [r7, #16]
 8006c56:	4629      	mov	r1, r5
 8006c58:	eb63 0301 	sbc.w	r3, r3, r1
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c6a:	4659      	mov	r1, fp
 8006c6c:	018b      	lsls	r3, r1, #6
 8006c6e:	4651      	mov	r1, sl
 8006c70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c74:	4651      	mov	r1, sl
 8006c76:	018a      	lsls	r2, r1, #6
 8006c78:	4651      	mov	r1, sl
 8006c7a:	ebb2 0801 	subs.w	r8, r2, r1
 8006c7e:	4659      	mov	r1, fp
 8006c80:	eb63 0901 	sbc.w	r9, r3, r1
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	f04f 0300 	mov.w	r3, #0
 8006c8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c98:	4690      	mov	r8, r2
 8006c9a:	4699      	mov	r9, r3
 8006c9c:	4623      	mov	r3, r4
 8006c9e:	eb18 0303 	adds.w	r3, r8, r3
 8006ca2:	60bb      	str	r3, [r7, #8]
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	eb49 0303 	adc.w	r3, r9, r3
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	f04f 0300 	mov.w	r3, #0
 8006cb4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cb8:	4629      	mov	r1, r5
 8006cba:	028b      	lsls	r3, r1, #10
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	028a      	lsls	r2, r1, #10
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4619      	mov	r1, r3
 8006cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006cce:	2200      	movs	r2, #0
 8006cd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006cd2:	647a      	str	r2, [r7, #68]	; 0x44
 8006cd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cd8:	f7f9 fca6 	bl	8000628 <__aeabi_uldivmod>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ce6:	4b60      	ldr	r3, [pc, #384]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8006cf8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006d08:	e0a6      	b.n	8006e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d0a:	4b57      	ldr	r3, [pc, #348]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d16:	4b54      	ldr	r3, [pc, #336]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d02a      	beq.n	8006d78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d22:	4b51      	ldr	r3, [pc, #324]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	099b      	lsrs	r3, r3, #6
 8006d28:	2200      	movs	r2, #0
 8006d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d34:	2100      	movs	r1, #0
 8006d36:	4b4e      	ldr	r3, [pc, #312]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8006d38:	fb03 f201 	mul.w	r2, r3, r1
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	fb00 f303 	mul.w	r3, r0, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	4a4a      	ldr	r2, [pc, #296]	; (8006e70 <HAL_RCC_GetSysClockFreq+0x350>)
 8006d46:	fba0 1202 	umull	r1, r2, r0, r2
 8006d4a:	677a      	str	r2, [r7, #116]	; 0x74
 8006d4c:	460a      	mov	r2, r1
 8006d4e:	673a      	str	r2, [r7, #112]	; 0x70
 8006d50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006d52:	4413      	add	r3, r2
 8006d54:	677b      	str	r3, [r7, #116]	; 0x74
 8006d56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d5e:	637a      	str	r2, [r7, #52]	; 0x34
 8006d60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006d68:	f7f9 fc5e 	bl	8000628 <__aeabi_uldivmod>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4613      	mov	r3, r2
 8006d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d76:	e05b      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d78:	4b3b      	ldr	r3, [pc, #236]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	099b      	lsrs	r3, r3, #6
 8006d7e:	2200      	movs	r2, #0
 8006d80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8a:	623b      	str	r3, [r7, #32]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d94:	4642      	mov	r2, r8
 8006d96:	464b      	mov	r3, r9
 8006d98:	f04f 0000 	mov.w	r0, #0
 8006d9c:	f04f 0100 	mov.w	r1, #0
 8006da0:	0159      	lsls	r1, r3, #5
 8006da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006da6:	0150      	lsls	r0, r2, #5
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4641      	mov	r1, r8
 8006dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8006db2:	4649      	mov	r1, r9
 8006db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8006dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	00eb      	lsls	r3, r5, #3
 8006dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006de2:	00e2      	lsls	r2, r4, #3
 8006de4:	4614      	mov	r4, r2
 8006de6:	461d      	mov	r5, r3
 8006de8:	4643      	mov	r3, r8
 8006dea:	18e3      	adds	r3, r4, r3
 8006dec:	603b      	str	r3, [r7, #0]
 8006dee:	464b      	mov	r3, r9
 8006df0:	eb45 0303 	adc.w	r3, r5, r3
 8006df4:	607b      	str	r3, [r7, #4]
 8006df6:	f04f 0200 	mov.w	r2, #0
 8006dfa:	f04f 0300 	mov.w	r3, #0
 8006dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e02:	4629      	mov	r1, r5
 8006e04:	028b      	lsls	r3, r1, #10
 8006e06:	4621      	mov	r1, r4
 8006e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	028a      	lsls	r2, r1, #10
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e18:	2200      	movs	r2, #0
 8006e1a:	61bb      	str	r3, [r7, #24]
 8006e1c:	61fa      	str	r2, [r7, #28]
 8006e1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e22:	f7f9 fc01 	bl	8000628 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006e30:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <HAL_RCC_GetSysClockFreq+0x348>)
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	0f1b      	lsrs	r3, r3, #28
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8006e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006e4e:	e003      	b.n	8006e58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8006e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8006e56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3798      	adds	r7, #152	; 0x98
 8006e60:	46bd      	mov	sp, r7
 8006e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	00f42400 	.word	0x00f42400
 8006e70:	00b71b00 	.word	0x00b71b00

08006e74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e28d      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8083 	beq.w	8006f9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006e94:	4b94      	ldr	r3, [pc, #592]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d019      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ea0:	4b91      	ldr	r3, [pc, #580]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d106      	bne.n	8006eba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006eac:	4b8e      	ldr	r3, [pc, #568]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eb8:	d00c      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eba:	4b8b      	ldr	r3, [pc, #556]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006ec2:	2b0c      	cmp	r3, #12
 8006ec4:	d112      	bne.n	8006eec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ec6:	4b88      	ldr	r3, [pc, #544]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed2:	d10b      	bne.n	8006eec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed4:	4b84      	ldr	r3, [pc, #528]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d05b      	beq.n	8006f98 <HAL_RCC_OscConfig+0x124>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d157      	bne.n	8006f98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e25a      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCC_OscConfig+0x90>
 8006ef6:	4b7c      	ldr	r3, [pc, #496]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a7b      	ldr	r2, [pc, #492]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	e01d      	b.n	8006f40 <HAL_RCC_OscConfig+0xcc>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCC_OscConfig+0xb4>
 8006f0e:	4b76      	ldr	r3, [pc, #472]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a75      	ldr	r2, [pc, #468]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	4b73      	ldr	r3, [pc, #460]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a72      	ldr	r2, [pc, #456]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	e00b      	b.n	8006f40 <HAL_RCC_OscConfig+0xcc>
 8006f28:	4b6f      	ldr	r3, [pc, #444]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a6e      	ldr	r2, [pc, #440]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	4b6c      	ldr	r3, [pc, #432]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a6b      	ldr	r2, [pc, #428]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d013      	beq.n	8006f70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fb fc80 	bl	800284c <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f50:	f7fb fc7c 	bl	800284c <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b64      	cmp	r3, #100	; 0x64
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e21f      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f62:	4b61      	ldr	r3, [pc, #388]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0xdc>
 8006f6e:	e014      	b.n	8006f9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f70:	f7fb fc6c 	bl	800284c <HAL_GetTick>
 8006f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f76:	e008      	b.n	8006f8a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f78:	f7fb fc68 	bl	800284c <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b64      	cmp	r3, #100	; 0x64
 8006f84:	d901      	bls.n	8006f8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e20b      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f8a:	4b57      	ldr	r3, [pc, #348]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <HAL_RCC_OscConfig+0x104>
 8006f96:	e000      	b.n	8006f9a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d06f      	beq.n	8007086 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fa6:	4b50      	ldr	r3, [pc, #320]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 030c 	and.w	r3, r3, #12
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d017      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006fb2:	4b4d      	ldr	r3, [pc, #308]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d105      	bne.n	8006fca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006fbe:	4b4a      	ldr	r3, [pc, #296]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fca:	4b47      	ldr	r3, [pc, #284]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006fd2:	2b0c      	cmp	r3, #12
 8006fd4:	d11c      	bne.n	8007010 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fd6:	4b44      	ldr	r3, [pc, #272]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d116      	bne.n	8007010 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fe2:	4b41      	ldr	r3, [pc, #260]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_RCC_OscConfig+0x186>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d001      	beq.n	8006ffa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e1d3      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ffa:	4b3b      	ldr	r3, [pc, #236]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	4937      	ldr	r1, [pc, #220]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 800700a:	4313      	orrs	r3, r2
 800700c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800700e:	e03a      	b.n	8007086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d020      	beq.n	800705a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007018:	4b34      	ldr	r3, [pc, #208]	; (80070ec <HAL_RCC_OscConfig+0x278>)
 800701a:	2201      	movs	r2, #1
 800701c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701e:	f7fb fc15 	bl	800284c <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007024:	e008      	b.n	8007038 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007026:	f7fb fc11 	bl	800284c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d901      	bls.n	8007038 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e1b4      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007038:	4b2b      	ldr	r3, [pc, #172]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d0f0      	beq.n	8007026 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007044:	4b28      	ldr	r3, [pc, #160]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4925      	ldr	r1, [pc, #148]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 8007054:	4313      	orrs	r3, r2
 8007056:	600b      	str	r3, [r1, #0]
 8007058:	e015      	b.n	8007086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800705a:	4b24      	ldr	r3, [pc, #144]	; (80070ec <HAL_RCC_OscConfig+0x278>)
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007060:	f7fb fbf4 	bl	800284c <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007068:	f7fb fbf0 	bl	800284c <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e193      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800707a:	4b1b      	ldr	r3, [pc, #108]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1f0      	bne.n	8007068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d036      	beq.n	8007100 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d016      	beq.n	80070c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <HAL_RCC_OscConfig+0x27c>)
 800709c:	2201      	movs	r2, #1
 800709e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070a0:	f7fb fbd4 	bl	800284c <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070a8:	f7fb fbd0 	bl	800284c <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e173      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <HAL_RCC_OscConfig+0x274>)
 80070bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070be:	f003 0302 	and.w	r3, r3, #2
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x234>
 80070c6:	e01b      	b.n	8007100 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RCC_OscConfig+0x27c>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ce:	f7fb fbbd 	bl	800284c <HAL_GetTick>
 80070d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070d4:	e00e      	b.n	80070f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070d6:	f7fb fbb9 	bl	800284c <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d907      	bls.n	80070f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e15c      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
 80070e8:	40023800 	.word	0x40023800
 80070ec:	42470000 	.word	0x42470000
 80070f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070f4:	4b8a      	ldr	r3, [pc, #552]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80070f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1ea      	bne.n	80070d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8097 	beq.w	800723c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800710e:	2300      	movs	r3, #0
 8007110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007112:	4b83      	ldr	r3, [pc, #524]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10f      	bne.n	800713e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
 8007122:	4b7f      	ldr	r3, [pc, #508]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	4a7e      	ldr	r2, [pc, #504]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800712c:	6413      	str	r3, [r2, #64]	; 0x40
 800712e:	4b7c      	ldr	r3, [pc, #496]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007136:	60bb      	str	r3, [r7, #8]
 8007138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800713a:	2301      	movs	r3, #1
 800713c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713e:	4b79      	ldr	r3, [pc, #484]	; (8007324 <HAL_RCC_OscConfig+0x4b0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d118      	bne.n	800717c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800714a:	4b76      	ldr	r3, [pc, #472]	; (8007324 <HAL_RCC_OscConfig+0x4b0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a75      	ldr	r2, [pc, #468]	; (8007324 <HAL_RCC_OscConfig+0x4b0>)
 8007150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007156:	f7fb fb79 	bl	800284c <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800715e:	f7fb fb75 	bl	800284c <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e118      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007170:	4b6c      	ldr	r3, [pc, #432]	; (8007324 <HAL_RCC_OscConfig+0x4b0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f0      	beq.n	800715e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d106      	bne.n	8007192 <HAL_RCC_OscConfig+0x31e>
 8007184:	4b66      	ldr	r3, [pc, #408]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007188:	4a65      	ldr	r2, [pc, #404]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	6713      	str	r3, [r2, #112]	; 0x70
 8007190:	e01c      	b.n	80071cc <HAL_RCC_OscConfig+0x358>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	2b05      	cmp	r3, #5
 8007198:	d10c      	bne.n	80071b4 <HAL_RCC_OscConfig+0x340>
 800719a:	4b61      	ldr	r3, [pc, #388]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	4a60      	ldr	r2, [pc, #384]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071a0:	f043 0304 	orr.w	r3, r3, #4
 80071a4:	6713      	str	r3, [r2, #112]	; 0x70
 80071a6:	4b5e      	ldr	r3, [pc, #376]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071aa:	4a5d      	ldr	r2, [pc, #372]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071ac:	f043 0301 	orr.w	r3, r3, #1
 80071b0:	6713      	str	r3, [r2, #112]	; 0x70
 80071b2:	e00b      	b.n	80071cc <HAL_RCC_OscConfig+0x358>
 80071b4:	4b5a      	ldr	r3, [pc, #360]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	4a59      	ldr	r2, [pc, #356]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071ba:	f023 0301 	bic.w	r3, r3, #1
 80071be:	6713      	str	r3, [r2, #112]	; 0x70
 80071c0:	4b57      	ldr	r3, [pc, #348]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c4:	4a56      	ldr	r2, [pc, #344]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071c6:	f023 0304 	bic.w	r3, r3, #4
 80071ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d015      	beq.n	8007200 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d4:	f7fb fb3a 	bl	800284c <HAL_GetTick>
 80071d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071da:	e00a      	b.n	80071f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071dc:	f7fb fb36 	bl	800284c <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e0d7      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071f2:	4b4b      	ldr	r3, [pc, #300]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0ee      	beq.n	80071dc <HAL_RCC_OscConfig+0x368>
 80071fe:	e014      	b.n	800722a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007200:	f7fb fb24 	bl	800284c <HAL_GetTick>
 8007204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007206:	e00a      	b.n	800721e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007208:	f7fb fb20 	bl	800284c <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	f241 3288 	movw	r2, #5000	; 0x1388
 8007216:	4293      	cmp	r3, r2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e0c1      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800721e:	4b40      	ldr	r3, [pc, #256]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	f003 0302 	and.w	r3, r3, #2
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1ee      	bne.n	8007208 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d105      	bne.n	800723c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007230:	4b3b      	ldr	r3, [pc, #236]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	4a3a      	ldr	r2, [pc, #232]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800723a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 80ad 	beq.w	80073a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007246:	4b36      	ldr	r3, [pc, #216]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
 800724e:	2b08      	cmp	r3, #8
 8007250:	d060      	beq.n	8007314 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d145      	bne.n	80072e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800725a:	4b33      	ldr	r3, [pc, #204]	; (8007328 <HAL_RCC_OscConfig+0x4b4>)
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7fb faf4 	bl	800284c <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007268:	f7fb faf0 	bl	800284c <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e093      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800727a:	4b29      	ldr	r3, [pc, #164]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	69da      	ldr	r2, [r3, #28]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	019b      	lsls	r3, r3, #6
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	3b01      	subs	r3, #1
 80072a0:	041b      	lsls	r3, r3, #16
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	061b      	lsls	r3, r3, #24
 80072aa:	431a      	orrs	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b0:	071b      	lsls	r3, r3, #28
 80072b2:	491b      	ldr	r1, [pc, #108]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <HAL_RCC_OscConfig+0x4b4>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072be:	f7fb fac5 	bl	800284c <HAL_GetTick>
 80072c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c4:	e008      	b.n	80072d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072c6:	f7fb fac1 	bl	800284c <HAL_GetTick>
 80072ca:	4602      	mov	r2, r0
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e064      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d0f0      	beq.n	80072c6 <HAL_RCC_OscConfig+0x452>
 80072e4:	e05c      	b.n	80073a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e6:	4b10      	ldr	r3, [pc, #64]	; (8007328 <HAL_RCC_OscConfig+0x4b4>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ec:	f7fb faae 	bl	800284c <HAL_GetTick>
 80072f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072f4:	f7fb faaa 	bl	800284c <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e04d      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007306:	4b06      	ldr	r3, [pc, #24]	; (8007320 <HAL_RCC_OscConfig+0x4ac>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x480>
 8007312:	e045      	b.n	80073a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d107      	bne.n	800732c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e040      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
 8007320:	40023800 	.word	0x40023800
 8007324:	40007000 	.word	0x40007000
 8007328:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800732c:	4b1f      	ldr	r3, [pc, #124]	; (80073ac <HAL_RCC_OscConfig+0x538>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d030      	beq.n	800739c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007344:	429a      	cmp	r2, r3
 8007346:	d129      	bne.n	800739c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007352:	429a      	cmp	r2, r3
 8007354:	d122      	bne.n	800739c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007362:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007364:	4293      	cmp	r3, r2
 8007366:	d119      	bne.n	800739c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	085b      	lsrs	r3, r3, #1
 8007374:	3b01      	subs	r3, #1
 8007376:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007378:	429a      	cmp	r2, r3
 800737a:	d10f      	bne.n	800739c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007388:	429a      	cmp	r2, r3
 800738a:	d107      	bne.n	800739c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007398:	429a      	cmp	r2, r3
 800739a:	d001      	beq.n	80073a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e000      	b.n	80073a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	40023800 	.word	0x40023800

080073b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e066      	b.n	8007494 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7f5b      	ldrb	r3, [r3, #29]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7f9 fd8e 	bl	8000ef8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	22ca      	movs	r2, #202	; 0xca
 80073e8:	625a      	str	r2, [r3, #36]	; 0x24
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2253      	movs	r2, #83	; 0x53
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fa45 	bl	8007882 <RTC_EnterInitMode>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d12c      	bne.n	800745c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007414:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6899      	ldr	r1, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	68d2      	ldr	r2, [r2, #12]
 800743c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6919      	ldr	r1, [r3, #16]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	041a      	lsls	r2, r3, #16
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa4c 	bl	80078f0 <RTC_ExitInitMode>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d113      	bne.n	800748a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007470:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699a      	ldr	r2, [r3, #24]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	22ff      	movs	r2, #255	; 0xff
 8007490:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8007492:	7bfb      	ldrb	r3, [r7, #15]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800749c:	b590      	push	{r4, r7, lr}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	7f1b      	ldrb	r3, [r3, #28]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_RTC_SetTime+0x1c>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e087      	b.n	80075c8 <HAL_RTC_SetTime+0x12c>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2201      	movs	r2, #1
 80074bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2202      	movs	r2, #2
 80074c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d126      	bne.n	8007518 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fa29 	bl	800793a <RTC_ByteToBcd2>
 80074e8:	4603      	mov	r3, r0
 80074ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fa22 	bl	800793a <RTC_ByteToBcd2>
 80074f6:	4603      	mov	r3, r0
 80074f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80074fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	789b      	ldrb	r3, [r3, #2]
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fa1a 	bl	800793a <RTC_ByteToBcd2>
 8007506:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007508:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	78db      	ldrb	r3, [r3, #3]
 8007510:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	e018      	b.n	800754a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2200      	movs	r2, #0
 800752a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007538:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800753a:	68ba      	ldr	r2, [r7, #8]
 800753c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800753e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	78db      	ldrb	r3, [r3, #3]
 8007544:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	22ca      	movs	r2, #202	; 0xca
 8007550:	625a      	str	r2, [r3, #36]	; 0x24
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2253      	movs	r2, #83	; 0x53
 8007558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 f991 	bl	8007882 <RTC_EnterInitMode>
 8007560:	4603      	mov	r3, r0
 8007562:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007564:	7cfb      	ldrb	r3, [r7, #19]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d120      	bne.n	80075ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007574:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007578:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007588:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6899      	ldr	r1, [r3, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	431a      	orrs	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 f9a4 	bl	80078f0 <RTC_ExitInitMode>
 80075a8:	4603      	mov	r3, r0
 80075aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80075ac:	7cfb      	ldrb	r3, [r7, #19]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	22ff      	movs	r2, #255	; 0xff
 80075be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	771a      	strb	r2, [r3, #28]

  return status;
 80075c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd90      	pop	{r4, r7, pc}

080075d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007602:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007606:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	0c1b      	lsrs	r3, r3, #16
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007612:	b2da      	uxtb	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007622:	b2da      	uxtb	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	b2db      	uxtb	r3, r3
 800762c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007630:	b2da      	uxtb	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	0d9b      	lsrs	r3, r3, #22
 800763a:	b2db      	uxtb	r3, r3
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d11a      	bne.n	8007682 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f98f 	bl	8007974 <RTC_Bcd2ToByte>
 8007656:	4603      	mov	r3, r0
 8007658:	461a      	mov	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f986 	bl	8007974 <RTC_Bcd2ToByte>
 8007668:	4603      	mov	r3, r0
 800766a:	461a      	mov	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	789b      	ldrb	r3, [r3, #2]
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f97d 	bl	8007974 <RTC_Bcd2ToByte>
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800768c:	b590      	push	{r4, r7, lr}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	7f1b      	ldrb	r3, [r3, #28]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_RTC_SetDate+0x1c>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e071      	b.n	800778c <HAL_RTC_SetDate+0x100>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2202      	movs	r2, #2
 80076b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10e      	bne.n	80076d8 <HAL_RTC_SetDate+0x4c>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	785b      	ldrb	r3, [r3, #1]
 80076be:	f003 0310 	and.w	r3, r3, #16
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d008      	beq.n	80076d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	330a      	adds	r3, #10
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d11c      	bne.n	8007718 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 f929 	bl	800793a <RTC_ByteToBcd2>
 80076e8:	4603      	mov	r3, r0
 80076ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 f922 	bl	800793a <RTC_ByteToBcd2>
 80076f6:	4603      	mov	r3, r0
 80076f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80076fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	789b      	ldrb	r3, [r3, #2]
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f91a 	bl	800793a <RTC_ByteToBcd2>
 8007706:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007708:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e00e      	b.n	8007736 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	78db      	ldrb	r3, [r3, #3]
 800771c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007724:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800772a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007732:	4313      	orrs	r3, r2
 8007734:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	22ca      	movs	r2, #202	; 0xca
 800773c:	625a      	str	r2, [r3, #36]	; 0x24
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2253      	movs	r2, #83	; 0x53
 8007744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f89b 	bl	8007882 <RTC_EnterInitMode>
 800774c:	4603      	mov	r3, r0
 800774e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007750:	7cfb      	ldrb	r3, [r7, #19]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10c      	bne.n	8007770 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007760:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007764:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 f8c2 	bl	80078f0 <RTC_ExitInitMode>
 800776c:	4603      	mov	r3, r0
 800776e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007770:	7cfb      	ldrb	r3, [r7, #19]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2201      	movs	r2, #1
 800777a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	22ff      	movs	r2, #255	; 0xff
 8007782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	771a      	strb	r2, [r3, #28]

  return status;
 800778a:	7cfb      	ldrb	r3, [r7, #19]
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	bd90      	pop	{r4, r7, pc}

08007794 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80077ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80077b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	0a1b      	lsrs	r3, r3, #8
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	0b5b      	lsrs	r3, r3, #13
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d11a      	bne.n	8007828 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	78db      	ldrb	r3, [r3, #3]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 f8bc 	bl	8007974 <RTC_Bcd2ToByte>
 80077fc:	4603      	mov	r3, r0
 80077fe:	461a      	mov	r2, r3
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f8b3 	bl	8007974 <RTC_Bcd2ToByte>
 800780e:	4603      	mov	r3, r0
 8007810:	461a      	mov	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	789b      	ldrb	r3, [r3, #2]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 f8aa 	bl	8007974 <RTC_Bcd2ToByte>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800784c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800784e:	f7fa fffd 	bl	800284c <HAL_GetTick>
 8007852:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007854:	e009      	b.n	800786a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007856:	f7fa fff9 	bl	800284c <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007864:	d901      	bls.n	800786a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e007      	b.n	800787a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0ee      	beq.n	8007856 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	d122      	bne.n	80078e6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078b0:	f7fa ffcc 	bl	800284c <HAL_GetTick>
 80078b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80078b6:	e00c      	b.n	80078d2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078b8:	f7fa ffc8 	bl	800284c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078c6:	d904      	bls.n	80078d2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2204      	movs	r2, #4
 80078cc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d102      	bne.n	80078e6 <RTC_EnterInitMode+0x64>
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d1e8      	bne.n	80078b8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800790a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 0320 	and.w	r3, r3, #32
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7ff ff89 	bl	8007832 <HAL_RTC_WaitForSynchro>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d004      	beq.n	8007930 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2204      	movs	r2, #4
 800792a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	4603      	mov	r3, r0
 8007942:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8007948:	e005      	b.n	8007956 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	3301      	adds	r3, #1
 800794e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	3b0a      	subs	r3, #10
 8007954:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b09      	cmp	r3, #9
 800795a:	d8f6      	bhi.n	800794a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	b2da      	uxtb	r2, r3
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	4313      	orrs	r3, r2
 8007966:	b2db      	uxtb	r3, r3
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	091b      	lsrs	r3, r3, #4
 8007986:	b2db      	uxtb	r3, r3
 8007988:	461a      	mov	r2, r3
 800798a:	0092      	lsls	r2, r2, #2
 800798c:	4413      	add	r3, r2
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	b2da      	uxtb	r2, r3
 800799a:	7bfb      	ldrb	r3, [r7, #15]
 800799c:	4413      	add	r3, r2
 800799e:	b2db      	uxtb	r3, r3
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e07b      	b.n	8007ab6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ce:	d009      	beq.n	80079e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	61da      	str	r2, [r3, #28]
 80079d6:	e005      	b.n	80079e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7f9 faa4 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a1a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a54:	431a      	orrs	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a68:	ea42 0103 	orr.w	r1, r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	f003 0104 	and.w	r1, r3, #4
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	f003 0210 	and.w	r2, r3, #16
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007aa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e041      	b.n	8007b54 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7f9 fa79 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f000 fcc7 	bl	8008490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d001      	beq.n	8007b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e04e      	b.n	8007c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a23      	ldr	r2, [pc, #140]	; (8007c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d022      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x80>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9e:	d01d      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x80>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1f      	ldr	r2, [pc, #124]	; (8007c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d018      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x80>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d013      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x80>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a1c      	ldr	r2, [pc, #112]	; (8007c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d00e      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x80>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a1b      	ldr	r2, [pc, #108]	; (8007c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d009      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x80>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a19      	ldr	r2, [pc, #100]	; (8007c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d004      	beq.n	8007bdc <HAL_TIM_Base_Start_IT+0x80>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a18      	ldr	r2, [pc, #96]	; (8007c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d111      	bne.n	8007c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b06      	cmp	r3, #6
 8007bec:	d010      	beq.n	8007c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfe:	e007      	b.n	8007c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	40010000 	.word	0x40010000
 8007c24:	40000400 	.word	0x40000400
 8007c28:	40000800 	.word	0x40000800
 8007c2c:	40000c00 	.word	0x40000c00
 8007c30:	40010400 	.word	0x40010400
 8007c34:	40014000 	.word	0x40014000
 8007c38:	40001800 	.word	0x40001800

08007c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e041      	b.n	8007cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f839 	bl	8007cda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 fc08 	bl	8008490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d109      	bne.n	8007d18 <HAL_TIM_PWM_Start_IT+0x28>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	bf14      	ite	ne
 8007d10:	2301      	movne	r3, #1
 8007d12:	2300      	moveq	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	e022      	b.n	8007d5e <HAL_TIM_PWM_Start_IT+0x6e>
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d109      	bne.n	8007d32 <HAL_TIM_PWM_Start_IT+0x42>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	bf14      	ite	ne
 8007d2a:	2301      	movne	r3, #1
 8007d2c:	2300      	moveq	r3, #0
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	e015      	b.n	8007d5e <HAL_TIM_PWM_Start_IT+0x6e>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	d109      	bne.n	8007d4c <HAL_TIM_PWM_Start_IT+0x5c>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	e008      	b.n	8007d5e <HAL_TIM_PWM_Start_IT+0x6e>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	bf14      	ite	ne
 8007d58:	2301      	movne	r3, #1
 8007d5a:	2300      	moveq	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e0c7      	b.n	8007ef6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <HAL_TIM_PWM_Start_IT+0x86>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d74:	e013      	b.n	8007d9e <HAL_TIM_PWM_Start_IT+0xae>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d104      	bne.n	8007d86 <HAL_TIM_PWM_Start_IT+0x96>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d84:	e00b      	b.n	8007d9e <HAL_TIM_PWM_Start_IT+0xae>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d104      	bne.n	8007d96 <HAL_TIM_PWM_Start_IT+0xa6>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d94:	e003      	b.n	8007d9e <HAL_TIM_PWM_Start_IT+0xae>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	2b0c      	cmp	r3, #12
 8007da2:	d841      	bhi.n	8007e28 <HAL_TIM_PWM_Start_IT+0x138>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <HAL_TIM_PWM_Start_IT+0xbc>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007de1 	.word	0x08007de1
 8007db0:	08007e29 	.word	0x08007e29
 8007db4:	08007e29 	.word	0x08007e29
 8007db8:	08007e29 	.word	0x08007e29
 8007dbc:	08007df3 	.word	0x08007df3
 8007dc0:	08007e29 	.word	0x08007e29
 8007dc4:	08007e29 	.word	0x08007e29
 8007dc8:	08007e29 	.word	0x08007e29
 8007dcc:	08007e05 	.word	0x08007e05
 8007dd0:	08007e29 	.word	0x08007e29
 8007dd4:	08007e29 	.word	0x08007e29
 8007dd8:	08007e29 	.word	0x08007e29
 8007ddc:	08007e17 	.word	0x08007e17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0202 	orr.w	r2, r2, #2
 8007dee:	60da      	str	r2, [r3, #12]
      break;
 8007df0:	e01d      	b.n	8007e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68da      	ldr	r2, [r3, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0204 	orr.w	r2, r2, #4
 8007e00:	60da      	str	r2, [r3, #12]
      break;
 8007e02:	e014      	b.n	8007e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0208 	orr.w	r2, r2, #8
 8007e12:	60da      	str	r2, [r3, #12]
      break;
 8007e14:	e00b      	b.n	8007e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f042 0210 	orr.w	r2, r2, #16
 8007e24:	60da      	str	r2, [r3, #12]
      break;
 8007e26:	e002      	b.n	8007e2e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d15f      	bne.n	8007ef4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 fe11 	bl	8008a64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a2e      	ldr	r2, [pc, #184]	; (8007f00 <HAL_TIM_PWM_Start_IT+0x210>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_TIM_PWM_Start_IT+0x166>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a2c      	ldr	r2, [pc, #176]	; (8007f04 <HAL_TIM_PWM_Start_IT+0x214>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d101      	bne.n	8007e5a <HAL_TIM_PWM_Start_IT+0x16a>
 8007e56:	2301      	movs	r3, #1
 8007e58:	e000      	b.n	8007e5c <HAL_TIM_PWM_Start_IT+0x16c>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a22      	ldr	r2, [pc, #136]	; (8007f00 <HAL_TIM_PWM_Start_IT+0x210>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d022      	beq.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e82:	d01d      	beq.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1f      	ldr	r2, [pc, #124]	; (8007f08 <HAL_TIM_PWM_Start_IT+0x218>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d018      	beq.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <HAL_TIM_PWM_Start_IT+0x21c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d013      	beq.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1c      	ldr	r2, [pc, #112]	; (8007f10 <HAL_TIM_PWM_Start_IT+0x220>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00e      	beq.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <HAL_TIM_PWM_Start_IT+0x214>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d009      	beq.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <HAL_TIM_PWM_Start_IT+0x224>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d004      	beq.n	8007ec0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <HAL_TIM_PWM_Start_IT+0x228>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d111      	bne.n	8007ee4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d010      	beq.n	8007ef4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f042 0201 	orr.w	r2, r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee2:	e007      	b.n	8007ef4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0201 	orr.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40010400 	.word	0x40010400
 8007f08:	40000400 	.word	0x40000400
 8007f0c:	40000800 	.word	0x40000800
 8007f10:	40000c00 	.word	0x40000c00
 8007f14:	40014000 	.word	0x40014000
 8007f18:	40001800 	.word	0x40001800

08007f1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d122      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	f003 0302 	and.w	r3, r3, #2
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d11b      	bne.n	8007f78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f06f 0202 	mvn.w	r2, #2
 8007f48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fa77 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 8007f64:	e005      	b.n	8007f72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa69 	bl	800843e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa7a 	bl	8008466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d122      	bne.n	8007fcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b04      	cmp	r3, #4
 8007f92:	d11b      	bne.n	8007fcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0204 	mvn.w	r2, #4
 8007f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa4d 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 8007fb8:	e005      	b.n	8007fc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa3f 	bl	800843e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa50 	bl	8008466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f003 0308 	and.w	r3, r3, #8
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d122      	bne.n	8008020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d11b      	bne.n	8008020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0208 	mvn.w	r2, #8
 8007ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	f003 0303 	and.w	r3, r3, #3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa23 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 800800c:	e005      	b.n	800801a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa15 	bl	800843e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa26 	bl	8008466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0310 	and.w	r3, r3, #16
 800802a:	2b10      	cmp	r3, #16
 800802c:	d122      	bne.n	8008074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0310 	and.w	r3, r3, #16
 8008038:	2b10      	cmp	r3, #16
 800803a:	d11b      	bne.n	8008074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0210 	mvn.w	r2, #16
 8008044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2208      	movs	r2, #8
 800804a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f9f9 	bl	8008452 <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9eb 	bl	800843e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f9fc 	bl	8008466 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b01      	cmp	r3, #1
 8008080:	d10e      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b01      	cmp	r3, #1
 800808e:	d107      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0201 	mvn.w	r2, #1
 8008098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f8 fe56 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080aa:	2b80      	cmp	r3, #128	; 0x80
 80080ac:	d10e      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b8:	2b80      	cmp	r3, #128	; 0x80
 80080ba:	d107      	bne.n	80080cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 fd78 	bl	8008bbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b40      	cmp	r3, #64	; 0x40
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f9c1 	bl	800847a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b20      	cmp	r3, #32
 8008104:	d10e      	bne.n	8008124 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0320 	and.w	r3, r3, #32
 8008110:	2b20      	cmp	r3, #32
 8008112:	d107      	bne.n	8008124 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0220 	mvn.w	r2, #32
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fd42 	bl	8008ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008124:	bf00      	nop
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008146:	2302      	movs	r3, #2
 8008148:	e0ae      	b.n	80082a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b0c      	cmp	r3, #12
 8008156:	f200 809f 	bhi.w	8008298 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800815a:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	08008195 	.word	0x08008195
 8008164:	08008299 	.word	0x08008299
 8008168:	08008299 	.word	0x08008299
 800816c:	08008299 	.word	0x08008299
 8008170:	080081d5 	.word	0x080081d5
 8008174:	08008299 	.word	0x08008299
 8008178:	08008299 	.word	0x08008299
 800817c:	08008299 	.word	0x08008299
 8008180:	08008217 	.word	0x08008217
 8008184:	08008299 	.word	0x08008299
 8008188:	08008299 	.word	0x08008299
 800818c:	08008299 	.word	0x08008299
 8008190:	08008257 	.word	0x08008257
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68b9      	ldr	r1, [r7, #8]
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fa18 	bl	80085d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	699a      	ldr	r2, [r3, #24]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0208 	orr.w	r2, r2, #8
 80081ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0204 	bic.w	r2, r2, #4
 80081be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6999      	ldr	r1, [r3, #24]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	619a      	str	r2, [r3, #24]
      break;
 80081d2:	e064      	b.n	800829e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fa68 	bl	80086b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6999      	ldr	r1, [r3, #24]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	021a      	lsls	r2, r3, #8
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	619a      	str	r2, [r3, #24]
      break;
 8008214:	e043      	b.n	800829e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68b9      	ldr	r1, [r7, #8]
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fabd 	bl	800879c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0208 	orr.w	r2, r2, #8
 8008230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0204 	bic.w	r2, r2, #4
 8008240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69d9      	ldr	r1, [r3, #28]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	61da      	str	r2, [r3, #28]
      break;
 8008254:	e023      	b.n	800829e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fb11 	bl	8008884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69da      	ldr	r2, [r3, #28]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69d9      	ldr	r1, [r3, #28]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	021a      	lsls	r2, r3, #8
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	61da      	str	r2, [r3, #28]
      break;
 8008296:	e002      	b.n	800829e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	75fb      	strb	r3, [r7, #23]
      break;
 800829c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_TIM_ConfigClockSource+0x1c>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e0b4      	b.n	8008436 <HAL_TIM_ConfigClockSource+0x186>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008304:	d03e      	beq.n	8008384 <HAL_TIM_ConfigClockSource+0xd4>
 8008306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830a:	f200 8087 	bhi.w	800841c <HAL_TIM_ConfigClockSource+0x16c>
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008312:	f000 8086 	beq.w	8008422 <HAL_TIM_ConfigClockSource+0x172>
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	d87f      	bhi.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
 800831c:	2b70      	cmp	r3, #112	; 0x70
 800831e:	d01a      	beq.n	8008356 <HAL_TIM_ConfigClockSource+0xa6>
 8008320:	2b70      	cmp	r3, #112	; 0x70
 8008322:	d87b      	bhi.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
 8008324:	2b60      	cmp	r3, #96	; 0x60
 8008326:	d050      	beq.n	80083ca <HAL_TIM_ConfigClockSource+0x11a>
 8008328:	2b60      	cmp	r3, #96	; 0x60
 800832a:	d877      	bhi.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
 800832c:	2b50      	cmp	r3, #80	; 0x50
 800832e:	d03c      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0xfa>
 8008330:	2b50      	cmp	r3, #80	; 0x50
 8008332:	d873      	bhi.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
 8008334:	2b40      	cmp	r3, #64	; 0x40
 8008336:	d058      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x13a>
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d86f      	bhi.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
 800833c:	2b30      	cmp	r3, #48	; 0x30
 800833e:	d064      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x15a>
 8008340:	2b30      	cmp	r3, #48	; 0x30
 8008342:	d86b      	bhi.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
 8008344:	2b20      	cmp	r3, #32
 8008346:	d060      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x15a>
 8008348:	2b20      	cmp	r3, #32
 800834a:	d867      	bhi.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d05c      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x15a>
 8008350:	2b10      	cmp	r3, #16
 8008352:	d05a      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x15a>
 8008354:	e062      	b.n	800841c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6899      	ldr	r1, [r3, #8]
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f000 fb5d 	bl	8008a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	609a      	str	r2, [r3, #8]
      break;
 8008382:	e04f      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	6899      	ldr	r1, [r3, #8]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f000 fb46 	bl	8008a24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083a6:	609a      	str	r2, [r3, #8]
      break;
 80083a8:	e03c      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6859      	ldr	r1, [r3, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f000 faba 	bl	8008930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2150      	movs	r1, #80	; 0x50
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 fb13 	bl	80089ee <TIM_ITRx_SetConfig>
      break;
 80083c8:	e02c      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	6859      	ldr	r1, [r3, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f000 fad9 	bl	800898e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2160      	movs	r1, #96	; 0x60
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fb03 	bl	80089ee <TIM_ITRx_SetConfig>
      break;
 80083e8:	e01c      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	6859      	ldr	r1, [r3, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f000 fa9a 	bl	8008930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2140      	movs	r1, #64	; 0x40
 8008402:	4618      	mov	r0, r3
 8008404:	f000 faf3 	bl	80089ee <TIM_ITRx_SetConfig>
      break;
 8008408:	e00c      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f000 faea 	bl	80089ee <TIM_ITRx_SetConfig>
      break;
 800841a:	e003      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]
      break;
 8008420:	e000      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008446:	bf00      	nop
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr

08008466 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800846e:	bf00      	nop
 8008470:	370c      	adds	r7, #12
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008482:	bf00      	nop
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
	...

08008490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a40      	ldr	r2, [pc, #256]	; (80085a4 <TIM_Base_SetConfig+0x114>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d013      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ae:	d00f      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a3d      	ldr	r2, [pc, #244]	; (80085a8 <TIM_Base_SetConfig+0x118>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d00b      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a3c      	ldr	r2, [pc, #240]	; (80085ac <TIM_Base_SetConfig+0x11c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d007      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a3b      	ldr	r2, [pc, #236]	; (80085b0 <TIM_Base_SetConfig+0x120>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d003      	beq.n	80084d0 <TIM_Base_SetConfig+0x40>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4a3a      	ldr	r2, [pc, #232]	; (80085b4 <TIM_Base_SetConfig+0x124>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d108      	bne.n	80084e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a2f      	ldr	r2, [pc, #188]	; (80085a4 <TIM_Base_SetConfig+0x114>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d02b      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f0:	d027      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a2c      	ldr	r2, [pc, #176]	; (80085a8 <TIM_Base_SetConfig+0x118>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d023      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a2b      	ldr	r2, [pc, #172]	; (80085ac <TIM_Base_SetConfig+0x11c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01f      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a2a      	ldr	r2, [pc, #168]	; (80085b0 <TIM_Base_SetConfig+0x120>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d01b      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a29      	ldr	r2, [pc, #164]	; (80085b4 <TIM_Base_SetConfig+0x124>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d017      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4a28      	ldr	r2, [pc, #160]	; (80085b8 <TIM_Base_SetConfig+0x128>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d013      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a27      	ldr	r2, [pc, #156]	; (80085bc <TIM_Base_SetConfig+0x12c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00f      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a26      	ldr	r2, [pc, #152]	; (80085c0 <TIM_Base_SetConfig+0x130>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00b      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a25      	ldr	r2, [pc, #148]	; (80085c4 <TIM_Base_SetConfig+0x134>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d007      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a24      	ldr	r2, [pc, #144]	; (80085c8 <TIM_Base_SetConfig+0x138>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d003      	beq.n	8008542 <TIM_Base_SetConfig+0xb2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a23      	ldr	r2, [pc, #140]	; (80085cc <TIM_Base_SetConfig+0x13c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d108      	bne.n	8008554 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	4313      	orrs	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a0a      	ldr	r2, [pc, #40]	; (80085a4 <TIM_Base_SetConfig+0x114>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d003      	beq.n	8008588 <TIM_Base_SetConfig+0xf8>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a0c      	ldr	r2, [pc, #48]	; (80085b4 <TIM_Base_SetConfig+0x124>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d103      	bne.n	8008590 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	615a      	str	r2, [r3, #20]
}
 8008596:	bf00      	nop
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40010000 	.word	0x40010000
 80085a8:	40000400 	.word	0x40000400
 80085ac:	40000800 	.word	0x40000800
 80085b0:	40000c00 	.word	0x40000c00
 80085b4:	40010400 	.word	0x40010400
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800
 80085c4:	40001800 	.word	0x40001800
 80085c8:	40001c00 	.word	0x40001c00
 80085cc:	40002000 	.word	0x40002000

080085d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0201 	bic.w	r2, r3, #1
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f023 0302 	bic.w	r3, r3, #2
 8008618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a20      	ldr	r2, [pc, #128]	; (80086a8 <TIM_OC1_SetConfig+0xd8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d003      	beq.n	8008634 <TIM_OC1_SetConfig+0x64>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a1f      	ldr	r2, [pc, #124]	; (80086ac <TIM_OC1_SetConfig+0xdc>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d10c      	bne.n	800864e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f023 0308 	bic.w	r3, r3, #8
 800863a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f023 0304 	bic.w	r3, r3, #4
 800864c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a15      	ldr	r2, [pc, #84]	; (80086a8 <TIM_OC1_SetConfig+0xd8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d003      	beq.n	800865e <TIM_OC1_SetConfig+0x8e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a14      	ldr	r2, [pc, #80]	; (80086ac <TIM_OC1_SetConfig+0xdc>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d111      	bne.n	8008682 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800866c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	699b      	ldr	r3, [r3, #24]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4313      	orrs	r3, r2
 8008680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	621a      	str	r2, [r3, #32]
}
 800869c:	bf00      	nop
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	40010000 	.word	0x40010000
 80086ac:	40010400 	.word	0x40010400

080086b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f023 0210 	bic.w	r2, r3, #16
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	021b      	lsls	r3, r3, #8
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f023 0320 	bic.w	r3, r3, #32
 80086fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	011b      	lsls	r3, r3, #4
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	4313      	orrs	r3, r2
 8008706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a22      	ldr	r2, [pc, #136]	; (8008794 <TIM_OC2_SetConfig+0xe4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_OC2_SetConfig+0x68>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a21      	ldr	r2, [pc, #132]	; (8008798 <TIM_OC2_SetConfig+0xe8>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d10d      	bne.n	8008734 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800871e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a17      	ldr	r2, [pc, #92]	; (8008794 <TIM_OC2_SetConfig+0xe4>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d003      	beq.n	8008744 <TIM_OC2_SetConfig+0x94>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a16      	ldr	r2, [pc, #88]	; (8008798 <TIM_OC2_SetConfig+0xe8>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d113      	bne.n	800876c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800874a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008752:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	621a      	str	r2, [r3, #32]
}
 8008786:	bf00      	nop
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	40010000 	.word	0x40010000
 8008798:	40010400 	.word	0x40010400

0800879c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f023 0303 	bic.w	r3, r3, #3
 80087d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	4313      	orrs	r3, r2
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	021b      	lsls	r3, r3, #8
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a21      	ldr	r2, [pc, #132]	; (800887c <TIM_OC3_SetConfig+0xe0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d003      	beq.n	8008802 <TIM_OC3_SetConfig+0x66>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a20      	ldr	r2, [pc, #128]	; (8008880 <TIM_OC3_SetConfig+0xe4>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d10d      	bne.n	800881e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008808:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	021b      	lsls	r3, r3, #8
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800881c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a16      	ldr	r2, [pc, #88]	; (800887c <TIM_OC3_SetConfig+0xe0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d003      	beq.n	800882e <TIM_OC3_SetConfig+0x92>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a15      	ldr	r2, [pc, #84]	; (8008880 <TIM_OC3_SetConfig+0xe4>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d113      	bne.n	8008856 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800883c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	011b      	lsls	r3, r3, #4
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	4313      	orrs	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	621a      	str	r2, [r3, #32]
}
 8008870:	bf00      	nop
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	40010000 	.word	0x40010000
 8008880:	40010400 	.word	0x40010400

08008884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	021b      	lsls	r3, r3, #8
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	031b      	lsls	r3, r3, #12
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	4313      	orrs	r3, r2
 80088da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a12      	ldr	r2, [pc, #72]	; (8008928 <TIM_OC4_SetConfig+0xa4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_OC4_SetConfig+0x68>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a11      	ldr	r2, [pc, #68]	; (800892c <TIM_OC4_SetConfig+0xa8>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d109      	bne.n	8008900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	019b      	lsls	r3, r3, #6
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	697a      	ldr	r2, [r7, #20]
 8008904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	621a      	str	r2, [r3, #32]
}
 800891a:	bf00      	nop
 800891c:	371c      	adds	r7, #28
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40010400 	.word	0x40010400

08008930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a1b      	ldr	r3, [r3, #32]
 8008940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	f023 0201 	bic.w	r2, r3, #1
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800895a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	4313      	orrs	r3, r2
 8008964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f023 030a 	bic.w	r3, r3, #10
 800896c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800898e:	b480      	push	{r7}
 8008990:	b087      	sub	sp, #28
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	f023 0210 	bic.w	r2, r3, #16
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	031b      	lsls	r3, r3, #12
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	621a      	str	r2, [r3, #32]
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b085      	sub	sp, #20
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	f043 0307 	orr.w	r3, r3, #7
 8008a10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	609a      	str	r2, [r3, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	021a      	lsls	r2, r3, #8
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	431a      	orrs	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	609a      	str	r2, [r3, #8]
}
 8008a58:	bf00      	nop
 8008a5a:	371c      	adds	r7, #28
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	2201      	movs	r2, #1
 8008a78:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a1a      	ldr	r2, [r3, #32]
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	43db      	mvns	r3, r3
 8008a86:	401a      	ands	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6a1a      	ldr	r2, [r3, #32]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f003 031f 	and.w	r3, r3, #31
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	fa01 f303 	lsl.w	r3, r1, r3
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	621a      	str	r2, [r3, #32]
}
 8008aa2:	bf00      	nop
 8008aa4:	371c      	adds	r7, #28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
	...

08008ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e05a      	b.n	8008b7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a21      	ldr	r2, [pc, #132]	; (8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d022      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b14:	d01d      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a1d      	ldr	r2, [pc, #116]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d018      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d013      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a1a      	ldr	r2, [pc, #104]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d00e      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a18      	ldr	r2, [pc, #96]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d009      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a17      	ldr	r2, [pc, #92]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10c      	bne.n	8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	40010000 	.word	0x40010000
 8008b90:	40000400 	.word	0x40000400
 8008b94:	40000800 	.word	0x40000800
 8008b98:	40000c00 	.word	0x40000c00
 8008b9c:	40010400 	.word	0x40010400
 8008ba0:	40014000 	.word	0x40014000
 8008ba4:	40001800 	.word	0x40001800

08008ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e03f      	b.n	8008c62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d106      	bne.n	8008bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7f8 fa4c 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2224      	movs	r2, #36	; 0x24
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fc71 	bl	80094fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	691a      	ldr	r2, [r3, #16]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695a      	ldr	r2, [r3, #20]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	68da      	ldr	r2, [r3, #12]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2220      	movs	r2, #32
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
	...

08008c6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b0ba      	sub	sp, #232	; 0xe8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008caa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10f      	bne.n	8008cd2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x66>
 8008cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fb5b 	bl	8009386 <UART_Receive_IT>
      return;
 8008cd0:	e256      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 80de 	beq.w	8008e98 <HAL_UART_IRQHandler+0x22c>
 8008cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ce0:	f003 0301 	and.w	r3, r3, #1
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d106      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80d1 	beq.w	8008e98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00b      	beq.n	8008d1a <HAL_UART_IRQHandler+0xae>
 8008d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d005      	beq.n	8008d1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	f043 0201 	orr.w	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <HAL_UART_IRQHandler+0xd2>
 8008d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d005      	beq.n	8008d3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	f043 0202 	orr.w	r2, r3, #2
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00b      	beq.n	8008d62 <HAL_UART_IRQHandler+0xf6>
 8008d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d005      	beq.n	8008d62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	f043 0204 	orr.w	r2, r3, #4
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d66:	f003 0308 	and.w	r3, r3, #8
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d011      	beq.n	8008d92 <HAL_UART_IRQHandler+0x126>
 8008d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d72:	f003 0320 	and.w	r3, r3, #32
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d005      	beq.n	8008d92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	f043 0208 	orr.w	r2, r3, #8
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	f000 81ed 	beq.w	8009176 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d008      	beq.n	8008dba <HAL_UART_IRQHandler+0x14e>
 8008da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dac:	f003 0320 	and.w	r3, r3, #32
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fae6 	bl	8009386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc4:	2b40      	cmp	r3, #64	; 0x40
 8008dc6:	bf0c      	ite	eq
 8008dc8:	2301      	moveq	r3, #1
 8008dca:	2300      	movne	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f003 0308 	and.w	r3, r3, #8
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d103      	bne.n	8008de6 <HAL_UART_IRQHandler+0x17a>
 8008dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d04f      	beq.n	8008e86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f9ee 	bl	80091c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d141      	bne.n	8008e7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3314      	adds	r3, #20
 8008e00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e08:	e853 3f00 	ldrex	r3, [r3]
 8008e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3314      	adds	r3, #20
 8008e22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008e26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008e32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008e36:	e841 2300 	strex	r3, r2, [r1]
 8008e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008e3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1d9      	bne.n	8008dfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d013      	beq.n	8008e76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	4a7d      	ldr	r2, [pc, #500]	; (8009048 <HAL_UART_IRQHandler+0x3dc>)
 8008e54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fa f8ea 	bl	8003034 <HAL_DMA_Abort_IT>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e74:	e00e      	b.n	8008e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f990 	bl	800919c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e7c:	e00a      	b.n	8008e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 f98c 	bl	800919c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e84:	e006      	b.n	8008e94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f988 	bl	800919c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e92:	e170      	b.n	8009176 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e94:	bf00      	nop
    return;
 8008e96:	e16e      	b.n	8009176 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	f040 814a 	bne.w	8009136 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea6:	f003 0310 	and.w	r3, r3, #16
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 8143 	beq.w	8009136 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 813c 	beq.w	8009136 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60bb      	str	r3, [r7, #8]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	60bb      	str	r3, [r7, #8]
 8008ed2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	f040 80b4 	bne.w	800904c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ef0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f000 8140 	beq.w	800917a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008efe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f02:	429a      	cmp	r2, r3
 8008f04:	f080 8139 	bcs.w	800917a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1a:	f000 8088 	beq.w	800902e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	330c      	adds	r3, #12
 8008f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f2c:	e853 3f00 	ldrex	r3, [r3]
 8008f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008f4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008f56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1d9      	bne.n	8008f1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3314      	adds	r3, #20
 8008f70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f74:	e853 3f00 	ldrex	r3, [r3]
 8008f78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f7c:	f023 0301 	bic.w	r3, r3, #1
 8008f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3314      	adds	r3, #20
 8008f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008f8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008f92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f9a:	e841 2300 	strex	r3, r2, [r1]
 8008f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1e1      	bne.n	8008f6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3314      	adds	r3, #20
 8008fac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fb0:	e853 3f00 	ldrex	r3, [r3]
 8008fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e3      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ffe:	f023 0310 	bic.w	r3, r3, #16
 8009002:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	330c      	adds	r3, #12
 800900c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009010:	65ba      	str	r2, [r7, #88]	; 0x58
 8009012:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009016:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800901e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e3      	bne.n	8008fec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009028:	4618      	mov	r0, r3
 800902a:	f7f9 ff93 	bl	8002f54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009036:	b29b      	uxth	r3, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	b29b      	uxth	r3, r3
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f8b6 	bl	80091b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009044:	e099      	b.n	800917a <HAL_UART_IRQHandler+0x50e>
 8009046:	bf00      	nop
 8009048:	0800928f 	.word	0x0800928f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009054:	b29b      	uxth	r3, r3
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009060:	b29b      	uxth	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 808b 	beq.w	800917e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800906c:	2b00      	cmp	r3, #0
 800906e:	f000 8086 	beq.w	800917e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009088:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	330c      	adds	r3, #12
 8009092:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009096:	647a      	str	r2, [r7, #68]	; 0x44
 8009098:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800909c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e3      	bne.n	8009072 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3314      	adds	r3, #20
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	623b      	str	r3, [r7, #32]
   return(result);
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3314      	adds	r3, #20
 80090ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80090ce:	633a      	str	r2, [r7, #48]	; 0x30
 80090d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e3      	bne.n	80090aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	330c      	adds	r3, #12
 80090f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f023 0310 	bic.w	r3, r3, #16
 8009106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	330c      	adds	r3, #12
 8009110:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009114:	61fa      	str	r2, [r7, #28]
 8009116:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	69b9      	ldr	r1, [r7, #24]
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	e841 2300 	strex	r3, r2, [r1]
 8009120:	617b      	str	r3, [r7, #20]
   return(result);
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d1e3      	bne.n	80090f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f83e 	bl	80091b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009134:	e023      	b.n	800917e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <HAL_UART_IRQHandler+0x4ea>
 8009142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f8b1 	bl	80092b6 <UART_Transmit_IT>
    return;
 8009154:	e014      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800915a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00e      	beq.n	8009180 <HAL_UART_IRQHandler+0x514>
 8009162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8f1 	bl	8009356 <UART_EndTransmit_IT>
    return;
 8009174:	e004      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
    return;
 8009176:	bf00      	nop
 8009178:	e002      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
      return;
 800917a:	bf00      	nop
 800917c:	e000      	b.n	8009180 <HAL_UART_IRQHandler+0x514>
      return;
 800917e:	bf00      	nop
  }
}
 8009180:	37e8      	adds	r7, #232	; 0xe8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop

08009188 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80091a4:	bf00      	nop
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b095      	sub	sp, #84	; 0x54
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091f0:	643a      	str	r2, [r7, #64]	; 0x40
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e5      	bne.n	80091d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3314      	adds	r3, #20
 800920a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	61fb      	str	r3, [r7, #28]
   return(result);
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	f023 0301 	bic.w	r3, r3, #1
 800921a:	64bb      	str	r3, [r7, #72]	; 0x48
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3314      	adds	r3, #20
 8009222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009224:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009226:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800922a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e5      	bne.n	8009204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923c:	2b01      	cmp	r3, #1
 800923e:	d119      	bne.n	8009274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	330c      	adds	r3, #12
 8009246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f023 0310 	bic.w	r3, r3, #16
 8009256:	647b      	str	r3, [r7, #68]	; 0x44
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009260:	61ba      	str	r2, [r7, #24]
 8009262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	613b      	str	r3, [r7, #16]
   return(result);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e5      	bne.n	8009240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009282:	bf00      	nop
 8009284:	3754      	adds	r7, #84	; 0x54
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f7ff ff77 	bl	800919c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ae:	bf00      	nop
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b21      	cmp	r3, #33	; 0x21
 80092c8:	d13e      	bne.n	8009348 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d2:	d114      	bne.n	80092fe <UART_Transmit_IT+0x48>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d110      	bne.n	80092fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	1c9a      	adds	r2, r3, #2
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	621a      	str	r2, [r3, #32]
 80092fc:	e008      	b.n	8009310 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	1c59      	adds	r1, r3, #1
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6211      	str	r1, [r2, #32]
 8009308:	781a      	ldrb	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29b      	uxth	r3, r3
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	4619      	mov	r1, r3
 800931e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10f      	bne.n	8009344 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009332:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009342:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	e000      	b.n	800934a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009348:	2302      	movs	r3, #2
  }
}
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800936c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff ff06 	bl	8009188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b08c      	sub	sp, #48	; 0x30
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b22      	cmp	r3, #34	; 0x22
 8009398:	f040 80ab 	bne.w	80094f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a4:	d117      	bne.n	80093d6 <UART_Receive_IT+0x50>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d113      	bne.n	80093d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	1c9a      	adds	r2, r3, #2
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	629a      	str	r2, [r3, #40]	; 0x28
 80093d4:	e026      	b.n	8009424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80093dc:	2300      	movs	r3, #0
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e8:	d007      	beq.n	80093fa <UART_Receive_IT+0x74>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <UART_Receive_IT+0x82>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d106      	bne.n	8009408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	b2da      	uxtb	r2, r3
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	701a      	strb	r2, [r3, #0]
 8009406:	e008      	b.n	800941a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009414:	b2da      	uxtb	r2, r3
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29b      	uxth	r3, r3
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	4619      	mov	r1, r3
 8009432:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009434:	2b00      	cmp	r3, #0
 8009436:	d15a      	bne.n	80094ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0220 	bic.w	r2, r2, #32
 8009446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	695a      	ldr	r2, [r3, #20]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	2b01      	cmp	r3, #1
 8009476:	d135      	bne.n	80094e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	330c      	adds	r3, #12
 8009484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	613b      	str	r3, [r7, #16]
   return(result);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f023 0310 	bic.w	r3, r3, #16
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	330c      	adds	r3, #12
 800949c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800949e:	623a      	str	r2, [r7, #32]
 80094a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	69f9      	ldr	r1, [r7, #28]
 80094a4:	6a3a      	ldr	r2, [r7, #32]
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e5      	bne.n	800947e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0310 	and.w	r3, r3, #16
 80094bc:	2b10      	cmp	r3, #16
 80094be:	d10a      	bne.n	80094d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fe67 	bl	80091b0 <HAL_UARTEx_RxEventCallback>
 80094e2:	e002      	b.n	80094ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7f7 fb3b 	bl	8000b60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e002      	b.n	80094f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	e000      	b.n	80094f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094f2:	2302      	movs	r3, #2
  }
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3730      	adds	r7, #48	; 0x30
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009500:	b0c0      	sub	sp, #256	; 0x100
 8009502:	af00      	add	r7, sp, #0
 8009504:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009518:	68d9      	ldr	r1, [r3, #12]
 800951a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	ea40 0301 	orr.w	r3, r0, r1
 8009524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	431a      	orrs	r2, r3
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	431a      	orrs	r2, r3
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	4313      	orrs	r3, r2
 8009544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009554:	f021 010c 	bic.w	r1, r1, #12
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009562:	430b      	orrs	r3, r1
 8009564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009576:	6999      	ldr	r1, [r3, #24]
 8009578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	ea40 0301 	orr.w	r3, r0, r1
 8009582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	4b8f      	ldr	r3, [pc, #572]	; (80097c8 <UART_SetConfig+0x2cc>)
 800958c:	429a      	cmp	r2, r3
 800958e:	d005      	beq.n	800959c <UART_SetConfig+0xa0>
 8009590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4b8d      	ldr	r3, [pc, #564]	; (80097cc <UART_SetConfig+0x2d0>)
 8009598:	429a      	cmp	r2, r3
 800959a:	d104      	bne.n	80095a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800959c:	f7fc ff50 	bl	8006440 <HAL_RCC_GetPCLK2Freq>
 80095a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095a4:	e003      	b.n	80095ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095a6:	f7fc ff37 	bl	8006418 <HAL_RCC_GetPCLK1Freq>
 80095aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095b8:	f040 810c 	bne.w	80097d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c0:	2200      	movs	r2, #0
 80095c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095ce:	4622      	mov	r2, r4
 80095d0:	462b      	mov	r3, r5
 80095d2:	1891      	adds	r1, r2, r2
 80095d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80095d6:	415b      	adcs	r3, r3
 80095d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095de:	4621      	mov	r1, r4
 80095e0:	eb12 0801 	adds.w	r8, r2, r1
 80095e4:	4629      	mov	r1, r5
 80095e6:	eb43 0901 	adc.w	r9, r3, r1
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	f04f 0300 	mov.w	r3, #0
 80095f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095fe:	4690      	mov	r8, r2
 8009600:	4699      	mov	r9, r3
 8009602:	4623      	mov	r3, r4
 8009604:	eb18 0303 	adds.w	r3, r8, r3
 8009608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800960c:	462b      	mov	r3, r5
 800960e:	eb49 0303 	adc.w	r3, r9, r3
 8009612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009622:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800962a:	460b      	mov	r3, r1
 800962c:	18db      	adds	r3, r3, r3
 800962e:	653b      	str	r3, [r7, #80]	; 0x50
 8009630:	4613      	mov	r3, r2
 8009632:	eb42 0303 	adc.w	r3, r2, r3
 8009636:	657b      	str	r3, [r7, #84]	; 0x54
 8009638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800963c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009640:	f7f6 fff2 	bl	8000628 <__aeabi_uldivmod>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4b61      	ldr	r3, [pc, #388]	; (80097d0 <UART_SetConfig+0x2d4>)
 800964a:	fba3 2302 	umull	r2, r3, r3, r2
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	011c      	lsls	r4, r3, #4
 8009652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009656:	2200      	movs	r2, #0
 8009658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800965c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009664:	4642      	mov	r2, r8
 8009666:	464b      	mov	r3, r9
 8009668:	1891      	adds	r1, r2, r2
 800966a:	64b9      	str	r1, [r7, #72]	; 0x48
 800966c:	415b      	adcs	r3, r3
 800966e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009674:	4641      	mov	r1, r8
 8009676:	eb12 0a01 	adds.w	sl, r2, r1
 800967a:	4649      	mov	r1, r9
 800967c:	eb43 0b01 	adc.w	fp, r3, r1
 8009680:	f04f 0200 	mov.w	r2, #0
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800968c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009694:	4692      	mov	sl, r2
 8009696:	469b      	mov	fp, r3
 8009698:	4643      	mov	r3, r8
 800969a:	eb1a 0303 	adds.w	r3, sl, r3
 800969e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096a2:	464b      	mov	r3, r9
 80096a4:	eb4b 0303 	adc.w	r3, fp, r3
 80096a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096c0:	460b      	mov	r3, r1
 80096c2:	18db      	adds	r3, r3, r3
 80096c4:	643b      	str	r3, [r7, #64]	; 0x40
 80096c6:	4613      	mov	r3, r2
 80096c8:	eb42 0303 	adc.w	r3, r2, r3
 80096cc:	647b      	str	r3, [r7, #68]	; 0x44
 80096ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096d6:	f7f6 ffa7 	bl	8000628 <__aeabi_uldivmod>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	4b3b      	ldr	r3, [pc, #236]	; (80097d0 <UART_SetConfig+0x2d4>)
 80096e2:	fba3 2301 	umull	r2, r3, r3, r1
 80096e6:	095b      	lsrs	r3, r3, #5
 80096e8:	2264      	movs	r2, #100	; 0x64
 80096ea:	fb02 f303 	mul.w	r3, r2, r3
 80096ee:	1acb      	subs	r3, r1, r3
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096f6:	4b36      	ldr	r3, [pc, #216]	; (80097d0 <UART_SetConfig+0x2d4>)
 80096f8:	fba3 2302 	umull	r2, r3, r3, r2
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009704:	441c      	add	r4, r3
 8009706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800970a:	2200      	movs	r2, #0
 800970c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009710:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009718:	4642      	mov	r2, r8
 800971a:	464b      	mov	r3, r9
 800971c:	1891      	adds	r1, r2, r2
 800971e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009720:	415b      	adcs	r3, r3
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009728:	4641      	mov	r1, r8
 800972a:	1851      	adds	r1, r2, r1
 800972c:	6339      	str	r1, [r7, #48]	; 0x30
 800972e:	4649      	mov	r1, r9
 8009730:	414b      	adcs	r3, r1
 8009732:	637b      	str	r3, [r7, #52]	; 0x34
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	f04f 0300 	mov.w	r3, #0
 800973c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009740:	4659      	mov	r1, fp
 8009742:	00cb      	lsls	r3, r1, #3
 8009744:	4651      	mov	r1, sl
 8009746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800974a:	4651      	mov	r1, sl
 800974c:	00ca      	lsls	r2, r1, #3
 800974e:	4610      	mov	r0, r2
 8009750:	4619      	mov	r1, r3
 8009752:	4603      	mov	r3, r0
 8009754:	4642      	mov	r2, r8
 8009756:	189b      	adds	r3, r3, r2
 8009758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800975c:	464b      	mov	r3, r9
 800975e:	460a      	mov	r2, r1
 8009760:	eb42 0303 	adc.w	r3, r2, r3
 8009764:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009774:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800977c:	460b      	mov	r3, r1
 800977e:	18db      	adds	r3, r3, r3
 8009780:	62bb      	str	r3, [r7, #40]	; 0x28
 8009782:	4613      	mov	r3, r2
 8009784:	eb42 0303 	adc.w	r3, r2, r3
 8009788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800978a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800978e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009792:	f7f6 ff49 	bl	8000628 <__aeabi_uldivmod>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <UART_SetConfig+0x2d4>)
 800979c:	fba3 1302 	umull	r1, r3, r3, r2
 80097a0:	095b      	lsrs	r3, r3, #5
 80097a2:	2164      	movs	r1, #100	; 0x64
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	3332      	adds	r3, #50	; 0x32
 80097ae:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <UART_SetConfig+0x2d4>)
 80097b0:	fba2 2303 	umull	r2, r3, r2, r3
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	f003 0207 	and.w	r2, r3, #7
 80097ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4422      	add	r2, r4
 80097c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097c4:	e105      	b.n	80099d2 <UART_SetConfig+0x4d6>
 80097c6:	bf00      	nop
 80097c8:	40011000 	.word	0x40011000
 80097cc:	40011400 	.word	0x40011400
 80097d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80097e6:	4642      	mov	r2, r8
 80097e8:	464b      	mov	r3, r9
 80097ea:	1891      	adds	r1, r2, r2
 80097ec:	6239      	str	r1, [r7, #32]
 80097ee:	415b      	adcs	r3, r3
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
 80097f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097f6:	4641      	mov	r1, r8
 80097f8:	1854      	adds	r4, r2, r1
 80097fa:	4649      	mov	r1, r9
 80097fc:	eb43 0501 	adc.w	r5, r3, r1
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	00eb      	lsls	r3, r5, #3
 800980a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800980e:	00e2      	lsls	r2, r4, #3
 8009810:	4614      	mov	r4, r2
 8009812:	461d      	mov	r5, r3
 8009814:	4643      	mov	r3, r8
 8009816:	18e3      	adds	r3, r4, r3
 8009818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800981c:	464b      	mov	r3, r9
 800981e:	eb45 0303 	adc.w	r3, r5, r3
 8009822:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009836:	f04f 0200 	mov.w	r2, #0
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009842:	4629      	mov	r1, r5
 8009844:	008b      	lsls	r3, r1, #2
 8009846:	4621      	mov	r1, r4
 8009848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800984c:	4621      	mov	r1, r4
 800984e:	008a      	lsls	r2, r1, #2
 8009850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009854:	f7f6 fee8 	bl	8000628 <__aeabi_uldivmod>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4b60      	ldr	r3, [pc, #384]	; (80099e0 <UART_SetConfig+0x4e4>)
 800985e:	fba3 2302 	umull	r2, r3, r3, r2
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	011c      	lsls	r4, r3, #4
 8009866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800986a:	2200      	movs	r2, #0
 800986c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009870:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009878:	4642      	mov	r2, r8
 800987a:	464b      	mov	r3, r9
 800987c:	1891      	adds	r1, r2, r2
 800987e:	61b9      	str	r1, [r7, #24]
 8009880:	415b      	adcs	r3, r3
 8009882:	61fb      	str	r3, [r7, #28]
 8009884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009888:	4641      	mov	r1, r8
 800988a:	1851      	adds	r1, r2, r1
 800988c:	6139      	str	r1, [r7, #16]
 800988e:	4649      	mov	r1, r9
 8009890:	414b      	adcs	r3, r1
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098a0:	4659      	mov	r1, fp
 80098a2:	00cb      	lsls	r3, r1, #3
 80098a4:	4651      	mov	r1, sl
 80098a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098aa:	4651      	mov	r1, sl
 80098ac:	00ca      	lsls	r2, r1, #3
 80098ae:	4610      	mov	r0, r2
 80098b0:	4619      	mov	r1, r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	4642      	mov	r2, r8
 80098b6:	189b      	adds	r3, r3, r2
 80098b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098bc:	464b      	mov	r3, r9
 80098be:	460a      	mov	r2, r1
 80098c0:	eb42 0303 	adc.w	r3, r2, r3
 80098c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80098d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 0300 	mov.w	r3, #0
 80098dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098e0:	4649      	mov	r1, r9
 80098e2:	008b      	lsls	r3, r1, #2
 80098e4:	4641      	mov	r1, r8
 80098e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098ea:	4641      	mov	r1, r8
 80098ec:	008a      	lsls	r2, r1, #2
 80098ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80098f2:	f7f6 fe99 	bl	8000628 <__aeabi_uldivmod>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4b39      	ldr	r3, [pc, #228]	; (80099e0 <UART_SetConfig+0x4e4>)
 80098fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	2164      	movs	r1, #100	; 0x64
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	3332      	adds	r3, #50	; 0x32
 800990e:	4a34      	ldr	r2, [pc, #208]	; (80099e0 <UART_SetConfig+0x4e4>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800991a:	441c      	add	r4, r3
 800991c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009920:	2200      	movs	r2, #0
 8009922:	673b      	str	r3, [r7, #112]	; 0x70
 8009924:	677a      	str	r2, [r7, #116]	; 0x74
 8009926:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800992a:	4642      	mov	r2, r8
 800992c:	464b      	mov	r3, r9
 800992e:	1891      	adds	r1, r2, r2
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	415b      	adcs	r3, r3
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800993a:	4641      	mov	r1, r8
 800993c:	1851      	adds	r1, r2, r1
 800993e:	6039      	str	r1, [r7, #0]
 8009940:	4649      	mov	r1, r9
 8009942:	414b      	adcs	r3, r1
 8009944:	607b      	str	r3, [r7, #4]
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009952:	4659      	mov	r1, fp
 8009954:	00cb      	lsls	r3, r1, #3
 8009956:	4651      	mov	r1, sl
 8009958:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800995c:	4651      	mov	r1, sl
 800995e:	00ca      	lsls	r2, r1, #3
 8009960:	4610      	mov	r0, r2
 8009962:	4619      	mov	r1, r3
 8009964:	4603      	mov	r3, r0
 8009966:	4642      	mov	r2, r8
 8009968:	189b      	adds	r3, r3, r2
 800996a:	66bb      	str	r3, [r7, #104]	; 0x68
 800996c:	464b      	mov	r3, r9
 800996e:	460a      	mov	r2, r1
 8009970:	eb42 0303 	adc.w	r3, r2, r3
 8009974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	663b      	str	r3, [r7, #96]	; 0x60
 8009980:	667a      	str	r2, [r7, #100]	; 0x64
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	f04f 0300 	mov.w	r3, #0
 800998a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800998e:	4649      	mov	r1, r9
 8009990:	008b      	lsls	r3, r1, #2
 8009992:	4641      	mov	r1, r8
 8009994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009998:	4641      	mov	r1, r8
 800999a:	008a      	lsls	r2, r1, #2
 800999c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099a0:	f7f6 fe42 	bl	8000628 <__aeabi_uldivmod>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <UART_SetConfig+0x4e4>)
 80099aa:	fba3 1302 	umull	r1, r3, r3, r2
 80099ae:	095b      	lsrs	r3, r3, #5
 80099b0:	2164      	movs	r1, #100	; 0x64
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	3332      	adds	r3, #50	; 0x32
 80099bc:	4a08      	ldr	r2, [pc, #32]	; (80099e0 <UART_SetConfig+0x4e4>)
 80099be:	fba2 2303 	umull	r2, r3, r2, r3
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	f003 020f 	and.w	r2, r3, #15
 80099c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4422      	add	r2, r4
 80099d0:	609a      	str	r2, [r3, #8]
}
 80099d2:	bf00      	nop
 80099d4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099d8:	46bd      	mov	sp, r7
 80099da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099de:	bf00      	nop
 80099e0:	51eb851f 	.word	0x51eb851f

080099e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80099e4:	b084      	sub	sp, #16
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	f107 001c 	add.w	r0, r7, #28
 80099f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d122      	bne.n	8009a42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d105      	bne.n	8009a36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f001 fbe8 	bl	800b20c <USB_CoreReset>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
 8009a40:	e01a      	b.n	8009a78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f001 fbdc 	bl	800b20c <USB_CoreReset>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d106      	bne.n	8009a6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38
 8009a6a:	e005      	b.n	8009a78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	d10b      	bne.n	8009a96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f043 0206 	orr.w	r2, r3, #6
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f043 0220 	orr.w	r2, r3, #32
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009aa2:	b004      	add	sp, #16
 8009aa4:	4770      	bx	lr
	...

08009aa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d165      	bne.n	8009b88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	4a41      	ldr	r2, [pc, #260]	; (8009bc4 <USB_SetTurnaroundTime+0x11c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d906      	bls.n	8009ad2 <USB_SetTurnaroundTime+0x2a>
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	4a40      	ldr	r2, [pc, #256]	; (8009bc8 <USB_SetTurnaroundTime+0x120>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d202      	bcs.n	8009ad2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009acc:	230f      	movs	r3, #15
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e062      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	4a3c      	ldr	r2, [pc, #240]	; (8009bc8 <USB_SetTurnaroundTime+0x120>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d306      	bcc.n	8009ae8 <USB_SetTurnaroundTime+0x40>
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	4a3b      	ldr	r2, [pc, #236]	; (8009bcc <USB_SetTurnaroundTime+0x124>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d202      	bcs.n	8009ae8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ae2:	230e      	movs	r3, #14
 8009ae4:	617b      	str	r3, [r7, #20]
 8009ae6:	e057      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	4a38      	ldr	r2, [pc, #224]	; (8009bcc <USB_SetTurnaroundTime+0x124>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d306      	bcc.n	8009afe <USB_SetTurnaroundTime+0x56>
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	4a37      	ldr	r2, [pc, #220]	; (8009bd0 <USB_SetTurnaroundTime+0x128>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d202      	bcs.n	8009afe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009af8:	230d      	movs	r3, #13
 8009afa:	617b      	str	r3, [r7, #20]
 8009afc:	e04c      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4a33      	ldr	r2, [pc, #204]	; (8009bd0 <USB_SetTurnaroundTime+0x128>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d306      	bcc.n	8009b14 <USB_SetTurnaroundTime+0x6c>
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	4a32      	ldr	r2, [pc, #200]	; (8009bd4 <USB_SetTurnaroundTime+0x12c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d802      	bhi.n	8009b14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b0e:	230c      	movs	r3, #12
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e041      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	4a2f      	ldr	r2, [pc, #188]	; (8009bd4 <USB_SetTurnaroundTime+0x12c>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d906      	bls.n	8009b2a <USB_SetTurnaroundTime+0x82>
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	4a2e      	ldr	r2, [pc, #184]	; (8009bd8 <USB_SetTurnaroundTime+0x130>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d802      	bhi.n	8009b2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009b24:	230b      	movs	r3, #11
 8009b26:	617b      	str	r3, [r7, #20]
 8009b28:	e036      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	4a2a      	ldr	r2, [pc, #168]	; (8009bd8 <USB_SetTurnaroundTime+0x130>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d906      	bls.n	8009b40 <USB_SetTurnaroundTime+0x98>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	4a29      	ldr	r2, [pc, #164]	; (8009bdc <USB_SetTurnaroundTime+0x134>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d802      	bhi.n	8009b40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009b3a:	230a      	movs	r3, #10
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	e02b      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	4a26      	ldr	r2, [pc, #152]	; (8009bdc <USB_SetTurnaroundTime+0x134>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d906      	bls.n	8009b56 <USB_SetTurnaroundTime+0xae>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	4a25      	ldr	r2, [pc, #148]	; (8009be0 <USB_SetTurnaroundTime+0x138>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d202      	bcs.n	8009b56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009b50:	2309      	movs	r3, #9
 8009b52:	617b      	str	r3, [r7, #20]
 8009b54:	e020      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	4a21      	ldr	r2, [pc, #132]	; (8009be0 <USB_SetTurnaroundTime+0x138>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d306      	bcc.n	8009b6c <USB_SetTurnaroundTime+0xc4>
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	4a20      	ldr	r2, [pc, #128]	; (8009be4 <USB_SetTurnaroundTime+0x13c>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d802      	bhi.n	8009b6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009b66:	2308      	movs	r3, #8
 8009b68:	617b      	str	r3, [r7, #20]
 8009b6a:	e015      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4a1d      	ldr	r2, [pc, #116]	; (8009be4 <USB_SetTurnaroundTime+0x13c>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d906      	bls.n	8009b82 <USB_SetTurnaroundTime+0xda>
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4a1c      	ldr	r2, [pc, #112]	; (8009be8 <USB_SetTurnaroundTime+0x140>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d202      	bcs.n	8009b82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b7c:	2307      	movs	r3, #7
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	e00a      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b82:	2306      	movs	r3, #6
 8009b84:	617b      	str	r3, [r7, #20]
 8009b86:	e007      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d102      	bne.n	8009b94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b8e:	2309      	movs	r3, #9
 8009b90:	617b      	str	r3, [r7, #20]
 8009b92:	e001      	b.n	8009b98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b94:	2309      	movs	r3, #9
 8009b96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	029b      	lsls	r3, r3, #10
 8009bac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	00d8acbf 	.word	0x00d8acbf
 8009bc8:	00e4e1c0 	.word	0x00e4e1c0
 8009bcc:	00f42400 	.word	0x00f42400
 8009bd0:	01067380 	.word	0x01067380
 8009bd4:	011a499f 	.word	0x011a499f
 8009bd8:	01312cff 	.word	0x01312cff
 8009bdc:	014ca43f 	.word	0x014ca43f
 8009be0:	016e3600 	.word	0x016e3600
 8009be4:	01a6ab1f 	.word	0x01a6ab1f
 8009be8:	01e84800 	.word	0x01e84800

08009bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f043 0201 	orr.w	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b083      	sub	sp, #12
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f023 0201 	bic.w	r2, r3, #1
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c4c:	78fb      	ldrb	r3, [r7, #3]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d115      	bne.n	8009c7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c5e:	2001      	movs	r0, #1
 8009c60:	f7f8 fe00 	bl	8002864 <HAL_Delay>
      ms++;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f001 fa3f 	bl	800b0ee <USB_GetMode>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d01e      	beq.n	8009cb4 <USB_SetCurrentMode+0x84>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b31      	cmp	r3, #49	; 0x31
 8009c7a:	d9f0      	bls.n	8009c5e <USB_SetCurrentMode+0x2e>
 8009c7c:	e01a      	b.n	8009cb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d115      	bne.n	8009cb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c90:	2001      	movs	r0, #1
 8009c92:	f7f8 fde7 	bl	8002864 <HAL_Delay>
      ms++;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 fa26 	bl	800b0ee <USB_GetMode>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <USB_SetCurrentMode+0x84>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b31      	cmp	r3, #49	; 0x31
 8009cac:	d9f0      	bls.n	8009c90 <USB_SetCurrentMode+0x60>
 8009cae:	e001      	b.n	8009cb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e005      	b.n	8009cc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2b32      	cmp	r3, #50	; 0x32
 8009cb8:	d101      	bne.n	8009cbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e000      	b.n	8009cc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cc8:	b084      	sub	sp, #16
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b086      	sub	sp, #24
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
 8009cd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613b      	str	r3, [r7, #16]
 8009ce6:	e009      	b.n	8009cfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	3340      	adds	r3, #64	; 0x40
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	613b      	str	r3, [r7, #16]
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	2b0e      	cmp	r3, #14
 8009d00:	d9f2      	bls.n	8009ce8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d11c      	bne.n	8009d42 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d16:	f043 0302 	orr.w	r3, r3, #2
 8009d1a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	e005      	b.n	8009d4e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d54:	461a      	mov	r2, r3
 8009d56:	2300      	movs	r3, #0
 8009d58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d60:	4619      	mov	r1, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d68:	461a      	mov	r2, r3
 8009d6a:	680b      	ldr	r3, [r1, #0]
 8009d6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d10c      	bne.n	8009d8e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d104      	bne.n	8009d84 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f965 	bl	800a04c <USB_SetDevSpeed>
 8009d82:	e008      	b.n	8009d96 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d84:	2101      	movs	r1, #1
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f960 	bl	800a04c <USB_SetDevSpeed>
 8009d8c:	e003      	b.n	8009d96 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d8e:	2103      	movs	r1, #3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f95b 	bl	800a04c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d96:	2110      	movs	r1, #16
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f8f3 	bl	8009f84 <USB_FlushTxFifo>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f91f 	bl	8009fec <USB_FlushRxFifo>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dca:	461a      	mov	r2, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	613b      	str	r3, [r7, #16]
 8009de0:	e043      	b.n	8009e6a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009df8:	d118      	bne.n	8009e2c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	e013      	b.n	8009e3e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e22:	461a      	mov	r2, r3
 8009e24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	e008      	b.n	8009e3e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	461a      	mov	r2, r3
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	3301      	adds	r3, #1
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d3b7      	bcc.n	8009de2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e72:	2300      	movs	r3, #0
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	e043      	b.n	8009f00 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e8e:	d118      	bne.n	8009ec2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	e013      	b.n	8009ed4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	e008      	b.n	8009ed4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ece:	461a      	mov	r2, r3
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ef8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3301      	adds	r3, #1
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d3b7      	bcc.n	8009e78 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009f28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d105      	bne.n	8009f3c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	f043 0210 	orr.w	r2, r3, #16
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	699a      	ldr	r2, [r3, #24]
 8009f40:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <USB_DevInit+0x2b8>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	f043 0208 	orr.w	r2, r3, #8
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d107      	bne.n	8009f70 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f68:	f043 0304 	orr.w	r3, r3, #4
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f7c:	b004      	add	sp, #16
 8009f7e:	4770      	bx	lr
 8009f80:	803c3800 	.word	0x803c3800

08009f84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3301      	adds	r3, #1
 8009f96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4a13      	ldr	r2, [pc, #76]	; (8009fe8 <USB_FlushTxFifo+0x64>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d901      	bls.n	8009fa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e01b      	b.n	8009fdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	daf2      	bge.n	8009f92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	019b      	lsls	r3, r3, #6
 8009fb4:	f043 0220 	orr.w	r2, r3, #32
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <USB_FlushTxFifo+0x64>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d901      	bls.n	8009fce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e006      	b.n	8009fdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	d0f0      	beq.n	8009fbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	00030d40 	.word	0x00030d40

08009fec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	4a11      	ldr	r2, [pc, #68]	; (800a048 <USB_FlushRxFifo+0x5c>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d901      	bls.n	800a00a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e018      	b.n	800a03c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	daf2      	bge.n	8009ff8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2210      	movs	r2, #16
 800a01a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	3301      	adds	r3, #1
 800a020:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	4a08      	ldr	r2, [pc, #32]	; (800a048 <USB_FlushRxFifo+0x5c>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d901      	bls.n	800a02e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e006      	b.n	800a03c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	f003 0310 	and.w	r3, r3, #16
 800a036:	2b10      	cmp	r3, #16
 800a038:	d0f0      	beq.n	800a01c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3714      	adds	r7, #20
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	00030d40 	.word	0x00030d40

0800a04c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	68f9      	ldr	r1, [r7, #12]
 800a068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a06c:	4313      	orrs	r3, r2
 800a06e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3714      	adds	r7, #20
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr

0800a07e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a07e:	b480      	push	{r7}
 800a080:	b087      	sub	sp, #28
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	f003 0306 	and.w	r3, r3, #6
 800a096:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	75fb      	strb	r3, [r7, #23]
 800a0a2:	e00a      	b.n	800a0ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d002      	beq.n	800a0b0 <USB_GetDevSpeed+0x32>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b06      	cmp	r3, #6
 800a0ae:	d102      	bne.n	800a0b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	75fb      	strb	r3, [r7, #23]
 800a0b4:	e001      	b.n	800a0ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a0b6:	230f      	movs	r3, #15
 800a0b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	785b      	ldrb	r3, [r3, #1]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d13a      	bne.n	800a15a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	f003 030f 	and.w	r3, r3, #15
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a102:	4313      	orrs	r3, r2
 800a104:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	015a      	lsls	r2, r3, #5
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4413      	add	r3, r2
 800a10e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d155      	bne.n	800a1c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	791b      	ldrb	r3, [r3, #4]
 800a136:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a138:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	059b      	lsls	r3, r3, #22
 800a13e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a140:	4313      	orrs	r3, r2
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	0151      	lsls	r1, r2, #5
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	440a      	add	r2, r1
 800a14a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	e036      	b.n	800a1c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a160:	69da      	ldr	r2, [r3, #28]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	f003 030f 	and.w	r3, r3, #15
 800a16a:	2101      	movs	r1, #1
 800a16c:	fa01 f303 	lsl.w	r3, r1, r3
 800a170:	041b      	lsls	r3, r3, #16
 800a172:	68f9      	ldr	r1, [r7, #12]
 800a174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a178:	4313      	orrs	r3, r2
 800a17a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d11a      	bne.n	800a1c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	791b      	ldrb	r3, [r3, #4]
 800a1ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3714      	adds	r7, #20
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
	...

0800a1d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	785b      	ldrb	r3, [r3, #1]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d161      	bne.n	800a2b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a20a:	d11f      	bne.n	800a24c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	440a      	add	r2, r1
 800a222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a22a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	440a      	add	r2, r1
 800a242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a24a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	f003 030f 	and.w	r3, r3, #15
 800a25c:	2101      	movs	r1, #1
 800a25e:	fa01 f303 	lsl.w	r3, r1, r3
 800a262:	b29b      	uxth	r3, r3
 800a264:	43db      	mvns	r3, r3
 800a266:	68f9      	ldr	r1, [r7, #12]
 800a268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a26c:	4013      	ands	r3, r2
 800a26e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	69da      	ldr	r2, [r3, #28]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f003 030f 	and.w	r3, r3, #15
 800a280:	2101      	movs	r1, #1
 800a282:	fa01 f303 	lsl.w	r3, r1, r3
 800a286:	b29b      	uxth	r3, r3
 800a288:	43db      	mvns	r3, r3
 800a28a:	68f9      	ldr	r1, [r7, #12]
 800a28c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a290:	4013      	ands	r3, r2
 800a292:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	0159      	lsls	r1, r3, #5
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	440b      	add	r3, r1
 800a2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	4b35      	ldr	r3, [pc, #212]	; (800a388 <USB_DeactivateEndpoint+0x1b0>)
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	600b      	str	r3, [r1, #0]
 800a2b6:	e060      	b.n	800a37a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2ce:	d11f      	bne.n	800a310 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	015a      	lsls	r2, r3, #5
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	0151      	lsls	r1, r2, #5
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	440a      	add	r2, r1
 800a2e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	0151      	lsls	r1, r2, #5
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	440a      	add	r2, r1
 800a306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a30e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	2101      	movs	r1, #1
 800a322:	fa01 f303 	lsl.w	r3, r1, r3
 800a326:	041b      	lsls	r3, r3, #16
 800a328:	43db      	mvns	r3, r3
 800a32a:	68f9      	ldr	r1, [r7, #12]
 800a32c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a330:	4013      	ands	r3, r2
 800a332:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a33a:	69da      	ldr	r2, [r3, #28]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	f003 030f 	and.w	r3, r3, #15
 800a344:	2101      	movs	r1, #1
 800a346:	fa01 f303 	lsl.w	r3, r1, r3
 800a34a:	041b      	lsls	r3, r3, #16
 800a34c:	43db      	mvns	r3, r3
 800a34e:	68f9      	ldr	r1, [r7, #12]
 800a350:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a354:	4013      	ands	r3, r2
 800a356:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	015a      	lsls	r2, r3, #5
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	4413      	add	r3, r2
 800a360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	0159      	lsls	r1, r3, #5
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	440b      	add	r3, r1
 800a36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a372:	4619      	mov	r1, r3
 800a374:	4b05      	ldr	r3, [pc, #20]	; (800a38c <USB_DeactivateEndpoint+0x1b4>)
 800a376:	4013      	ands	r3, r2
 800a378:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3714      	adds	r7, #20
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	ec337800 	.word	0xec337800
 800a38c:	eff37800 	.word	0xeff37800

0800a390 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b08a      	sub	sp, #40	; 0x28
 800a394:	af02      	add	r7, sp, #8
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	4613      	mov	r3, r2
 800a39c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	f040 815c 	bne.w	800a66a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	699b      	ldr	r3, [r3, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d132      	bne.n	800a420 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	69ba      	ldr	r2, [r7, #24]
 800a3ca:	0151      	lsls	r1, r2, #5
 800a3cc:	69fa      	ldr	r2, [r7, #28]
 800a3ce:	440a      	add	r2, r1
 800a3d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	0151      	lsls	r1, r2, #5
 800a3f0:	69fa      	ldr	r2, [r7, #28]
 800a3f2:	440a      	add	r2, r1
 800a3f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	015a      	lsls	r2, r3, #5
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	4413      	add	r3, r2
 800a406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	69ba      	ldr	r2, [r7, #24]
 800a40e:	0151      	lsls	r1, r2, #5
 800a410:	69fa      	ldr	r2, [r7, #28]
 800a412:	440a      	add	r2, r1
 800a414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a418:	0cdb      	lsrs	r3, r3, #19
 800a41a:	04db      	lsls	r3, r3, #19
 800a41c:	6113      	str	r3, [r2, #16]
 800a41e:	e074      	b.n	800a50a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	4413      	add	r3, r2
 800a428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	0151      	lsls	r1, r2, #5
 800a432:	69fa      	ldr	r2, [r7, #28]
 800a434:	440a      	add	r2, r1
 800a436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43a:	0cdb      	lsrs	r3, r3, #19
 800a43c:	04db      	lsls	r3, r3, #19
 800a43e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	69ba      	ldr	r2, [r7, #24]
 800a450:	0151      	lsls	r1, r2, #5
 800a452:	69fa      	ldr	r2, [r7, #28]
 800a454:	440a      	add	r2, r1
 800a456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a45a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a45e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a462:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a470:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	6999      	ldr	r1, [r3, #24]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	440b      	add	r3, r1
 800a47c:	1e59      	subs	r1, r3, #1
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	fbb1 f3f3 	udiv	r3, r1, r3
 800a486:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a488:	4b9d      	ldr	r3, [pc, #628]	; (800a700 <USB_EPStartXfer+0x370>)
 800a48a:	400b      	ands	r3, r1
 800a48c:	69b9      	ldr	r1, [r7, #24]
 800a48e:	0148      	lsls	r0, r1, #5
 800a490:	69f9      	ldr	r1, [r7, #28]
 800a492:	4401      	add	r1, r0
 800a494:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a498:	4313      	orrs	r3, r2
 800a49a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	015a      	lsls	r2, r3, #5
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4b2:	69b9      	ldr	r1, [r7, #24]
 800a4b4:	0148      	lsls	r0, r1, #5
 800a4b6:	69f9      	ldr	r1, [r7, #28]
 800a4b8:	4401      	add	r1, r0
 800a4ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	791b      	ldrb	r3, [r3, #4]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d11f      	bne.n	800a50a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	69ba      	ldr	r2, [r7, #24]
 800a4da:	0151      	lsls	r1, r2, #5
 800a4dc:	69fa      	ldr	r2, [r7, #28]
 800a4de:	440a      	add	r2, r1
 800a4e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a4e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	69fa      	ldr	r2, [r7, #28]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a504:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a508:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d14b      	bne.n	800a5a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a524:	461a      	mov	r2, r3
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	791b      	ldrb	r3, [r3, #4]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d128      	bne.n	800a586 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a540:	2b00      	cmp	r3, #0
 800a542:	d110      	bne.n	800a566 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a55e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a562:	6013      	str	r3, [r2, #0]
 800a564:	e00f      	b.n	800a586 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	015a      	lsls	r2, r3, #5
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	4413      	add	r3, r2
 800a56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	69fa      	ldr	r2, [r7, #28]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a584:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	015a      	lsls	r2, r3, #5
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	4413      	add	r3, r2
 800a58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	0151      	lsls	r1, r2, #5
 800a598:	69fa      	ldr	r2, [r7, #28]
 800a59a:	440a      	add	r2, r1
 800a59c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	e133      	b.n	800a810 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	015a      	lsls	r2, r3, #5
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	0151      	lsls	r1, r2, #5
 800a5ba:	69fa      	ldr	r2, [r7, #28]
 800a5bc:	440a      	add	r2, r1
 800a5be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	791b      	ldrb	r3, [r3, #4]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d015      	beq.n	800a5fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 811b 	beq.w	800a810 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	f003 030f 	and.w	r3, r3, #15
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f0:	69f9      	ldr	r1, [r7, #28]
 800a5f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	634b      	str	r3, [r1, #52]	; 0x34
 800a5fa:	e109      	b.n	800a810 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d110      	bne.n	800a62e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69ba      	ldr	r2, [r7, #24]
 800a61c:	0151      	lsls	r1, r2, #5
 800a61e:	69fa      	ldr	r2, [r7, #28]
 800a620:	440a      	add	r2, r1
 800a622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a626:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	e00f      	b.n	800a64e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	015a      	lsls	r2, r3, #5
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	0151      	lsls	r1, r2, #5
 800a640:	69fa      	ldr	r2, [r7, #28]
 800a642:	440a      	add	r2, r1
 800a644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a64c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	6919      	ldr	r1, [r3, #16]
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	781a      	ldrb	r2, [r3, #0]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	b298      	uxth	r0, r3
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	4603      	mov	r3, r0
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 fade 	bl	800ac24 <USB_WritePacket>
 800a668:	e0d2      	b.n	800a810 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	4413      	add	r3, r2
 800a672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	69ba      	ldr	r2, [r7, #24]
 800a67a:	0151      	lsls	r1, r2, #5
 800a67c:	69fa      	ldr	r2, [r7, #28]
 800a67e:	440a      	add	r2, r1
 800a680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a684:	0cdb      	lsrs	r3, r3, #19
 800a686:	04db      	lsls	r3, r3, #19
 800a688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	0151      	lsls	r1, r2, #5
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	440a      	add	r2, r1
 800a6a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d126      	bne.n	800a704 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6cc:	69b9      	ldr	r1, [r7, #24]
 800a6ce:	0148      	lsls	r0, r1, #5
 800a6d0:	69f9      	ldr	r1, [r7, #28]
 800a6d2:	4401      	add	r1, r0
 800a6d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6fa:	6113      	str	r3, [r2, #16]
 800a6fc:	e03a      	b.n	800a774 <USB_EPStartXfer+0x3e4>
 800a6fe:	bf00      	nop
 800a700:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	699a      	ldr	r2, [r3, #24]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	1e5a      	subs	r2, r3, #1
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	fbb2 f3f3 	udiv	r3, r2, r3
 800a718:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	8afa      	ldrh	r2, [r7, #22]
 800a720:	fb03 f202 	mul.w	r2, r3, r2
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	015a      	lsls	r2, r3, #5
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	4413      	add	r3, r2
 800a730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a734:	691a      	ldr	r2, [r3, #16]
 800a736:	8afb      	ldrh	r3, [r7, #22]
 800a738:	04d9      	lsls	r1, r3, #19
 800a73a:	4b38      	ldr	r3, [pc, #224]	; (800a81c <USB_EPStartXfer+0x48c>)
 800a73c:	400b      	ands	r3, r1
 800a73e:	69b9      	ldr	r1, [r7, #24]
 800a740:	0148      	lsls	r0, r1, #5
 800a742:	69f9      	ldr	r1, [r7, #28]
 800a744:	4401      	add	r1, r0
 800a746:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a74a:	4313      	orrs	r3, r2
 800a74c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	4413      	add	r3, r2
 800a756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a75a:	691a      	ldr	r2, [r3, #16]
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a764:	69b9      	ldr	r1, [r7, #24]
 800a766:	0148      	lsls	r0, r1, #5
 800a768:	69f9      	ldr	r1, [r7, #28]
 800a76a:	4401      	add	r1, r0
 800a76c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a770:	4313      	orrs	r3, r2
 800a772:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d10d      	bne.n	800a796 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d009      	beq.n	800a796 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6919      	ldr	r1, [r3, #16]
 800a786:	69bb      	ldr	r3, [r7, #24]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a792:	460a      	mov	r2, r1
 800a794:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	791b      	ldrb	r3, [r3, #4]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d128      	bne.n	800a7f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d110      	bne.n	800a7d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	015a      	lsls	r2, r3, #5
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	69ba      	ldr	r2, [r7, #24]
 800a7be:	0151      	lsls	r1, r2, #5
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	440a      	add	r2, r1
 800a7c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	e00f      	b.n	800a7f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	69ba      	ldr	r2, [r7, #24]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	0151      	lsls	r1, r2, #5
 800a802:	69fa      	ldr	r2, [r7, #28]
 800a804:	440a      	add	r2, r1
 800a806:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a80a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a80e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a810:	2300      	movs	r3, #0
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	1ff80000 	.word	0x1ff80000

0800a820 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	4613      	mov	r3, r2
 800a82c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	785b      	ldrb	r3, [r3, #1]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	f040 80ce 	bne.w	800a9de <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d132      	bne.n	800a8b0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	015a      	lsls	r2, r3, #5
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	4413      	add	r3, r2
 800a852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	0151      	lsls	r1, r2, #5
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	440a      	add	r2, r1
 800a860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a864:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a868:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a86c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	015a      	lsls	r2, r3, #5
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	4413      	add	r3, r2
 800a876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	0151      	lsls	r1, r2, #5
 800a880:	697a      	ldr	r2, [r7, #20]
 800a882:	440a      	add	r2, r1
 800a884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a88c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	015a      	lsls	r2, r3, #5
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	4413      	add	r3, r2
 800a896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	0151      	lsls	r1, r2, #5
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8a8:	0cdb      	lsrs	r3, r3, #19
 800a8aa:	04db      	lsls	r3, r3, #19
 800a8ac:	6113      	str	r3, [r2, #16]
 800a8ae:	e04e      	b.n	800a94e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	0151      	lsls	r1, r2, #5
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	440a      	add	r2, r1
 800a8c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ca:	0cdb      	lsrs	r3, r3, #19
 800a8cc:	04db      	lsls	r3, r3, #19
 800a8ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	693a      	ldr	r2, [r7, #16]
 800a8e0:	0151      	lsls	r1, r2, #5
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	440a      	add	r2, r1
 800a8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8f2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d903      	bls.n	800a908 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	68da      	ldr	r2, [r3, #12]
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	015a      	lsls	r2, r3, #5
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	4413      	add	r3, r2
 800a910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	0151      	lsls	r1, r2, #5
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	440a      	add	r2, r1
 800a91e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a922:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a926:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a934:	691a      	ldr	r2, [r3, #16]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a93e:	6939      	ldr	r1, [r7, #16]
 800a940:	0148      	lsls	r0, r1, #5
 800a942:	6979      	ldr	r1, [r7, #20]
 800a944:	4401      	add	r1, r0
 800a946:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a94a:	4313      	orrs	r3, r2
 800a94c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d11e      	bne.n	800a992 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d009      	beq.n	800a970 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a968:	461a      	mov	r2, r3
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	015a      	lsls	r2, r3, #5
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	4413      	add	r3, r2
 800a978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	0151      	lsls	r1, r2, #5
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	440a      	add	r2, r1
 800a986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a98a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a98e:	6013      	str	r3, [r2, #0]
 800a990:	e097      	b.n	800aac2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	693a      	ldr	r2, [r7, #16]
 800a9a2:	0151      	lsls	r1, r2, #5
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	440a      	add	r2, r1
 800a9a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a9b0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 8083 	beq.w	800aac2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	f003 030f 	and.w	r3, r3, #15
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d2:	6979      	ldr	r1, [r7, #20]
 800a9d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	634b      	str	r3, [r1, #52]	; 0x34
 800a9dc:	e071      	b.n	800aac2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	0151      	lsls	r1, r2, #5
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	440a      	add	r2, r1
 800a9f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f8:	0cdb      	lsrs	r3, r3, #19
 800a9fa:	04db      	lsls	r3, r3, #19
 800a9fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	693a      	ldr	r2, [r7, #16]
 800aa0e:	0151      	lsls	r1, r2, #5
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	440a      	add	r2, r1
 800aa14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d003      	beq.n	800aa32 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	0151      	lsls	r1, r2, #5
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	440a      	add	r2, r1
 800aa50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa66:	691a      	ldr	r2, [r3, #16]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa70:	6939      	ldr	r1, [r7, #16]
 800aa72:	0148      	lsls	r0, r1, #5
 800aa74:	6979      	ldr	r1, [r7, #20]
 800aa76:	4401      	add	r1, r0
 800aa78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d10d      	bne.n	800aaa2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d009      	beq.n	800aaa2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	6919      	ldr	r1, [r3, #16]
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	015a      	lsls	r2, r3, #5
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	4413      	add	r3, r2
 800aa9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa9e:	460a      	mov	r2, r1
 800aaa0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	0151      	lsls	r1, r2, #5
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	440a      	add	r2, r1
 800aab8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aabc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aac0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	785b      	ldrb	r3, [r3, #1]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d14a      	bne.n	800ab84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	015a      	lsls	r2, r3, #5
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	4413      	add	r3, r2
 800aaf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab06:	f040 8086 	bne.w	800ac16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	7812      	ldrb	r2, [r2, #0]
 800ab1e:	0151      	lsls	r1, r2, #5
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	440a      	add	r2, r1
 800ab24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	7812      	ldrb	r2, [r2, #0]
 800ab42:	0151      	lsls	r1, r2, #5
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	440a      	add	r2, r1
 800ab48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3301      	adds	r3, #1
 800ab56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d902      	bls.n	800ab68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	75fb      	strb	r3, [r7, #23]
          break;
 800ab66:	e056      	b.n	800ac16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab80:	d0e7      	beq.n	800ab52 <USB_EPStopXfer+0x82>
 800ab82:	e048      	b.n	800ac16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	015a      	lsls	r2, r3, #5
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab9c:	d13b      	bne.n	800ac16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	7812      	ldrb	r2, [r2, #0]
 800abb2:	0151      	lsls	r1, r2, #5
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	440a      	add	r2, r1
 800abb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	7812      	ldrb	r2, [r2, #0]
 800abd6:	0151      	lsls	r1, r2, #5
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	440a      	add	r2, r1
 800abdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abe4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	3301      	adds	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f242 7210 	movw	r2, #10000	; 0x2710
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d902      	bls.n	800abfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	75fb      	strb	r3, [r7, #23]
          break;
 800abfa:	e00c      	b.n	800ac16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	015a      	lsls	r2, r3, #5
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	4413      	add	r3, r2
 800ac06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac14:	d0e7      	beq.n	800abe6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b089      	sub	sp, #36	; 0x24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	461a      	mov	r2, r3
 800ac32:	460b      	mov	r3, r1
 800ac34:	71fb      	strb	r3, [r7, #7]
 800ac36:	4613      	mov	r3, r2
 800ac38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ac42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d123      	bne.n	800ac92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac4a:	88bb      	ldrh	r3, [r7, #4]
 800ac4c:	3303      	adds	r3, #3
 800ac4e:	089b      	lsrs	r3, r3, #2
 800ac50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac52:	2300      	movs	r3, #0
 800ac54:	61bb      	str	r3, [r7, #24]
 800ac56:	e018      	b.n	800ac8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac58:	79fb      	ldrb	r3, [r7, #7]
 800ac5a:	031a      	lsls	r2, r3, #12
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac64:	461a      	mov	r2, r3
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	3301      	adds	r3, #1
 800ac76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	3301      	adds	r3, #1
 800ac82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	3301      	adds	r3, #1
 800ac88:	61bb      	str	r3, [r7, #24]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d3e2      	bcc.n	800ac58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3724      	adds	r7, #36	; 0x24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b08b      	sub	sp, #44	; 0x2c
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800acb6:	88fb      	ldrh	r3, [r7, #6]
 800acb8:	089b      	lsrs	r3, r3, #2
 800acba:	b29b      	uxth	r3, r3
 800acbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800acbe:	88fb      	ldrh	r3, [r7, #6]
 800acc0:	f003 0303 	and.w	r3, r3, #3
 800acc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800acc6:	2300      	movs	r3, #0
 800acc8:	623b      	str	r3, [r7, #32]
 800acca:	e014      	b.n	800acf6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	601a      	str	r2, [r3, #0]
    pDest++;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acda:	3301      	adds	r3, #1
 800acdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800acde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace0:	3301      	adds	r3, #1
 800ace2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	3301      	adds	r3, #1
 800ace8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800acea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acec:	3301      	adds	r3, #1
 800acee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	3301      	adds	r3, #1
 800acf4:	623b      	str	r3, [r7, #32]
 800acf6:	6a3a      	ldr	r2, [r7, #32]
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d3e6      	bcc.n	800accc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800acfe:	8bfb      	ldrh	r3, [r7, #30]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d01e      	beq.n	800ad42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad04:	2300      	movs	r3, #0
 800ad06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f107 0310 	add.w	r3, r7, #16
 800ad14:	6812      	ldr	r2, [r2, #0]
 800ad16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	fa22 f303 	lsr.w	r3, r2, r3
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	701a      	strb	r2, [r3, #0]
      i++;
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	623b      	str	r3, [r7, #32]
      pDest++;
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	3301      	adds	r3, #1
 800ad34:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ad36:	8bfb      	ldrh	r3, [r7, #30]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ad3c:	8bfb      	ldrh	r3, [r7, #30]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1ea      	bne.n	800ad18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	372c      	adds	r7, #44	; 0x2c
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	785b      	ldrb	r3, [r3, #1]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d12c      	bne.n	800adc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	015a      	lsls	r2, r3, #5
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4413      	add	r3, r2
 800ad74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	db12      	blt.n	800ada4 <USB_EPSetStall+0x54>
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00f      	beq.n	800ada4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	0151      	lsls	r1, r2, #5
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	440a      	add	r2, r1
 800ad9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ada2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	015a      	lsls	r2, r3, #5
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	4413      	add	r3, r2
 800adac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	0151      	lsls	r1, r2, #5
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	440a      	add	r2, r1
 800adba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800adc2:	6013      	str	r3, [r2, #0]
 800adc4:	e02b      	b.n	800ae1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	db12      	blt.n	800adfe <USB_EPSetStall+0xae>
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00f      	beq.n	800adfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800adfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	0151      	lsls	r1, r2, #5
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	440a      	add	r2, r1
 800ae14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ae1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3714      	adds	r7, #20
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d128      	bne.n	800ae9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	0151      	lsls	r1, r2, #5
 800ae5a:	68fa      	ldr	r2, [r7, #12]
 800ae5c:	440a      	add	r2, r1
 800ae5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	791b      	ldrb	r3, [r3, #4]
 800ae6c:	2b03      	cmp	r3, #3
 800ae6e:	d003      	beq.n	800ae78 <USB_EPClearStall+0x4c>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	791b      	ldrb	r3, [r3, #4]
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d138      	bne.n	800aeea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	015a      	lsls	r2, r3, #5
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	4413      	add	r3, r2
 800ae80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	0151      	lsls	r1, r2, #5
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	440a      	add	r2, r1
 800ae8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	e027      	b.n	800aeea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	0151      	lsls	r1, r2, #5
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	440a      	add	r2, r1
 800aeb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aeb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	791b      	ldrb	r3, [r3, #4]
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d003      	beq.n	800aeca <USB_EPClearStall+0x9e>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	791b      	ldrb	r3, [r3, #4]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d10f      	bne.n	800aeea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	015a      	lsls	r2, r3, #5
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	4413      	add	r3, r2
 800aed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	0151      	lsls	r1, r2, #5
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	440a      	add	r2, r1
 800aee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aee8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800af1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	011b      	lsls	r3, r3, #4
 800af28:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af32:	4313      	orrs	r3, r2
 800af34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3714      	adds	r7, #20
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	68fa      	ldr	r2, [r7, #12]
 800af6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af72:	f023 0302 	bic.w	r3, r3, #2
 800af76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800af86:	b480      	push	{r7}
 800af88:	b085      	sub	sp, #20
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afa0:	f023 0303 	bic.w	r3, r3, #3
 800afa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afb4:	f043 0302 	orr.w	r3, r3, #2
 800afb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	4013      	ands	r3, r2
 800afde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800afe0:	68fb      	ldr	r3, [r7, #12]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b000:	699b      	ldr	r3, [r3, #24]
 800b002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	4013      	ands	r3, r2
 800b010:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	0c1b      	lsrs	r3, r3, #16
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b022:	b480      	push	{r7}
 800b024:	b085      	sub	sp, #20
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b034:	699b      	ldr	r3, [r3, #24]
 800b036:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	68ba      	ldr	r2, [r7, #8]
 800b042:	4013      	ands	r3, r2
 800b044:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	b29b      	uxth	r3, r3
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b056:	b480      	push	{r7}
 800b058:	b085      	sub	sp, #20
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	460b      	mov	r3, r1
 800b060:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b066:	78fb      	ldrb	r3, [r7, #3]
 800b068:	015a      	lsls	r2, r3, #5
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	4413      	add	r3, r2
 800b06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	4013      	ands	r3, r2
 800b082:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b084:	68bb      	ldr	r3, [r7, #8]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b092:	b480      	push	{r7}
 800b094:	b087      	sub	sp, #28
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b0b6:	78fb      	ldrb	r3, [r7, #3]
 800b0b8:	f003 030f 	and.w	r3, r3, #15
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c2:	01db      	lsls	r3, r3, #7
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b0cc:	78fb      	ldrb	r3, [r7, #3]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b0e0:	68bb      	ldr	r3, [r7, #8]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	371c      	adds	r7, #28
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b083      	sub	sp, #12
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr

0800b10a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b10a:	b480      	push	{r7}
 800b10c:	b085      	sub	sp, #20
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b124:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b128:	f023 0307 	bic.w	r3, r3, #7
 800b12c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b13c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b140:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b150:	b480      	push	{r7}
 800b152:	b087      	sub	sp, #28
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	460b      	mov	r3, r1
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	333c      	adds	r3, #60	; 0x3c
 800b166:	3304      	adds	r3, #4
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	4a26      	ldr	r2, [pc, #152]	; (800b208 <USB_EP0_OutStart+0xb8>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d90a      	bls.n	800b18a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b184:	d101      	bne.n	800b18a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	e037      	b.n	800b1fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b190:	461a      	mov	r2, r3
 800b192:	2300      	movs	r3, #0
 800b194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b0:	691b      	ldr	r3, [r3, #16]
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1b8:	f043 0318 	orr.w	r3, r3, #24
 800b1bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b1d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b1d2:	7afb      	ldrb	r3, [r7, #11]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d10f      	bne.n	800b1f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1de:	461a      	mov	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	697a      	ldr	r2, [r7, #20]
 800b1ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b1f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	371c      	adds	r7, #28
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	4f54300a 	.word	0x4f54300a

0800b20c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b214:	2300      	movs	r3, #0
 800b216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3301      	adds	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	4a13      	ldr	r2, [pc, #76]	; (800b270 <USB_CoreReset+0x64>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d901      	bls.n	800b22a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e01b      	b.n	800b262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	daf2      	bge.n	800b218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	f043 0201 	orr.w	r2, r3, #1
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	3301      	adds	r3, #1
 800b246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4a09      	ldr	r2, [pc, #36]	; (800b270 <USB_CoreReset+0x64>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d901      	bls.n	800b254 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b250:	2303      	movs	r3, #3
 800b252:	e006      	b.n	800b262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d0f0      	beq.n	800b242 <USB_CoreReset+0x36>

  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	00030d40 	.word	0x00030d40

0800b274 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b278:	4904      	ldr	r1, [pc, #16]	; (800b28c <MX_FATFS_Init+0x18>)
 800b27a:	4805      	ldr	r0, [pc, #20]	; (800b290 <MX_FATFS_Init+0x1c>)
 800b27c:	f002 f8a2 	bl	800d3c4 <FATFS_LinkDriver>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	4b03      	ldr	r3, [pc, #12]	; (800b294 <MX_FATFS_Init+0x20>)
 800b286:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b288:	bf00      	nop
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200004e0 	.word	0x200004e0
 800b290:	2000000c 	.word	0x2000000c
 800b294:	200004dc 	.word	0x200004dc

0800b298 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b2a2:	4b06      	ldr	r3, [pc, #24]	; (800b2bc <USER_initialize+0x24>)
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <USER_initialize+0x24>)
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	20000009 	.word	0x20000009

0800b2c0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b2ca:	4b06      	ldr	r3, [pc, #24]	; (800b2e4 <USER_status+0x24>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b2d0:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <USER_status+0x24>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	20000009 	.word	0x20000009

0800b2e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60b9      	str	r1, [r7, #8]
 800b2f0:	607a      	str	r2, [r7, #4]
 800b2f2:	603b      	str	r3, [r7, #0]
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b2f8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3714      	adds	r7, #20
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b306:	b480      	push	{r7}
 800b308:	b085      	sub	sp, #20
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b316:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	603a      	str	r2, [r7, #0]
 800b32e:	71fb      	strb	r3, [r7, #7]
 800b330:	460b      	mov	r3, r1
 800b332:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	73fb      	strb	r3, [r7, #15]
    return res;
 800b338:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
	...

0800b348 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b354:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b358:	f006 f8a4 	bl	80114a4 <USBD_static_malloc>
 800b35c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d109      	bne.n	800b378 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	32b0      	adds	r2, #176	; 0xb0
 800b36e:	2100      	movs	r1, #0
 800b370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b374:	2302      	movs	r3, #2
 800b376:	e0d4      	b.n	800b522 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b378:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b37c:	2100      	movs	r1, #0
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f006 fa0a 	bl	8011798 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	32b0      	adds	r2, #176	; 0xb0
 800b38e:	68f9      	ldr	r1, [r7, #12]
 800b390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	32b0      	adds	r2, #176	; 0xb0
 800b39e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	7c1b      	ldrb	r3, [r3, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d138      	bne.n	800b422 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b3b0:	4b5e      	ldr	r3, [pc, #376]	; (800b52c <USBD_CDC_Init+0x1e4>)
 800b3b2:	7819      	ldrb	r1, [r3, #0]
 800b3b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3b8:	2202      	movs	r2, #2
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f005 ff01 	bl	80111c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b3c0:	4b5a      	ldr	r3, [pc, #360]	; (800b52c <USBD_CDC_Init+0x1e4>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	f003 020f 	and.w	r2, r3, #15
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	440b      	add	r3, r1
 800b3d4:	3324      	adds	r3, #36	; 0x24
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b3da:	4b55      	ldr	r3, [pc, #340]	; (800b530 <USBD_CDC_Init+0x1e8>)
 800b3dc:	7819      	ldrb	r1, [r3, #0]
 800b3de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3e2:	2202      	movs	r2, #2
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f005 feec 	bl	80111c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b3ea:	4b51      	ldr	r3, [pc, #324]	; (800b530 <USBD_CDC_Init+0x1e8>)
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f003 020f 	and.w	r2, r3, #15
 800b3f2:	6879      	ldr	r1, [r7, #4]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	009b      	lsls	r3, r3, #2
 800b3f8:	4413      	add	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	440b      	add	r3, r1
 800b3fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b402:	2201      	movs	r2, #1
 800b404:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b406:	4b4b      	ldr	r3, [pc, #300]	; (800b534 <USBD_CDC_Init+0x1ec>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	f003 020f 	and.w	r2, r3, #15
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	440b      	add	r3, r1
 800b41a:	3326      	adds	r3, #38	; 0x26
 800b41c:	2210      	movs	r2, #16
 800b41e:	801a      	strh	r2, [r3, #0]
 800b420:	e035      	b.n	800b48e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b422:	4b42      	ldr	r3, [pc, #264]	; (800b52c <USBD_CDC_Init+0x1e4>)
 800b424:	7819      	ldrb	r1, [r3, #0]
 800b426:	2340      	movs	r3, #64	; 0x40
 800b428:	2202      	movs	r2, #2
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f005 fec9 	bl	80111c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b430:	4b3e      	ldr	r3, [pc, #248]	; (800b52c <USBD_CDC_Init+0x1e4>)
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	f003 020f 	and.w	r2, r3, #15
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4613      	mov	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	440b      	add	r3, r1
 800b444:	3324      	adds	r3, #36	; 0x24
 800b446:	2201      	movs	r2, #1
 800b448:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b44a:	4b39      	ldr	r3, [pc, #228]	; (800b530 <USBD_CDC_Init+0x1e8>)
 800b44c:	7819      	ldrb	r1, [r3, #0]
 800b44e:	2340      	movs	r3, #64	; 0x40
 800b450:	2202      	movs	r2, #2
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f005 feb5 	bl	80111c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b458:	4b35      	ldr	r3, [pc, #212]	; (800b530 <USBD_CDC_Init+0x1e8>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	f003 020f 	and.w	r2, r3, #15
 800b460:	6879      	ldr	r1, [r7, #4]
 800b462:	4613      	mov	r3, r2
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	4413      	add	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	440b      	add	r3, r1
 800b46c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b470:	2201      	movs	r2, #1
 800b472:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b474:	4b2f      	ldr	r3, [pc, #188]	; (800b534 <USBD_CDC_Init+0x1ec>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	f003 020f 	and.w	r2, r3, #15
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	4613      	mov	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	440b      	add	r3, r1
 800b488:	3326      	adds	r3, #38	; 0x26
 800b48a:	2210      	movs	r2, #16
 800b48c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b48e:	4b29      	ldr	r3, [pc, #164]	; (800b534 <USBD_CDC_Init+0x1ec>)
 800b490:	7819      	ldrb	r1, [r3, #0]
 800b492:	2308      	movs	r3, #8
 800b494:	2203      	movs	r2, #3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f005 fe93 	bl	80111c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b49c:	4b25      	ldr	r3, [pc, #148]	; (800b534 <USBD_CDC_Init+0x1ec>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f003 020f 	and.w	r2, r3, #15
 800b4a4:	6879      	ldr	r1, [r7, #4]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	440b      	add	r3, r1
 800b4b0:	3324      	adds	r3, #36	; 0x24
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	33b0      	adds	r3, #176	; 0xb0
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4413      	add	r3, r2
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e018      	b.n	800b522 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	7c1b      	ldrb	r3, [r3, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10a      	bne.n	800b50e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4f8:	4b0d      	ldr	r3, [pc, #52]	; (800b530 <USBD_CDC_Init+0x1e8>)
 800b4fa:	7819      	ldrb	r1, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b502:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f005 ff4a 	bl	80113a0 <USBD_LL_PrepareReceive>
 800b50c:	e008      	b.n	800b520 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b50e:	4b08      	ldr	r3, [pc, #32]	; (800b530 <USBD_CDC_Init+0x1e8>)
 800b510:	7819      	ldrb	r1, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b518:	2340      	movs	r3, #64	; 0x40
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f005 ff40 	bl	80113a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	200000a7 	.word	0x200000a7
 800b530:	200000a8 	.word	0x200000a8
 800b534:	200000a9 	.word	0x200000a9

0800b538 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b544:	4b3a      	ldr	r3, [pc, #232]	; (800b630 <USBD_CDC_DeInit+0xf8>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f005 fe5f 	bl	801120e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b550:	4b37      	ldr	r3, [pc, #220]	; (800b630 <USBD_CDC_DeInit+0xf8>)
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	f003 020f 	and.w	r2, r3, #15
 800b558:	6879      	ldr	r1, [r7, #4]
 800b55a:	4613      	mov	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	440b      	add	r3, r1
 800b564:	3324      	adds	r3, #36	; 0x24
 800b566:	2200      	movs	r2, #0
 800b568:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b56a:	4b32      	ldr	r3, [pc, #200]	; (800b634 <USBD_CDC_DeInit+0xfc>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f005 fe4c 	bl	801120e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b576:	4b2f      	ldr	r3, [pc, #188]	; (800b634 <USBD_CDC_DeInit+0xfc>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f003 020f 	and.w	r2, r3, #15
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	4613      	mov	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	440b      	add	r3, r1
 800b58a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b58e:	2200      	movs	r2, #0
 800b590:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b592:	4b29      	ldr	r3, [pc, #164]	; (800b638 <USBD_CDC_DeInit+0x100>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	4619      	mov	r1, r3
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f005 fe38 	bl	801120e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b59e:	4b26      	ldr	r3, [pc, #152]	; (800b638 <USBD_CDC_DeInit+0x100>)
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	f003 020f 	and.w	r2, r3, #15
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	440b      	add	r3, r1
 800b5b2:	3324      	adds	r3, #36	; 0x24
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b5b8:	4b1f      	ldr	r3, [pc, #124]	; (800b638 <USBD_CDC_DeInit+0x100>)
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	f003 020f 	and.w	r2, r3, #15
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	440b      	add	r3, r1
 800b5cc:	3326      	adds	r3, #38	; 0x26
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	32b0      	adds	r2, #176	; 0xb0
 800b5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d01f      	beq.n	800b624 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	33b0      	adds	r3, #176	; 0xb0
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	32b0      	adds	r2, #176	; 0xb0
 800b602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b606:	4618      	mov	r0, r3
 800b608:	f005 ff5a 	bl	80114c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	32b0      	adds	r2, #176	; 0xb0
 800b616:	2100      	movs	r1, #0
 800b618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200000a7 	.word	0x200000a7
 800b634:	200000a8 	.word	0x200000a8
 800b638:	200000a9 	.word	0x200000a9

0800b63c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	32b0      	adds	r2, #176	; 0xb0
 800b650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b654:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b656:	2300      	movs	r3, #0
 800b658:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b65a:	2300      	movs	r3, #0
 800b65c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b65e:	2300      	movs	r3, #0
 800b660:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b668:	2303      	movs	r3, #3
 800b66a:	e0bf      	b.n	800b7ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b674:	2b00      	cmp	r3, #0
 800b676:	d050      	beq.n	800b71a <USBD_CDC_Setup+0xde>
 800b678:	2b20      	cmp	r3, #32
 800b67a:	f040 80af 	bne.w	800b7dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	88db      	ldrh	r3, [r3, #6]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d03a      	beq.n	800b6fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	b25b      	sxtb	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	da1b      	bge.n	800b6c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	33b0      	adds	r3, #176	; 0xb0
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4413      	add	r3, r2
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b6a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	88d2      	ldrh	r2, [r2, #6]
 800b6ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	88db      	ldrh	r3, [r3, #6]
 800b6b2:	2b07      	cmp	r3, #7
 800b6b4:	bf28      	it	cs
 800b6b6:	2307      	movcs	r3, #7
 800b6b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	89fa      	ldrh	r2, [r7, #14]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f001 fdb3 	bl	800d22c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b6c6:	e090      	b.n	800b7ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	785a      	ldrb	r2, [r3, #1]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	88db      	ldrh	r3, [r3, #6]
 800b6d6:	2b3f      	cmp	r3, #63	; 0x3f
 800b6d8:	d803      	bhi.n	800b6e2 <USBD_CDC_Setup+0xa6>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	88db      	ldrh	r3, [r3, #6]
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	e000      	b.n	800b6e4 <USBD_CDC_Setup+0xa8>
 800b6e2:	2240      	movs	r2, #64	; 0x40
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b6ea:	6939      	ldr	r1, [r7, #16]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f001 fdc5 	bl	800d284 <USBD_CtlPrepareRx>
      break;
 800b6fa:	e076      	b.n	800b7ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	33b0      	adds	r3, #176	; 0xb0
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	7850      	ldrb	r0, [r2, #1]
 800b712:	2200      	movs	r2, #0
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	4798      	blx	r3
      break;
 800b718:	e067      	b.n	800b7ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	785b      	ldrb	r3, [r3, #1]
 800b71e:	2b0b      	cmp	r3, #11
 800b720:	d851      	bhi.n	800b7c6 <USBD_CDC_Setup+0x18a>
 800b722:	a201      	add	r2, pc, #4	; (adr r2, 800b728 <USBD_CDC_Setup+0xec>)
 800b724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b728:	0800b759 	.word	0x0800b759
 800b72c:	0800b7d5 	.word	0x0800b7d5
 800b730:	0800b7c7 	.word	0x0800b7c7
 800b734:	0800b7c7 	.word	0x0800b7c7
 800b738:	0800b7c7 	.word	0x0800b7c7
 800b73c:	0800b7c7 	.word	0x0800b7c7
 800b740:	0800b7c7 	.word	0x0800b7c7
 800b744:	0800b7c7 	.word	0x0800b7c7
 800b748:	0800b7c7 	.word	0x0800b7c7
 800b74c:	0800b7c7 	.word	0x0800b7c7
 800b750:	0800b783 	.word	0x0800b783
 800b754:	0800b7ad 	.word	0x0800b7ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b03      	cmp	r3, #3
 800b762:	d107      	bne.n	800b774 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b764:	f107 030a 	add.w	r3, r7, #10
 800b768:	2202      	movs	r2, #2
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f001 fd5d 	bl	800d22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b772:	e032      	b.n	800b7da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b774:	6839      	ldr	r1, [r7, #0]
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f001 fce7 	bl	800d14a <USBD_CtlError>
            ret = USBD_FAIL;
 800b77c:	2303      	movs	r3, #3
 800b77e:	75fb      	strb	r3, [r7, #23]
          break;
 800b780:	e02b      	b.n	800b7da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d107      	bne.n	800b79e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b78e:	f107 030d 	add.w	r3, r7, #13
 800b792:	2201      	movs	r2, #1
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f001 fd48 	bl	800d22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b79c:	e01d      	b.n	800b7da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 fcd2 	bl	800d14a <USBD_CtlError>
            ret = USBD_FAIL;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b7aa:	e016      	b.n	800b7da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b03      	cmp	r3, #3
 800b7b6:	d00f      	beq.n	800b7d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f001 fcc5 	bl	800d14a <USBD_CtlError>
            ret = USBD_FAIL;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b7c4:	e008      	b.n	800b7d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b7c6:	6839      	ldr	r1, [r7, #0]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 fcbe 	bl	800d14a <USBD_CtlError>
          ret = USBD_FAIL;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b7d2:	e002      	b.n	800b7da <USBD_CDC_Setup+0x19e>
          break;
 800b7d4:	bf00      	nop
 800b7d6:	e008      	b.n	800b7ea <USBD_CDC_Setup+0x1ae>
          break;
 800b7d8:	bf00      	nop
      }
      break;
 800b7da:	e006      	b.n	800b7ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f001 fcb3 	bl	800d14a <USBD_CtlError>
      ret = USBD_FAIL;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7e8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b806:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	32b0      	adds	r2, #176	; 0xb0
 800b812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d101      	bne.n	800b81e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b81a:	2303      	movs	r3, #3
 800b81c:	e065      	b.n	800b8ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	32b0      	adds	r2, #176	; 0xb0
 800b828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	f003 020f 	and.w	r2, r3, #15
 800b834:	6879      	ldr	r1, [r7, #4]
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	440b      	add	r3, r1
 800b840:	3318      	adds	r3, #24
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d02f      	beq.n	800b8a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b848:	78fb      	ldrb	r3, [r7, #3]
 800b84a:	f003 020f 	and.w	r2, r3, #15
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	440b      	add	r3, r1
 800b85a:	3318      	adds	r3, #24
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	78fb      	ldrb	r3, [r7, #3]
 800b860:	f003 010f 	and.w	r1, r3, #15
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	460b      	mov	r3, r1
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	440b      	add	r3, r1
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4403      	add	r3, r0
 800b870:	3348      	adds	r3, #72	; 0x48
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	fbb2 f1f3 	udiv	r1, r2, r3
 800b878:	fb01 f303 	mul.w	r3, r1, r3
 800b87c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d112      	bne.n	800b8a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b882:	78fb      	ldrb	r3, [r7, #3]
 800b884:	f003 020f 	and.w	r2, r3, #15
 800b888:	6879      	ldr	r1, [r7, #4]
 800b88a:	4613      	mov	r3, r2
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	4413      	add	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	440b      	add	r3, r1
 800b894:	3318      	adds	r3, #24
 800b896:	2200      	movs	r2, #0
 800b898:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b89a:	78f9      	ldrb	r1, [r7, #3]
 800b89c:	2300      	movs	r3, #0
 800b89e:	2200      	movs	r2, #0
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f005 fd5c 	bl	801135e <USBD_LL_Transmit>
 800b8a6:	e01f      	b.n	800b8e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	33b0      	adds	r3, #176	; 0xb0
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4413      	add	r3, r2
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d010      	beq.n	800b8e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	33b0      	adds	r3, #176	; 0xb0
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b8e4:	78fa      	ldrb	r2, [r7, #3]
 800b8e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b084      	sub	sp, #16
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	32b0      	adds	r2, #176	; 0xb0
 800b908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b90c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	32b0      	adds	r2, #176	; 0xb0
 800b918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d101      	bne.n	800b924 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b920:	2303      	movs	r3, #3
 800b922:	e01a      	b.n	800b95a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b924:	78fb      	ldrb	r3, [r7, #3]
 800b926:	4619      	mov	r1, r3
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f005 fd5a 	bl	80113e2 <USBD_LL_GetRxDataSize>
 800b92e:	4602      	mov	r2, r0
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	33b0      	adds	r3, #176	; 0xb0
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	4413      	add	r3, r2
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b954:	4611      	mov	r1, r2
 800b956:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b084      	sub	sp, #16
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	32b0      	adds	r2, #176	; 0xb0
 800b974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b978:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b980:	2303      	movs	r3, #3
 800b982:	e025      	b.n	800b9d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	33b0      	adds	r3, #176	; 0xb0
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d01a      	beq.n	800b9ce <USBD_CDC_EP0_RxReady+0x6c>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b99e:	2bff      	cmp	r3, #255	; 0xff
 800b9a0:	d015      	beq.n	800b9ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	33b0      	adds	r3, #176	; 0xb0
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b9ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b9c2:	b292      	uxth	r2, r2
 800b9c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	22ff      	movs	r2, #255	; 0xff
 800b9ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b9ce:	2300      	movs	r3, #0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b086      	sub	sp, #24
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b9e0:	2182      	movs	r1, #130	; 0x82
 800b9e2:	4818      	ldr	r0, [pc, #96]	; (800ba44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b9e4:	f000 fd4f 	bl	800c486 <USBD_GetEpDesc>
 800b9e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	4815      	ldr	r0, [pc, #84]	; (800ba44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b9ee:	f000 fd4a 	bl	800c486 <USBD_GetEpDesc>
 800b9f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b9f4:	2181      	movs	r1, #129	; 0x81
 800b9f6:	4813      	ldr	r0, [pc, #76]	; (800ba44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b9f8:	f000 fd45 	bl	800c486 <USBD_GetEpDesc>
 800b9fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2210      	movs	r2, #16
 800ba08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d006      	beq.n	800ba1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba18:	711a      	strb	r2, [r3, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d006      	beq.n	800ba32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba2c:	711a      	strb	r2, [r3, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2243      	movs	r2, #67	; 0x43
 800ba36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ba38:	4b02      	ldr	r3, [pc, #8]	; (800ba44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3718      	adds	r7, #24
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20000064 	.word	0x20000064

0800ba48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b086      	sub	sp, #24
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ba50:	2182      	movs	r1, #130	; 0x82
 800ba52:	4818      	ldr	r0, [pc, #96]	; (800bab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba54:	f000 fd17 	bl	800c486 <USBD_GetEpDesc>
 800ba58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	4815      	ldr	r0, [pc, #84]	; (800bab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba5e:	f000 fd12 	bl	800c486 <USBD_GetEpDesc>
 800ba62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ba64:	2181      	movs	r1, #129	; 0x81
 800ba66:	4813      	ldr	r0, [pc, #76]	; (800bab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ba68:	f000 fd0d 	bl	800c486 <USBD_GetEpDesc>
 800ba6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2210      	movs	r2, #16
 800ba78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d006      	beq.n	800ba8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	2200      	movs	r2, #0
 800ba84:	711a      	strb	r2, [r3, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f042 0202 	orr.w	r2, r2, #2
 800ba8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d006      	beq.n	800baa2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	711a      	strb	r2, [r3, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f042 0202 	orr.w	r2, r2, #2
 800baa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2243      	movs	r2, #67	; 0x43
 800baa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800baa8:	4b02      	ldr	r3, [pc, #8]	; (800bab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3718      	adds	r7, #24
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20000064 	.word	0x20000064

0800bab8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bac0:	2182      	movs	r1, #130	; 0x82
 800bac2:	4818      	ldr	r0, [pc, #96]	; (800bb24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bac4:	f000 fcdf 	bl	800c486 <USBD_GetEpDesc>
 800bac8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800baca:	2101      	movs	r1, #1
 800bacc:	4815      	ldr	r0, [pc, #84]	; (800bb24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bace:	f000 fcda 	bl	800c486 <USBD_GetEpDesc>
 800bad2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bad4:	2181      	movs	r1, #129	; 0x81
 800bad6:	4813      	ldr	r0, [pc, #76]	; (800bb24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bad8:	f000 fcd5 	bl	800c486 <USBD_GetEpDesc>
 800badc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	2210      	movs	r2, #16
 800bae8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d006      	beq.n	800bafe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	2200      	movs	r2, #0
 800baf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800baf8:	711a      	strb	r2, [r3, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d006      	beq.n	800bb12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb0c:	711a      	strb	r2, [r3, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2243      	movs	r2, #67	; 0x43
 800bb16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20000064 	.word	0x20000064

0800bb28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	220a      	movs	r2, #10
 800bb34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bb36:	4b03      	ldr	r3, [pc, #12]	; (800bb44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	370c      	adds	r7, #12
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	20000020 	.word	0x20000020

0800bb48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d101      	bne.n	800bb5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e009      	b.n	800bb70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	33b0      	adds	r3, #176	; 0xb0
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4413      	add	r3, r2
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	32b0      	adds	r2, #176	; 0xb0
 800bb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb96:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d101      	bne.n	800bba2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e008      	b.n	800bbb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	371c      	adds	r7, #28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	32b0      	adds	r2, #176	; 0xb0
 800bbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d101      	bne.n	800bbe4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e004      	b.n	800bbee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
	...

0800bbfc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	32b0      	adds	r2, #176	; 0xb0
 800bc0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc12:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800bc14:	2301      	movs	r3, #1
 800bc16:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	32b0      	adds	r2, #176	; 0xb0
 800bc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e025      	b.n	800bc7a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d11f      	bne.n	800bc78 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bc40:	4b10      	ldr	r3, [pc, #64]	; (800bc84 <USBD_CDC_TransmitPacket+0x88>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	f003 020f 	and.w	r2, r3, #15
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	4613      	mov	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4413      	add	r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	4403      	add	r3, r0
 800bc5a:	3318      	adds	r3, #24
 800bc5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bc5e:	4b09      	ldr	r3, [pc, #36]	; (800bc84 <USBD_CDC_TransmitPacket+0x88>)
 800bc60:	7819      	ldrb	r1, [r3, #0]
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f005 fb75 	bl	801135e <USBD_LL_Transmit>

    ret = USBD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	200000a7 	.word	0x200000a7

0800bc88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	32b0      	adds	r2, #176	; 0xb0
 800bc9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	32b0      	adds	r2, #176	; 0xb0
 800bcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bcb2:	2303      	movs	r3, #3
 800bcb4:	e018      	b.n	800bce8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	7c1b      	ldrb	r3, [r3, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10a      	bne.n	800bcd4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcbe:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <USBD_CDC_ReceivePacket+0x68>)
 800bcc0:	7819      	ldrb	r1, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f005 fb67 	bl	80113a0 <USBD_LL_PrepareReceive>
 800bcd2:	e008      	b.n	800bce6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <USBD_CDC_ReceivePacket+0x68>)
 800bcd6:	7819      	ldrb	r1, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcde:	2340      	movs	r3, #64	; 0x40
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f005 fb5d 	bl	80113a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3710      	adds	r7, #16
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	200000a8 	.word	0x200000a8

0800bcf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e01f      	b.n	800bd4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	79fa      	ldrb	r2, [r7, #7]
 800bd3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f005 f9d7 	bl	80110f4 <USBD_LL_Init>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3718      	adds	r7, #24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d101      	bne.n	800bd6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e025      	b.n	800bdb8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	32ae      	adds	r2, #174	; 0xae
 800bd7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00f      	beq.n	800bda8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	32ae      	adds	r2, #174	; 0xae
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	f107 020e 	add.w	r2, r7, #14
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	4798      	blx	r3
 800bda0:	4602      	mov	r2, r0
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f005 f9df 	bl	801118c <USBD_LL_Start>
 800bdce:	4603      	mov	r3, r0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b084      	sub	sp, #16
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	78fa      	ldrb	r2, [r7, #3]
 800be12:	4611      	mov	r1, r2
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	6078      	str	r0, [r7, #4]
 800be2e:	460b      	mov	r3, r1
 800be30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	78fa      	ldrb	r2, [r7, #3]
 800be40:	4611      	mov	r1, r2
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	4798      	blx	r3
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800be4c:	2303      	movs	r3, #3
 800be4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800be5a:	b580      	push	{r7, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f001 f932 	bl	800d0d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800be80:	461a      	mov	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800be8e:	f003 031f 	and.w	r3, r3, #31
 800be92:	2b02      	cmp	r3, #2
 800be94:	d01a      	beq.n	800becc <USBD_LL_SetupStage+0x72>
 800be96:	2b02      	cmp	r3, #2
 800be98:	d822      	bhi.n	800bee0 <USBD_LL_SetupStage+0x86>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d002      	beq.n	800bea4 <USBD_LL_SetupStage+0x4a>
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d00a      	beq.n	800beb8 <USBD_LL_SetupStage+0x5e>
 800bea2:	e01d      	b.n	800bee0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800beaa:	4619      	mov	r1, r3
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f000 fb5f 	bl	800c570 <USBD_StdDevReq>
 800beb2:	4603      	mov	r3, r0
 800beb4:	73fb      	strb	r3, [r7, #15]
      break;
 800beb6:	e020      	b.n	800befa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bebe:	4619      	mov	r1, r3
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fbc7 	bl	800c654 <USBD_StdItfReq>
 800bec6:	4603      	mov	r3, r0
 800bec8:	73fb      	strb	r3, [r7, #15]
      break;
 800beca:	e016      	b.n	800befa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bed2:	4619      	mov	r1, r3
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fc29 	bl	800c72c <USBD_StdEPReq>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]
      break;
 800bede:	e00c      	b.n	800befa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800beea:	b2db      	uxtb	r3, r3
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f005 f9ac 	bl	801124c <USBD_LL_StallEP>
 800bef4:	4603      	mov	r3, r0
 800bef6:	73fb      	strb	r3, [r7, #15]
      break;
 800bef8:	bf00      	nop
  }

  return ret;
 800befa:	7bfb      	ldrb	r3, [r7, #15]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bf16:	7afb      	ldrb	r3, [r7, #11]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d16e      	bne.n	800bffa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bf22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bf2a:	2b03      	cmp	r3, #3
 800bf2c:	f040 8098 	bne.w	800c060 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	689a      	ldr	r2, [r3, #8]
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d913      	bls.n	800bf64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	689a      	ldr	r2, [r3, #8]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	1ad2      	subs	r2, r2, r3
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	4293      	cmp	r3, r2
 800bf54:	bf28      	it	cs
 800bf56:	4613      	movcs	r3, r2
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6879      	ldr	r1, [r7, #4]
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f001 f9ae 	bl	800d2be <USBD_CtlContinueRx>
 800bf62:	e07d      	b.n	800c060 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bf6a:	f003 031f 	and.w	r3, r3, #31
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d014      	beq.n	800bf9c <USBD_LL_DataOutStage+0x98>
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d81d      	bhi.n	800bfb2 <USBD_LL_DataOutStage+0xae>
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <USBD_LL_DataOutStage+0x7c>
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d003      	beq.n	800bf86 <USBD_LL_DataOutStage+0x82>
 800bf7e:	e018      	b.n	800bfb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bf80:	2300      	movs	r3, #0
 800bf82:	75bb      	strb	r3, [r7, #22]
            break;
 800bf84:	e018      	b.n	800bfb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	4619      	mov	r1, r3
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 fa5e 	bl	800c452 <USBD_CoreFindIF>
 800bf96:	4603      	mov	r3, r0
 800bf98:	75bb      	strb	r3, [r7, #22]
            break;
 800bf9a:	e00d      	b.n	800bfb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bfa2:	b2db      	uxtb	r3, r3
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f000 fa60 	bl	800c46c <USBD_CoreFindEP>
 800bfac:	4603      	mov	r3, r0
 800bfae:	75bb      	strb	r3, [r7, #22]
            break;
 800bfb0:	e002      	b.n	800bfb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75bb      	strb	r3, [r7, #22]
            break;
 800bfb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bfb8:	7dbb      	ldrb	r3, [r7, #22]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d119      	bne.n	800bff2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b03      	cmp	r3, #3
 800bfc8:	d113      	bne.n	800bff2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bfca:	7dba      	ldrb	r2, [r7, #22]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	32ae      	adds	r2, #174	; 0xae
 800bfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00b      	beq.n	800bff2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bfda:	7dba      	ldrb	r2, [r7, #22]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bfe2:	7dba      	ldrb	r2, [r7, #22]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	32ae      	adds	r2, #174	; 0xae
 800bfe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f001 f974 	bl	800d2e0 <USBD_CtlSendStatus>
 800bff8:	e032      	b.n	800c060 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bffa:	7afb      	ldrb	r3, [r7, #11]
 800bffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c000:	b2db      	uxtb	r3, r3
 800c002:	4619      	mov	r1, r3
 800c004:	68f8      	ldr	r0, [r7, #12]
 800c006:	f000 fa31 	bl	800c46c <USBD_CoreFindEP>
 800c00a:	4603      	mov	r3, r0
 800c00c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c00e:	7dbb      	ldrb	r3, [r7, #22]
 800c010:	2bff      	cmp	r3, #255	; 0xff
 800c012:	d025      	beq.n	800c060 <USBD_LL_DataOutStage+0x15c>
 800c014:	7dbb      	ldrb	r3, [r7, #22]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d122      	bne.n	800c060 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b03      	cmp	r3, #3
 800c024:	d117      	bne.n	800c056 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c026:	7dba      	ldrb	r2, [r7, #22]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	32ae      	adds	r2, #174	; 0xae
 800c02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00f      	beq.n	800c056 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c036:	7dba      	ldrb	r2, [r7, #22]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c03e:	7dba      	ldrb	r2, [r7, #22]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	32ae      	adds	r2, #174	; 0xae
 800c044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c048:	699b      	ldr	r3, [r3, #24]
 800c04a:	7afa      	ldrb	r2, [r7, #11]
 800c04c:	4611      	mov	r1, r2
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	4798      	blx	r3
 800c052:	4603      	mov	r3, r0
 800c054:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	e000      	b.n	800c062 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b086      	sub	sp, #24
 800c06e:	af00      	add	r7, sp, #0
 800c070:	60f8      	str	r0, [r7, #12]
 800c072:	460b      	mov	r3, r1
 800c074:	607a      	str	r2, [r7, #4]
 800c076:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c078:	7afb      	ldrb	r3, [r7, #11]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d16f      	bne.n	800c15e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	3314      	adds	r3, #20
 800c082:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c08a:	2b02      	cmp	r3, #2
 800c08c:	d15a      	bne.n	800c144 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	689a      	ldr	r2, [r3, #8]
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	429a      	cmp	r2, r3
 800c098:	d914      	bls.n	800c0c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	689a      	ldr	r2, [r3, #8]
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	1ad2      	subs	r2, r2, r3
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	6879      	ldr	r1, [r7, #4]
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f001 f8d6 	bl	800d262 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f005 f96f 	bl	80113a0 <USBD_LL_PrepareReceive>
 800c0c2:	e03f      	b.n	800c144 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	68da      	ldr	r2, [r3, #12]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d11c      	bne.n	800c10a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d316      	bcc.n	800c10a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d20f      	bcs.n	800c10a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f001 f8b7 	bl	800d262 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	2200      	movs	r2, #0
 800c100:	2100      	movs	r1, #0
 800c102:	68f8      	ldr	r0, [r7, #12]
 800c104:	f005 f94c 	bl	80113a0 <USBD_LL_PrepareReceive>
 800c108:	e01c      	b.n	800c144 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c110:	b2db      	uxtb	r3, r3
 800c112:	2b03      	cmp	r3, #3
 800c114:	d10f      	bne.n	800c136 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d009      	beq.n	800c136 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c136:	2180      	movs	r1, #128	; 0x80
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f005 f887 	bl	801124c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f001 f8e1 	bl	800d306 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d03a      	beq.n	800c1c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c14e:	68f8      	ldr	r0, [r7, #12]
 800c150:	f7ff fe42 	bl	800bdd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c15c:	e032      	b.n	800c1c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c15e:	7afb      	ldrb	r3, [r7, #11]
 800c160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c164:	b2db      	uxtb	r3, r3
 800c166:	4619      	mov	r1, r3
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f000 f97f 	bl	800c46c <USBD_CoreFindEP>
 800c16e:	4603      	mov	r3, r0
 800c170:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c172:	7dfb      	ldrb	r3, [r7, #23]
 800c174:	2bff      	cmp	r3, #255	; 0xff
 800c176:	d025      	beq.n	800c1c4 <USBD_LL_DataInStage+0x15a>
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d122      	bne.n	800c1c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b03      	cmp	r3, #3
 800c188:	d11c      	bne.n	800c1c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c18a:	7dfa      	ldrb	r2, [r7, #23]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	32ae      	adds	r2, #174	; 0xae
 800c190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c194:	695b      	ldr	r3, [r3, #20]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d014      	beq.n	800c1c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c19a:	7dfa      	ldrb	r2, [r7, #23]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c1a2:	7dfa      	ldrb	r2, [r7, #23]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	32ae      	adds	r2, #174	; 0xae
 800c1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	7afa      	ldrb	r2, [r7, #11]
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	4798      	blx	r3
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c1ba:	7dbb      	ldrb	r3, [r7, #22]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d001      	beq.n	800c1c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c1c0:	7dbb      	ldrb	r3, [r7, #22]
 800c1c2:	e000      	b.n	800c1c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b084      	sub	sp, #16
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c206:	2b00      	cmp	r3, #0
 800c208:	d014      	beq.n	800c234 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00e      	beq.n	800c234 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6852      	ldr	r2, [r2, #4]
 800c222:	b2d2      	uxtb	r2, r2
 800c224:	4611      	mov	r1, r2
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	4798      	blx	r3
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d001      	beq.n	800c234 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c230:	2303      	movs	r3, #3
 800c232:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c234:	2340      	movs	r3, #64	; 0x40
 800c236:	2200      	movs	r2, #0
 800c238:	2100      	movs	r1, #0
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f004 ffc1 	bl	80111c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2201      	movs	r2, #1
 800c244:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2240      	movs	r2, #64	; 0x40
 800c24c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c250:	2340      	movs	r3, #64	; 0x40
 800c252:	2200      	movs	r2, #0
 800c254:	2180      	movs	r1, #128	; 0x80
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f004 ffb3 	bl	80111c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2240      	movs	r2, #64	; 0x40
 800c266:	621a      	str	r2, [r3, #32]

  return ret;
 800c268:	7bfb      	ldrb	r3, [r7, #15]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	460b      	mov	r3, r1
 800c27c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	78fa      	ldrb	r2, [r7, #3]
 800c282:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	370c      	adds	r7, #12
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr

0800c292 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c292:	b480      	push	{r7}
 800c294:	b083      	sub	sp, #12
 800c296:	af00      	add	r7, sp, #0
 800c298:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2a0:	b2da      	uxtb	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr

0800c2be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c2be:	b480      	push	{r7}
 800c2c0:	b083      	sub	sp, #12
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d106      	bne.n	800c2e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b082      	sub	sp, #8
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	d110      	bne.n	800c324 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c312:	69db      	ldr	r3, [r3, #28]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d005      	beq.n	800c324 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	3708      	adds	r7, #8
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b082      	sub	sp, #8
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	460b      	mov	r3, r1
 800c338:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	32ae      	adds	r2, #174	; 0xae
 800c344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c34c:	2303      	movs	r3, #3
 800c34e:	e01c      	b.n	800c38a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b03      	cmp	r3, #3
 800c35a:	d115      	bne.n	800c388 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	32ae      	adds	r2, #174	; 0xae
 800c366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36a:	6a1b      	ldr	r3, [r3, #32]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	32ae      	adds	r2, #174	; 0xae
 800c37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	78fa      	ldrb	r2, [r7, #3]
 800c382:	4611      	mov	r1, r2
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	460b      	mov	r3, r1
 800c39c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	32ae      	adds	r2, #174	; 0xae
 800c3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e01c      	b.n	800c3ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	2b03      	cmp	r3, #3
 800c3be:	d115      	bne.n	800c3ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	32ae      	adds	r2, #174	; 0xae
 800c3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00b      	beq.n	800c3ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	32ae      	adds	r2, #174	; 0xae
 800c3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3e4:	78fa      	ldrb	r2, [r7, #3]
 800c3e6:	4611      	mov	r1, r2
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b083      	sub	sp, #12
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00e      	beq.n	800c448 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	6852      	ldr	r2, [r2, #4]
 800c436:	b2d2      	uxtb	r2, r2
 800c438:	4611      	mov	r1, r2
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	4798      	blx	r3
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c444:	2303      	movs	r3, #3
 800c446:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c448:	7bfb      	ldrb	r3, [r7, #15]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}

0800c452 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c452:	b480      	push	{r7}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	460b      	mov	r3, r1
 800c45c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c45e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c460:	4618      	mov	r0, r3
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	460b      	mov	r3, r1
 800c476:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c478:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	370c      	adds	r7, #12
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b086      	sub	sp, #24
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	460b      	mov	r3, r1
 800c490:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c49a:	2300      	movs	r3, #0
 800c49c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	885b      	ldrh	r3, [r3, #2]
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d920      	bls.n	800c4f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c4b6:	e013      	b.n	800c4e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c4b8:	f107 030a 	add.w	r3, r7, #10
 800c4bc:	4619      	mov	r1, r3
 800c4be:	6978      	ldr	r0, [r7, #20]
 800c4c0:	f000 f81b 	bl	800c4fa <USBD_GetNextDesc>
 800c4c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	785b      	ldrb	r3, [r3, #1]
 800c4ca:	2b05      	cmp	r3, #5
 800c4cc:	d108      	bne.n	800c4e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	789b      	ldrb	r3, [r3, #2]
 800c4d6:	78fa      	ldrb	r2, [r7, #3]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d008      	beq.n	800c4ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	885b      	ldrh	r3, [r3, #2]
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	897b      	ldrh	r3, [r7, #10]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d8e5      	bhi.n	800c4b8 <USBD_GetEpDesc+0x32>
 800c4ec:	e000      	b.n	800c4f0 <USBD_GetEpDesc+0x6a>
          break;
 800c4ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c4f0:	693b      	ldr	r3, [r7, #16]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c4fa:	b480      	push	{r7}
 800c4fc:	b085      	sub	sp, #20
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	881a      	ldrh	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	b29b      	uxth	r3, r3
 800c512:	4413      	add	r3, r2
 800c514:	b29a      	uxth	r2, r3
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4413      	add	r3, r2
 800c524:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c526:	68fb      	ldr	r3, [r7, #12]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c534:	b480      	push	{r7}
 800c536:	b087      	sub	sp, #28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	3301      	adds	r3, #1
 800c54a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c552:	8a3b      	ldrh	r3, [r7, #16]
 800c554:	021b      	lsls	r3, r3, #8
 800c556:	b21a      	sxth	r2, r3
 800c558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	b21b      	sxth	r3, r3
 800c560:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c562:	89fb      	ldrh	r3, [r7, #14]
}
 800c564:	4618      	mov	r0, r3
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c57a:	2300      	movs	r3, #0
 800c57c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c586:	2b40      	cmp	r3, #64	; 0x40
 800c588:	d005      	beq.n	800c596 <USBD_StdDevReq+0x26>
 800c58a:	2b40      	cmp	r3, #64	; 0x40
 800c58c:	d857      	bhi.n	800c63e <USBD_StdDevReq+0xce>
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00f      	beq.n	800c5b2 <USBD_StdDevReq+0x42>
 800c592:	2b20      	cmp	r3, #32
 800c594:	d153      	bne.n	800c63e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	32ae      	adds	r2, #174	; 0xae
 800c5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	6839      	ldr	r1, [r7, #0]
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	4798      	blx	r3
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c5b0:	e04a      	b.n	800c648 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	2b09      	cmp	r3, #9
 800c5b8:	d83b      	bhi.n	800c632 <USBD_StdDevReq+0xc2>
 800c5ba:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <USBD_StdDevReq+0x50>)
 800c5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5c0:	0800c615 	.word	0x0800c615
 800c5c4:	0800c629 	.word	0x0800c629
 800c5c8:	0800c633 	.word	0x0800c633
 800c5cc:	0800c61f 	.word	0x0800c61f
 800c5d0:	0800c633 	.word	0x0800c633
 800c5d4:	0800c5f3 	.word	0x0800c5f3
 800c5d8:	0800c5e9 	.word	0x0800c5e9
 800c5dc:	0800c633 	.word	0x0800c633
 800c5e0:	0800c60b 	.word	0x0800c60b
 800c5e4:	0800c5fd 	.word	0x0800c5fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c5e8:	6839      	ldr	r1, [r7, #0]
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fa3c 	bl	800ca68 <USBD_GetDescriptor>
          break;
 800c5f0:	e024      	b.n	800c63c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 fbcb 	bl	800cd90 <USBD_SetAddress>
          break;
 800c5fa:	e01f      	b.n	800c63c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 fc0a 	bl	800ce18 <USBD_SetConfig>
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
          break;
 800c608:	e018      	b.n	800c63c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 fcad 	bl	800cf6c <USBD_GetConfig>
          break;
 800c612:	e013      	b.n	800c63c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fcde 	bl	800cfd8 <USBD_GetStatus>
          break;
 800c61c:	e00e      	b.n	800c63c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fd0d 	bl	800d040 <USBD_SetFeature>
          break;
 800c626:	e009      	b.n	800c63c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fd31 	bl	800d092 <USBD_ClrFeature>
          break;
 800c630:	e004      	b.n	800c63c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c632:	6839      	ldr	r1, [r7, #0]
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fd88 	bl	800d14a <USBD_CtlError>
          break;
 800c63a:	bf00      	nop
      }
      break;
 800c63c:	e004      	b.n	800c648 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fd82 	bl	800d14a <USBD_CtlError>
      break;
 800c646:	bf00      	nop
  }

  return ret;
 800c648:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop

0800c654 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c66a:	2b40      	cmp	r3, #64	; 0x40
 800c66c:	d005      	beq.n	800c67a <USBD_StdItfReq+0x26>
 800c66e:	2b40      	cmp	r3, #64	; 0x40
 800c670:	d852      	bhi.n	800c718 <USBD_StdItfReq+0xc4>
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <USBD_StdItfReq+0x26>
 800c676:	2b20      	cmp	r3, #32
 800c678:	d14e      	bne.n	800c718 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c680:	b2db      	uxtb	r3, r3
 800c682:	3b01      	subs	r3, #1
 800c684:	2b02      	cmp	r3, #2
 800c686:	d840      	bhi.n	800c70a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	889b      	ldrh	r3, [r3, #4]
 800c68c:	b2db      	uxtb	r3, r3
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d836      	bhi.n	800c700 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	889b      	ldrh	r3, [r3, #4]
 800c696:	b2db      	uxtb	r3, r3
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff fed9 	bl	800c452 <USBD_CoreFindIF>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	2bff      	cmp	r3, #255	; 0xff
 800c6a8:	d01d      	beq.n	800c6e6 <USBD_StdItfReq+0x92>
 800c6aa:	7bbb      	ldrb	r3, [r7, #14]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d11a      	bne.n	800c6e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c6b0:	7bba      	ldrb	r2, [r7, #14]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	32ae      	adds	r2, #174	; 0xae
 800c6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00f      	beq.n	800c6e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c6c0:	7bba      	ldrb	r2, [r7, #14]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c6c8:	7bba      	ldrb	r2, [r7, #14]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	32ae      	adds	r2, #174	; 0xae
 800c6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	4798      	blx	r3
 800c6da:	4603      	mov	r3, r0
 800c6dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c6de:	e004      	b.n	800c6ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c6e0:	2303      	movs	r3, #3
 800c6e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c6e4:	e001      	b.n	800c6ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	88db      	ldrh	r3, [r3, #6]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d110      	bne.n	800c714 <USBD_StdItfReq+0xc0>
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10d      	bne.n	800c714 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f000 fdf1 	bl	800d2e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c6fe:	e009      	b.n	800c714 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fd21 	bl	800d14a <USBD_CtlError>
          break;
 800c708:	e004      	b.n	800c714 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fd1c 	bl	800d14a <USBD_CtlError>
          break;
 800c712:	e000      	b.n	800c716 <USBD_StdItfReq+0xc2>
          break;
 800c714:	bf00      	nop
      }
      break;
 800c716:	e004      	b.n	800c722 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fd15 	bl	800d14a <USBD_CtlError>
      break;
 800c720:	bf00      	nop
  }

  return ret;
 800c722:	7bfb      	ldrb	r3, [r7, #15]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c736:	2300      	movs	r3, #0
 800c738:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	889b      	ldrh	r3, [r3, #4]
 800c73e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c748:	2b40      	cmp	r3, #64	; 0x40
 800c74a:	d007      	beq.n	800c75c <USBD_StdEPReq+0x30>
 800c74c:	2b40      	cmp	r3, #64	; 0x40
 800c74e:	f200 817f 	bhi.w	800ca50 <USBD_StdEPReq+0x324>
 800c752:	2b00      	cmp	r3, #0
 800c754:	d02a      	beq.n	800c7ac <USBD_StdEPReq+0x80>
 800c756:	2b20      	cmp	r3, #32
 800c758:	f040 817a 	bne.w	800ca50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c75c:	7bbb      	ldrb	r3, [r7, #14]
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff fe83 	bl	800c46c <USBD_CoreFindEP>
 800c766:	4603      	mov	r3, r0
 800c768:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c76a:	7b7b      	ldrb	r3, [r7, #13]
 800c76c:	2bff      	cmp	r3, #255	; 0xff
 800c76e:	f000 8174 	beq.w	800ca5a <USBD_StdEPReq+0x32e>
 800c772:	7b7b      	ldrb	r3, [r7, #13]
 800c774:	2b00      	cmp	r3, #0
 800c776:	f040 8170 	bne.w	800ca5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c77a:	7b7a      	ldrb	r2, [r7, #13]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c782:	7b7a      	ldrb	r2, [r7, #13]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	32ae      	adds	r2, #174	; 0xae
 800c788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 8163 	beq.w	800ca5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c794:	7b7a      	ldrb	r2, [r7, #13]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	32ae      	adds	r2, #174	; 0xae
 800c79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	4798      	blx	r3
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c7aa:	e156      	b.n	800ca5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	785b      	ldrb	r3, [r3, #1]
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d008      	beq.n	800c7c6 <USBD_StdEPReq+0x9a>
 800c7b4:	2b03      	cmp	r3, #3
 800c7b6:	f300 8145 	bgt.w	800ca44 <USBD_StdEPReq+0x318>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f000 809b 	beq.w	800c8f6 <USBD_StdEPReq+0x1ca>
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d03c      	beq.n	800c83e <USBD_StdEPReq+0x112>
 800c7c4:	e13e      	b.n	800ca44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d002      	beq.n	800c7d8 <USBD_StdEPReq+0xac>
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d016      	beq.n	800c804 <USBD_StdEPReq+0xd8>
 800c7d6:	e02c      	b.n	800c832 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7d8:	7bbb      	ldrb	r3, [r7, #14]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00d      	beq.n	800c7fa <USBD_StdEPReq+0xce>
 800c7de:	7bbb      	ldrb	r3, [r7, #14]
 800c7e0:	2b80      	cmp	r3, #128	; 0x80
 800c7e2:	d00a      	beq.n	800c7fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f004 fd2f 	bl	801124c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ee:	2180      	movs	r1, #128	; 0x80
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f004 fd2b 	bl	801124c <USBD_LL_StallEP>
 800c7f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c7f8:	e020      	b.n	800c83c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c7fa:	6839      	ldr	r1, [r7, #0]
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 fca4 	bl	800d14a <USBD_CtlError>
              break;
 800c802:	e01b      	b.n	800c83c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	885b      	ldrh	r3, [r3, #2]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10e      	bne.n	800c82a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00b      	beq.n	800c82a <USBD_StdEPReq+0xfe>
 800c812:	7bbb      	ldrb	r3, [r7, #14]
 800c814:	2b80      	cmp	r3, #128	; 0x80
 800c816:	d008      	beq.n	800c82a <USBD_StdEPReq+0xfe>
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	88db      	ldrh	r3, [r3, #6]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d104      	bne.n	800c82a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c820:	7bbb      	ldrb	r3, [r7, #14]
 800c822:	4619      	mov	r1, r3
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f004 fd11 	bl	801124c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f000 fd58 	bl	800d2e0 <USBD_CtlSendStatus>

              break;
 800c830:	e004      	b.n	800c83c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 fc88 	bl	800d14a <USBD_CtlError>
              break;
 800c83a:	bf00      	nop
          }
          break;
 800c83c:	e107      	b.n	800ca4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c844:	b2db      	uxtb	r3, r3
 800c846:	2b02      	cmp	r3, #2
 800c848:	d002      	beq.n	800c850 <USBD_StdEPReq+0x124>
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d016      	beq.n	800c87c <USBD_StdEPReq+0x150>
 800c84e:	e04b      	b.n	800c8e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c850:	7bbb      	ldrb	r3, [r7, #14]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00d      	beq.n	800c872 <USBD_StdEPReq+0x146>
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	2b80      	cmp	r3, #128	; 0x80
 800c85a:	d00a      	beq.n	800c872 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c85c:	7bbb      	ldrb	r3, [r7, #14]
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f004 fcf3 	bl	801124c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c866:	2180      	movs	r1, #128	; 0x80
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f004 fcef 	bl	801124c <USBD_LL_StallEP>
 800c86e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c870:	e040      	b.n	800c8f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 fc68 	bl	800d14a <USBD_CtlError>
              break;
 800c87a:	e03b      	b.n	800c8f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	885b      	ldrh	r3, [r3, #2]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d136      	bne.n	800c8f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c884:	7bbb      	ldrb	r3, [r7, #14]
 800c886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d004      	beq.n	800c898 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c88e:	7bbb      	ldrb	r3, [r7, #14]
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f004 fcf9 	bl	801128a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fd21 	bl	800d2e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7ff fde2 	bl	800c46c <USBD_CoreFindEP>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8ac:	7b7b      	ldrb	r3, [r7, #13]
 800c8ae:	2bff      	cmp	r3, #255	; 0xff
 800c8b0:	d01f      	beq.n	800c8f2 <USBD_StdEPReq+0x1c6>
 800c8b2:	7b7b      	ldrb	r3, [r7, #13]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d11c      	bne.n	800c8f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c8b8:	7b7a      	ldrb	r2, [r7, #13]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c8c0:	7b7a      	ldrb	r2, [r7, #13]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	32ae      	adds	r2, #174	; 0xae
 800c8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ca:	689b      	ldr	r3, [r3, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d010      	beq.n	800c8f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c8d0:	7b7a      	ldrb	r2, [r7, #13]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	32ae      	adds	r2, #174	; 0xae
 800c8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	6839      	ldr	r1, [r7, #0]
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	4798      	blx	r3
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c8e6:	e004      	b.n	800c8f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fc2d 	bl	800d14a <USBD_CtlError>
              break;
 800c8f0:	e000      	b.n	800c8f4 <USBD_StdEPReq+0x1c8>
              break;
 800c8f2:	bf00      	nop
          }
          break;
 800c8f4:	e0ab      	b.n	800ca4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d002      	beq.n	800c908 <USBD_StdEPReq+0x1dc>
 800c902:	2b03      	cmp	r3, #3
 800c904:	d032      	beq.n	800c96c <USBD_StdEPReq+0x240>
 800c906:	e097      	b.n	800ca38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c908:	7bbb      	ldrb	r3, [r7, #14]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d007      	beq.n	800c91e <USBD_StdEPReq+0x1f2>
 800c90e:	7bbb      	ldrb	r3, [r7, #14]
 800c910:	2b80      	cmp	r3, #128	; 0x80
 800c912:	d004      	beq.n	800c91e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fc17 	bl	800d14a <USBD_CtlError>
                break;
 800c91c:	e091      	b.n	800ca42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c91e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c922:	2b00      	cmp	r3, #0
 800c924:	da0b      	bge.n	800c93e <USBD_StdEPReq+0x212>
 800c926:	7bbb      	ldrb	r3, [r7, #14]
 800c928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c92c:	4613      	mov	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4413      	add	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	3310      	adds	r3, #16
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	4413      	add	r3, r2
 800c93a:	3304      	adds	r3, #4
 800c93c:	e00b      	b.n	800c956 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c93e:	7bbb      	ldrb	r3, [r7, #14]
 800c940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c944:	4613      	mov	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	4413      	add	r3, r2
 800c954:	3304      	adds	r3, #4
 800c956:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2200      	movs	r2, #0
 800c95c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	2202      	movs	r2, #2
 800c962:	4619      	mov	r1, r3
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fc61 	bl	800d22c <USBD_CtlSendData>
              break;
 800c96a:	e06a      	b.n	800ca42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c96c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c970:	2b00      	cmp	r3, #0
 800c972:	da11      	bge.n	800c998 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c974:	7bbb      	ldrb	r3, [r7, #14]
 800c976:	f003 020f 	and.w	r2, r3, #15
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	4613      	mov	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	440b      	add	r3, r1
 800c986:	3324      	adds	r3, #36	; 0x24
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d117      	bne.n	800c9be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fbda 	bl	800d14a <USBD_CtlError>
                  break;
 800c996:	e054      	b.n	800ca42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c998:	7bbb      	ldrb	r3, [r7, #14]
 800c99a:	f003 020f 	and.w	r2, r3, #15
 800c99e:	6879      	ldr	r1, [r7, #4]
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	440b      	add	r3, r1
 800c9aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d104      	bne.n	800c9be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fbc7 	bl	800d14a <USBD_CtlError>
                  break;
 800c9bc:	e041      	b.n	800ca42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	da0b      	bge.n	800c9de <USBD_StdEPReq+0x2b2>
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
 800c9c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	3310      	adds	r3, #16
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	4413      	add	r3, r2
 800c9da:	3304      	adds	r3, #4
 800c9dc:	e00b      	b.n	800c9f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c9de:	7bbb      	ldrb	r3, [r7, #14]
 800c9e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c9f8:	7bbb      	ldrb	r3, [r7, #14]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d002      	beq.n	800ca04 <USBD_StdEPReq+0x2d8>
 800c9fe:	7bbb      	ldrb	r3, [r7, #14]
 800ca00:	2b80      	cmp	r3, #128	; 0x80
 800ca02:	d103      	bne.n	800ca0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	2200      	movs	r2, #0
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	e00e      	b.n	800ca2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ca0c:	7bbb      	ldrb	r3, [r7, #14]
 800ca0e:	4619      	mov	r1, r3
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f004 fc59 	bl	80112c8 <USBD_LL_IsStallEP>
 800ca16:	4603      	mov	r3, r0
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d003      	beq.n	800ca24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	601a      	str	r2, [r3, #0]
 800ca22:	e002      	b.n	800ca2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	2200      	movs	r2, #0
 800ca28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fbfb 	bl	800d22c <USBD_CtlSendData>
              break;
 800ca36:	e004      	b.n	800ca42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ca38:	6839      	ldr	r1, [r7, #0]
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fb85 	bl	800d14a <USBD_CtlError>
              break;
 800ca40:	bf00      	nop
          }
          break;
 800ca42:	e004      	b.n	800ca4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ca44:	6839      	ldr	r1, [r7, #0]
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fb7f 	bl	800d14a <USBD_CtlError>
          break;
 800ca4c:	bf00      	nop
      }
      break;
 800ca4e:	e005      	b.n	800ca5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 fb79 	bl	800d14a <USBD_CtlError>
      break;
 800ca58:	e000      	b.n	800ca5c <USBD_StdEPReq+0x330>
      break;
 800ca5a:	bf00      	nop
  }

  return ret;
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
	...

0800ca68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ca72:	2300      	movs	r3, #0
 800ca74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ca76:	2300      	movs	r3, #0
 800ca78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	885b      	ldrh	r3, [r3, #2]
 800ca82:	0a1b      	lsrs	r3, r3, #8
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	3b01      	subs	r3, #1
 800ca88:	2b0e      	cmp	r3, #14
 800ca8a:	f200 8152 	bhi.w	800cd32 <USBD_GetDescriptor+0x2ca>
 800ca8e:	a201      	add	r2, pc, #4	; (adr r2, 800ca94 <USBD_GetDescriptor+0x2c>)
 800ca90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca94:	0800cb05 	.word	0x0800cb05
 800ca98:	0800cb1d 	.word	0x0800cb1d
 800ca9c:	0800cb5d 	.word	0x0800cb5d
 800caa0:	0800cd33 	.word	0x0800cd33
 800caa4:	0800cd33 	.word	0x0800cd33
 800caa8:	0800ccd3 	.word	0x0800ccd3
 800caac:	0800ccff 	.word	0x0800ccff
 800cab0:	0800cd33 	.word	0x0800cd33
 800cab4:	0800cd33 	.word	0x0800cd33
 800cab8:	0800cd33 	.word	0x0800cd33
 800cabc:	0800cd33 	.word	0x0800cd33
 800cac0:	0800cd33 	.word	0x0800cd33
 800cac4:	0800cd33 	.word	0x0800cd33
 800cac8:	0800cd33 	.word	0x0800cd33
 800cacc:	0800cad1 	.word	0x0800cad1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00b      	beq.n	800caf4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	7c12      	ldrb	r2, [r2, #16]
 800cae8:	f107 0108 	add.w	r1, r7, #8
 800caec:	4610      	mov	r0, r2
 800caee:	4798      	blx	r3
 800caf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800caf2:	e126      	b.n	800cd42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800caf4:	6839      	ldr	r1, [r7, #0]
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fb27 	bl	800d14a <USBD_CtlError>
        err++;
 800cafc:	7afb      	ldrb	r3, [r7, #11]
 800cafe:	3301      	adds	r3, #1
 800cb00:	72fb      	strb	r3, [r7, #11]
      break;
 800cb02:	e11e      	b.n	800cd42 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	7c12      	ldrb	r2, [r2, #16]
 800cb10:	f107 0108 	add.w	r1, r7, #8
 800cb14:	4610      	mov	r0, r2
 800cb16:	4798      	blx	r3
 800cb18:	60f8      	str	r0, [r7, #12]
      break;
 800cb1a:	e112      	b.n	800cd42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	7c1b      	ldrb	r3, [r3, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10d      	bne.n	800cb40 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2c:	f107 0208 	add.w	r2, r7, #8
 800cb30:	4610      	mov	r0, r2
 800cb32:	4798      	blx	r3
 800cb34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cb3e:	e100      	b.n	800cd42 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb48:	f107 0208 	add.w	r2, r7, #8
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4798      	blx	r3
 800cb50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3301      	adds	r3, #1
 800cb56:	2202      	movs	r2, #2
 800cb58:	701a      	strb	r2, [r3, #0]
      break;
 800cb5a:	e0f2      	b.n	800cd42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	885b      	ldrh	r3, [r3, #2]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	2b05      	cmp	r3, #5
 800cb64:	f200 80ac 	bhi.w	800ccc0 <USBD_GetDescriptor+0x258>
 800cb68:	a201      	add	r2, pc, #4	; (adr r2, 800cb70 <USBD_GetDescriptor+0x108>)
 800cb6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb6e:	bf00      	nop
 800cb70:	0800cb89 	.word	0x0800cb89
 800cb74:	0800cbbd 	.word	0x0800cbbd
 800cb78:	0800cbf1 	.word	0x0800cbf1
 800cb7c:	0800cc25 	.word	0x0800cc25
 800cb80:	0800cc59 	.word	0x0800cc59
 800cb84:	0800cc8d 	.word	0x0800cc8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00b      	beq.n	800cbac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	7c12      	ldrb	r2, [r2, #16]
 800cba0:	f107 0108 	add.w	r1, r7, #8
 800cba4:	4610      	mov	r0, r2
 800cba6:	4798      	blx	r3
 800cba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbaa:	e091      	b.n	800ccd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cbac:	6839      	ldr	r1, [r7, #0]
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 facb 	bl	800d14a <USBD_CtlError>
            err++;
 800cbb4:	7afb      	ldrb	r3, [r7, #11]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800cbba:	e089      	b.n	800ccd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d00b      	beq.n	800cbe0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	7c12      	ldrb	r2, [r2, #16]
 800cbd4:	f107 0108 	add.w	r1, r7, #8
 800cbd8:	4610      	mov	r0, r2
 800cbda:	4798      	blx	r3
 800cbdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cbde:	e077      	b.n	800ccd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f000 fab1 	bl	800d14a <USBD_CtlError>
            err++;
 800cbe8:	7afb      	ldrb	r3, [r7, #11]
 800cbea:	3301      	adds	r3, #1
 800cbec:	72fb      	strb	r3, [r7, #11]
          break;
 800cbee:	e06f      	b.n	800ccd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d00b      	beq.n	800cc14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	7c12      	ldrb	r2, [r2, #16]
 800cc08:	f107 0108 	add.w	r1, r7, #8
 800cc0c:	4610      	mov	r0, r2
 800cc0e:	4798      	blx	r3
 800cc10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc12:	e05d      	b.n	800ccd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fa97 	bl	800d14a <USBD_CtlError>
            err++;
 800cc1c:	7afb      	ldrb	r3, [r7, #11]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	72fb      	strb	r3, [r7, #11]
          break;
 800cc22:	e055      	b.n	800ccd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00b      	beq.n	800cc48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	687a      	ldr	r2, [r7, #4]
 800cc3a:	7c12      	ldrb	r2, [r2, #16]
 800cc3c:	f107 0108 	add.w	r1, r7, #8
 800cc40:	4610      	mov	r0, r2
 800cc42:	4798      	blx	r3
 800cc44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc46:	e043      	b.n	800ccd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 fa7d 	bl	800d14a <USBD_CtlError>
            err++;
 800cc50:	7afb      	ldrb	r3, [r7, #11]
 800cc52:	3301      	adds	r3, #1
 800cc54:	72fb      	strb	r3, [r7, #11]
          break;
 800cc56:	e03b      	b.n	800ccd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00b      	beq.n	800cc7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc6a:	695b      	ldr	r3, [r3, #20]
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	7c12      	ldrb	r2, [r2, #16]
 800cc70:	f107 0108 	add.w	r1, r7, #8
 800cc74:	4610      	mov	r0, r2
 800cc76:	4798      	blx	r3
 800cc78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc7a:	e029      	b.n	800ccd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fa63 	bl	800d14a <USBD_CtlError>
            err++;
 800cc84:	7afb      	ldrb	r3, [r7, #11]
 800cc86:	3301      	adds	r3, #1
 800cc88:	72fb      	strb	r3, [r7, #11]
          break;
 800cc8a:	e021      	b.n	800ccd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00b      	beq.n	800ccb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc9e:	699b      	ldr	r3, [r3, #24]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	7c12      	ldrb	r2, [r2, #16]
 800cca4:	f107 0108 	add.w	r1, r7, #8
 800cca8:	4610      	mov	r0, r2
 800ccaa:	4798      	blx	r3
 800ccac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccae:	e00f      	b.n	800ccd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccb0:	6839      	ldr	r1, [r7, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fa49 	bl	800d14a <USBD_CtlError>
            err++;
 800ccb8:	7afb      	ldrb	r3, [r7, #11]
 800ccba:	3301      	adds	r3, #1
 800ccbc:	72fb      	strb	r3, [r7, #11]
          break;
 800ccbe:	e007      	b.n	800ccd0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ccc0:	6839      	ldr	r1, [r7, #0]
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 fa41 	bl	800d14a <USBD_CtlError>
          err++;
 800ccc8:	7afb      	ldrb	r3, [r7, #11]
 800ccca:	3301      	adds	r3, #1
 800cccc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ccce:	bf00      	nop
      }
      break;
 800ccd0:	e037      	b.n	800cd42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	7c1b      	ldrb	r3, [r3, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d109      	bne.n	800ccee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce2:	f107 0208 	add.w	r2, r7, #8
 800cce6:	4610      	mov	r0, r2
 800cce8:	4798      	blx	r3
 800ccea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ccec:	e029      	b.n	800cd42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fa2a 	bl	800d14a <USBD_CtlError>
        err++;
 800ccf6:	7afb      	ldrb	r3, [r7, #11]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	72fb      	strb	r3, [r7, #11]
      break;
 800ccfc:	e021      	b.n	800cd42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	7c1b      	ldrb	r3, [r3, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10d      	bne.n	800cd22 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0e:	f107 0208 	add.w	r2, r7, #8
 800cd12:	4610      	mov	r0, r2
 800cd14:	4798      	blx	r3
 800cd16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	2207      	movs	r2, #7
 800cd1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cd20:	e00f      	b.n	800cd42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 fa10 	bl	800d14a <USBD_CtlError>
        err++;
 800cd2a:	7afb      	ldrb	r3, [r7, #11]
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	72fb      	strb	r3, [r7, #11]
      break;
 800cd30:	e007      	b.n	800cd42 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 fa08 	bl	800d14a <USBD_CtlError>
      err++;
 800cd3a:	7afb      	ldrb	r3, [r7, #11]
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	72fb      	strb	r3, [r7, #11]
      break;
 800cd40:	bf00      	nop
  }

  if (err != 0U)
 800cd42:	7afb      	ldrb	r3, [r7, #11]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d11e      	bne.n	800cd86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	88db      	ldrh	r3, [r3, #6]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d016      	beq.n	800cd7e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cd50:	893b      	ldrh	r3, [r7, #8]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d00e      	beq.n	800cd74 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	88da      	ldrh	r2, [r3, #6]
 800cd5a:	893b      	ldrh	r3, [r7, #8]
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	bf28      	it	cs
 800cd60:	4613      	movcs	r3, r2
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cd66:	893b      	ldrh	r3, [r7, #8]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	68f9      	ldr	r1, [r7, #12]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 fa5d 	bl	800d22c <USBD_CtlSendData>
 800cd72:	e009      	b.n	800cd88 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f9e7 	bl	800d14a <USBD_CtlError>
 800cd7c:	e004      	b.n	800cd88 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 faae 	bl	800d2e0 <USBD_CtlSendStatus>
 800cd84:	e000      	b.n	800cd88 <USBD_GetDescriptor+0x320>
    return;
 800cd86:	bf00      	nop
  }
}
 800cd88:	3710      	adds	r7, #16
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}
 800cd8e:	bf00      	nop

0800cd90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	889b      	ldrh	r3, [r3, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d131      	bne.n	800ce06 <USBD_SetAddress+0x76>
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	88db      	ldrh	r3, [r3, #6]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d12d      	bne.n	800ce06 <USBD_SetAddress+0x76>
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	885b      	ldrh	r3, [r3, #2]
 800cdae:	2b7f      	cmp	r3, #127	; 0x7f
 800cdb0:	d829      	bhi.n	800ce06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	885b      	ldrh	r3, [r3, #2]
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d104      	bne.n	800cdd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cdca:	6839      	ldr	r1, [r7, #0]
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 f9bc 	bl	800d14a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdd2:	e01d      	b.n	800ce10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7bfa      	ldrb	r2, [r7, #15]
 800cdd8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f004 fa9d 	bl	8011320 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fa7a 	bl	800d2e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cdec:	7bfb      	ldrb	r3, [r7, #15]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d004      	beq.n	800cdfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2202      	movs	r2, #2
 800cdf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdfa:	e009      	b.n	800ce10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce04:	e004      	b.n	800ce10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f99e 	bl	800d14a <USBD_CtlError>
  }
}
 800ce0e:	bf00      	nop
 800ce10:	bf00      	nop
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	885b      	ldrh	r3, [r3, #2]
 800ce2a:	b2da      	uxtb	r2, r3
 800ce2c:	4b4e      	ldr	r3, [pc, #312]	; (800cf68 <USBD_SetConfig+0x150>)
 800ce2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ce30:	4b4d      	ldr	r3, [pc, #308]	; (800cf68 <USBD_SetConfig+0x150>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	d905      	bls.n	800ce44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f985 	bl	800d14a <USBD_CtlError>
    return USBD_FAIL;
 800ce40:	2303      	movs	r3, #3
 800ce42:	e08c      	b.n	800cf5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b02      	cmp	r3, #2
 800ce4e:	d002      	beq.n	800ce56 <USBD_SetConfig+0x3e>
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d029      	beq.n	800cea8 <USBD_SetConfig+0x90>
 800ce54:	e075      	b.n	800cf42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ce56:	4b44      	ldr	r3, [pc, #272]	; (800cf68 <USBD_SetConfig+0x150>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d020      	beq.n	800cea0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ce5e:	4b42      	ldr	r3, [pc, #264]	; (800cf68 <USBD_SetConfig+0x150>)
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ce68:	4b3f      	ldr	r3, [pc, #252]	; (800cf68 <USBD_SetConfig+0x150>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7fe ffbd 	bl	800bdee <USBD_SetClassConfig>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d008      	beq.n	800ce90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f962 	bl	800d14a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2202      	movs	r2, #2
 800ce8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ce8e:	e065      	b.n	800cf5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fa25 	bl	800d2e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2203      	movs	r2, #3
 800ce9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ce9e:	e05d      	b.n	800cf5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fa1d 	bl	800d2e0 <USBD_CtlSendStatus>
      break;
 800cea6:	e059      	b.n	800cf5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cea8:	4b2f      	ldr	r3, [pc, #188]	; (800cf68 <USBD_SetConfig+0x150>)
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d112      	bne.n	800ced6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2202      	movs	r2, #2
 800ceb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ceb8:	4b2b      	ldr	r3, [pc, #172]	; (800cf68 <USBD_SetConfig+0x150>)
 800ceba:	781b      	ldrb	r3, [r3, #0]
 800cebc:	461a      	mov	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cec2:	4b29      	ldr	r3, [pc, #164]	; (800cf68 <USBD_SetConfig+0x150>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f7fe ffac 	bl	800be26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fa06 	bl	800d2e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ced4:	e042      	b.n	800cf5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ced6:	4b24      	ldr	r3, [pc, #144]	; (800cf68 <USBD_SetConfig+0x150>)
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	461a      	mov	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d02a      	beq.n	800cf3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	4619      	mov	r1, r3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f7fe ff9a 	bl	800be26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cef2:	4b1d      	ldr	r3, [pc, #116]	; (800cf68 <USBD_SetConfig+0x150>)
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	461a      	mov	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cefc:	4b1a      	ldr	r3, [pc, #104]	; (800cf68 <USBD_SetConfig+0x150>)
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	4619      	mov	r1, r3
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7fe ff73 	bl	800bdee <USBD_SetClassConfig>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cf0c:	7bfb      	ldrb	r3, [r7, #15]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00f      	beq.n	800cf32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 f918 	bl	800d14a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7fe ff7f 	bl	800be26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2202      	movs	r2, #2
 800cf2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cf30:	e014      	b.n	800cf5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 f9d4 	bl	800d2e0 <USBD_CtlSendStatus>
      break;
 800cf38:	e010      	b.n	800cf5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f9d0 	bl	800d2e0 <USBD_CtlSendStatus>
      break;
 800cf40:	e00c      	b.n	800cf5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 f900 	bl	800d14a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf4a:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <USBD_SetConfig+0x150>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7fe ff68 	bl	800be26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cf56:	2303      	movs	r3, #3
 800cf58:	73fb      	strb	r3, [r7, #15]
      break;
 800cf5a:	bf00      	nop
  }

  return ret;
 800cf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3710      	adds	r7, #16
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	200004e4 	.word	0x200004e4

0800cf6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	88db      	ldrh	r3, [r3, #6]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d004      	beq.n	800cf88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f8e2 	bl	800d14a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cf86:	e023      	b.n	800cfd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b02      	cmp	r3, #2
 800cf92:	dc02      	bgt.n	800cf9a <USBD_GetConfig+0x2e>
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	dc03      	bgt.n	800cfa0 <USBD_GetConfig+0x34>
 800cf98:	e015      	b.n	800cfc6 <USBD_GetConfig+0x5a>
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d00b      	beq.n	800cfb6 <USBD_GetConfig+0x4a>
 800cf9e:	e012      	b.n	800cfc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	3308      	adds	r3, #8
 800cfaa:	2201      	movs	r2, #1
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f93c 	bl	800d22c <USBD_CtlSendData>
        break;
 800cfb4:	e00c      	b.n	800cfd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	2201      	movs	r2, #1
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f934 	bl	800d22c <USBD_CtlSendData>
        break;
 800cfc4:	e004      	b.n	800cfd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f8be 	bl	800d14a <USBD_CtlError>
        break;
 800cfce:	bf00      	nop
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	3b01      	subs	r3, #1
 800cfec:	2b02      	cmp	r3, #2
 800cfee:	d81e      	bhi.n	800d02e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	88db      	ldrh	r3, [r3, #6]
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d004      	beq.n	800d002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f8a5 	bl	800d14a <USBD_CtlError>
        break;
 800d000:	e01a      	b.n	800d038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d005      	beq.n	800d01e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	f043 0202 	orr.w	r2, r3, #2
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	330c      	adds	r3, #12
 800d022:	2202      	movs	r2, #2
 800d024:	4619      	mov	r1, r3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f900 	bl	800d22c <USBD_CtlSendData>
      break;
 800d02c:	e004      	b.n	800d038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d02e:	6839      	ldr	r1, [r7, #0]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f88a 	bl	800d14a <USBD_CtlError>
      break;
 800d036:	bf00      	nop
  }
}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	885b      	ldrh	r3, [r3, #2]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d107      	bne.n	800d062 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f940 	bl	800d2e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d060:	e013      	b.n	800d08a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	885b      	ldrh	r3, [r3, #2]
 800d066:	2b02      	cmp	r3, #2
 800d068:	d10b      	bne.n	800d082 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	889b      	ldrh	r3, [r3, #4]
 800d06e:	0a1b      	lsrs	r3, r3, #8
 800d070:	b29b      	uxth	r3, r3
 800d072:	b2da      	uxtb	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f930 	bl	800d2e0 <USBD_CtlSendStatus>
}
 800d080:	e003      	b.n	800d08a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d082:	6839      	ldr	r1, [r7, #0]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f860 	bl	800d14a <USBD_CtlError>
}
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b082      	sub	sp, #8
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d80b      	bhi.n	800d0c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	885b      	ldrh	r3, [r3, #2]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d10c      	bne.n	800d0cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 f910 	bl	800d2e0 <USBD_CtlSendStatus>
      }
      break;
 800d0c0:	e004      	b.n	800d0cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 f840 	bl	800d14a <USBD_CtlError>
      break;
 800d0ca:	e000      	b.n	800d0ce <USBD_ClrFeature+0x3c>
      break;
 800d0cc:	bf00      	nop
  }
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	781a      	ldrb	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	781a      	ldrb	r2, [r3, #0]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7ff fa17 	bl	800c534 <SWAPBYTE>
 800d106:	4603      	mov	r3, r0
 800d108:	461a      	mov	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3301      	adds	r3, #1
 800d112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	3301      	adds	r3, #1
 800d118:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f7ff fa0a 	bl	800c534 <SWAPBYTE>
 800d120:	4603      	mov	r3, r0
 800d122:	461a      	mov	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	3301      	adds	r3, #1
 800d12c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3301      	adds	r3, #1
 800d132:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f7ff f9fd 	bl	800c534 <SWAPBYTE>
 800d13a:	4603      	mov	r3, r0
 800d13c:	461a      	mov	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	80da      	strh	r2, [r3, #6]
}
 800d142:	bf00      	nop
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b082      	sub	sp, #8
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d154:	2180      	movs	r1, #128	; 0x80
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f004 f878 	bl	801124c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d15c:	2100      	movs	r1, #0
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f004 f874 	bl	801124c <USBD_LL_StallEP>
}
 800d164:	bf00      	nop
 800d166:	3708      	adds	r7, #8
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d178:	2300      	movs	r3, #0
 800d17a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d036      	beq.n	800d1f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d186:	6938      	ldr	r0, [r7, #16]
 800d188:	f000 f836 	bl	800d1f8 <USBD_GetLen>
 800d18c:	4603      	mov	r3, r0
 800d18e:	3301      	adds	r3, #1
 800d190:	b29b      	uxth	r3, r3
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	b29a      	uxth	r2, r3
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d19a:	7dfb      	ldrb	r3, [r7, #23]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	4413      	add	r3, r2
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	7812      	ldrb	r2, [r2, #0]
 800d1a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1a6:	7dfb      	ldrb	r3, [r7, #23]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d1ac:	7dfb      	ldrb	r3, [r7, #23]
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	4413      	add	r3, r2
 800d1b2:	2203      	movs	r2, #3
 800d1b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d1b6:	7dfb      	ldrb	r3, [r7, #23]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d1bc:	e013      	b.n	800d1e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d1be:	7dfb      	ldrb	r3, [r7, #23]
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	693a      	ldr	r2, [r7, #16]
 800d1c6:	7812      	ldrb	r2, [r2, #0]
 800d1c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	613b      	str	r3, [r7, #16]
    idx++;
 800d1d0:	7dfb      	ldrb	r3, [r7, #23]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	68ba      	ldr	r2, [r7, #8]
 800d1da:	4413      	add	r3, r2
 800d1dc:	2200      	movs	r2, #0
 800d1de:	701a      	strb	r2, [r3, #0]
    idx++;
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e7      	bne.n	800d1be <USBD_GetString+0x52>
 800d1ee:	e000      	b.n	800d1f2 <USBD_GetString+0x86>
    return;
 800d1f0:	bf00      	nop
  }
}
 800d1f2:	3718      	adds	r7, #24
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d200:	2300      	movs	r3, #0
 800d202:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d208:	e005      	b.n	800d216 <USBD_GetLen+0x1e>
  {
    len++;
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	3301      	adds	r3, #1
 800d20e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	3301      	adds	r3, #1
 800d214:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d1f5      	bne.n	800d20a <USBD_GetLen+0x12>
  }

  return len;
 800d21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3714      	adds	r7, #20
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2202      	movs	r2, #2
 800d23c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	2100      	movs	r1, #0
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f004 f883 	bl	801135e <USBD_LL_Transmit>

  return USBD_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	b084      	sub	sp, #16
 800d266:	af00      	add	r7, sp, #0
 800d268:	60f8      	str	r0, [r7, #12]
 800d26a:	60b9      	str	r1, [r7, #8]
 800d26c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	2100      	movs	r1, #0
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f004 f872 	bl	801135e <USBD_LL_Transmit>

  return USBD_OK;
 800d27a:	2300      	movs	r3, #0
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	60f8      	str	r0, [r7, #12]
 800d28c:	60b9      	str	r1, [r7, #8]
 800d28e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2203      	movs	r2, #3
 800d294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f004 f876 	bl	80113a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3710      	adds	r7, #16
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b084      	sub	sp, #16
 800d2c2:	af00      	add	r7, sp, #0
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	60b9      	str	r1, [r7, #8]
 800d2c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	68f8      	ldr	r0, [r7, #12]
 800d2d2:	f004 f865 	bl	80113a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2204      	movs	r2, #4
 800d2ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f004 f831 	bl	801135e <USBD_LL_Transmit>

  return USBD_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b082      	sub	sp, #8
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2205      	movs	r2, #5
 800d312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d316:	2300      	movs	r3, #0
 800d318:	2200      	movs	r2, #0
 800d31a:	2100      	movs	r1, #0
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f004 f83f 	bl	80113a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b087      	sub	sp, #28
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	4613      	mov	r3, r2
 800d338:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d33a:	2301      	movs	r3, #1
 800d33c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d342:	4b1f      	ldr	r3, [pc, #124]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d344:	7a5b      	ldrb	r3, [r3, #9]
 800d346:	b2db      	uxtb	r3, r3
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d131      	bne.n	800d3b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d34c:	4b1c      	ldr	r3, [pc, #112]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d34e:	7a5b      	ldrb	r3, [r3, #9]
 800d350:	b2db      	uxtb	r3, r3
 800d352:	461a      	mov	r2, r3
 800d354:	4b1a      	ldr	r3, [pc, #104]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d356:	2100      	movs	r1, #0
 800d358:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d35a:	4b19      	ldr	r3, [pc, #100]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d35c:	7a5b      	ldrb	r3, [r3, #9]
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	4a17      	ldr	r2, [pc, #92]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4413      	add	r3, r2
 800d366:	68fa      	ldr	r2, [r7, #12]
 800d368:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d36a:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d36c:	7a5b      	ldrb	r3, [r3, #9]
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	461a      	mov	r2, r3
 800d372:	4b13      	ldr	r3, [pc, #76]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d374:	4413      	add	r3, r2
 800d376:	79fa      	ldrb	r2, [r7, #7]
 800d378:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d37a:	4b11      	ldr	r3, [pc, #68]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d37c:	7a5b      	ldrb	r3, [r3, #9]
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	1c5a      	adds	r2, r3, #1
 800d382:	b2d1      	uxtb	r1, r2
 800d384:	4a0e      	ldr	r2, [pc, #56]	; (800d3c0 <FATFS_LinkDriverEx+0x94>)
 800d386:	7251      	strb	r1, [r2, #9]
 800d388:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d38a:	7dbb      	ldrb	r3, [r7, #22]
 800d38c:	3330      	adds	r3, #48	; 0x30
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	3301      	adds	r3, #1
 800d398:	223a      	movs	r2, #58	; 0x3a
 800d39a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	3302      	adds	r3, #2
 800d3a0:	222f      	movs	r2, #47	; 0x2f
 800d3a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	3303      	adds	r3, #3
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	371c      	adds	r7, #28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	200004e8 	.word	0x200004e8

0800d3c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	6839      	ldr	r1, [r7, #0]
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f7ff ffaa 	bl	800d32c <FATFS_LinkDriverEx>
 800d3d8:	4603      	mov	r3, r0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
	...

0800d3e4 <__NVIC_SetPriority>:
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	6039      	str	r1, [r7, #0]
 800d3ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d3f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	db0a      	blt.n	800d40e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	490c      	ldr	r1, [pc, #48]	; (800d430 <__NVIC_SetPriority+0x4c>)
 800d3fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d402:	0112      	lsls	r2, r2, #4
 800d404:	b2d2      	uxtb	r2, r2
 800d406:	440b      	add	r3, r1
 800d408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d40c:	e00a      	b.n	800d424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	b2da      	uxtb	r2, r3
 800d412:	4908      	ldr	r1, [pc, #32]	; (800d434 <__NVIC_SetPriority+0x50>)
 800d414:	79fb      	ldrb	r3, [r7, #7]
 800d416:	f003 030f 	and.w	r3, r3, #15
 800d41a:	3b04      	subs	r3, #4
 800d41c:	0112      	lsls	r2, r2, #4
 800d41e:	b2d2      	uxtb	r2, r2
 800d420:	440b      	add	r3, r1
 800d422:	761a      	strb	r2, [r3, #24]
}
 800d424:	bf00      	nop
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr
 800d430:	e000e100 	.word	0xe000e100
 800d434:	e000ed00 	.word	0xe000ed00

0800d438 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d43c:	4b05      	ldr	r3, [pc, #20]	; (800d454 <SysTick_Handler+0x1c>)
 800d43e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d440:	f002 f95c 	bl	800f6fc <xTaskGetSchedulerState>
 800d444:	4603      	mov	r3, r0
 800d446:	2b01      	cmp	r3, #1
 800d448:	d001      	beq.n	800d44e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d44a:	f003 f835 	bl	80104b8 <xPortSysTickHandler>
  }
}
 800d44e:	bf00      	nop
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	e000e010 	.word	0xe000e010

0800d458 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d458:	b580      	push	{r7, lr}
 800d45a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d45c:	2100      	movs	r1, #0
 800d45e:	f06f 0004 	mvn.w	r0, #4
 800d462:	f7ff ffbf 	bl	800d3e4 <__NVIC_SetPriority>
#endif
}
 800d466:	bf00      	nop
 800d468:	bd80      	pop	{r7, pc}
	...

0800d46c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d472:	f3ef 8305 	mrs	r3, IPSR
 800d476:	603b      	str	r3, [r7, #0]
  return(result);
 800d478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d003      	beq.n	800d486 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d47e:	f06f 0305 	mvn.w	r3, #5
 800d482:	607b      	str	r3, [r7, #4]
 800d484:	e00c      	b.n	800d4a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d486:	4b0a      	ldr	r3, [pc, #40]	; (800d4b0 <osKernelInitialize+0x44>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d105      	bne.n	800d49a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d48e:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <osKernelInitialize+0x44>)
 800d490:	2201      	movs	r2, #1
 800d492:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d494:	2300      	movs	r3, #0
 800d496:	607b      	str	r3, [r7, #4]
 800d498:	e002      	b.n	800d4a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d49a:	f04f 33ff 	mov.w	r3, #4294967295
 800d49e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d4a0:	687b      	ldr	r3, [r7, #4]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	370c      	adds	r7, #12
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	200004f4 	.word	0x200004f4

0800d4b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4ba:	f3ef 8305 	mrs	r3, IPSR
 800d4be:	603b      	str	r3, [r7, #0]
  return(result);
 800d4c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d003      	beq.n	800d4ce <osKernelStart+0x1a>
    stat = osErrorISR;
 800d4c6:	f06f 0305 	mvn.w	r3, #5
 800d4ca:	607b      	str	r3, [r7, #4]
 800d4cc:	e010      	b.n	800d4f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d4ce:	4b0b      	ldr	r3, [pc, #44]	; (800d4fc <osKernelStart+0x48>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d109      	bne.n	800d4ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d4d6:	f7ff ffbf 	bl	800d458 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d4da:	4b08      	ldr	r3, [pc, #32]	; (800d4fc <osKernelStart+0x48>)
 800d4dc:	2202      	movs	r2, #2
 800d4de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d4e0:	f001 fc12 	bl	800ed08 <vTaskStartScheduler>
      stat = osOK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	607b      	str	r3, [r7, #4]
 800d4e8:	e002      	b.n	800d4f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d4f0:	687b      	ldr	r3, [r7, #4]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3708      	adds	r7, #8
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	200004f4 	.word	0x200004f4

0800d500 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d500:	b580      	push	{r7, lr}
 800d502:	b08e      	sub	sp, #56	; 0x38
 800d504:	af04      	add	r7, sp, #16
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d50c:	2300      	movs	r3, #0
 800d50e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d510:	f3ef 8305 	mrs	r3, IPSR
 800d514:	617b      	str	r3, [r7, #20]
  return(result);
 800d516:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d17e      	bne.n	800d61a <osThreadNew+0x11a>
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d07b      	beq.n	800d61a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d522:	2380      	movs	r3, #128	; 0x80
 800d524:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d526:	2318      	movs	r3, #24
 800d528:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d52e:	f04f 33ff 	mov.w	r3, #4294967295
 800d532:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d045      	beq.n	800d5c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <osThreadNew+0x48>
        name = attr->name;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	699b      	ldr	r3, [r3, #24]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d008      	beq.n	800d56e <osThreadNew+0x6e>
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	2b38      	cmp	r3, #56	; 0x38
 800d560:	d805      	bhi.n	800d56e <osThreadNew+0x6e>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d001      	beq.n	800d572 <osThreadNew+0x72>
        return (NULL);
 800d56e:	2300      	movs	r3, #0
 800d570:	e054      	b.n	800d61c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	695b      	ldr	r3, [r3, #20]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	695b      	ldr	r3, [r3, #20]
 800d57e:	089b      	lsrs	r3, r3, #2
 800d580:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00e      	beq.n	800d5a8 <osThreadNew+0xa8>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	2bbb      	cmp	r3, #187	; 0xbb
 800d590:	d90a      	bls.n	800d5a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d596:	2b00      	cmp	r3, #0
 800d598:	d006      	beq.n	800d5a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	695b      	ldr	r3, [r3, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <osThreadNew+0xa8>
        mem = 1;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	61bb      	str	r3, [r7, #24]
 800d5a6:	e010      	b.n	800d5ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10c      	bne.n	800d5ca <osThreadNew+0xca>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d108      	bne.n	800d5ca <osThreadNew+0xca>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d104      	bne.n	800d5ca <osThreadNew+0xca>
          mem = 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	61bb      	str	r3, [r7, #24]
 800d5c4:	e001      	b.n	800d5ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d110      	bne.n	800d5f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d5d8:	9202      	str	r2, [sp, #8]
 800d5da:	9301      	str	r3, [sp, #4]
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	9300      	str	r3, [sp, #0]
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	6a3a      	ldr	r2, [r7, #32]
 800d5e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f001 f9a2 	bl	800e930 <xTaskCreateStatic>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	613b      	str	r3, [r7, #16]
 800d5f0:	e013      	b.n	800d61a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d110      	bne.n	800d61a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	f107 0310 	add.w	r3, r7, #16
 800d600:	9301      	str	r3, [sp, #4]
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	9300      	str	r3, [sp, #0]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f001 f9ed 	bl	800e9ea <xTaskCreate>
 800d610:	4603      	mov	r3, r0
 800d612:	2b01      	cmp	r3, #1
 800d614:	d001      	beq.n	800d61a <osThreadNew+0x11a>
            hTask = NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d61a:	693b      	ldr	r3, [r7, #16]
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3728      	adds	r7, #40	; 0x28
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d62c:	f3ef 8305 	mrs	r3, IPSR
 800d630:	60bb      	str	r3, [r7, #8]
  return(result);
 800d632:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d634:	2b00      	cmp	r3, #0
 800d636:	d003      	beq.n	800d640 <osDelay+0x1c>
    stat = osErrorISR;
 800d638:	f06f 0305 	mvn.w	r3, #5
 800d63c:	60fb      	str	r3, [r7, #12]
 800d63e:	e007      	b.n	800d650 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d640:	2300      	movs	r3, #0
 800d642:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d002      	beq.n	800d650 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f001 fb28 	bl	800eca0 <vTaskDelay>
    }
  }

  return (stat);
 800d650:	68fb      	ldr	r3, [r7, #12]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3710      	adds	r7, #16
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f002 fd2a 	bl	80100bc <pvTimerGetTimerID>
 800d668:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d005      	beq.n	800d67c <TimerCallback+0x22>
    callb->func (callb->arg);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	6852      	ldr	r2, [r2, #4]
 800d678:	4610      	mov	r0, r2
 800d67a:	4798      	blx	r3
  }
}
 800d67c:	bf00      	nop
 800d67e:	3710      	adds	r7, #16
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800d684:	b580      	push	{r7, lr}
 800d686:	b08c      	sub	sp, #48	; 0x30
 800d688:	af02      	add	r7, sp, #8
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	607a      	str	r2, [r7, #4]
 800d68e:	603b      	str	r3, [r7, #0]
 800d690:	460b      	mov	r3, r1
 800d692:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800d694:	2300      	movs	r3, #0
 800d696:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d698:	f3ef 8305 	mrs	r3, IPSR
 800d69c:	613b      	str	r3, [r7, #16]
  return(result);
 800d69e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d163      	bne.n	800d76c <osTimerNew+0xe8>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d060      	beq.n	800d76c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800d6aa:	2008      	movs	r0, #8
 800d6ac:	f002 ff94 	bl	80105d8 <pvPortMalloc>
 800d6b0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d059      	beq.n	800d76c <osTimerNew+0xe8>
      callb->func = func;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800d6c4:	7afb      	ldrb	r3, [r7, #11]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d102      	bne.n	800d6d0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	61fb      	str	r3, [r7, #28]
 800d6ce:	e001      	b.n	800d6d4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800d6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d01c      	beq.n	800d71e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <osTimerNew+0x6e>
          name = attr->name;
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	689b      	ldr	r3, [r3, #8]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d006      	beq.n	800d708 <osTimerNew+0x84>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	2b2b      	cmp	r3, #43	; 0x2b
 800d700:	d902      	bls.n	800d708 <osTimerNew+0x84>
          mem = 1;
 800d702:	2301      	movs	r3, #1
 800d704:	61bb      	str	r3, [r7, #24]
 800d706:	e00c      	b.n	800d722 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d108      	bne.n	800d722 <osTimerNew+0x9e>
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d104      	bne.n	800d722 <osTimerNew+0x9e>
            mem = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	61bb      	str	r3, [r7, #24]
 800d71c:	e001      	b.n	800d722 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d10c      	bne.n	800d742 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	9301      	str	r3, [sp, #4]
 800d72e:	4b12      	ldr	r3, [pc, #72]	; (800d778 <osTimerNew+0xf4>)
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	69fa      	ldr	r2, [r7, #28]
 800d736:	2101      	movs	r1, #1
 800d738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d73a:	f002 f940 	bl	800f9be <xTimerCreateStatic>
 800d73e:	6238      	str	r0, [r7, #32]
 800d740:	e00b      	b.n	800d75a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d108      	bne.n	800d75a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <osTimerNew+0xf4>)
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	69fa      	ldr	r2, [r7, #28]
 800d750:	2101      	movs	r1, #1
 800d752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d754:	f002 f912 	bl	800f97c <xTimerCreate>
 800d758:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800d75a:	6a3b      	ldr	r3, [r7, #32]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d105      	bne.n	800d76c <osTimerNew+0xe8>
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d002      	beq.n	800d76c <osTimerNew+0xe8>
        vPortFree (callb);
 800d766:	6978      	ldr	r0, [r7, #20]
 800d768:	f003 f802 	bl	8010770 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800d76c:	6a3b      	ldr	r3, [r7, #32]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3728      	adds	r7, #40	; 0x28
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	0800d65b 	.word	0x0800d65b

0800d77c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af02      	add	r7, sp, #8
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d78a:	f3ef 8305 	mrs	r3, IPSR
 800d78e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d790:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d792:	2b00      	cmp	r3, #0
 800d794:	d003      	beq.n	800d79e <osTimerStart+0x22>
    stat = osErrorISR;
 800d796:	f06f 0305 	mvn.w	r3, #5
 800d79a:	617b      	str	r3, [r7, #20]
 800d79c:	e017      	b.n	800d7ce <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d103      	bne.n	800d7ac <osTimerStart+0x30>
    stat = osErrorParameter;
 800d7a4:	f06f 0303 	mvn.w	r3, #3
 800d7a8:	617b      	str	r3, [r7, #20]
 800d7aa:	e010      	b.n	800d7ce <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	9300      	str	r3, [sp, #0]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	683a      	ldr	r2, [r7, #0]
 800d7b4:	2104      	movs	r1, #4
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f002 f97a 	bl	800fab0 <xTimerGenericCommand>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b01      	cmp	r3, #1
 800d7c0:	d102      	bne.n	800d7c8 <osTimerStart+0x4c>
      stat = osOK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	617b      	str	r3, [r7, #20]
 800d7c6:	e002      	b.n	800d7ce <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800d7c8:	f06f 0302 	mvn.w	r3, #2
 800d7cc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d7ce:	697b      	ldr	r3, [r7, #20]
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3718      	adds	r7, #24
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}

0800d7d8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7e4:	f3ef 8305 	mrs	r3, IPSR
 800d7e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7ea:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d12d      	bne.n	800d84c <osEventFlagsNew+0x74>
    mem = -1;
 800d7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d7f4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d015      	beq.n	800d828 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d006      	beq.n	800d812 <osEventFlagsNew+0x3a>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	2b1f      	cmp	r3, #31
 800d80a:	d902      	bls.n	800d812 <osEventFlagsNew+0x3a>
        mem = 1;
 800d80c:	2301      	movs	r3, #1
 800d80e:	613b      	str	r3, [r7, #16]
 800d810:	e00c      	b.n	800d82c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d108      	bne.n	800d82c <osEventFlagsNew+0x54>
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	68db      	ldr	r3, [r3, #12]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d104      	bne.n	800d82c <osEventFlagsNew+0x54>
          mem = 0;
 800d822:	2300      	movs	r3, #0
 800d824:	613b      	str	r3, [r7, #16]
 800d826:	e001      	b.n	800d82c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800d828:	2300      	movs	r3, #0
 800d82a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d106      	bne.n	800d840 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	4618      	mov	r0, r3
 800d838:	f000 f8ec 	bl	800da14 <xEventGroupCreateStatic>
 800d83c:	6178      	str	r0, [r7, #20]
 800d83e:	e005      	b.n	800d84c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d102      	bne.n	800d84c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800d846:	f000 f91c 	bl	800da82 <xEventGroupCreate>
 800d84a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800d84c:	697b      	ldr	r3, [r7, #20]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
	...

0800d858 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d004      	beq.n	800d876 <osEventFlagsSet+0x1e>
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d872:	2b00      	cmp	r3, #0
 800d874:	d003      	beq.n	800d87e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800d876:	f06f 0303 	mvn.w	r3, #3
 800d87a:	617b      	str	r3, [r7, #20]
 800d87c:	e028      	b.n	800d8d0 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d87e:	f3ef 8305 	mrs	r3, IPSR
 800d882:	60fb      	str	r3, [r7, #12]
  return(result);
 800d884:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d886:	2b00      	cmp	r3, #0
 800d888:	d01d      	beq.n	800d8c6 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800d88e:	f107 0308 	add.w	r3, r7, #8
 800d892:	461a      	mov	r2, r3
 800d894:	6839      	ldr	r1, [r7, #0]
 800d896:	6938      	ldr	r0, [r7, #16]
 800d898:	f000 fa96 	bl	800ddc8 <xEventGroupSetBitsFromISR>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d103      	bne.n	800d8aa <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800d8a2:	f06f 0302 	mvn.w	r3, #2
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	e012      	b.n	800d8d0 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00d      	beq.n	800d8d0 <osEventFlagsSet+0x78>
 800d8b4:	4b09      	ldr	r3, [pc, #36]	; (800d8dc <osEventFlagsSet+0x84>)
 800d8b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ba:	601a      	str	r2, [r3, #0]
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	f3bf 8f6f 	isb	sy
 800d8c4:	e004      	b.n	800d8d0 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	6938      	ldr	r0, [r7, #16]
 800d8ca:	f000 f9c3 	bl	800dc54 <xEventGroupSetBits>
 800d8ce:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800d8d0:	697b      	ldr	r3, [r7, #20]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3718      	adds	r7, #24
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	e000ed04 	.word	0xe000ed04

0800d8e0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b08c      	sub	sp, #48	; 0x30
 800d8e4:	af02      	add	r7, sp, #8
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
 800d8ec:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d004      	beq.n	800d902 <osEventFlagsWait+0x22>
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d003      	beq.n	800d90a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800d902:	f06f 0303 	mvn.w	r3, #3
 800d906:	61fb      	str	r3, [r7, #28]
 800d908:	e04b      	b.n	800d9a2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d90a:	f3ef 8305 	mrs	r3, IPSR
 800d90e:	617b      	str	r3, [r7, #20]
  return(result);
 800d910:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d912:	2b00      	cmp	r3, #0
 800d914:	d003      	beq.n	800d91e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800d916:	f06f 0305 	mvn.w	r3, #5
 800d91a:	61fb      	str	r3, [r7, #28]
 800d91c:	e041      	b.n	800d9a2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800d928:	2301      	movs	r3, #1
 800d92a:	627b      	str	r3, [r7, #36]	; 0x24
 800d92c:	e001      	b.n	800d932 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800d92e:	2300      	movs	r3, #0
 800d930:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f003 0302 	and.w	r3, r3, #2
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800d93c:	2300      	movs	r3, #0
 800d93e:	623b      	str	r3, [r7, #32]
 800d940:	e001      	b.n	800d946 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800d942:	2301      	movs	r3, #1
 800d944:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	6a3a      	ldr	r2, [r7, #32]
 800d94e:	68b9      	ldr	r1, [r7, #8]
 800d950:	69b8      	ldr	r0, [r7, #24]
 800d952:	f000 f8b1 	bl	800dab8 <xEventGroupWaitBits>
 800d956:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f003 0301 	and.w	r3, r3, #1
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d010      	beq.n	800d984 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800d962:	68ba      	ldr	r2, [r7, #8]
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	4013      	ands	r3, r2
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d019      	beq.n	800d9a2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d003      	beq.n	800d97c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800d974:	f06f 0301 	mvn.w	r3, #1
 800d978:	61fb      	str	r3, [r7, #28]
 800d97a:	e012      	b.n	800d9a2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800d97c:	f06f 0302 	mvn.w	r3, #2
 800d980:	61fb      	str	r3, [r7, #28]
 800d982:	e00e      	b.n	800d9a2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	4013      	ands	r3, r2
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d109      	bne.n	800d9a2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d003      	beq.n	800d99c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800d994:	f06f 0301 	mvn.w	r3, #1
 800d998:	61fb      	str	r3, [r7, #28]
 800d99a:	e002      	b.n	800d9a2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800d99c:	f06f 0302 	mvn.w	r3, #2
 800d9a0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800d9a2:	69fb      	ldr	r3, [r7, #28]
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3728      	adds	r7, #40	; 0x28
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	60f8      	str	r0, [r7, #12]
 800d9b4:	60b9      	str	r1, [r7, #8]
 800d9b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	4a07      	ldr	r2, [pc, #28]	; (800d9d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800d9bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	4a06      	ldr	r2, [pc, #24]	; (800d9dc <vApplicationGetIdleTaskMemory+0x30>)
 800d9c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2280      	movs	r2, #128	; 0x80
 800d9c8:	601a      	str	r2, [r3, #0]
}
 800d9ca:	bf00      	nop
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
 800d9d6:	bf00      	nop
 800d9d8:	200004f8 	.word	0x200004f8
 800d9dc:	200005b4 	.word	0x200005b4

0800d9e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	4a07      	ldr	r2, [pc, #28]	; (800da0c <vApplicationGetTimerTaskMemory+0x2c>)
 800d9f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	4a06      	ldr	r2, [pc, #24]	; (800da10 <vApplicationGetTimerTaskMemory+0x30>)
 800d9f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9fe:	601a      	str	r2, [r3, #0]
}
 800da00:	bf00      	nop
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	200007b4 	.word	0x200007b4
 800da10:	20000870 	.word	0x20000870

0800da14 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d10a      	bne.n	800da38 <xEventGroupCreateStatic+0x24>
	__asm volatile
 800da22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	613b      	str	r3, [r7, #16]
}
 800da34:	bf00      	nop
 800da36:	e7fe      	b.n	800da36 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800da38:	2320      	movs	r3, #32
 800da3a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2b20      	cmp	r3, #32
 800da40:	d00a      	beq.n	800da58 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	60fb      	str	r3, [r7, #12]
}
 800da54:	bf00      	nop
 800da56:	e7fe      	b.n	800da56 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00a      	beq.n	800da78 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	2200      	movs	r2, #0
 800da66:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	3304      	adds	r3, #4
 800da6c:	4618      	mov	r0, r3
 800da6e:	f000 f9bf 	bl	800ddf0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	2201      	movs	r2, #1
 800da76:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800da78:	697b      	ldr	r3, [r7, #20]
	}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3718      	adds	r7, #24
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800da82:	b580      	push	{r7, lr}
 800da84:	b082      	sub	sp, #8
 800da86:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800da88:	2020      	movs	r0, #32
 800da8a:	f002 fda5 	bl	80105d8 <pvPortMalloc>
 800da8e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00a      	beq.n	800daac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2200      	movs	r2, #0
 800da9a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	3304      	adds	r3, #4
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 f9a5 	bl	800ddf0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2200      	movs	r2, #0
 800daaa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800daac:	687b      	ldr	r3, [r7, #4]
	}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
	...

0800dab8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b090      	sub	sp, #64	; 0x40
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
 800dac4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800daca:	2300      	movs	r3, #0
 800dacc:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800dace:	2300      	movs	r3, #0
 800dad0:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10a      	bne.n	800daee <xEventGroupWaitBits+0x36>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	623b      	str	r3, [r7, #32]
}
 800daea:	bf00      	nop
 800daec:	e7fe      	b.n	800daec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d00a      	beq.n	800db0e <xEventGroupWaitBits+0x56>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafc:	f383 8811 	msr	BASEPRI, r3
 800db00:	f3bf 8f6f 	isb	sy
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	61fb      	str	r3, [r7, #28]
}
 800db0a:	bf00      	nop
 800db0c:	e7fe      	b.n	800db0c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d10a      	bne.n	800db2a <xEventGroupWaitBits+0x72>
	__asm volatile
 800db14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	61bb      	str	r3, [r7, #24]
}
 800db26:	bf00      	nop
 800db28:	e7fe      	b.n	800db28 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800db2a:	f001 fde7 	bl	800f6fc <xTaskGetSchedulerState>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d102      	bne.n	800db3a <xEventGroupWaitBits+0x82>
 800db34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <xEventGroupWaitBits+0x86>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e000      	b.n	800db40 <xEventGroupWaitBits+0x88>
 800db3e:	2300      	movs	r3, #0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <xEventGroupWaitBits+0xa2>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	617b      	str	r3, [r7, #20]
}
 800db56:	bf00      	nop
 800db58:	e7fe      	b.n	800db58 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800db5a:	f001 f945 	bl	800ede8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800db5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800db64:	683a      	ldr	r2, [r7, #0]
 800db66:	68b9      	ldr	r1, [r7, #8]
 800db68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800db6a:	f000 f90b 	bl	800dd84 <prvTestWaitCondition>
 800db6e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800db70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00e      	beq.n	800db94 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d028      	beq.n	800dbd6 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800db84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	43db      	mvns	r3, r3
 800db8c:	401a      	ands	r2, r3
 800db8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db90:	601a      	str	r2, [r3, #0]
 800db92:	e020      	b.n	800dbd6 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800db94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db96:	2b00      	cmp	r3, #0
 800db98:	d104      	bne.n	800dba4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800db9e:	2301      	movs	r3, #1
 800dba0:	633b      	str	r3, [r7, #48]	; 0x30
 800dba2:	e018      	b.n	800dbd6 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d003      	beq.n	800dbb2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dbb0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d003      	beq.n	800dbc0 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dbbe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800dbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc2:	1d18      	adds	r0, r3, #4
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbcc:	4619      	mov	r1, r3
 800dbce:	f001 fb09 	bl	800f1e4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800dbd6:	f001 f915 	bl	800ee04 <xTaskResumeAll>
 800dbda:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800dbdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d031      	beq.n	800dc46 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d107      	bne.n	800dbf8 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800dbe8:	4b19      	ldr	r3, [pc, #100]	; (800dc50 <xEventGroupWaitBits+0x198>)
 800dbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	f3bf 8f4f 	dsb	sy
 800dbf4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800dbf8:	f001 fe0c 	bl	800f814 <uxTaskResetEventItemValue>
 800dbfc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800dbfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d11a      	bne.n	800dc3e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800dc08:	f002 fbc4 	bl	8010394 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800dc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	68b9      	ldr	r1, [r7, #8]
 800dc16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dc18:	f000 f8b4 	bl	800dd84 <prvTestWaitCondition>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d009      	beq.n	800dc36 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d006      	beq.n	800dc36 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800dc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	43db      	mvns	r3, r3
 800dc30:	401a      	ands	r2, r3
 800dc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc34:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800dc36:	2301      	movs	r3, #1
 800dc38:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800dc3a:	f002 fbdb 	bl	80103f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800dc3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dc44:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800dc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3740      	adds	r7, #64	; 0x40
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	e000ed04 	.word	0xe000ed04

0800dc54 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b08e      	sub	sp, #56	; 0x38
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800dc66:	2300      	movs	r3, #0
 800dc68:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10a      	bne.n	800dc86 <xEventGroupSetBits+0x32>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	613b      	str	r3, [r7, #16]
}
 800dc82:	bf00      	nop
 800dc84:	e7fe      	b.n	800dc84 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00a      	beq.n	800dca6 <xEventGroupSetBits+0x52>
	__asm volatile
 800dc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc94:	f383 8811 	msr	BASEPRI, r3
 800dc98:	f3bf 8f6f 	isb	sy
 800dc9c:	f3bf 8f4f 	dsb	sy
 800dca0:	60fb      	str	r3, [r7, #12]
}
 800dca2:	bf00      	nop
 800dca4:	e7fe      	b.n	800dca4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	3304      	adds	r3, #4
 800dcaa:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	3308      	adds	r3, #8
 800dcb0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800dcb2:	f001 f899 	bl	800ede8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	431a      	orrs	r2, r3
 800dcc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800dcc8:	e03c      	b.n	800dd44 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800dcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800dcd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800dce0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dce8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d108      	bne.n	800dd06 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800dcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00b      	beq.n	800dd18 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800dd00:	2301      	movs	r3, #1
 800dd02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd04:	e008      	b.n	800dd18 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800dd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	4013      	ands	r3, r2
 800dd0e:	69ba      	ldr	r2, [r7, #24]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d101      	bne.n	800dd18 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800dd14:	2301      	movs	r3, #1
 800dd16:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d010      	beq.n	800dd40 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d003      	beq.n	800dd30 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800dd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd3c:	f001 fb1e 	bl	800f37c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800dd44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d1be      	bne.n	800dcca <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd52:	43db      	mvns	r3, r3
 800dd54:	401a      	ands	r2, r3
 800dd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd58:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800dd5a:	f001 f853 	bl	800ee04 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	681b      	ldr	r3, [r3, #0]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3738      	adds	r7, #56	; 0x38
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b082      	sub	sp, #8
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
 800dd72:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff ff6c 	bl	800dc54 <xEventGroupSetBits>
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800dd84:	b480      	push	{r7}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800dd90:	2300      	movs	r3, #0
 800dd92:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d107      	bne.n	800ddaa <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800dd9a:	68fa      	ldr	r2, [r7, #12]
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	4013      	ands	r3, r2
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00a      	beq.n	800ddba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800dda4:	2301      	movs	r3, #1
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	e007      	b.n	800ddba <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	4013      	ands	r3, r2
 800ddb0:	68ba      	ldr	r2, [r7, #8]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d101      	bne.n	800ddba <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800ddba:	697b      	ldr	r3, [r7, #20]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	371c      	adds	r7, #28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	68f9      	ldr	r1, [r7, #12]
 800ddda:	4804      	ldr	r0, [pc, #16]	; (800ddec <xEventGroupSetBitsFromISR+0x24>)
 800dddc:	f002 f98e 	bl	80100fc <xTimerPendFunctionCallFromISR>
 800dde0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800dde2:	697b      	ldr	r3, [r7, #20]
	}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3718      	adds	r7, #24
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	0800dd6b 	.word	0x0800dd6b

0800ddf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f103 0208 	add.w	r2, r3, #8
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f04f 32ff 	mov.w	r2, #4294967295
 800de08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f103 0208 	add.w	r2, r3, #8
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f103 0208 	add.w	r2, r3, #8
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2200      	movs	r2, #0
 800de22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de24:	bf00      	nop
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de3e:	bf00      	nop
 800de40:	370c      	adds	r7, #12
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr

0800de4a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de4a:	b480      	push	{r7}
 800de4c:	b085      	sub	sp, #20
 800de4e:	af00      	add	r7, sp, #0
 800de50:	6078      	str	r0, [r7, #4]
 800de52:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	689a      	ldr	r2, [r3, #8]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	601a      	str	r2, [r3, #0]
}
 800de86:	bf00      	nop
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de92:	b480      	push	{r7}
 800de94:	b085      	sub	sp, #20
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea8:	d103      	bne.n	800deb2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	691b      	ldr	r3, [r3, #16]
 800deae:	60fb      	str	r3, [r7, #12]
 800deb0:	e00c      	b.n	800decc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	3308      	adds	r3, #8
 800deb6:	60fb      	str	r3, [r7, #12]
 800deb8:	e002      	b.n	800dec0 <vListInsert+0x2e>
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	60fb      	str	r3, [r7, #12]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d2f6      	bcs.n	800deba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	685a      	ldr	r2, [r3, #4]
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	601a      	str	r2, [r3, #0]
}
 800def8:	bf00      	nop
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	6892      	ldr	r2, [r2, #8]
 800df1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	6852      	ldr	r2, [r2, #4]
 800df24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d103      	bne.n	800df38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	689a      	ldr	r2, [r3, #8]
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	1e5a      	subs	r2, r3, #1
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3714      	adds	r7, #20
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d10a      	bne.n	800df82 <xQueueGenericReset+0x2a>
	__asm volatile
 800df6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
 800df7c:	60bb      	str	r3, [r7, #8]
}
 800df7e:	bf00      	nop
 800df80:	e7fe      	b.n	800df80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800df82:	f002 fa07 	bl	8010394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df8e:	68f9      	ldr	r1, [r7, #12]
 800df90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800df92:	fb01 f303 	mul.w	r3, r1, r3
 800df96:	441a      	add	r2, r3
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	68f9      	ldr	r1, [r7, #12]
 800dfb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dfb8:	fb01 f303 	mul.w	r3, r1, r3
 800dfbc:	441a      	add	r2, r3
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	22ff      	movs	r2, #255	; 0xff
 800dfc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	22ff      	movs	r2, #255	; 0xff
 800dfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d114      	bne.n	800e002 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	691b      	ldr	r3, [r3, #16]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01a      	beq.n	800e016 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	3310      	adds	r3, #16
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f001 f965 	bl	800f2b4 <xTaskRemoveFromEventList>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d012      	beq.n	800e016 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800dff0:	4b0c      	ldr	r3, [pc, #48]	; (800e024 <xQueueGenericReset+0xcc>)
 800dff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dff6:	601a      	str	r2, [r3, #0]
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	e009      	b.n	800e016 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	3310      	adds	r3, #16
 800e006:	4618      	mov	r0, r3
 800e008:	f7ff fef2 	bl	800ddf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	3324      	adds	r3, #36	; 0x24
 800e010:	4618      	mov	r0, r3
 800e012:	f7ff feed 	bl	800ddf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e016:	f002 f9ed 	bl	80103f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e01a:	2301      	movs	r3, #1
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3710      	adds	r7, #16
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	e000ed04 	.word	0xe000ed04

0800e028 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08e      	sub	sp, #56	; 0x38
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
 800e034:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d10a      	bne.n	800e052 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e040:	f383 8811 	msr	BASEPRI, r3
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	f3bf 8f4f 	dsb	sy
 800e04c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e04e:	bf00      	nop
 800e050:	e7fe      	b.n	800e050 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d10a      	bne.n	800e06e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e05c:	f383 8811 	msr	BASEPRI, r3
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	f3bf 8f4f 	dsb	sy
 800e068:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e06a:	bf00      	nop
 800e06c:	e7fe      	b.n	800e06c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <xQueueGenericCreateStatic+0x52>
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <xQueueGenericCreateStatic+0x56>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <xQueueGenericCreateStatic+0x58>
 800e07e:	2300      	movs	r3, #0
 800e080:	2b00      	cmp	r3, #0
 800e082:	d10a      	bne.n	800e09a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e088:	f383 8811 	msr	BASEPRI, r3
 800e08c:	f3bf 8f6f 	isb	sy
 800e090:	f3bf 8f4f 	dsb	sy
 800e094:	623b      	str	r3, [r7, #32]
}
 800e096:	bf00      	nop
 800e098:	e7fe      	b.n	800e098 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d102      	bne.n	800e0a6 <xQueueGenericCreateStatic+0x7e>
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d101      	bne.n	800e0aa <xQueueGenericCreateStatic+0x82>
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e000      	b.n	800e0ac <xQueueGenericCreateStatic+0x84>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d10a      	bne.n	800e0c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b4:	f383 8811 	msr	BASEPRI, r3
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	f3bf 8f4f 	dsb	sy
 800e0c0:	61fb      	str	r3, [r7, #28]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e0c6:	2350      	movs	r3, #80	; 0x50
 800e0c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	2b50      	cmp	r3, #80	; 0x50
 800e0ce:	d00a      	beq.n	800e0e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	61bb      	str	r3, [r7, #24]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e0e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00d      	beq.n	800e10e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e0fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	4613      	mov	r3, r2
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	68b9      	ldr	r1, [r7, #8]
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f000 f805 	bl	800e118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e110:	4618      	mov	r0, r3
 800e112:	3730      	adds	r7, #48	; 0x30
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
 800e124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d103      	bne.n	800e134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e12c:	69bb      	ldr	r3, [r7, #24]
 800e12e:	69ba      	ldr	r2, [r7, #24]
 800e130:	601a      	str	r2, [r3, #0]
 800e132:	e002      	b.n	800e13a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e146:	2101      	movs	r1, #1
 800e148:	69b8      	ldr	r0, [r7, #24]
 800e14a:	f7ff ff05 	bl	800df58 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e14e:	69bb      	ldr	r3, [r7, #24]
 800e150:	78fa      	ldrb	r2, [r7, #3]
 800e152:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b08e      	sub	sp, #56	; 0x38
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
 800e16c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e16e:	2300      	movs	r3, #0
 800e170:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d10a      	bne.n	800e192 <xQueueGenericSend+0x32>
	__asm volatile
 800e17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e180:	f383 8811 	msr	BASEPRI, r3
 800e184:	f3bf 8f6f 	isb	sy
 800e188:	f3bf 8f4f 	dsb	sy
 800e18c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e18e:	bf00      	nop
 800e190:	e7fe      	b.n	800e190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d103      	bne.n	800e1a0 <xQueueGenericSend+0x40>
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d101      	bne.n	800e1a4 <xQueueGenericSend+0x44>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e000      	b.n	800e1a6 <xQueueGenericSend+0x46>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d10a      	bne.n	800e1c0 <xQueueGenericSend+0x60>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1bc:	bf00      	nop
 800e1be:	e7fe      	b.n	800e1be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	d103      	bne.n	800e1ce <xQueueGenericSend+0x6e>
 800e1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d101      	bne.n	800e1d2 <xQueueGenericSend+0x72>
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e000      	b.n	800e1d4 <xQueueGenericSend+0x74>
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <xQueueGenericSend+0x8e>
	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	623b      	str	r3, [r7, #32]
}
 800e1ea:	bf00      	nop
 800e1ec:	e7fe      	b.n	800e1ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e1ee:	f001 fa85 	bl	800f6fc <xTaskGetSchedulerState>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d102      	bne.n	800e1fe <xQueueGenericSend+0x9e>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <xQueueGenericSend+0xa2>
 800e1fe:	2301      	movs	r3, #1
 800e200:	e000      	b.n	800e204 <xQueueGenericSend+0xa4>
 800e202:	2300      	movs	r3, #0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d10a      	bne.n	800e21e <xQueueGenericSend+0xbe>
	__asm volatile
 800e208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20c:	f383 8811 	msr	BASEPRI, r3
 800e210:	f3bf 8f6f 	isb	sy
 800e214:	f3bf 8f4f 	dsb	sy
 800e218:	61fb      	str	r3, [r7, #28]
}
 800e21a:	bf00      	nop
 800e21c:	e7fe      	b.n	800e21c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e21e:	f002 f8b9 	bl	8010394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d302      	bcc.n	800e234 <xQueueGenericSend+0xd4>
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b02      	cmp	r3, #2
 800e232:	d129      	bne.n	800e288 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e234:	683a      	ldr	r2, [r7, #0]
 800e236:	68b9      	ldr	r1, [r7, #8]
 800e238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e23a:	f000 fa0b 	bl	800e654 <prvCopyDataToQueue>
 800e23e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e244:	2b00      	cmp	r3, #0
 800e246:	d010      	beq.n	800e26a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24a:	3324      	adds	r3, #36	; 0x24
 800e24c:	4618      	mov	r0, r3
 800e24e:	f001 f831 	bl	800f2b4 <xTaskRemoveFromEventList>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d013      	beq.n	800e280 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e258:	4b3f      	ldr	r3, [pc, #252]	; (800e358 <xQueueGenericSend+0x1f8>)
 800e25a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e25e:	601a      	str	r2, [r3, #0]
 800e260:	f3bf 8f4f 	dsb	sy
 800e264:	f3bf 8f6f 	isb	sy
 800e268:	e00a      	b.n	800e280 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d007      	beq.n	800e280 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e270:	4b39      	ldr	r3, [pc, #228]	; (800e358 <xQueueGenericSend+0x1f8>)
 800e272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e276:	601a      	str	r2, [r3, #0]
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e280:	f002 f8b8 	bl	80103f4 <vPortExitCritical>
				return pdPASS;
 800e284:	2301      	movs	r3, #1
 800e286:	e063      	b.n	800e350 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d103      	bne.n	800e296 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e28e:	f002 f8b1 	bl	80103f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e292:	2300      	movs	r3, #0
 800e294:	e05c      	b.n	800e350 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e29c:	f107 0314 	add.w	r3, r7, #20
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f001 f8cd 	bl	800f440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e2aa:	f002 f8a3 	bl	80103f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e2ae:	f000 fd9b 	bl	800ede8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e2b2:	f002 f86f 	bl	8010394 <vPortEnterCritical>
 800e2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2bc:	b25b      	sxtb	r3, r3
 800e2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c2:	d103      	bne.n	800e2cc <xQueueGenericSend+0x16c>
 800e2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2d2:	b25b      	sxtb	r3, r3
 800e2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d8:	d103      	bne.n	800e2e2 <xQueueGenericSend+0x182>
 800e2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2e2:	f002 f887 	bl	80103f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e2e6:	1d3a      	adds	r2, r7, #4
 800e2e8:	f107 0314 	add.w	r3, r7, #20
 800e2ec:	4611      	mov	r1, r2
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f001 f8bc 	bl	800f46c <xTaskCheckForTimeOut>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d124      	bne.n	800e344 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e2fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2fc:	f000 faa2 	bl	800e844 <prvIsQueueFull>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d018      	beq.n	800e338 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e308:	3310      	adds	r3, #16
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	4611      	mov	r1, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f000 ff44 	bl	800f19c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e316:	f000 fa2d 	bl	800e774 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e31a:	f000 fd73 	bl	800ee04 <xTaskResumeAll>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	f47f af7c 	bne.w	800e21e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e326:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <xQueueGenericSend+0x1f8>)
 800e328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e32c:	601a      	str	r2, [r3, #0]
 800e32e:	f3bf 8f4f 	dsb	sy
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	e772      	b.n	800e21e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e33a:	f000 fa1b 	bl	800e774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e33e:	f000 fd61 	bl	800ee04 <xTaskResumeAll>
 800e342:	e76c      	b.n	800e21e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e346:	f000 fa15 	bl	800e774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e34a:	f000 fd5b 	bl	800ee04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e34e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e350:	4618      	mov	r0, r3
 800e352:	3738      	adds	r7, #56	; 0x38
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	e000ed04 	.word	0xe000ed04

0800e35c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b090      	sub	sp, #64	; 0x40
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e370:	2b00      	cmp	r3, #0
 800e372:	d10a      	bne.n	800e38a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e386:	bf00      	nop
 800e388:	e7fe      	b.n	800e388 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d103      	bne.n	800e398 <xQueueGenericSendFromISR+0x3c>
 800e390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <xQueueGenericSendFromISR+0x40>
 800e398:	2301      	movs	r3, #1
 800e39a:	e000      	b.n	800e39e <xQueueGenericSendFromISR+0x42>
 800e39c:	2300      	movs	r3, #0
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d10a      	bne.n	800e3b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e3b4:	bf00      	nop
 800e3b6:	e7fe      	b.n	800e3b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d103      	bne.n	800e3c6 <xQueueGenericSendFromISR+0x6a>
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d101      	bne.n	800e3ca <xQueueGenericSendFromISR+0x6e>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e000      	b.n	800e3cc <xQueueGenericSendFromISR+0x70>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	623b      	str	r3, [r7, #32]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e3e6:	f002 f8b7 	bl	8010558 <vPortValidateInterruptPriority>
	__asm volatile
 800e3ea:	f3ef 8211 	mrs	r2, BASEPRI
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	61fa      	str	r2, [r7, #28]
 800e400:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e402:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e404:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e40e:	429a      	cmp	r2, r3
 800e410:	d302      	bcc.n	800e418 <xQueueGenericSendFromISR+0xbc>
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b02      	cmp	r3, #2
 800e416:	d12f      	bne.n	800e478 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e426:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e428:	683a      	ldr	r2, [r7, #0]
 800e42a:	68b9      	ldr	r1, [r7, #8]
 800e42c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e42e:	f000 f911 	bl	800e654 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e432:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e43a:	d112      	bne.n	800e462 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e440:	2b00      	cmp	r3, #0
 800e442:	d016      	beq.n	800e472 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	3324      	adds	r3, #36	; 0x24
 800e448:	4618      	mov	r0, r3
 800e44a:	f000 ff33 	bl	800f2b4 <xTaskRemoveFromEventList>
 800e44e:	4603      	mov	r3, r0
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00e      	beq.n	800e472 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00b      	beq.n	800e472 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	601a      	str	r2, [r3, #0]
 800e460:	e007      	b.n	800e472 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e466:	3301      	adds	r3, #1
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	b25a      	sxtb	r2, r3
 800e46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e472:	2301      	movs	r3, #1
 800e474:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e476:	e001      	b.n	800e47c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	f383 8811 	msr	BASEPRI, r3
}
 800e486:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e48a:	4618      	mov	r0, r3
 800e48c:	3740      	adds	r7, #64	; 0x40
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
	...

0800e494 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b08c      	sub	sp, #48	; 0x30
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d10a      	bne.n	800e4c4 <xQueueReceive+0x30>
	__asm volatile
 800e4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	623b      	str	r3, [r7, #32]
}
 800e4c0:	bf00      	nop
 800e4c2:	e7fe      	b.n	800e4c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d103      	bne.n	800e4d2 <xQueueReceive+0x3e>
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d101      	bne.n	800e4d6 <xQueueReceive+0x42>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	e000      	b.n	800e4d8 <xQueueReceive+0x44>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d10a      	bne.n	800e4f2 <xQueueReceive+0x5e>
	__asm volatile
 800e4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e0:	f383 8811 	msr	BASEPRI, r3
 800e4e4:	f3bf 8f6f 	isb	sy
 800e4e8:	f3bf 8f4f 	dsb	sy
 800e4ec:	61fb      	str	r3, [r7, #28]
}
 800e4ee:	bf00      	nop
 800e4f0:	e7fe      	b.n	800e4f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4f2:	f001 f903 	bl	800f6fc <xTaskGetSchedulerState>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <xQueueReceive+0x6e>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d101      	bne.n	800e506 <xQueueReceive+0x72>
 800e502:	2301      	movs	r3, #1
 800e504:	e000      	b.n	800e508 <xQueueReceive+0x74>
 800e506:	2300      	movs	r3, #0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d10a      	bne.n	800e522 <xQueueReceive+0x8e>
	__asm volatile
 800e50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e510:	f383 8811 	msr	BASEPRI, r3
 800e514:	f3bf 8f6f 	isb	sy
 800e518:	f3bf 8f4f 	dsb	sy
 800e51c:	61bb      	str	r3, [r7, #24]
}
 800e51e:	bf00      	nop
 800e520:	e7fe      	b.n	800e520 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e522:	f001 ff37 	bl	8010394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d01f      	beq.n	800e572 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e532:	68b9      	ldr	r1, [r7, #8]
 800e534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e536:	f000 f8f7 	bl	800e728 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	1e5a      	subs	r2, r3, #1
 800e53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e540:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00f      	beq.n	800e56a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e54c:	3310      	adds	r3, #16
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 feb0 	bl	800f2b4 <xTaskRemoveFromEventList>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d007      	beq.n	800e56a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e55a:	4b3d      	ldr	r3, [pc, #244]	; (800e650 <xQueueReceive+0x1bc>)
 800e55c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e560:	601a      	str	r2, [r3, #0]
 800e562:	f3bf 8f4f 	dsb	sy
 800e566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e56a:	f001 ff43 	bl	80103f4 <vPortExitCritical>
				return pdPASS;
 800e56e:	2301      	movs	r3, #1
 800e570:	e069      	b.n	800e646 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d103      	bne.n	800e580 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e578:	f001 ff3c 	bl	80103f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e57c:	2300      	movs	r3, #0
 800e57e:	e062      	b.n	800e646 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e582:	2b00      	cmp	r3, #0
 800e584:	d106      	bne.n	800e594 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e586:	f107 0310 	add.w	r3, r7, #16
 800e58a:	4618      	mov	r0, r3
 800e58c:	f000 ff58 	bl	800f440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e590:	2301      	movs	r3, #1
 800e592:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e594:	f001 ff2e 	bl	80103f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e598:	f000 fc26 	bl	800ede8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e59c:	f001 fefa 	bl	8010394 <vPortEnterCritical>
 800e5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5a6:	b25b      	sxtb	r3, r3
 800e5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ac:	d103      	bne.n	800e5b6 <xQueueReceive+0x122>
 800e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5bc:	b25b      	sxtb	r3, r3
 800e5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c2:	d103      	bne.n	800e5cc <xQueueReceive+0x138>
 800e5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5cc:	f001 ff12 	bl	80103f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5d0:	1d3a      	adds	r2, r7, #4
 800e5d2:	f107 0310 	add.w	r3, r7, #16
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 ff47 	bl	800f46c <xTaskCheckForTimeOut>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d123      	bne.n	800e62c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e5e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5e6:	f000 f917 	bl	800e818 <prvIsQueueEmpty>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d017      	beq.n	800e620 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f2:	3324      	adds	r3, #36	; 0x24
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f000 fdcf 	bl	800f19c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e600:	f000 f8b8 	bl	800e774 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e604:	f000 fbfe 	bl	800ee04 <xTaskResumeAll>
 800e608:	4603      	mov	r3, r0
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d189      	bne.n	800e522 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e60e:	4b10      	ldr	r3, [pc, #64]	; (800e650 <xQueueReceive+0x1bc>)
 800e610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e614:	601a      	str	r2, [r3, #0]
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	e780      	b.n	800e522 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e622:	f000 f8a7 	bl	800e774 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e626:	f000 fbed 	bl	800ee04 <xTaskResumeAll>
 800e62a:	e77a      	b.n	800e522 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e62e:	f000 f8a1 	bl	800e774 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e632:	f000 fbe7 	bl	800ee04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e638:	f000 f8ee 	bl	800e818 <prvIsQueueEmpty>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f43f af6f 	beq.w	800e522 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e644:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e646:	4618      	mov	r0, r3
 800e648:	3730      	adds	r7, #48	; 0x30
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	e000ed04 	.word	0xe000ed04

0800e654 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b086      	sub	sp, #24
 800e658:	af00      	add	r7, sp, #0
 800e65a:	60f8      	str	r0, [r7, #12]
 800e65c:	60b9      	str	r1, [r7, #8]
 800e65e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e660:	2300      	movs	r3, #0
 800e662:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e668:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d10d      	bne.n	800e68e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d14d      	bne.n	800e716 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	4618      	mov	r0, r3
 800e680:	f001 f85a 	bl	800f738 <xTaskPriorityDisinherit>
 800e684:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	609a      	str	r2, [r3, #8]
 800e68c:	e043      	b.n	800e716 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d119      	bne.n	800e6c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6858      	ldr	r0, [r3, #4]
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e69c:	461a      	mov	r2, r3
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	f003 f86c 	bl	801177c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	685a      	ldr	r2, [r3, #4]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ac:	441a      	add	r2, r3
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	685a      	ldr	r2, [r3, #4]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	689b      	ldr	r3, [r3, #8]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d32b      	bcc.n	800e716 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681a      	ldr	r2, [r3, #0]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	605a      	str	r2, [r3, #4]
 800e6c6:	e026      	b.n	800e716 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	68d8      	ldr	r0, [r3, #12]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	68b9      	ldr	r1, [r7, #8]
 800e6d4:	f003 f852 	bl	801177c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	68da      	ldr	r2, [r3, #12]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6e0:	425b      	negs	r3, r3
 800e6e2:	441a      	add	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	68da      	ldr	r2, [r3, #12]
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d207      	bcs.n	800e704 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	689a      	ldr	r2, [r3, #8]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6fc:	425b      	negs	r3, r3
 800e6fe:	441a      	add	r2, r3
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2b02      	cmp	r3, #2
 800e708:	d105      	bne.n	800e716 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	3b01      	subs	r3, #1
 800e714:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e71e:	697b      	ldr	r3, [r7, #20]
}
 800e720:	4618      	mov	r0, r3
 800e722:	3718      	adds	r7, #24
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e736:	2b00      	cmp	r3, #0
 800e738:	d018      	beq.n	800e76c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	68da      	ldr	r2, [r3, #12]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e742:	441a      	add	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	68da      	ldr	r2, [r3, #12]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	689b      	ldr	r3, [r3, #8]
 800e750:	429a      	cmp	r2, r3
 800e752:	d303      	bcc.n	800e75c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681a      	ldr	r2, [r3, #0]
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	68d9      	ldr	r1, [r3, #12]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e764:	461a      	mov	r2, r3
 800e766:	6838      	ldr	r0, [r7, #0]
 800e768:	f003 f808 	bl	801177c <memcpy>
	}
}
 800e76c:	bf00      	nop
 800e76e:	3708      	adds	r7, #8
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e77c:	f001 fe0a 	bl	8010394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e786:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e788:	e011      	b.n	800e7ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d012      	beq.n	800e7b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	3324      	adds	r3, #36	; 0x24
 800e796:	4618      	mov	r0, r3
 800e798:	f000 fd8c 	bl	800f2b4 <xTaskRemoveFromEventList>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e7a2:	f000 fec5 	bl	800f530 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e7a6:	7bfb      	ldrb	r3, [r7, #15]
 800e7a8:	3b01      	subs	r3, #1
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e7ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	dce9      	bgt.n	800e78a <prvUnlockQueue+0x16>
 800e7b6:	e000      	b.n	800e7ba <prvUnlockQueue+0x46>
					break;
 800e7b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	22ff      	movs	r2, #255	; 0xff
 800e7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e7c2:	f001 fe17 	bl	80103f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e7c6:	f001 fde5 	bl	8010394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7d2:	e011      	b.n	800e7f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d012      	beq.n	800e802 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	3310      	adds	r3, #16
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 fd67 	bl	800f2b4 <xTaskRemoveFromEventList>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d001      	beq.n	800e7f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e7ec:	f000 fea0 	bl	800f530 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e7f0:	7bbb      	ldrb	r3, [r7, #14]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e7f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dce9      	bgt.n	800e7d4 <prvUnlockQueue+0x60>
 800e800:	e000      	b.n	800e804 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e802:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	22ff      	movs	r2, #255	; 0xff
 800e808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e80c:	f001 fdf2 	bl	80103f4 <vPortExitCritical>
}
 800e810:	bf00      	nop
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e820:	f001 fdb8 	bl	8010394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d102      	bne.n	800e832 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e82c:	2301      	movs	r3, #1
 800e82e:	60fb      	str	r3, [r7, #12]
 800e830:	e001      	b.n	800e836 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e832:	2300      	movs	r3, #0
 800e834:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e836:	f001 fddd 	bl	80103f4 <vPortExitCritical>

	return xReturn;
 800e83a:	68fb      	ldr	r3, [r7, #12]
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e84c:	f001 fda2 	bl	8010394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e858:	429a      	cmp	r2, r3
 800e85a:	d102      	bne.n	800e862 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e85c:	2301      	movs	r3, #1
 800e85e:	60fb      	str	r3, [r7, #12]
 800e860:	e001      	b.n	800e866 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e862:	2300      	movs	r3, #0
 800e864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e866:	f001 fdc5 	bl	80103f4 <vPortExitCritical>

	return xReturn;
 800e86a:	68fb      	ldr	r3, [r7, #12]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3710      	adds	r7, #16
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e87e:	2300      	movs	r3, #0
 800e880:	60fb      	str	r3, [r7, #12]
 800e882:	e014      	b.n	800e8ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e884:	4a0f      	ldr	r2, [pc, #60]	; (800e8c4 <vQueueAddToRegistry+0x50>)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d10b      	bne.n	800e8a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e890:	490c      	ldr	r1, [pc, #48]	; (800e8c4 <vQueueAddToRegistry+0x50>)
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	683a      	ldr	r2, [r7, #0]
 800e896:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e89a:	4a0a      	ldr	r2, [pc, #40]	; (800e8c4 <vQueueAddToRegistry+0x50>)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	00db      	lsls	r3, r3, #3
 800e8a0:	4413      	add	r3, r2
 800e8a2:	687a      	ldr	r2, [r7, #4]
 800e8a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e8a6:	e006      	b.n	800e8b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b07      	cmp	r3, #7
 800e8b2:	d9e7      	bls.n	800e884 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	3714      	adds	r7, #20
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr
 800e8c2:	bf00      	nop
 800e8c4:	20000c70 	.word	0x20000c70

0800e8c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b086      	sub	sp, #24
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e8d8:	f001 fd5c 	bl	8010394 <vPortEnterCritical>
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8e2:	b25b      	sxtb	r3, r3
 800e8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e8:	d103      	bne.n	800e8f2 <vQueueWaitForMessageRestricted+0x2a>
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8f8:	b25b      	sxtb	r3, r3
 800e8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8fe:	d103      	bne.n	800e908 <vQueueWaitForMessageRestricted+0x40>
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	2200      	movs	r2, #0
 800e904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e908:	f001 fd74 	bl	80103f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e910:	2b00      	cmp	r3, #0
 800e912:	d106      	bne.n	800e922 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	3324      	adds	r3, #36	; 0x24
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	68b9      	ldr	r1, [r7, #8]
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 fc9d 	bl	800f25c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e922:	6978      	ldr	r0, [r7, #20]
 800e924:	f7ff ff26 	bl	800e774 <prvUnlockQueue>
	}
 800e928:	bf00      	nop
 800e92a:	3718      	adds	r7, #24
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e930:	b580      	push	{r7, lr}
 800e932:	b08e      	sub	sp, #56	; 0x38
 800e934:	af04      	add	r7, sp, #16
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
 800e93c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10a      	bne.n	800e95a <xTaskCreateStatic+0x2a>
	__asm volatile
 800e944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e948:	f383 8811 	msr	BASEPRI, r3
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	623b      	str	r3, [r7, #32]
}
 800e956:	bf00      	nop
 800e958:	e7fe      	b.n	800e958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d10a      	bne.n	800e976 <xTaskCreateStatic+0x46>
	__asm volatile
 800e960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	61fb      	str	r3, [r7, #28]
}
 800e972:	bf00      	nop
 800e974:	e7fe      	b.n	800e974 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e976:	23bc      	movs	r3, #188	; 0xbc
 800e978:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	2bbc      	cmp	r3, #188	; 0xbc
 800e97e:	d00a      	beq.n	800e996 <xTaskCreateStatic+0x66>
	__asm volatile
 800e980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e984:	f383 8811 	msr	BASEPRI, r3
 800e988:	f3bf 8f6f 	isb	sy
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	61bb      	str	r3, [r7, #24]
}
 800e992:	bf00      	nop
 800e994:	e7fe      	b.n	800e994 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e996:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d01e      	beq.n	800e9dc <xTaskCreateStatic+0xac>
 800e99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d01b      	beq.n	800e9dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b0:	2202      	movs	r2, #2
 800e9b2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	9303      	str	r3, [sp, #12]
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	9302      	str	r3, [sp, #8]
 800e9be:	f107 0314 	add.w	r3, r7, #20
 800e9c2:	9301      	str	r3, [sp, #4]
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	68b9      	ldr	r1, [r7, #8]
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f000 f850 	bl	800ea74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e9d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9d6:	f000 f8f3 	bl	800ebc0 <prvAddNewTaskToReadyList>
 800e9da:	e001      	b.n	800e9e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e9e0:	697b      	ldr	r3, [r7, #20]
	}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3728      	adds	r7, #40	; 0x28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b08c      	sub	sp, #48	; 0x30
 800e9ee:	af04      	add	r7, sp, #16
 800e9f0:	60f8      	str	r0, [r7, #12]
 800e9f2:	60b9      	str	r1, [r7, #8]
 800e9f4:	603b      	str	r3, [r7, #0]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e9fa:	88fb      	ldrh	r3, [r7, #6]
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f001 fdea 	bl	80105d8 <pvPortMalloc>
 800ea04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d00e      	beq.n	800ea2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ea0c:	20bc      	movs	r0, #188	; 0xbc
 800ea0e:	f001 fde3 	bl	80105d8 <pvPortMalloc>
 800ea12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d003      	beq.n	800ea22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	697a      	ldr	r2, [r7, #20]
 800ea1e:	631a      	str	r2, [r3, #48]	; 0x30
 800ea20:	e005      	b.n	800ea2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ea22:	6978      	ldr	r0, [r7, #20]
 800ea24:	f001 fea4 	bl	8010770 <vPortFree>
 800ea28:	e001      	b.n	800ea2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d017      	beq.n	800ea64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ea3c:	88fa      	ldrh	r2, [r7, #6]
 800ea3e:	2300      	movs	r3, #0
 800ea40:	9303      	str	r3, [sp, #12]
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	9302      	str	r3, [sp, #8]
 800ea46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	68b9      	ldr	r1, [r7, #8]
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 f80e 	bl	800ea74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea58:	69f8      	ldr	r0, [r7, #28]
 800ea5a:	f000 f8b1 	bl	800ebc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	61bb      	str	r3, [r7, #24]
 800ea62:	e002      	b.n	800ea6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ea64:	f04f 33ff 	mov.w	r3, #4294967295
 800ea68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ea6a:	69bb      	ldr	r3, [r7, #24]
	}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3720      	adds	r7, #32
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b088      	sub	sp, #32
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ea82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	21a5      	movs	r1, #165	; 0xa5
 800ea8e:	f002 fe83 	bl	8011798 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ea92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	4413      	add	r3, r2
 800eaa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	f023 0307 	bic.w	r3, r3, #7
 800eaaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	f003 0307 	and.w	r3, r3, #7
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00a      	beq.n	800eacc <prvInitialiseNewTask+0x58>
	__asm volatile
 800eab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaba:	f383 8811 	msr	BASEPRI, r3
 800eabe:	f3bf 8f6f 	isb	sy
 800eac2:	f3bf 8f4f 	dsb	sy
 800eac6:	617b      	str	r3, [r7, #20]
}
 800eac8:	bf00      	nop
 800eaca:	e7fe      	b.n	800eaca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d01f      	beq.n	800eb12 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ead2:	2300      	movs	r3, #0
 800ead4:	61fb      	str	r3, [r7, #28]
 800ead6:	e012      	b.n	800eafe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	4413      	add	r3, r2
 800eade:	7819      	ldrb	r1, [r3, #0]
 800eae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	4413      	add	r3, r2
 800eae6:	3334      	adds	r3, #52	; 0x34
 800eae8:	460a      	mov	r2, r1
 800eaea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eaec:	68ba      	ldr	r2, [r7, #8]
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	781b      	ldrb	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d006      	beq.n	800eb06 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	3301      	adds	r3, #1
 800eafc:	61fb      	str	r3, [r7, #28]
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	2b0f      	cmp	r3, #15
 800eb02:	d9e9      	bls.n	800ead8 <prvInitialiseNewTask+0x64>
 800eb04:	e000      	b.n	800eb08 <prvInitialiseNewTask+0x94>
			{
				break;
 800eb06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eb10:	e003      	b.n	800eb1a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1c:	2b37      	cmp	r3, #55	; 0x37
 800eb1e:	d901      	bls.n	800eb24 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eb20:	2337      	movs	r3, #55	; 0x37
 800eb22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb32:	2200      	movs	r2, #0
 800eb34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	3304      	adds	r3, #4
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff f978 	bl	800de30 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800eb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb42:	3318      	adds	r3, #24
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff f973 	bl	800de30 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800eb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb62:	2200      	movs	r2, #0
 800eb64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800eb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb72:	3354      	adds	r3, #84	; 0x54
 800eb74:	2260      	movs	r2, #96	; 0x60
 800eb76:	2100      	movs	r1, #0
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f002 fe0d 	bl	8011798 <memset>
 800eb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb80:	4a0c      	ldr	r2, [pc, #48]	; (800ebb4 <prvInitialiseNewTask+0x140>)
 800eb82:	659a      	str	r2, [r3, #88]	; 0x58
 800eb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb86:	4a0c      	ldr	r2, [pc, #48]	; (800ebb8 <prvInitialiseNewTask+0x144>)
 800eb88:	65da      	str	r2, [r3, #92]	; 0x5c
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	4a0b      	ldr	r2, [pc, #44]	; (800ebbc <prvInitialiseNewTask+0x148>)
 800eb8e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	68f9      	ldr	r1, [r7, #12]
 800eb94:	69b8      	ldr	r0, [r7, #24]
 800eb96:	f001 fad1 	bl	801013c <pxPortInitialiseStack>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d002      	beq.n	800ebac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebac:	bf00      	nop
 800ebae:	3720      	adds	r7, #32
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	08012b48 	.word	0x08012b48
 800ebb8:	08012b68 	.word	0x08012b68
 800ebbc:	08012b28 	.word	0x08012b28

0800ebc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ebc8:	f001 fbe4 	bl	8010394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ebcc:	4b2d      	ldr	r3, [pc, #180]	; (800ec84 <prvAddNewTaskToReadyList+0xc4>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	4a2c      	ldr	r2, [pc, #176]	; (800ec84 <prvAddNewTaskToReadyList+0xc4>)
 800ebd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ebd6:	4b2c      	ldr	r3, [pc, #176]	; (800ec88 <prvAddNewTaskToReadyList+0xc8>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d109      	bne.n	800ebf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ebde:	4a2a      	ldr	r2, [pc, #168]	; (800ec88 <prvAddNewTaskToReadyList+0xc8>)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ebe4:	4b27      	ldr	r3, [pc, #156]	; (800ec84 <prvAddNewTaskToReadyList+0xc4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d110      	bne.n	800ec0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ebec:	f000 fcc4 	bl	800f578 <prvInitialiseTaskLists>
 800ebf0:	e00d      	b.n	800ec0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ebf2:	4b26      	ldr	r3, [pc, #152]	; (800ec8c <prvAddNewTaskToReadyList+0xcc>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d109      	bne.n	800ec0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ebfa:	4b23      	ldr	r3, [pc, #140]	; (800ec88 <prvAddNewTaskToReadyList+0xc8>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d802      	bhi.n	800ec0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ec08:	4a1f      	ldr	r2, [pc, #124]	; (800ec88 <prvAddNewTaskToReadyList+0xc8>)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ec0e:	4b20      	ldr	r3, [pc, #128]	; (800ec90 <prvAddNewTaskToReadyList+0xd0>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	3301      	adds	r3, #1
 800ec14:	4a1e      	ldr	r2, [pc, #120]	; (800ec90 <prvAddNewTaskToReadyList+0xd0>)
 800ec16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ec18:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <prvAddNewTaskToReadyList+0xd0>)
 800ec1a:	681a      	ldr	r2, [r3, #0]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec24:	4b1b      	ldr	r3, [pc, #108]	; (800ec94 <prvAddNewTaskToReadyList+0xd4>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d903      	bls.n	800ec34 <prvAddNewTaskToReadyList+0x74>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec30:	4a18      	ldr	r2, [pc, #96]	; (800ec94 <prvAddNewTaskToReadyList+0xd4>)
 800ec32:	6013      	str	r3, [r2, #0]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec38:	4613      	mov	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	009b      	lsls	r3, r3, #2
 800ec40:	4a15      	ldr	r2, [pc, #84]	; (800ec98 <prvAddNewTaskToReadyList+0xd8>)
 800ec42:	441a      	add	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	3304      	adds	r3, #4
 800ec48:	4619      	mov	r1, r3
 800ec4a:	4610      	mov	r0, r2
 800ec4c:	f7ff f8fd 	bl	800de4a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ec50:	f001 fbd0 	bl	80103f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ec54:	4b0d      	ldr	r3, [pc, #52]	; (800ec8c <prvAddNewTaskToReadyList+0xcc>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d00e      	beq.n	800ec7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ec5c:	4b0a      	ldr	r3, [pc, #40]	; (800ec88 <prvAddNewTaskToReadyList+0xc8>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec66:	429a      	cmp	r2, r3
 800ec68:	d207      	bcs.n	800ec7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	; (800ec9c <prvAddNewTaskToReadyList+0xdc>)
 800ec6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec70:	601a      	str	r2, [r3, #0]
 800ec72:	f3bf 8f4f 	dsb	sy
 800ec76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec7a:	bf00      	nop
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	20001184 	.word	0x20001184
 800ec88:	20000cb0 	.word	0x20000cb0
 800ec8c:	20001190 	.word	0x20001190
 800ec90:	200011a0 	.word	0x200011a0
 800ec94:	2000118c 	.word	0x2000118c
 800ec98:	20000cb4 	.word	0x20000cb4
 800ec9c:	e000ed04 	.word	0xe000ed04

0800eca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eca8:	2300      	movs	r3, #0
 800ecaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d017      	beq.n	800ece2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ecb2:	4b13      	ldr	r3, [pc, #76]	; (800ed00 <vTaskDelay+0x60>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00a      	beq.n	800ecd0 <vTaskDelay+0x30>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	60bb      	str	r3, [r7, #8]
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ecd0:	f000 f88a 	bl	800ede8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 fdb4 	bl	800f844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ecdc:	f000 f892 	bl	800ee04 <xTaskResumeAll>
 800ece0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d107      	bne.n	800ecf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ece8:	4b06      	ldr	r3, [pc, #24]	; (800ed04 <vTaskDelay+0x64>)
 800ecea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecee:	601a      	str	r2, [r3, #0]
 800ecf0:	f3bf 8f4f 	dsb	sy
 800ecf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ecf8:	bf00      	nop
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	200011ac 	.word	0x200011ac
 800ed04:	e000ed04 	.word	0xe000ed04

0800ed08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b08a      	sub	sp, #40	; 0x28
 800ed0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ed12:	2300      	movs	r3, #0
 800ed14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ed16:	463a      	mov	r2, r7
 800ed18:	1d39      	adds	r1, r7, #4
 800ed1a:	f107 0308 	add.w	r3, r7, #8
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fe fe44 	bl	800d9ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ed24:	6839      	ldr	r1, [r7, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	9202      	str	r2, [sp, #8]
 800ed2c:	9301      	str	r3, [sp, #4]
 800ed2e:	2300      	movs	r3, #0
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	2300      	movs	r3, #0
 800ed34:	460a      	mov	r2, r1
 800ed36:	4924      	ldr	r1, [pc, #144]	; (800edc8 <vTaskStartScheduler+0xc0>)
 800ed38:	4824      	ldr	r0, [pc, #144]	; (800edcc <vTaskStartScheduler+0xc4>)
 800ed3a:	f7ff fdf9 	bl	800e930 <xTaskCreateStatic>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	4a23      	ldr	r2, [pc, #140]	; (800edd0 <vTaskStartScheduler+0xc8>)
 800ed42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ed44:	4b22      	ldr	r3, [pc, #136]	; (800edd0 <vTaskStartScheduler+0xc8>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	617b      	str	r3, [r7, #20]
 800ed50:	e001      	b.n	800ed56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ed52:	2300      	movs	r3, #0
 800ed54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d102      	bne.n	800ed62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ed5c:	f000 fdc6 	bl	800f8ec <xTimerCreateTimerTask>
 800ed60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d11b      	bne.n	800eda0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed6c:	f383 8811 	msr	BASEPRI, r3
 800ed70:	f3bf 8f6f 	isb	sy
 800ed74:	f3bf 8f4f 	dsb	sy
 800ed78:	613b      	str	r3, [r7, #16]
}
 800ed7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ed7c:	4b15      	ldr	r3, [pc, #84]	; (800edd4 <vTaskStartScheduler+0xcc>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	3354      	adds	r3, #84	; 0x54
 800ed82:	4a15      	ldr	r2, [pc, #84]	; (800edd8 <vTaskStartScheduler+0xd0>)
 800ed84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ed86:	4b15      	ldr	r3, [pc, #84]	; (800eddc <vTaskStartScheduler+0xd4>)
 800ed88:	f04f 32ff 	mov.w	r2, #4294967295
 800ed8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed8e:	4b14      	ldr	r3, [pc, #80]	; (800ede0 <vTaskStartScheduler+0xd8>)
 800ed90:	2201      	movs	r2, #1
 800ed92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed94:	4b13      	ldr	r3, [pc, #76]	; (800ede4 <vTaskStartScheduler+0xdc>)
 800ed96:	2200      	movs	r2, #0
 800ed98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ed9a:	f001 fa59 	bl	8010250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ed9e:	e00e      	b.n	800edbe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda6:	d10a      	bne.n	800edbe <vTaskStartScheduler+0xb6>
	__asm volatile
 800eda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edac:	f383 8811 	msr	BASEPRI, r3
 800edb0:	f3bf 8f6f 	isb	sy
 800edb4:	f3bf 8f4f 	dsb	sy
 800edb8:	60fb      	str	r3, [r7, #12]
}
 800edba:	bf00      	nop
 800edbc:	e7fe      	b.n	800edbc <vTaskStartScheduler+0xb4>
}
 800edbe:	bf00      	nop
 800edc0:	3718      	adds	r7, #24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	08012a48 	.word	0x08012a48
 800edcc:	0800f549 	.word	0x0800f549
 800edd0:	200011a8 	.word	0x200011a8
 800edd4:	20000cb0 	.word	0x20000cb0
 800edd8:	20000124 	.word	0x20000124
 800eddc:	200011a4 	.word	0x200011a4
 800ede0:	20001190 	.word	0x20001190
 800ede4:	20001188 	.word	0x20001188

0800ede8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ede8:	b480      	push	{r7}
 800edea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800edec:	4b04      	ldr	r3, [pc, #16]	; (800ee00 <vTaskSuspendAll+0x18>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	3301      	adds	r3, #1
 800edf2:	4a03      	ldr	r2, [pc, #12]	; (800ee00 <vTaskSuspendAll+0x18>)
 800edf4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800edf6:	bf00      	nop
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr
 800ee00:	200011ac 	.word	0x200011ac

0800ee04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ee12:	4b42      	ldr	r3, [pc, #264]	; (800ef1c <xTaskResumeAll+0x118>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d10a      	bne.n	800ee30 <xTaskResumeAll+0x2c>
	__asm volatile
 800ee1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1e:	f383 8811 	msr	BASEPRI, r3
 800ee22:	f3bf 8f6f 	isb	sy
 800ee26:	f3bf 8f4f 	dsb	sy
 800ee2a:	603b      	str	r3, [r7, #0]
}
 800ee2c:	bf00      	nop
 800ee2e:	e7fe      	b.n	800ee2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ee30:	f001 fab0 	bl	8010394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ee34:	4b39      	ldr	r3, [pc, #228]	; (800ef1c <xTaskResumeAll+0x118>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	3b01      	subs	r3, #1
 800ee3a:	4a38      	ldr	r2, [pc, #224]	; (800ef1c <xTaskResumeAll+0x118>)
 800ee3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ee3e:	4b37      	ldr	r3, [pc, #220]	; (800ef1c <xTaskResumeAll+0x118>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d162      	bne.n	800ef0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ee46:	4b36      	ldr	r3, [pc, #216]	; (800ef20 <xTaskResumeAll+0x11c>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d05e      	beq.n	800ef0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ee4e:	e02f      	b.n	800eeb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee50:	4b34      	ldr	r3, [pc, #208]	; (800ef24 <xTaskResumeAll+0x120>)
 800ee52:	68db      	ldr	r3, [r3, #12]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	3318      	adds	r3, #24
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff f851 	bl	800df04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	3304      	adds	r3, #4
 800ee66:	4618      	mov	r0, r3
 800ee68:	f7ff f84c 	bl	800df04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee70:	4b2d      	ldr	r3, [pc, #180]	; (800ef28 <xTaskResumeAll+0x124>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d903      	bls.n	800ee80 <xTaskResumeAll+0x7c>
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7c:	4a2a      	ldr	r2, [pc, #168]	; (800ef28 <xTaskResumeAll+0x124>)
 800ee7e:	6013      	str	r3, [r2, #0]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee84:	4613      	mov	r3, r2
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	4413      	add	r3, r2
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	4a27      	ldr	r2, [pc, #156]	; (800ef2c <xTaskResumeAll+0x128>)
 800ee8e:	441a      	add	r2, r3
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	3304      	adds	r3, #4
 800ee94:	4619      	mov	r1, r3
 800ee96:	4610      	mov	r0, r2
 800ee98:	f7fe ffd7 	bl	800de4a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eea0:	4b23      	ldr	r3, [pc, #140]	; (800ef30 <xTaskResumeAll+0x12c>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d302      	bcc.n	800eeb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800eeaa:	4b22      	ldr	r3, [pc, #136]	; (800ef34 <xTaskResumeAll+0x130>)
 800eeac:	2201      	movs	r2, #1
 800eeae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eeb0:	4b1c      	ldr	r3, [pc, #112]	; (800ef24 <xTaskResumeAll+0x120>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1cb      	bne.n	800ee50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d001      	beq.n	800eec2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eebe:	f000 fbfd 	bl	800f6bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800eec2:	4b1d      	ldr	r3, [pc, #116]	; (800ef38 <xTaskResumeAll+0x134>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d010      	beq.n	800eef0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eece:	f000 f847 	bl	800ef60 <xTaskIncrementTick>
 800eed2:	4603      	mov	r3, r0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d002      	beq.n	800eede <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800eed8:	4b16      	ldr	r3, [pc, #88]	; (800ef34 <xTaskResumeAll+0x130>)
 800eeda:	2201      	movs	r2, #1
 800eedc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	3b01      	subs	r3, #1
 800eee2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d1f1      	bne.n	800eece <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800eeea:	4b13      	ldr	r3, [pc, #76]	; (800ef38 <xTaskResumeAll+0x134>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eef0:	4b10      	ldr	r3, [pc, #64]	; (800ef34 <xTaskResumeAll+0x130>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d009      	beq.n	800ef0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eef8:	2301      	movs	r3, #1
 800eefa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eefc:	4b0f      	ldr	r3, [pc, #60]	; (800ef3c <xTaskResumeAll+0x138>)
 800eefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef02:	601a      	str	r2, [r3, #0]
 800ef04:	f3bf 8f4f 	dsb	sy
 800ef08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef0c:	f001 fa72 	bl	80103f4 <vPortExitCritical>

	return xAlreadyYielded;
 800ef10:	68bb      	ldr	r3, [r7, #8]
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	200011ac 	.word	0x200011ac
 800ef20:	20001184 	.word	0x20001184
 800ef24:	20001144 	.word	0x20001144
 800ef28:	2000118c 	.word	0x2000118c
 800ef2c:	20000cb4 	.word	0x20000cb4
 800ef30:	20000cb0 	.word	0x20000cb0
 800ef34:	20001198 	.word	0x20001198
 800ef38:	20001194 	.word	0x20001194
 800ef3c:	e000ed04 	.word	0xe000ed04

0800ef40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ef46:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <xTaskGetTickCount+0x1c>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ef4c:	687b      	ldr	r3, [r7, #4]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	370c      	adds	r7, #12
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	20001188 	.word	0x20001188

0800ef60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b086      	sub	sp, #24
 800ef64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ef66:	2300      	movs	r3, #0
 800ef68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef6a:	4b4f      	ldr	r3, [pc, #316]	; (800f0a8 <xTaskIncrementTick+0x148>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f040 808f 	bne.w	800f092 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ef74:	4b4d      	ldr	r3, [pc, #308]	; (800f0ac <xTaskIncrementTick+0x14c>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ef7c:	4a4b      	ldr	r2, [pc, #300]	; (800f0ac <xTaskIncrementTick+0x14c>)
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d120      	bne.n	800efca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ef88:	4b49      	ldr	r3, [pc, #292]	; (800f0b0 <xTaskIncrementTick+0x150>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00a      	beq.n	800efa8 <xTaskIncrementTick+0x48>
	__asm volatile
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	603b      	str	r3, [r7, #0]
}
 800efa4:	bf00      	nop
 800efa6:	e7fe      	b.n	800efa6 <xTaskIncrementTick+0x46>
 800efa8:	4b41      	ldr	r3, [pc, #260]	; (800f0b0 <xTaskIncrementTick+0x150>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	60fb      	str	r3, [r7, #12]
 800efae:	4b41      	ldr	r3, [pc, #260]	; (800f0b4 <xTaskIncrementTick+0x154>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	4a3f      	ldr	r2, [pc, #252]	; (800f0b0 <xTaskIncrementTick+0x150>)
 800efb4:	6013      	str	r3, [r2, #0]
 800efb6:	4a3f      	ldr	r2, [pc, #252]	; (800f0b4 <xTaskIncrementTick+0x154>)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6013      	str	r3, [r2, #0]
 800efbc:	4b3e      	ldr	r3, [pc, #248]	; (800f0b8 <xTaskIncrementTick+0x158>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3301      	adds	r3, #1
 800efc2:	4a3d      	ldr	r2, [pc, #244]	; (800f0b8 <xTaskIncrementTick+0x158>)
 800efc4:	6013      	str	r3, [r2, #0]
 800efc6:	f000 fb79 	bl	800f6bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800efca:	4b3c      	ldr	r3, [pc, #240]	; (800f0bc <xTaskIncrementTick+0x15c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	693a      	ldr	r2, [r7, #16]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d349      	bcc.n	800f068 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efd4:	4b36      	ldr	r3, [pc, #216]	; (800f0b0 <xTaskIncrementTick+0x150>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d104      	bne.n	800efe8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efde:	4b37      	ldr	r3, [pc, #220]	; (800f0bc <xTaskIncrementTick+0x15c>)
 800efe0:	f04f 32ff 	mov.w	r2, #4294967295
 800efe4:	601a      	str	r2, [r3, #0]
					break;
 800efe6:	e03f      	b.n	800f068 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efe8:	4b31      	ldr	r3, [pc, #196]	; (800f0b0 <xTaskIncrementTick+0x150>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	68db      	ldr	r3, [r3, #12]
 800eff0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800eff8:	693a      	ldr	r2, [r7, #16]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	429a      	cmp	r2, r3
 800effe:	d203      	bcs.n	800f008 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f000:	4a2e      	ldr	r2, [pc, #184]	; (800f0bc <xTaskIncrementTick+0x15c>)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f006:	e02f      	b.n	800f068 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe ff79 	bl	800df04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f016:	2b00      	cmp	r3, #0
 800f018:	d004      	beq.n	800f024 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	3318      	adds	r3, #24
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fe ff70 	bl	800df04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f028:	4b25      	ldr	r3, [pc, #148]	; (800f0c0 <xTaskIncrementTick+0x160>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d903      	bls.n	800f038 <xTaskIncrementTick+0xd8>
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f034:	4a22      	ldr	r2, [pc, #136]	; (800f0c0 <xTaskIncrementTick+0x160>)
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f03c:	4613      	mov	r3, r2
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	4a1f      	ldr	r2, [pc, #124]	; (800f0c4 <xTaskIncrementTick+0x164>)
 800f046:	441a      	add	r2, r3
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4610      	mov	r0, r2
 800f050:	f7fe fefb 	bl	800de4a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f058:	4b1b      	ldr	r3, [pc, #108]	; (800f0c8 <xTaskIncrementTick+0x168>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f05e:	429a      	cmp	r2, r3
 800f060:	d3b8      	bcc.n	800efd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f062:	2301      	movs	r3, #1
 800f064:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f066:	e7b5      	b.n	800efd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f068:	4b17      	ldr	r3, [pc, #92]	; (800f0c8 <xTaskIncrementTick+0x168>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f06e:	4915      	ldr	r1, [pc, #84]	; (800f0c4 <xTaskIncrementTick+0x164>)
 800f070:	4613      	mov	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	440b      	add	r3, r1
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d901      	bls.n	800f084 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f080:	2301      	movs	r3, #1
 800f082:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f084:	4b11      	ldr	r3, [pc, #68]	; (800f0cc <xTaskIncrementTick+0x16c>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d007      	beq.n	800f09c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f08c:	2301      	movs	r3, #1
 800f08e:	617b      	str	r3, [r7, #20]
 800f090:	e004      	b.n	800f09c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f092:	4b0f      	ldr	r3, [pc, #60]	; (800f0d0 <xTaskIncrementTick+0x170>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	3301      	adds	r3, #1
 800f098:	4a0d      	ldr	r2, [pc, #52]	; (800f0d0 <xTaskIncrementTick+0x170>)
 800f09a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f09c:	697b      	ldr	r3, [r7, #20]
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	200011ac 	.word	0x200011ac
 800f0ac:	20001188 	.word	0x20001188
 800f0b0:	2000113c 	.word	0x2000113c
 800f0b4:	20001140 	.word	0x20001140
 800f0b8:	2000119c 	.word	0x2000119c
 800f0bc:	200011a4 	.word	0x200011a4
 800f0c0:	2000118c 	.word	0x2000118c
 800f0c4:	20000cb4 	.word	0x20000cb4
 800f0c8:	20000cb0 	.word	0x20000cb0
 800f0cc:	20001198 	.word	0x20001198
 800f0d0:	20001194 	.word	0x20001194

0800f0d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b085      	sub	sp, #20
 800f0d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f0da:	4b2a      	ldr	r3, [pc, #168]	; (800f184 <vTaskSwitchContext+0xb0>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d003      	beq.n	800f0ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f0e2:	4b29      	ldr	r3, [pc, #164]	; (800f188 <vTaskSwitchContext+0xb4>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f0e8:	e046      	b.n	800f178 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f0ea:	4b27      	ldr	r3, [pc, #156]	; (800f188 <vTaskSwitchContext+0xb4>)
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0f0:	4b26      	ldr	r3, [pc, #152]	; (800f18c <vTaskSwitchContext+0xb8>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	60fb      	str	r3, [r7, #12]
 800f0f6:	e010      	b.n	800f11a <vTaskSwitchContext+0x46>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d10a      	bne.n	800f114 <vTaskSwitchContext+0x40>
	__asm volatile
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	607b      	str	r3, [r7, #4]
}
 800f110:	bf00      	nop
 800f112:	e7fe      	b.n	800f112 <vTaskSwitchContext+0x3e>
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	3b01      	subs	r3, #1
 800f118:	60fb      	str	r3, [r7, #12]
 800f11a:	491d      	ldr	r1, [pc, #116]	; (800f190 <vTaskSwitchContext+0xbc>)
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	4613      	mov	r3, r2
 800f120:	009b      	lsls	r3, r3, #2
 800f122:	4413      	add	r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	440b      	add	r3, r1
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0e4      	beq.n	800f0f8 <vTaskSwitchContext+0x24>
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	4613      	mov	r3, r2
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	4413      	add	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4a15      	ldr	r2, [pc, #84]	; (800f190 <vTaskSwitchContext+0xbc>)
 800f13a:	4413      	add	r3, r2
 800f13c:	60bb      	str	r3, [r7, #8]
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	685a      	ldr	r2, [r3, #4]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	605a      	str	r2, [r3, #4]
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	3308      	adds	r3, #8
 800f150:	429a      	cmp	r2, r3
 800f152:	d104      	bne.n	800f15e <vTaskSwitchContext+0x8a>
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	685a      	ldr	r2, [r3, #4]
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	605a      	str	r2, [r3, #4]
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	4a0b      	ldr	r2, [pc, #44]	; (800f194 <vTaskSwitchContext+0xc0>)
 800f166:	6013      	str	r3, [r2, #0]
 800f168:	4a08      	ldr	r2, [pc, #32]	; (800f18c <vTaskSwitchContext+0xb8>)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f16e:	4b09      	ldr	r3, [pc, #36]	; (800f194 <vTaskSwitchContext+0xc0>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	3354      	adds	r3, #84	; 0x54
 800f174:	4a08      	ldr	r2, [pc, #32]	; (800f198 <vTaskSwitchContext+0xc4>)
 800f176:	6013      	str	r3, [r2, #0]
}
 800f178:	bf00      	nop
 800f17a:	3714      	adds	r7, #20
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr
 800f184:	200011ac 	.word	0x200011ac
 800f188:	20001198 	.word	0x20001198
 800f18c:	2000118c 	.word	0x2000118c
 800f190:	20000cb4 	.word	0x20000cb4
 800f194:	20000cb0 	.word	0x20000cb0
 800f198:	20000124 	.word	0x20000124

0800f19c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10a      	bne.n	800f1c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	60fb      	str	r3, [r7, #12]
}
 800f1be:	bf00      	nop
 800f1c0:	e7fe      	b.n	800f1c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f1c2:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <vTaskPlaceOnEventList+0x44>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	3318      	adds	r3, #24
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7fe fe61 	bl	800de92 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	6838      	ldr	r0, [r7, #0]
 800f1d4:	f000 fb36 	bl	800f844 <prvAddCurrentTaskToDelayedList>
}
 800f1d8:	bf00      	nop
 800f1da:	3710      	adds	r7, #16
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	20000cb0 	.word	0x20000cb0

0800f1e4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	60f8      	str	r0, [r7, #12]
 800f1ec:	60b9      	str	r1, [r7, #8]
 800f1ee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d10a      	bne.n	800f20c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800f1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1fa:	f383 8811 	msr	BASEPRI, r3
 800f1fe:	f3bf 8f6f 	isb	sy
 800f202:	f3bf 8f4f 	dsb	sy
 800f206:	617b      	str	r3, [r7, #20]
}
 800f208:	bf00      	nop
 800f20a:	e7fe      	b.n	800f20a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800f20c:	4b11      	ldr	r3, [pc, #68]	; (800f254 <vTaskPlaceOnUnorderedEventList+0x70>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d10a      	bne.n	800f22a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	613b      	str	r3, [r7, #16]
}
 800f226:	bf00      	nop
 800f228:	e7fe      	b.n	800f228 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f22a:	4b0b      	ldr	r3, [pc, #44]	; (800f258 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800f234:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f236:	4b08      	ldr	r3, [pc, #32]	; (800f258 <vTaskPlaceOnUnorderedEventList+0x74>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	3318      	adds	r3, #24
 800f23c:	4619      	mov	r1, r3
 800f23e:	68f8      	ldr	r0, [r7, #12]
 800f240:	f7fe fe03 	bl	800de4a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f244:	2101      	movs	r1, #1
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 fafc 	bl	800f844 <prvAddCurrentTaskToDelayedList>
}
 800f24c:	bf00      	nop
 800f24e:	3718      	adds	r7, #24
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	200011ac 	.word	0x200011ac
 800f258:	20000cb0 	.word	0x20000cb0

0800f25c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b086      	sub	sp, #24
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	60b9      	str	r1, [r7, #8]
 800f266:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d10a      	bne.n	800f284 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	617b      	str	r3, [r7, #20]
}
 800f280:	bf00      	nop
 800f282:	e7fe      	b.n	800f282 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f284:	4b0a      	ldr	r3, [pc, #40]	; (800f2b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	3318      	adds	r3, #24
 800f28a:	4619      	mov	r1, r3
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f7fe fddc 	bl	800de4a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f298:	f04f 33ff 	mov.w	r3, #4294967295
 800f29c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f29e:	6879      	ldr	r1, [r7, #4]
 800f2a0:	68b8      	ldr	r0, [r7, #8]
 800f2a2:	f000 facf 	bl	800f844 <prvAddCurrentTaskToDelayedList>
	}
 800f2a6:	bf00      	nop
 800f2a8:	3718      	adds	r7, #24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20000cb0 	.word	0x20000cb0

0800f2b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b086      	sub	sp, #24
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10a      	bne.n	800f2e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ce:	f383 8811 	msr	BASEPRI, r3
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	60fb      	str	r3, [r7, #12]
}
 800f2dc:	bf00      	nop
 800f2de:	e7fe      	b.n	800f2de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	3318      	adds	r3, #24
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fe fe0d 	bl	800df04 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2ea:	4b1e      	ldr	r3, [pc, #120]	; (800f364 <xTaskRemoveFromEventList+0xb0>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d11d      	bne.n	800f32e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f2f2:	693b      	ldr	r3, [r7, #16]
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fe fe04 	bl	800df04 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f300:	4b19      	ldr	r3, [pc, #100]	; (800f368 <xTaskRemoveFromEventList+0xb4>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	429a      	cmp	r2, r3
 800f306:	d903      	bls.n	800f310 <xTaskRemoveFromEventList+0x5c>
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f30c:	4a16      	ldr	r2, [pc, #88]	; (800f368 <xTaskRemoveFromEventList+0xb4>)
 800f30e:	6013      	str	r3, [r2, #0]
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f314:	4613      	mov	r3, r2
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	4413      	add	r3, r2
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	4a13      	ldr	r2, [pc, #76]	; (800f36c <xTaskRemoveFromEventList+0xb8>)
 800f31e:	441a      	add	r2, r3
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	3304      	adds	r3, #4
 800f324:	4619      	mov	r1, r3
 800f326:	4610      	mov	r0, r2
 800f328:	f7fe fd8f 	bl	800de4a <vListInsertEnd>
 800f32c:	e005      	b.n	800f33a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	3318      	adds	r3, #24
 800f332:	4619      	mov	r1, r3
 800f334:	480e      	ldr	r0, [pc, #56]	; (800f370 <xTaskRemoveFromEventList+0xbc>)
 800f336:	f7fe fd88 	bl	800de4a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f33e:	4b0d      	ldr	r3, [pc, #52]	; (800f374 <xTaskRemoveFromEventList+0xc0>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f344:	429a      	cmp	r2, r3
 800f346:	d905      	bls.n	800f354 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f348:	2301      	movs	r3, #1
 800f34a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f34c:	4b0a      	ldr	r3, [pc, #40]	; (800f378 <xTaskRemoveFromEventList+0xc4>)
 800f34e:	2201      	movs	r2, #1
 800f350:	601a      	str	r2, [r3, #0]
 800f352:	e001      	b.n	800f358 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f354:	2300      	movs	r3, #0
 800f356:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f358:	697b      	ldr	r3, [r7, #20]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3718      	adds	r7, #24
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
 800f362:	bf00      	nop
 800f364:	200011ac 	.word	0x200011ac
 800f368:	2000118c 	.word	0x2000118c
 800f36c:	20000cb4 	.word	0x20000cb4
 800f370:	20001144 	.word	0x20001144
 800f374:	20000cb0 	.word	0x20000cb0
 800f378:	20001198 	.word	0x20001198

0800f37c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b086      	sub	sp, #24
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800f386:	4b29      	ldr	r3, [pc, #164]	; (800f42c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10a      	bne.n	800f3a4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800f38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	613b      	str	r3, [r7, #16]
}
 800f3a0:	bf00      	nop
 800f3a2:	e7fe      	b.n	800f3a2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800f3b4:	697b      	ldr	r3, [r7, #20]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d10a      	bne.n	800f3d0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800f3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3be:	f383 8811 	msr	BASEPRI, r3
 800f3c2:	f3bf 8f6f 	isb	sy
 800f3c6:	f3bf 8f4f 	dsb	sy
 800f3ca:	60fb      	str	r3, [r7, #12]
}
 800f3cc:	bf00      	nop
 800f3ce:	e7fe      	b.n	800f3ce <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f7fe fd97 	bl	800df04 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	3304      	adds	r3, #4
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fe fd92 	bl	800df04 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3e4:	4b12      	ldr	r3, [pc, #72]	; (800f430 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d903      	bls.n	800f3f4 <vTaskRemoveFromUnorderedEventList+0x78>
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3f0:	4a0f      	ldr	r2, [pc, #60]	; (800f430 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800f3f2:	6013      	str	r3, [r2, #0]
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f3f8:	4613      	mov	r3, r2
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	4a0c      	ldr	r2, [pc, #48]	; (800f434 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800f402:	441a      	add	r2, r3
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	3304      	adds	r3, #4
 800f408:	4619      	mov	r1, r3
 800f40a:	4610      	mov	r0, r2
 800f40c:	f7fe fd1d 	bl	800de4a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f414:	4b08      	ldr	r3, [pc, #32]	; (800f438 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d902      	bls.n	800f424 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800f41e:	4b07      	ldr	r3, [pc, #28]	; (800f43c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800f420:	2201      	movs	r2, #1
 800f422:	601a      	str	r2, [r3, #0]
	}
}
 800f424:	bf00      	nop
 800f426:	3718      	adds	r7, #24
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	200011ac 	.word	0x200011ac
 800f430:	2000118c 	.word	0x2000118c
 800f434:	20000cb4 	.word	0x20000cb4
 800f438:	20000cb0 	.word	0x20000cb0
 800f43c:	20001198 	.word	0x20001198

0800f440 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f448:	4b06      	ldr	r3, [pc, #24]	; (800f464 <vTaskInternalSetTimeOutState+0x24>)
 800f44a:	681a      	ldr	r2, [r3, #0]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f450:	4b05      	ldr	r3, [pc, #20]	; (800f468 <vTaskInternalSetTimeOutState+0x28>)
 800f452:	681a      	ldr	r2, [r3, #0]
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	605a      	str	r2, [r3, #4]
}
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	2000119c 	.word	0x2000119c
 800f468:	20001188 	.word	0x20001188

0800f46c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b088      	sub	sp, #32
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d10a      	bne.n	800f492 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	613b      	str	r3, [r7, #16]
}
 800f48e:	bf00      	nop
 800f490:	e7fe      	b.n	800f490 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d10a      	bne.n	800f4ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49c:	f383 8811 	msr	BASEPRI, r3
 800f4a0:	f3bf 8f6f 	isb	sy
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	60fb      	str	r3, [r7, #12]
}
 800f4aa:	bf00      	nop
 800f4ac:	e7fe      	b.n	800f4ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f4ae:	f000 ff71 	bl	8010394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f4b2:	4b1d      	ldr	r3, [pc, #116]	; (800f528 <xTaskCheckForTimeOut+0xbc>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	69ba      	ldr	r2, [r7, #24]
 800f4be:	1ad3      	subs	r3, r2, r3
 800f4c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ca:	d102      	bne.n	800f4d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	61fb      	str	r3, [r7, #28]
 800f4d0:	e023      	b.n	800f51a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	4b15      	ldr	r3, [pc, #84]	; (800f52c <xTaskCheckForTimeOut+0xc0>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	429a      	cmp	r2, r3
 800f4dc:	d007      	beq.n	800f4ee <xTaskCheckForTimeOut+0x82>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	69ba      	ldr	r2, [r7, #24]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d302      	bcc.n	800f4ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	61fb      	str	r3, [r7, #28]
 800f4ec:	e015      	b.n	800f51a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	697a      	ldr	r2, [r7, #20]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d20b      	bcs.n	800f510 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	697b      	ldr	r3, [r7, #20]
 800f4fe:	1ad2      	subs	r2, r2, r3
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f7ff ff9b 	bl	800f440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f50a:	2300      	movs	r3, #0
 800f50c:	61fb      	str	r3, [r7, #28]
 800f50e:	e004      	b.n	800f51a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	2200      	movs	r2, #0
 800f514:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f516:	2301      	movs	r3, #1
 800f518:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f51a:	f000 ff6b 	bl	80103f4 <vPortExitCritical>

	return xReturn;
 800f51e:	69fb      	ldr	r3, [r7, #28]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3720      	adds	r7, #32
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20001188 	.word	0x20001188
 800f52c:	2000119c 	.word	0x2000119c

0800f530 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f530:	b480      	push	{r7}
 800f532:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f534:	4b03      	ldr	r3, [pc, #12]	; (800f544 <vTaskMissedYield+0x14>)
 800f536:	2201      	movs	r2, #1
 800f538:	601a      	str	r2, [r3, #0]
}
 800f53a:	bf00      	nop
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	20001198 	.word	0x20001198

0800f548 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f550:	f000 f852 	bl	800f5f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f554:	4b06      	ldr	r3, [pc, #24]	; (800f570 <prvIdleTask+0x28>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d9f9      	bls.n	800f550 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f55c:	4b05      	ldr	r3, [pc, #20]	; (800f574 <prvIdleTask+0x2c>)
 800f55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f562:	601a      	str	r2, [r3, #0]
 800f564:	f3bf 8f4f 	dsb	sy
 800f568:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f56c:	e7f0      	b.n	800f550 <prvIdleTask+0x8>
 800f56e:	bf00      	nop
 800f570:	20000cb4 	.word	0x20000cb4
 800f574:	e000ed04 	.word	0xe000ed04

0800f578 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f57e:	2300      	movs	r3, #0
 800f580:	607b      	str	r3, [r7, #4]
 800f582:	e00c      	b.n	800f59e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	4613      	mov	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4a12      	ldr	r2, [pc, #72]	; (800f5d8 <prvInitialiseTaskLists+0x60>)
 800f590:	4413      	add	r3, r2
 800f592:	4618      	mov	r0, r3
 800f594:	f7fe fc2c 	bl	800ddf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	3301      	adds	r3, #1
 800f59c:	607b      	str	r3, [r7, #4]
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b37      	cmp	r3, #55	; 0x37
 800f5a2:	d9ef      	bls.n	800f584 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f5a4:	480d      	ldr	r0, [pc, #52]	; (800f5dc <prvInitialiseTaskLists+0x64>)
 800f5a6:	f7fe fc23 	bl	800ddf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f5aa:	480d      	ldr	r0, [pc, #52]	; (800f5e0 <prvInitialiseTaskLists+0x68>)
 800f5ac:	f7fe fc20 	bl	800ddf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f5b0:	480c      	ldr	r0, [pc, #48]	; (800f5e4 <prvInitialiseTaskLists+0x6c>)
 800f5b2:	f7fe fc1d 	bl	800ddf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f5b6:	480c      	ldr	r0, [pc, #48]	; (800f5e8 <prvInitialiseTaskLists+0x70>)
 800f5b8:	f7fe fc1a 	bl	800ddf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f5bc:	480b      	ldr	r0, [pc, #44]	; (800f5ec <prvInitialiseTaskLists+0x74>)
 800f5be:	f7fe fc17 	bl	800ddf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f5c2:	4b0b      	ldr	r3, [pc, #44]	; (800f5f0 <prvInitialiseTaskLists+0x78>)
 800f5c4:	4a05      	ldr	r2, [pc, #20]	; (800f5dc <prvInitialiseTaskLists+0x64>)
 800f5c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f5c8:	4b0a      	ldr	r3, [pc, #40]	; (800f5f4 <prvInitialiseTaskLists+0x7c>)
 800f5ca:	4a05      	ldr	r2, [pc, #20]	; (800f5e0 <prvInitialiseTaskLists+0x68>)
 800f5cc:	601a      	str	r2, [r3, #0]
}
 800f5ce:	bf00      	nop
 800f5d0:	3708      	adds	r7, #8
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	20000cb4 	.word	0x20000cb4
 800f5dc:	20001114 	.word	0x20001114
 800f5e0:	20001128 	.word	0x20001128
 800f5e4:	20001144 	.word	0x20001144
 800f5e8:	20001158 	.word	0x20001158
 800f5ec:	20001170 	.word	0x20001170
 800f5f0:	2000113c 	.word	0x2000113c
 800f5f4:	20001140 	.word	0x20001140

0800f5f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b082      	sub	sp, #8
 800f5fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5fe:	e019      	b.n	800f634 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f600:	f000 fec8 	bl	8010394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f604:	4b10      	ldr	r3, [pc, #64]	; (800f648 <prvCheckTasksWaitingTermination+0x50>)
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	3304      	adds	r3, #4
 800f610:	4618      	mov	r0, r3
 800f612:	f7fe fc77 	bl	800df04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f616:	4b0d      	ldr	r3, [pc, #52]	; (800f64c <prvCheckTasksWaitingTermination+0x54>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	4a0b      	ldr	r2, [pc, #44]	; (800f64c <prvCheckTasksWaitingTermination+0x54>)
 800f61e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f620:	4b0b      	ldr	r3, [pc, #44]	; (800f650 <prvCheckTasksWaitingTermination+0x58>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	3b01      	subs	r3, #1
 800f626:	4a0a      	ldr	r2, [pc, #40]	; (800f650 <prvCheckTasksWaitingTermination+0x58>)
 800f628:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f62a:	f000 fee3 	bl	80103f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f810 	bl	800f654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f634:	4b06      	ldr	r3, [pc, #24]	; (800f650 <prvCheckTasksWaitingTermination+0x58>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1e1      	bne.n	800f600 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f63c:	bf00      	nop
 800f63e:	bf00      	nop
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	20001158 	.word	0x20001158
 800f64c:	20001184 	.word	0x20001184
 800f650:	2000116c 	.word	0x2000116c

0800f654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	3354      	adds	r3, #84	; 0x54
 800f660:	4618      	mov	r0, r3
 800f662:	f002 fa1d 	bl	8011aa0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d108      	bne.n	800f682 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f674:	4618      	mov	r0, r3
 800f676:	f001 f87b 	bl	8010770 <vPortFree>
				vPortFree( pxTCB );
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f001 f878 	bl	8010770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f680:	e018      	b.n	800f6b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d103      	bne.n	800f694 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f001 f86f 	bl	8010770 <vPortFree>
	}
 800f692:	e00f      	b.n	800f6b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f69a:	2b02      	cmp	r3, #2
 800f69c:	d00a      	beq.n	800f6b4 <prvDeleteTCB+0x60>
	__asm volatile
 800f69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a2:	f383 8811 	msr	BASEPRI, r3
 800f6a6:	f3bf 8f6f 	isb	sy
 800f6aa:	f3bf 8f4f 	dsb	sy
 800f6ae:	60fb      	str	r3, [r7, #12]
}
 800f6b0:	bf00      	nop
 800f6b2:	e7fe      	b.n	800f6b2 <prvDeleteTCB+0x5e>
	}
 800f6b4:	bf00      	nop
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f6bc:	b480      	push	{r7}
 800f6be:	b083      	sub	sp, #12
 800f6c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f6c2:	4b0c      	ldr	r3, [pc, #48]	; (800f6f4 <prvResetNextTaskUnblockTime+0x38>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d104      	bne.n	800f6d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f6cc:	4b0a      	ldr	r3, [pc, #40]	; (800f6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800f6ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f6d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f6d4:	e008      	b.n	800f6e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6d6:	4b07      	ldr	r3, [pc, #28]	; (800f6f4 <prvResetNextTaskUnblockTime+0x38>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	4a04      	ldr	r2, [pc, #16]	; (800f6f8 <prvResetNextTaskUnblockTime+0x3c>)
 800f6e6:	6013      	str	r3, [r2, #0]
}
 800f6e8:	bf00      	nop
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	2000113c 	.word	0x2000113c
 800f6f8:	200011a4 	.word	0x200011a4

0800f6fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f702:	4b0b      	ldr	r3, [pc, #44]	; (800f730 <xTaskGetSchedulerState+0x34>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d102      	bne.n	800f710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f70a:	2301      	movs	r3, #1
 800f70c:	607b      	str	r3, [r7, #4]
 800f70e:	e008      	b.n	800f722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f710:	4b08      	ldr	r3, [pc, #32]	; (800f734 <xTaskGetSchedulerState+0x38>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d102      	bne.n	800f71e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f718:	2302      	movs	r3, #2
 800f71a:	607b      	str	r3, [r7, #4]
 800f71c:	e001      	b.n	800f722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f71e:	2300      	movs	r3, #0
 800f720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f722:	687b      	ldr	r3, [r7, #4]
	}
 800f724:	4618      	mov	r0, r3
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr
 800f730:	20001190 	.word	0x20001190
 800f734:	200011ac 	.word	0x200011ac

0800f738 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b086      	sub	sp, #24
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f744:	2300      	movs	r3, #0
 800f746:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d056      	beq.n	800f7fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f74e:	4b2e      	ldr	r3, [pc, #184]	; (800f808 <xTaskPriorityDisinherit+0xd0>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	693a      	ldr	r2, [r7, #16]
 800f754:	429a      	cmp	r2, r3
 800f756:	d00a      	beq.n	800f76e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	60fb      	str	r3, [r7, #12]
}
 800f76a:	bf00      	nop
 800f76c:	e7fe      	b.n	800f76c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10a      	bne.n	800f78c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	60bb      	str	r3, [r7, #8]
}
 800f788:	bf00      	nop
 800f78a:	e7fe      	b.n	800f78a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f790:	1e5a      	subs	r2, r3, #1
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d02c      	beq.n	800f7fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d128      	bne.n	800f7fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fe fba8 	bl	800df04 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7cc:	4b0f      	ldr	r3, [pc, #60]	; (800f80c <xTaskPriorityDisinherit+0xd4>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d903      	bls.n	800f7dc <xTaskPriorityDisinherit+0xa4>
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7d8:	4a0c      	ldr	r2, [pc, #48]	; (800f80c <xTaskPriorityDisinherit+0xd4>)
 800f7da:	6013      	str	r3, [r2, #0]
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	009b      	lsls	r3, r3, #2
 800f7e4:	4413      	add	r3, r2
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	4a09      	ldr	r2, [pc, #36]	; (800f810 <xTaskPriorityDisinherit+0xd8>)
 800f7ea:	441a      	add	r2, r3
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	3304      	adds	r3, #4
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	4610      	mov	r0, r2
 800f7f4:	f7fe fb29 	bl	800de4a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7fc:	697b      	ldr	r3, [r7, #20]
	}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3718      	adds	r7, #24
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	20000cb0 	.word	0x20000cb0
 800f80c:	2000118c 	.word	0x2000118c
 800f810:	20000cb4 	.word	0x20000cb4

0800f814 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800f81a:	4b09      	ldr	r3, [pc, #36]	; (800f840 <uxTaskResetEventItemValue+0x2c>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	699b      	ldr	r3, [r3, #24]
 800f820:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f822:	4b07      	ldr	r3, [pc, #28]	; (800f840 <uxTaskResetEventItemValue+0x2c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f828:	4b05      	ldr	r3, [pc, #20]	; (800f840 <uxTaskResetEventItemValue+0x2c>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800f830:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800f832:	687b      	ldr	r3, [r7, #4]
}
 800f834:	4618      	mov	r0, r3
 800f836:	370c      	adds	r7, #12
 800f838:	46bd      	mov	sp, r7
 800f83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83e:	4770      	bx	lr
 800f840:	20000cb0 	.word	0x20000cb0

0800f844 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f84e:	4b21      	ldr	r3, [pc, #132]	; (800f8d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f854:	4b20      	ldr	r3, [pc, #128]	; (800f8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	3304      	adds	r3, #4
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fe fb52 	bl	800df04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f866:	d10a      	bne.n	800f87e <prvAddCurrentTaskToDelayedList+0x3a>
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d007      	beq.n	800f87e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f86e:	4b1a      	ldr	r3, [pc, #104]	; (800f8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	3304      	adds	r3, #4
 800f874:	4619      	mov	r1, r3
 800f876:	4819      	ldr	r0, [pc, #100]	; (800f8dc <prvAddCurrentTaskToDelayedList+0x98>)
 800f878:	f7fe fae7 	bl	800de4a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f87c:	e026      	b.n	800f8cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4413      	add	r3, r2
 800f884:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f886:	4b14      	ldr	r3, [pc, #80]	; (800f8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	68ba      	ldr	r2, [r7, #8]
 800f88c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f88e:	68ba      	ldr	r2, [r7, #8]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	429a      	cmp	r2, r3
 800f894:	d209      	bcs.n	800f8aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f896:	4b12      	ldr	r3, [pc, #72]	; (800f8e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	4b0f      	ldr	r3, [pc, #60]	; (800f8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3304      	adds	r3, #4
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	4610      	mov	r0, r2
 800f8a4:	f7fe faf5 	bl	800de92 <vListInsert>
}
 800f8a8:	e010      	b.n	800f8cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8aa:	4b0e      	ldr	r3, [pc, #56]	; (800f8e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f8ac:	681a      	ldr	r2, [r3, #0]
 800f8ae:	4b0a      	ldr	r3, [pc, #40]	; (800f8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	3304      	adds	r3, #4
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	4610      	mov	r0, r2
 800f8b8:	f7fe faeb 	bl	800de92 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8bc:	4b0a      	ldr	r3, [pc, #40]	; (800f8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d202      	bcs.n	800f8cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f8c6:	4a08      	ldr	r2, [pc, #32]	; (800f8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	6013      	str	r3, [r2, #0]
}
 800f8cc:	bf00      	nop
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	20001188 	.word	0x20001188
 800f8d8:	20000cb0 	.word	0x20000cb0
 800f8dc:	20001170 	.word	0x20001170
 800f8e0:	20001140 	.word	0x20001140
 800f8e4:	2000113c 	.word	0x2000113c
 800f8e8:	200011a4 	.word	0x200011a4

0800f8ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08a      	sub	sp, #40	; 0x28
 800f8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f8f6:	f000 fba1 	bl	801003c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f8fa:	4b1c      	ldr	r3, [pc, #112]	; (800f96c <xTimerCreateTimerTask+0x80>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d021      	beq.n	800f946 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f902:	2300      	movs	r3, #0
 800f904:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f906:	2300      	movs	r3, #0
 800f908:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f90a:	1d3a      	adds	r2, r7, #4
 800f90c:	f107 0108 	add.w	r1, r7, #8
 800f910:	f107 030c 	add.w	r3, r7, #12
 800f914:	4618      	mov	r0, r3
 800f916:	f7fe f863 	bl	800d9e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f91a:	6879      	ldr	r1, [r7, #4]
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	9202      	str	r2, [sp, #8]
 800f922:	9301      	str	r3, [sp, #4]
 800f924:	2302      	movs	r3, #2
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	2300      	movs	r3, #0
 800f92a:	460a      	mov	r2, r1
 800f92c:	4910      	ldr	r1, [pc, #64]	; (800f970 <xTimerCreateTimerTask+0x84>)
 800f92e:	4811      	ldr	r0, [pc, #68]	; (800f974 <xTimerCreateTimerTask+0x88>)
 800f930:	f7fe fffe 	bl	800e930 <xTaskCreateStatic>
 800f934:	4603      	mov	r3, r0
 800f936:	4a10      	ldr	r2, [pc, #64]	; (800f978 <xTimerCreateTimerTask+0x8c>)
 800f938:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f93a:	4b0f      	ldr	r3, [pc, #60]	; (800f978 <xTimerCreateTimerTask+0x8c>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f942:	2301      	movs	r3, #1
 800f944:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d10a      	bne.n	800f962 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f950:	f383 8811 	msr	BASEPRI, r3
 800f954:	f3bf 8f6f 	isb	sy
 800f958:	f3bf 8f4f 	dsb	sy
 800f95c:	613b      	str	r3, [r7, #16]
}
 800f95e:	bf00      	nop
 800f960:	e7fe      	b.n	800f960 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f962:	697b      	ldr	r3, [r7, #20]
}
 800f964:	4618      	mov	r0, r3
 800f966:	3718      	adds	r7, #24
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	200011e0 	.word	0x200011e0
 800f970:	08012a50 	.word	0x08012a50
 800f974:	0800fbe5 	.word	0x0800fbe5
 800f978:	200011e4 	.word	0x200011e4

0800f97c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b088      	sub	sp, #32
 800f980:	af02      	add	r7, sp, #8
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800f98a:	202c      	movs	r0, #44	; 0x2c
 800f98c:	f000 fe24 	bl	80105d8 <pvPortMalloc>
 800f990:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00d      	beq.n	800f9b4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	2200      	movs	r2, #0
 800f99c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	9301      	str	r3, [sp, #4]
 800f9a4:	6a3b      	ldr	r3, [r7, #32]
 800f9a6:	9300      	str	r3, [sp, #0]
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	68b9      	ldr	r1, [r7, #8]
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f000 f843 	bl	800fa3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800f9b4:	697b      	ldr	r3, [r7, #20]
	}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3718      	adds	r7, #24
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b08a      	sub	sp, #40	; 0x28
 800f9c2:	af02      	add	r7, sp, #8
 800f9c4:	60f8      	str	r0, [r7, #12]
 800f9c6:	60b9      	str	r1, [r7, #8]
 800f9c8:	607a      	str	r2, [r7, #4]
 800f9ca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800f9cc:	232c      	movs	r3, #44	; 0x2c
 800f9ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	2b2c      	cmp	r3, #44	; 0x2c
 800f9d4:	d00a      	beq.n	800f9ec <xTimerCreateStatic+0x2e>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	61bb      	str	r3, [r7, #24]
}
 800f9e8:	bf00      	nop
 800f9ea:	e7fe      	b.n	800f9ea <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f9ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800f9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10a      	bne.n	800fa0a <xTimerCreateStatic+0x4c>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	617b      	str	r3, [r7, #20]
}
 800fa06:	bf00      	nop
 800fa08:	e7fe      	b.n	800fa08 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800fa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00d      	beq.n	800fa30 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	2202      	movs	r2, #2
 800fa18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	9301      	str	r3, [sp, #4]
 800fa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	68b9      	ldr	r1, [r7, #8]
 800fa2a:	68f8      	ldr	r0, [r7, #12]
 800fa2c:	f000 f805 	bl	800fa3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fa30:	69fb      	ldr	r3, [r7, #28]
	}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3720      	adds	r7, #32
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b086      	sub	sp, #24
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60f8      	str	r0, [r7, #12]
 800fa42:	60b9      	str	r1, [r7, #8]
 800fa44:	607a      	str	r2, [r7, #4]
 800fa46:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10a      	bne.n	800fa64 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800fa4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa52:	f383 8811 	msr	BASEPRI, r3
 800fa56:	f3bf 8f6f 	isb	sy
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	617b      	str	r3, [r7, #20]
}
 800fa60:	bf00      	nop
 800fa62:	e7fe      	b.n	800fa62 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800fa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d01e      	beq.n	800faa8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800fa6a:	f000 fae7 	bl	801003c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800fa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa70:	68fa      	ldr	r2, [r7, #12]
 800fa72:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa76:	68ba      	ldr	r2, [r7, #8]
 800fa78:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800fa7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7c:	683a      	ldr	r2, [r7, #0]
 800fa7e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa82:	6a3a      	ldr	r2, [r7, #32]
 800fa84:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	3304      	adds	r3, #4
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7fe f9d0 	bl	800de30 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d008      	beq.n	800faa8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800fa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa9c:	f043 0304 	orr.w	r3, r3, #4
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800faa8:	bf00      	nop
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b08a      	sub	sp, #40	; 0x28
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	60b9      	str	r1, [r7, #8]
 800faba:	607a      	str	r2, [r7, #4]
 800fabc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fabe:	2300      	movs	r3, #0
 800fac0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d10a      	bne.n	800fade <xTimerGenericCommand+0x2e>
	__asm volatile
 800fac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800facc:	f383 8811 	msr	BASEPRI, r3
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	f3bf 8f4f 	dsb	sy
 800fad8:	623b      	str	r3, [r7, #32]
}
 800fada:	bf00      	nop
 800fadc:	e7fe      	b.n	800fadc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fade:	4b1a      	ldr	r3, [pc, #104]	; (800fb48 <xTimerGenericCommand+0x98>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d02a      	beq.n	800fb3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2b05      	cmp	r3, #5
 800faf6:	dc18      	bgt.n	800fb2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800faf8:	f7ff fe00 	bl	800f6fc <xTaskGetSchedulerState>
 800fafc:	4603      	mov	r3, r0
 800fafe:	2b02      	cmp	r3, #2
 800fb00:	d109      	bne.n	800fb16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fb02:	4b11      	ldr	r3, [pc, #68]	; (800fb48 <xTimerGenericCommand+0x98>)
 800fb04:	6818      	ldr	r0, [r3, #0]
 800fb06:	f107 0110 	add.w	r1, r7, #16
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb0e:	f7fe fb27 	bl	800e160 <xQueueGenericSend>
 800fb12:	6278      	str	r0, [r7, #36]	; 0x24
 800fb14:	e012      	b.n	800fb3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fb16:	4b0c      	ldr	r3, [pc, #48]	; (800fb48 <xTimerGenericCommand+0x98>)
 800fb18:	6818      	ldr	r0, [r3, #0]
 800fb1a:	f107 0110 	add.w	r1, r7, #16
 800fb1e:	2300      	movs	r3, #0
 800fb20:	2200      	movs	r2, #0
 800fb22:	f7fe fb1d 	bl	800e160 <xQueueGenericSend>
 800fb26:	6278      	str	r0, [r7, #36]	; 0x24
 800fb28:	e008      	b.n	800fb3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fb2a:	4b07      	ldr	r3, [pc, #28]	; (800fb48 <xTimerGenericCommand+0x98>)
 800fb2c:	6818      	ldr	r0, [r3, #0]
 800fb2e:	f107 0110 	add.w	r1, r7, #16
 800fb32:	2300      	movs	r3, #0
 800fb34:	683a      	ldr	r2, [r7, #0]
 800fb36:	f7fe fc11 	bl	800e35c <xQueueGenericSendFromISR>
 800fb3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3728      	adds	r7, #40	; 0x28
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	200011e0 	.word	0x200011e0

0800fb4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b088      	sub	sp, #32
 800fb50:	af02      	add	r7, sp, #8
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb56:	4b22      	ldr	r3, [pc, #136]	; (800fbe0 <prvProcessExpiredTimer+0x94>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	3304      	adds	r3, #4
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fe f9cd 	bl	800df04 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb70:	f003 0304 	and.w	r3, r3, #4
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d022      	beq.n	800fbbe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	699a      	ldr	r2, [r3, #24]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	18d1      	adds	r1, r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	683a      	ldr	r2, [r7, #0]
 800fb84:	6978      	ldr	r0, [r7, #20]
 800fb86:	f000 f8d1 	bl	800fd2c <prvInsertTimerInActiveList>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d01f      	beq.n	800fbd0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb90:	2300      	movs	r3, #0
 800fb92:	9300      	str	r3, [sp, #0]
 800fb94:	2300      	movs	r3, #0
 800fb96:	687a      	ldr	r2, [r7, #4]
 800fb98:	2100      	movs	r1, #0
 800fb9a:	6978      	ldr	r0, [r7, #20]
 800fb9c:	f7ff ff88 	bl	800fab0 <xTimerGenericCommand>
 800fba0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d113      	bne.n	800fbd0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	60fb      	str	r3, [r7, #12]
}
 800fbba:	bf00      	nop
 800fbbc:	e7fe      	b.n	800fbbc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fbc4:	f023 0301 	bic.w	r3, r3, #1
 800fbc8:	b2da      	uxtb	r2, r3
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	6a1b      	ldr	r3, [r3, #32]
 800fbd4:	6978      	ldr	r0, [r7, #20]
 800fbd6:	4798      	blx	r3
}
 800fbd8:	bf00      	nop
 800fbda:	3718      	adds	r7, #24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	200011d8 	.word	0x200011d8

0800fbe4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fbec:	f107 0308 	add.w	r3, r7, #8
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f000 f857 	bl	800fca4 <prvGetNextExpireTime>
 800fbf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f000 f803 	bl	800fc08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fc02:	f000 f8d5 	bl	800fdb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fc06:	e7f1      	b.n	800fbec <prvTimerTask+0x8>

0800fc08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fc12:	f7ff f8e9 	bl	800ede8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc16:	f107 0308 	add.w	r3, r7, #8
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 f866 	bl	800fcec <prvSampleTimeNow>
 800fc20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d130      	bne.n	800fc8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d10a      	bne.n	800fc44 <prvProcessTimerOrBlockTask+0x3c>
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d806      	bhi.n	800fc44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fc36:	f7ff f8e5 	bl	800ee04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fc3a:	68f9      	ldr	r1, [r7, #12]
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7ff ff85 	bl	800fb4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fc42:	e024      	b.n	800fc8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d008      	beq.n	800fc5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fc4a:	4b13      	ldr	r3, [pc, #76]	; (800fc98 <prvProcessTimerOrBlockTask+0x90>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d101      	bne.n	800fc58 <prvProcessTimerOrBlockTask+0x50>
 800fc54:	2301      	movs	r3, #1
 800fc56:	e000      	b.n	800fc5a <prvProcessTimerOrBlockTask+0x52>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc5c:	4b0f      	ldr	r3, [pc, #60]	; (800fc9c <prvProcessTimerOrBlockTask+0x94>)
 800fc5e:	6818      	ldr	r0, [r3, #0]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	1ad3      	subs	r3, r2, r3
 800fc66:	683a      	ldr	r2, [r7, #0]
 800fc68:	4619      	mov	r1, r3
 800fc6a:	f7fe fe2d 	bl	800e8c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc6e:	f7ff f8c9 	bl	800ee04 <xTaskResumeAll>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10a      	bne.n	800fc8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fc78:	4b09      	ldr	r3, [pc, #36]	; (800fca0 <prvProcessTimerOrBlockTask+0x98>)
 800fc7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc7e:	601a      	str	r2, [r3, #0]
 800fc80:	f3bf 8f4f 	dsb	sy
 800fc84:	f3bf 8f6f 	isb	sy
}
 800fc88:	e001      	b.n	800fc8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fc8a:	f7ff f8bb 	bl	800ee04 <xTaskResumeAll>
}
 800fc8e:	bf00      	nop
 800fc90:	3710      	adds	r7, #16
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bd80      	pop	{r7, pc}
 800fc96:	bf00      	nop
 800fc98:	200011dc 	.word	0x200011dc
 800fc9c:	200011e0 	.word	0x200011e0
 800fca0:	e000ed04 	.word	0xe000ed04

0800fca4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fca4:	b480      	push	{r7}
 800fca6:	b085      	sub	sp, #20
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fcac:	4b0e      	ldr	r3, [pc, #56]	; (800fce8 <prvGetNextExpireTime+0x44>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d101      	bne.n	800fcba <prvGetNextExpireTime+0x16>
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	e000      	b.n	800fcbc <prvGetNextExpireTime+0x18>
 800fcba:	2200      	movs	r2, #0
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d105      	bne.n	800fcd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcc8:	4b07      	ldr	r3, [pc, #28]	; (800fce8 <prvGetNextExpireTime+0x44>)
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	60fb      	str	r3, [r7, #12]
 800fcd2:	e001      	b.n	800fcd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3714      	adds	r7, #20
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr
 800fce6:	bf00      	nop
 800fce8:	200011d8 	.word	0x200011d8

0800fcec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fcf4:	f7ff f924 	bl	800ef40 <xTaskGetTickCount>
 800fcf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fcfa:	4b0b      	ldr	r3, [pc, #44]	; (800fd28 <prvSampleTimeNow+0x3c>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d205      	bcs.n	800fd10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fd04:	f000 f936 	bl	800ff74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	e002      	b.n	800fd16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fd16:	4a04      	ldr	r2, [pc, #16]	; (800fd28 <prvSampleTimeNow+0x3c>)
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3710      	adds	r7, #16
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	200011e8 	.word	0x200011e8

0800fd2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b086      	sub	sp, #24
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	607a      	str	r2, [r7, #4]
 800fd38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	68ba      	ldr	r2, [r7, #8]
 800fd42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	68fa      	ldr	r2, [r7, #12]
 800fd48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fd4a:	68ba      	ldr	r2, [r7, #8]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d812      	bhi.n	800fd78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	1ad2      	subs	r2, r2, r3
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	699b      	ldr	r3, [r3, #24]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	d302      	bcc.n	800fd66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd60:	2301      	movs	r3, #1
 800fd62:	617b      	str	r3, [r7, #20]
 800fd64:	e01b      	b.n	800fd9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd66:	4b10      	ldr	r3, [pc, #64]	; (800fda8 <prvInsertTimerInActiveList+0x7c>)
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	4619      	mov	r1, r3
 800fd70:	4610      	mov	r0, r2
 800fd72:	f7fe f88e 	bl	800de92 <vListInsert>
 800fd76:	e012      	b.n	800fd9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d206      	bcs.n	800fd8e <prvInsertTimerInActiveList+0x62>
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d302      	bcc.n	800fd8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	617b      	str	r3, [r7, #20]
 800fd8c:	e007      	b.n	800fd9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd8e:	4b07      	ldr	r3, [pc, #28]	; (800fdac <prvInsertTimerInActiveList+0x80>)
 800fd90:	681a      	ldr	r2, [r3, #0]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	3304      	adds	r3, #4
 800fd96:	4619      	mov	r1, r3
 800fd98:	4610      	mov	r0, r2
 800fd9a:	f7fe f87a 	bl	800de92 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fd9e:	697b      	ldr	r3, [r7, #20]
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3718      	adds	r7, #24
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	200011dc 	.word	0x200011dc
 800fdac:	200011d8 	.word	0x200011d8

0800fdb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b08e      	sub	sp, #56	; 0x38
 800fdb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fdb6:	e0ca      	b.n	800ff4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	da18      	bge.n	800fdf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fdbe:	1d3b      	adds	r3, r7, #4
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d10a      	bne.n	800fde0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdce:	f383 8811 	msr	BASEPRI, r3
 800fdd2:	f3bf 8f6f 	isb	sy
 800fdd6:	f3bf 8f4f 	dsb	sy
 800fdda:	61fb      	str	r3, [r7, #28]
}
 800fddc:	bf00      	nop
 800fdde:	e7fe      	b.n	800fdde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fde6:	6850      	ldr	r0, [r2, #4]
 800fde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdea:	6892      	ldr	r2, [r2, #8]
 800fdec:	4611      	mov	r1, r2
 800fdee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f2c0 80aa 	blt.w	800ff4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	695b      	ldr	r3, [r3, #20]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d004      	beq.n	800fe0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe06:	3304      	adds	r3, #4
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe f87b 	bl	800df04 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe0e:	463b      	mov	r3, r7
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7ff ff6b 	bl	800fcec <prvSampleTimeNow>
 800fe16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b09      	cmp	r3, #9
 800fe1c:	f200 8097 	bhi.w	800ff4e <prvProcessReceivedCommands+0x19e>
 800fe20:	a201      	add	r2, pc, #4	; (adr r2, 800fe28 <prvProcessReceivedCommands+0x78>)
 800fe22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe26:	bf00      	nop
 800fe28:	0800fe51 	.word	0x0800fe51
 800fe2c:	0800fe51 	.word	0x0800fe51
 800fe30:	0800fe51 	.word	0x0800fe51
 800fe34:	0800fec5 	.word	0x0800fec5
 800fe38:	0800fed9 	.word	0x0800fed9
 800fe3c:	0800ff23 	.word	0x0800ff23
 800fe40:	0800fe51 	.word	0x0800fe51
 800fe44:	0800fe51 	.word	0x0800fe51
 800fe48:	0800fec5 	.word	0x0800fec5
 800fe4c:	0800fed9 	.word	0x0800fed9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe56:	f043 0301 	orr.w	r3, r3, #1
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe62:	68ba      	ldr	r2, [r7, #8]
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	699b      	ldr	r3, [r3, #24]
 800fe68:	18d1      	adds	r1, r2, r3
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe70:	f7ff ff5c 	bl	800fd2c <prvInsertTimerInActiveList>
 800fe74:	4603      	mov	r3, r0
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d069      	beq.n	800ff4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7c:	6a1b      	ldr	r3, [r3, #32]
 800fe7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe88:	f003 0304 	and.w	r3, r3, #4
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d05e      	beq.n	800ff4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe90:	68ba      	ldr	r2, [r7, #8]
 800fe92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe94:	699b      	ldr	r3, [r3, #24]
 800fe96:	441a      	add	r2, r3
 800fe98:	2300      	movs	r3, #0
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	2100      	movs	r1, #0
 800fea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fea2:	f7ff fe05 	bl	800fab0 <xTimerGenericCommand>
 800fea6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fea8:	6a3b      	ldr	r3, [r7, #32]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d14f      	bne.n	800ff4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800feae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	61bb      	str	r3, [r7, #24]
}
 800fec0:	bf00      	nop
 800fec2:	e7fe      	b.n	800fec2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800feca:	f023 0301 	bic.w	r3, r3, #1
 800fece:	b2da      	uxtb	r2, r3
 800fed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fed6:	e03a      	b.n	800ff4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fede:	f043 0301 	orr.w	r3, r3, #1
 800fee2:	b2da      	uxtb	r2, r3
 800fee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	699b      	ldr	r3, [r3, #24]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d10a      	bne.n	800ff0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefc:	f383 8811 	msr	BASEPRI, r3
 800ff00:	f3bf 8f6f 	isb	sy
 800ff04:	f3bf 8f4f 	dsb	sy
 800ff08:	617b      	str	r3, [r7, #20]
}
 800ff0a:	bf00      	nop
 800ff0c:	e7fe      	b.n	800ff0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ff0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff10:	699a      	ldr	r2, [r3, #24]
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	18d1      	adds	r1, r2, r3
 800ff16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff1c:	f7ff ff06 	bl	800fd2c <prvInsertTimerInActiveList>
					break;
 800ff20:	e015      	b.n	800ff4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ff22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff28:	f003 0302 	and.w	r3, r3, #2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d103      	bne.n	800ff38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ff30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff32:	f000 fc1d 	bl	8010770 <vPortFree>
 800ff36:	e00a      	b.n	800ff4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ff38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff3e:	f023 0301 	bic.w	r3, r3, #1
 800ff42:	b2da      	uxtb	r2, r3
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ff4a:	e000      	b.n	800ff4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ff4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ff4e:	4b08      	ldr	r3, [pc, #32]	; (800ff70 <prvProcessReceivedCommands+0x1c0>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	1d39      	adds	r1, r7, #4
 800ff54:	2200      	movs	r2, #0
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe fa9c 	bl	800e494 <xQueueReceive>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f47f af2a 	bne.w	800fdb8 <prvProcessReceivedCommands+0x8>
	}
}
 800ff64:	bf00      	nop
 800ff66:	bf00      	nop
 800ff68:	3730      	adds	r7, #48	; 0x30
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	200011e0 	.word	0x200011e0

0800ff74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b088      	sub	sp, #32
 800ff78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff7a:	e048      	b.n	801000e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff7c:	4b2d      	ldr	r3, [pc, #180]	; (8010034 <prvSwitchTimerLists+0xc0>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68db      	ldr	r3, [r3, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff86:	4b2b      	ldr	r3, [pc, #172]	; (8010034 <prvSwitchTimerLists+0xc0>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	3304      	adds	r3, #4
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7fd ffb5 	bl	800df04 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6a1b      	ldr	r3, [r3, #32]
 800ff9e:	68f8      	ldr	r0, [r7, #12]
 800ffa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffa8:	f003 0304 	and.w	r3, r3, #4
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d02e      	beq.n	801000e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	699b      	ldr	r3, [r3, #24]
 800ffb4:	693a      	ldr	r2, [r7, #16]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	693b      	ldr	r3, [r7, #16]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d90e      	bls.n	800ffe0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	68ba      	ldr	r2, [r7, #8]
 800ffc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ffce:	4b19      	ldr	r3, [pc, #100]	; (8010034 <prvSwitchTimerLists+0xc0>)
 800ffd0:	681a      	ldr	r2, [r3, #0]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	3304      	adds	r3, #4
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	4610      	mov	r0, r2
 800ffda:	f7fd ff5a 	bl	800de92 <vListInsert>
 800ffde:	e016      	b.n	801000e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	9300      	str	r3, [sp, #0]
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	693a      	ldr	r2, [r7, #16]
 800ffe8:	2100      	movs	r1, #0
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f7ff fd60 	bl	800fab0 <xTimerGenericCommand>
 800fff0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d10a      	bne.n	801000e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffc:	f383 8811 	msr	BASEPRI, r3
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	603b      	str	r3, [r7, #0]
}
 801000a:	bf00      	nop
 801000c:	e7fe      	b.n	801000c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801000e:	4b09      	ldr	r3, [pc, #36]	; (8010034 <prvSwitchTimerLists+0xc0>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d1b1      	bne.n	800ff7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010018:	4b06      	ldr	r3, [pc, #24]	; (8010034 <prvSwitchTimerLists+0xc0>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801001e:	4b06      	ldr	r3, [pc, #24]	; (8010038 <prvSwitchTimerLists+0xc4>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a04      	ldr	r2, [pc, #16]	; (8010034 <prvSwitchTimerLists+0xc0>)
 8010024:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010026:	4a04      	ldr	r2, [pc, #16]	; (8010038 <prvSwitchTimerLists+0xc4>)
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	6013      	str	r3, [r2, #0]
}
 801002c:	bf00      	nop
 801002e:	3718      	adds	r7, #24
 8010030:	46bd      	mov	sp, r7
 8010032:	bd80      	pop	{r7, pc}
 8010034:	200011d8 	.word	0x200011d8
 8010038:	200011dc 	.word	0x200011dc

0801003c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010042:	f000 f9a7 	bl	8010394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010046:	4b15      	ldr	r3, [pc, #84]	; (801009c <prvCheckForValidListAndQueue+0x60>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d120      	bne.n	8010090 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801004e:	4814      	ldr	r0, [pc, #80]	; (80100a0 <prvCheckForValidListAndQueue+0x64>)
 8010050:	f7fd fece 	bl	800ddf0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010054:	4813      	ldr	r0, [pc, #76]	; (80100a4 <prvCheckForValidListAndQueue+0x68>)
 8010056:	f7fd fecb 	bl	800ddf0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801005a:	4b13      	ldr	r3, [pc, #76]	; (80100a8 <prvCheckForValidListAndQueue+0x6c>)
 801005c:	4a10      	ldr	r2, [pc, #64]	; (80100a0 <prvCheckForValidListAndQueue+0x64>)
 801005e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010060:	4b12      	ldr	r3, [pc, #72]	; (80100ac <prvCheckForValidListAndQueue+0x70>)
 8010062:	4a10      	ldr	r2, [pc, #64]	; (80100a4 <prvCheckForValidListAndQueue+0x68>)
 8010064:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010066:	2300      	movs	r3, #0
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	4b11      	ldr	r3, [pc, #68]	; (80100b0 <prvCheckForValidListAndQueue+0x74>)
 801006c:	4a11      	ldr	r2, [pc, #68]	; (80100b4 <prvCheckForValidListAndQueue+0x78>)
 801006e:	2110      	movs	r1, #16
 8010070:	200a      	movs	r0, #10
 8010072:	f7fd ffd9 	bl	800e028 <xQueueGenericCreateStatic>
 8010076:	4603      	mov	r3, r0
 8010078:	4a08      	ldr	r2, [pc, #32]	; (801009c <prvCheckForValidListAndQueue+0x60>)
 801007a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801007c:	4b07      	ldr	r3, [pc, #28]	; (801009c <prvCheckForValidListAndQueue+0x60>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d005      	beq.n	8010090 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010084:	4b05      	ldr	r3, [pc, #20]	; (801009c <prvCheckForValidListAndQueue+0x60>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	490b      	ldr	r1, [pc, #44]	; (80100b8 <prvCheckForValidListAndQueue+0x7c>)
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fbf2 	bl	800e874 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010090:	f000 f9b0 	bl	80103f4 <vPortExitCritical>
}
 8010094:	bf00      	nop
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	200011e0 	.word	0x200011e0
 80100a0:	200011b0 	.word	0x200011b0
 80100a4:	200011c4 	.word	0x200011c4
 80100a8:	200011d8 	.word	0x200011d8
 80100ac:	200011dc 	.word	0x200011dc
 80100b0:	2000128c 	.word	0x2000128c
 80100b4:	200011ec 	.word	0x200011ec
 80100b8:	08012a58 	.word	0x08012a58

080100bc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d10a      	bne.n	80100e4 <pvTimerGetTimerID+0x28>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	60fb      	str	r3, [r7, #12]
}
 80100e0:	bf00      	nop
 80100e2:	e7fe      	b.n	80100e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80100e4:	f000 f956 	bl	8010394 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	69db      	ldr	r3, [r3, #28]
 80100ec:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80100ee:	f000 f981 	bl	80103f4 <vPortExitCritical>

	return pvReturn;
 80100f2:	693b      	ldr	r3, [r7, #16]
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3718      	adds	r7, #24
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08a      	sub	sp, #40	; 0x28
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
 8010108:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801010a:	f06f 0301 	mvn.w	r3, #1
 801010e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801011c:	4b06      	ldr	r3, [pc, #24]	; (8010138 <xTimerPendFunctionCallFromISR+0x3c>)
 801011e:	6818      	ldr	r0, [r3, #0]
 8010120:	f107 0114 	add.w	r1, r7, #20
 8010124:	2300      	movs	r3, #0
 8010126:	683a      	ldr	r2, [r7, #0]
 8010128:	f7fe f918 	bl	800e35c <xQueueGenericSendFromISR>
 801012c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801012e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010130:	4618      	mov	r0, r3
 8010132:	3728      	adds	r7, #40	; 0x28
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}
 8010138:	200011e0 	.word	0x200011e0

0801013c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801013c:	b480      	push	{r7}
 801013e:	b085      	sub	sp, #20
 8010140:	af00      	add	r7, sp, #0
 8010142:	60f8      	str	r0, [r7, #12]
 8010144:	60b9      	str	r1, [r7, #8]
 8010146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	3b04      	subs	r3, #4
 801014c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	3b04      	subs	r3, #4
 801015a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	f023 0201 	bic.w	r2, r3, #1
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3b04      	subs	r3, #4
 801016a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801016c:	4a0c      	ldr	r2, [pc, #48]	; (80101a0 <pxPortInitialiseStack+0x64>)
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	3b14      	subs	r3, #20
 8010176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	3b04      	subs	r3, #4
 8010182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f06f 0202 	mvn.w	r2, #2
 801018a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	3b20      	subs	r3, #32
 8010190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010192:	68fb      	ldr	r3, [r7, #12]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	080101a5 	.word	0x080101a5

080101a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80101a4:	b480      	push	{r7}
 80101a6:	b085      	sub	sp, #20
 80101a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80101ae:	4b12      	ldr	r3, [pc, #72]	; (80101f8 <prvTaskExitError+0x54>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101b6:	d00a      	beq.n	80101ce <prvTaskExitError+0x2a>
	__asm volatile
 80101b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101bc:	f383 8811 	msr	BASEPRI, r3
 80101c0:	f3bf 8f6f 	isb	sy
 80101c4:	f3bf 8f4f 	dsb	sy
 80101c8:	60fb      	str	r3, [r7, #12]
}
 80101ca:	bf00      	nop
 80101cc:	e7fe      	b.n	80101cc <prvTaskExitError+0x28>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	60bb      	str	r3, [r7, #8]
}
 80101e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80101e2:	bf00      	nop
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d0fc      	beq.n	80101e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80101ea:	bf00      	nop
 80101ec:	bf00      	nop
 80101ee:	3714      	adds	r7, #20
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr
 80101f8:	200000ac 	.word	0x200000ac
 80101fc:	00000000 	.word	0x00000000

08010200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010200:	4b07      	ldr	r3, [pc, #28]	; (8010220 <pxCurrentTCBConst2>)
 8010202:	6819      	ldr	r1, [r3, #0]
 8010204:	6808      	ldr	r0, [r1, #0]
 8010206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020a:	f380 8809 	msr	PSP, r0
 801020e:	f3bf 8f6f 	isb	sy
 8010212:	f04f 0000 	mov.w	r0, #0
 8010216:	f380 8811 	msr	BASEPRI, r0
 801021a:	4770      	bx	lr
 801021c:	f3af 8000 	nop.w

08010220 <pxCurrentTCBConst2>:
 8010220:	20000cb0 	.word	0x20000cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010224:	bf00      	nop
 8010226:	bf00      	nop

08010228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010228:	4808      	ldr	r0, [pc, #32]	; (801024c <prvPortStartFirstTask+0x24>)
 801022a:	6800      	ldr	r0, [r0, #0]
 801022c:	6800      	ldr	r0, [r0, #0]
 801022e:	f380 8808 	msr	MSP, r0
 8010232:	f04f 0000 	mov.w	r0, #0
 8010236:	f380 8814 	msr	CONTROL, r0
 801023a:	b662      	cpsie	i
 801023c:	b661      	cpsie	f
 801023e:	f3bf 8f4f 	dsb	sy
 8010242:	f3bf 8f6f 	isb	sy
 8010246:	df00      	svc	0
 8010248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801024a:	bf00      	nop
 801024c:	e000ed08 	.word	0xe000ed08

08010250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010256:	4b46      	ldr	r3, [pc, #280]	; (8010370 <xPortStartScheduler+0x120>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	4a46      	ldr	r2, [pc, #280]	; (8010374 <xPortStartScheduler+0x124>)
 801025c:	4293      	cmp	r3, r2
 801025e:	d10a      	bne.n	8010276 <xPortStartScheduler+0x26>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010264:	f383 8811 	msr	BASEPRI, r3
 8010268:	f3bf 8f6f 	isb	sy
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	613b      	str	r3, [r7, #16]
}
 8010272:	bf00      	nop
 8010274:	e7fe      	b.n	8010274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010276:	4b3e      	ldr	r3, [pc, #248]	; (8010370 <xPortStartScheduler+0x120>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a3f      	ldr	r2, [pc, #252]	; (8010378 <xPortStartScheduler+0x128>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d10a      	bne.n	8010296 <xPortStartScheduler+0x46>
	__asm volatile
 8010280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010284:	f383 8811 	msr	BASEPRI, r3
 8010288:	f3bf 8f6f 	isb	sy
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	60fb      	str	r3, [r7, #12]
}
 8010292:	bf00      	nop
 8010294:	e7fe      	b.n	8010294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010296:	4b39      	ldr	r3, [pc, #228]	; (801037c <xPortStartScheduler+0x12c>)
 8010298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	b2db      	uxtb	r3, r3
 80102a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	22ff      	movs	r2, #255	; 0xff
 80102a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80102b0:	78fb      	ldrb	r3, [r7, #3]
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80102b8:	b2da      	uxtb	r2, r3
 80102ba:	4b31      	ldr	r3, [pc, #196]	; (8010380 <xPortStartScheduler+0x130>)
 80102bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80102be:	4b31      	ldr	r3, [pc, #196]	; (8010384 <xPortStartScheduler+0x134>)
 80102c0:	2207      	movs	r2, #7
 80102c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102c4:	e009      	b.n	80102da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80102c6:	4b2f      	ldr	r3, [pc, #188]	; (8010384 <xPortStartScheduler+0x134>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3b01      	subs	r3, #1
 80102cc:	4a2d      	ldr	r2, [pc, #180]	; (8010384 <xPortStartScheduler+0x134>)
 80102ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80102d0:	78fb      	ldrb	r3, [r7, #3]
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	005b      	lsls	r3, r3, #1
 80102d6:	b2db      	uxtb	r3, r3
 80102d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80102da:	78fb      	ldrb	r3, [r7, #3]
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102e2:	2b80      	cmp	r3, #128	; 0x80
 80102e4:	d0ef      	beq.n	80102c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80102e6:	4b27      	ldr	r3, [pc, #156]	; (8010384 <xPortStartScheduler+0x134>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	f1c3 0307 	rsb	r3, r3, #7
 80102ee:	2b04      	cmp	r3, #4
 80102f0:	d00a      	beq.n	8010308 <xPortStartScheduler+0xb8>
	__asm volatile
 80102f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f6:	f383 8811 	msr	BASEPRI, r3
 80102fa:	f3bf 8f6f 	isb	sy
 80102fe:	f3bf 8f4f 	dsb	sy
 8010302:	60bb      	str	r3, [r7, #8]
}
 8010304:	bf00      	nop
 8010306:	e7fe      	b.n	8010306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010308:	4b1e      	ldr	r3, [pc, #120]	; (8010384 <xPortStartScheduler+0x134>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	021b      	lsls	r3, r3, #8
 801030e:	4a1d      	ldr	r2, [pc, #116]	; (8010384 <xPortStartScheduler+0x134>)
 8010310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010312:	4b1c      	ldr	r3, [pc, #112]	; (8010384 <xPortStartScheduler+0x134>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801031a:	4a1a      	ldr	r2, [pc, #104]	; (8010384 <xPortStartScheduler+0x134>)
 801031c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	b2da      	uxtb	r2, r3
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010326:	4b18      	ldr	r3, [pc, #96]	; (8010388 <xPortStartScheduler+0x138>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4a17      	ldr	r2, [pc, #92]	; (8010388 <xPortStartScheduler+0x138>)
 801032c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010332:	4b15      	ldr	r3, [pc, #84]	; (8010388 <xPortStartScheduler+0x138>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	4a14      	ldr	r2, [pc, #80]	; (8010388 <xPortStartScheduler+0x138>)
 8010338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801033c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801033e:	f000 f8dd 	bl	80104fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010342:	4b12      	ldr	r3, [pc, #72]	; (801038c <xPortStartScheduler+0x13c>)
 8010344:	2200      	movs	r2, #0
 8010346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010348:	f000 f8fc 	bl	8010544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801034c:	4b10      	ldr	r3, [pc, #64]	; (8010390 <xPortStartScheduler+0x140>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	4a0f      	ldr	r2, [pc, #60]	; (8010390 <xPortStartScheduler+0x140>)
 8010352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010358:	f7ff ff66 	bl	8010228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801035c:	f7fe feba 	bl	800f0d4 <vTaskSwitchContext>
	prvTaskExitError();
 8010360:	f7ff ff20 	bl	80101a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3718      	adds	r7, #24
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	e000ed00 	.word	0xe000ed00
 8010374:	410fc271 	.word	0x410fc271
 8010378:	410fc270 	.word	0x410fc270
 801037c:	e000e400 	.word	0xe000e400
 8010380:	200012dc 	.word	0x200012dc
 8010384:	200012e0 	.word	0x200012e0
 8010388:	e000ed20 	.word	0xe000ed20
 801038c:	200000ac 	.word	0x200000ac
 8010390:	e000ef34 	.word	0xe000ef34

08010394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010394:	b480      	push	{r7}
 8010396:	b083      	sub	sp, #12
 8010398:	af00      	add	r7, sp, #0
	__asm volatile
 801039a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039e:	f383 8811 	msr	BASEPRI, r3
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	607b      	str	r3, [r7, #4]
}
 80103ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80103ae:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <vPortEnterCritical+0x58>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3301      	adds	r3, #1
 80103b4:	4a0d      	ldr	r2, [pc, #52]	; (80103ec <vPortEnterCritical+0x58>)
 80103b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80103b8:	4b0c      	ldr	r3, [pc, #48]	; (80103ec <vPortEnterCritical+0x58>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d10f      	bne.n	80103e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80103c0:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <vPortEnterCritical+0x5c>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00a      	beq.n	80103e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80103ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ce:	f383 8811 	msr	BASEPRI, r3
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	603b      	str	r3, [r7, #0]
}
 80103dc:	bf00      	nop
 80103de:	e7fe      	b.n	80103de <vPortEnterCritical+0x4a>
	}
}
 80103e0:	bf00      	nop
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr
 80103ec:	200000ac 	.word	0x200000ac
 80103f0:	e000ed04 	.word	0xe000ed04

080103f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80103f4:	b480      	push	{r7}
 80103f6:	b083      	sub	sp, #12
 80103f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80103fa:	4b12      	ldr	r3, [pc, #72]	; (8010444 <vPortExitCritical+0x50>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10a      	bne.n	8010418 <vPortExitCritical+0x24>
	__asm volatile
 8010402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	607b      	str	r3, [r7, #4]
}
 8010414:	bf00      	nop
 8010416:	e7fe      	b.n	8010416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010418:	4b0a      	ldr	r3, [pc, #40]	; (8010444 <vPortExitCritical+0x50>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	3b01      	subs	r3, #1
 801041e:	4a09      	ldr	r2, [pc, #36]	; (8010444 <vPortExitCritical+0x50>)
 8010420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010422:	4b08      	ldr	r3, [pc, #32]	; (8010444 <vPortExitCritical+0x50>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d105      	bne.n	8010436 <vPortExitCritical+0x42>
 801042a:	2300      	movs	r3, #0
 801042c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	f383 8811 	msr	BASEPRI, r3
}
 8010434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010436:	bf00      	nop
 8010438:	370c      	adds	r7, #12
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	200000ac 	.word	0x200000ac
	...

08010450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010450:	f3ef 8009 	mrs	r0, PSP
 8010454:	f3bf 8f6f 	isb	sy
 8010458:	4b15      	ldr	r3, [pc, #84]	; (80104b0 <pxCurrentTCBConst>)
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	f01e 0f10 	tst.w	lr, #16
 8010460:	bf08      	it	eq
 8010462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801046a:	6010      	str	r0, [r2, #0]
 801046c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010474:	f380 8811 	msr	BASEPRI, r0
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f7fe fe28 	bl	800f0d4 <vTaskSwitchContext>
 8010484:	f04f 0000 	mov.w	r0, #0
 8010488:	f380 8811 	msr	BASEPRI, r0
 801048c:	bc09      	pop	{r0, r3}
 801048e:	6819      	ldr	r1, [r3, #0]
 8010490:	6808      	ldr	r0, [r1, #0]
 8010492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010496:	f01e 0f10 	tst.w	lr, #16
 801049a:	bf08      	it	eq
 801049c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80104a0:	f380 8809 	msr	PSP, r0
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	f3af 8000 	nop.w

080104b0 <pxCurrentTCBConst>:
 80104b0:	20000cb0 	.word	0x20000cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80104b4:	bf00      	nop
 80104b6:	bf00      	nop

080104b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b082      	sub	sp, #8
 80104bc:	af00      	add	r7, sp, #0
	__asm volatile
 80104be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c2:	f383 8811 	msr	BASEPRI, r3
 80104c6:	f3bf 8f6f 	isb	sy
 80104ca:	f3bf 8f4f 	dsb	sy
 80104ce:	607b      	str	r3, [r7, #4]
}
 80104d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80104d2:	f7fe fd45 	bl	800ef60 <xTaskIncrementTick>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d003      	beq.n	80104e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80104dc:	4b06      	ldr	r3, [pc, #24]	; (80104f8 <xPortSysTickHandler+0x40>)
 80104de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104e2:	601a      	str	r2, [r3, #0]
 80104e4:	2300      	movs	r3, #0
 80104e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	f383 8811 	msr	BASEPRI, r3
}
 80104ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80104f0:	bf00      	nop
 80104f2:	3708      	adds	r7, #8
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	e000ed04 	.word	0xe000ed04

080104fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80104fc:	b480      	push	{r7}
 80104fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010500:	4b0b      	ldr	r3, [pc, #44]	; (8010530 <vPortSetupTimerInterrupt+0x34>)
 8010502:	2200      	movs	r2, #0
 8010504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010506:	4b0b      	ldr	r3, [pc, #44]	; (8010534 <vPortSetupTimerInterrupt+0x38>)
 8010508:	2200      	movs	r2, #0
 801050a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801050c:	4b0a      	ldr	r3, [pc, #40]	; (8010538 <vPortSetupTimerInterrupt+0x3c>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	4a0a      	ldr	r2, [pc, #40]	; (801053c <vPortSetupTimerInterrupt+0x40>)
 8010512:	fba2 2303 	umull	r2, r3, r2, r3
 8010516:	099b      	lsrs	r3, r3, #6
 8010518:	4a09      	ldr	r2, [pc, #36]	; (8010540 <vPortSetupTimerInterrupt+0x44>)
 801051a:	3b01      	subs	r3, #1
 801051c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801051e:	4b04      	ldr	r3, [pc, #16]	; (8010530 <vPortSetupTimerInterrupt+0x34>)
 8010520:	2207      	movs	r2, #7
 8010522:	601a      	str	r2, [r3, #0]
}
 8010524:	bf00      	nop
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	e000e010 	.word	0xe000e010
 8010534:	e000e018 	.word	0xe000e018
 8010538:	20000000 	.word	0x20000000
 801053c:	10624dd3 	.word	0x10624dd3
 8010540:	e000e014 	.word	0xe000e014

08010544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010554 <vPortEnableVFP+0x10>
 8010548:	6801      	ldr	r1, [r0, #0]
 801054a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801054e:	6001      	str	r1, [r0, #0]
 8010550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010552:	bf00      	nop
 8010554:	e000ed88 	.word	0xe000ed88

08010558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010558:	b480      	push	{r7}
 801055a:	b085      	sub	sp, #20
 801055c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801055e:	f3ef 8305 	mrs	r3, IPSR
 8010562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	2b0f      	cmp	r3, #15
 8010568:	d914      	bls.n	8010594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801056a:	4a17      	ldr	r2, [pc, #92]	; (80105c8 <vPortValidateInterruptPriority+0x70>)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	4413      	add	r3, r2
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010574:	4b15      	ldr	r3, [pc, #84]	; (80105cc <vPortValidateInterruptPriority+0x74>)
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	7afa      	ldrb	r2, [r7, #11]
 801057a:	429a      	cmp	r2, r3
 801057c:	d20a      	bcs.n	8010594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801057e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010582:	f383 8811 	msr	BASEPRI, r3
 8010586:	f3bf 8f6f 	isb	sy
 801058a:	f3bf 8f4f 	dsb	sy
 801058e:	607b      	str	r3, [r7, #4]
}
 8010590:	bf00      	nop
 8010592:	e7fe      	b.n	8010592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010594:	4b0e      	ldr	r3, [pc, #56]	; (80105d0 <vPortValidateInterruptPriority+0x78>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801059c:	4b0d      	ldr	r3, [pc, #52]	; (80105d4 <vPortValidateInterruptPriority+0x7c>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d90a      	bls.n	80105ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80105a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	603b      	str	r3, [r7, #0]
}
 80105b6:	bf00      	nop
 80105b8:	e7fe      	b.n	80105b8 <vPortValidateInterruptPriority+0x60>
	}
 80105ba:	bf00      	nop
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	e000e3f0 	.word	0xe000e3f0
 80105cc:	200012dc 	.word	0x200012dc
 80105d0:	e000ed0c 	.word	0xe000ed0c
 80105d4:	200012e0 	.word	0x200012e0

080105d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b08a      	sub	sp, #40	; 0x28
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80105e0:	2300      	movs	r3, #0
 80105e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80105e4:	f7fe fc00 	bl	800ede8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80105e8:	4b5b      	ldr	r3, [pc, #364]	; (8010758 <pvPortMalloc+0x180>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d101      	bne.n	80105f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80105f0:	f000 f920 	bl	8010834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80105f4:	4b59      	ldr	r3, [pc, #356]	; (801075c <pvPortMalloc+0x184>)
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4013      	ands	r3, r2
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	f040 8093 	bne.w	8010728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d01d      	beq.n	8010644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010608:	2208      	movs	r2, #8
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4413      	add	r3, r2
 801060e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f003 0307 	and.w	r3, r3, #7
 8010616:	2b00      	cmp	r3, #0
 8010618:	d014      	beq.n	8010644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f023 0307 	bic.w	r3, r3, #7
 8010620:	3308      	adds	r3, #8
 8010622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f003 0307 	and.w	r3, r3, #7
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00a      	beq.n	8010644 <pvPortMalloc+0x6c>
	__asm volatile
 801062e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010632:	f383 8811 	msr	BASEPRI, r3
 8010636:	f3bf 8f6f 	isb	sy
 801063a:	f3bf 8f4f 	dsb	sy
 801063e:	617b      	str	r3, [r7, #20]
}
 8010640:	bf00      	nop
 8010642:	e7fe      	b.n	8010642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d06e      	beq.n	8010728 <pvPortMalloc+0x150>
 801064a:	4b45      	ldr	r3, [pc, #276]	; (8010760 <pvPortMalloc+0x188>)
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	429a      	cmp	r2, r3
 8010652:	d869      	bhi.n	8010728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010654:	4b43      	ldr	r3, [pc, #268]	; (8010764 <pvPortMalloc+0x18c>)
 8010656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010658:	4b42      	ldr	r3, [pc, #264]	; (8010764 <pvPortMalloc+0x18c>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801065e:	e004      	b.n	801066a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801066a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066c:	685b      	ldr	r3, [r3, #4]
 801066e:	687a      	ldr	r2, [r7, #4]
 8010670:	429a      	cmp	r2, r3
 8010672:	d903      	bls.n	801067c <pvPortMalloc+0xa4>
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1f1      	bne.n	8010660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801067c:	4b36      	ldr	r3, [pc, #216]	; (8010758 <pvPortMalloc+0x180>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010682:	429a      	cmp	r2, r3
 8010684:	d050      	beq.n	8010728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010686:	6a3b      	ldr	r3, [r7, #32]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2208      	movs	r2, #8
 801068c:	4413      	add	r3, r2
 801068e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	6a3b      	ldr	r3, [r7, #32]
 8010696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069a:	685a      	ldr	r2, [r3, #4]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	1ad2      	subs	r2, r2, r3
 80106a0:	2308      	movs	r3, #8
 80106a2:	005b      	lsls	r3, r3, #1
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d91f      	bls.n	80106e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80106a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4413      	add	r3, r2
 80106ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	f003 0307 	and.w	r3, r3, #7
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d00a      	beq.n	80106d0 <pvPortMalloc+0xf8>
	__asm volatile
 80106ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106be:	f383 8811 	msr	BASEPRI, r3
 80106c2:	f3bf 8f6f 	isb	sy
 80106c6:	f3bf 8f4f 	dsb	sy
 80106ca:	613b      	str	r3, [r7, #16]
}
 80106cc:	bf00      	nop
 80106ce:	e7fe      	b.n	80106ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80106d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d2:	685a      	ldr	r2, [r3, #4]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	1ad2      	subs	r2, r2, r3
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80106dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106de:	687a      	ldr	r2, [r7, #4]
 80106e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80106e2:	69b8      	ldr	r0, [r7, #24]
 80106e4:	f000 f908 	bl	80108f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80106e8:	4b1d      	ldr	r3, [pc, #116]	; (8010760 <pvPortMalloc+0x188>)
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	4a1b      	ldr	r2, [pc, #108]	; (8010760 <pvPortMalloc+0x188>)
 80106f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80106f6:	4b1a      	ldr	r3, [pc, #104]	; (8010760 <pvPortMalloc+0x188>)
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	4b1b      	ldr	r3, [pc, #108]	; (8010768 <pvPortMalloc+0x190>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	429a      	cmp	r2, r3
 8010700:	d203      	bcs.n	801070a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010702:	4b17      	ldr	r3, [pc, #92]	; (8010760 <pvPortMalloc+0x188>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4a18      	ldr	r2, [pc, #96]	; (8010768 <pvPortMalloc+0x190>)
 8010708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070c:	685a      	ldr	r2, [r3, #4]
 801070e:	4b13      	ldr	r3, [pc, #76]	; (801075c <pvPortMalloc+0x184>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	431a      	orrs	r2, r3
 8010714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	2200      	movs	r2, #0
 801071c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801071e:	4b13      	ldr	r3, [pc, #76]	; (801076c <pvPortMalloc+0x194>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	3301      	adds	r3, #1
 8010724:	4a11      	ldr	r2, [pc, #68]	; (801076c <pvPortMalloc+0x194>)
 8010726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010728:	f7fe fb6c 	bl	800ee04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	f003 0307 	and.w	r3, r3, #7
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00a      	beq.n	801074c <pvPortMalloc+0x174>
	__asm volatile
 8010736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073a:	f383 8811 	msr	BASEPRI, r3
 801073e:	f3bf 8f6f 	isb	sy
 8010742:	f3bf 8f4f 	dsb	sy
 8010746:	60fb      	str	r3, [r7, #12]
}
 8010748:	bf00      	nop
 801074a:	e7fe      	b.n	801074a <pvPortMalloc+0x172>
	return pvReturn;
 801074c:	69fb      	ldr	r3, [r7, #28]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3728      	adds	r7, #40	; 0x28
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	20004eec 	.word	0x20004eec
 801075c:	20004f00 	.word	0x20004f00
 8010760:	20004ef0 	.word	0x20004ef0
 8010764:	20004ee4 	.word	0x20004ee4
 8010768:	20004ef4 	.word	0x20004ef4
 801076c:	20004ef8 	.word	0x20004ef8

08010770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b086      	sub	sp, #24
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d04d      	beq.n	801081e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010782:	2308      	movs	r3, #8
 8010784:	425b      	negs	r3, r3
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	4413      	add	r3, r2
 801078a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	685a      	ldr	r2, [r3, #4]
 8010794:	4b24      	ldr	r3, [pc, #144]	; (8010828 <vPortFree+0xb8>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4013      	ands	r3, r2
 801079a:	2b00      	cmp	r3, #0
 801079c:	d10a      	bne.n	80107b4 <vPortFree+0x44>
	__asm volatile
 801079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a2:	f383 8811 	msr	BASEPRI, r3
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	60fb      	str	r3, [r7, #12]
}
 80107b0:	bf00      	nop
 80107b2:	e7fe      	b.n	80107b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d00a      	beq.n	80107d2 <vPortFree+0x62>
	__asm volatile
 80107bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c0:	f383 8811 	msr	BASEPRI, r3
 80107c4:	f3bf 8f6f 	isb	sy
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	60bb      	str	r3, [r7, #8]
}
 80107ce:	bf00      	nop
 80107d0:	e7fe      	b.n	80107d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	685a      	ldr	r2, [r3, #4]
 80107d6:	4b14      	ldr	r3, [pc, #80]	; (8010828 <vPortFree+0xb8>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	4013      	ands	r3, r2
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d01e      	beq.n	801081e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d11a      	bne.n	801081e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	685a      	ldr	r2, [r3, #4]
 80107ec:	4b0e      	ldr	r3, [pc, #56]	; (8010828 <vPortFree+0xb8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	43db      	mvns	r3, r3
 80107f2:	401a      	ands	r2, r3
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80107f8:	f7fe faf6 	bl	800ede8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	685a      	ldr	r2, [r3, #4]
 8010800:	4b0a      	ldr	r3, [pc, #40]	; (801082c <vPortFree+0xbc>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4413      	add	r3, r2
 8010806:	4a09      	ldr	r2, [pc, #36]	; (801082c <vPortFree+0xbc>)
 8010808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801080a:	6938      	ldr	r0, [r7, #16]
 801080c:	f000 f874 	bl	80108f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010810:	4b07      	ldr	r3, [pc, #28]	; (8010830 <vPortFree+0xc0>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	3301      	adds	r3, #1
 8010816:	4a06      	ldr	r2, [pc, #24]	; (8010830 <vPortFree+0xc0>)
 8010818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801081a:	f7fe faf3 	bl	800ee04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801081e:	bf00      	nop
 8010820:	3718      	adds	r7, #24
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	20004f00 	.word	0x20004f00
 801082c:	20004ef0 	.word	0x20004ef0
 8010830:	20004efc 	.word	0x20004efc

08010834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010834:	b480      	push	{r7}
 8010836:	b085      	sub	sp, #20
 8010838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801083a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801083e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010840:	4b27      	ldr	r3, [pc, #156]	; (80108e0 <prvHeapInit+0xac>)
 8010842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	f003 0307 	and.w	r3, r3, #7
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00c      	beq.n	8010868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3307      	adds	r3, #7
 8010852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f023 0307 	bic.w	r3, r3, #7
 801085a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	1ad3      	subs	r3, r2, r3
 8010862:	4a1f      	ldr	r2, [pc, #124]	; (80108e0 <prvHeapInit+0xac>)
 8010864:	4413      	add	r3, r2
 8010866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801086c:	4a1d      	ldr	r2, [pc, #116]	; (80108e4 <prvHeapInit+0xb0>)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010872:	4b1c      	ldr	r3, [pc, #112]	; (80108e4 <prvHeapInit+0xb0>)
 8010874:	2200      	movs	r2, #0
 8010876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	68ba      	ldr	r2, [r7, #8]
 801087c:	4413      	add	r3, r2
 801087e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010880:	2208      	movs	r2, #8
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	1a9b      	subs	r3, r3, r2
 8010886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f023 0307 	bic.w	r3, r3, #7
 801088e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	4a15      	ldr	r2, [pc, #84]	; (80108e8 <prvHeapInit+0xb4>)
 8010894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010896:	4b14      	ldr	r3, [pc, #80]	; (80108e8 <prvHeapInit+0xb4>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2200      	movs	r2, #0
 801089c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801089e:	4b12      	ldr	r3, [pc, #72]	; (80108e8 <prvHeapInit+0xb4>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2200      	movs	r2, #0
 80108a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	1ad2      	subs	r2, r2, r3
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80108b4:	4b0c      	ldr	r3, [pc, #48]	; (80108e8 <prvHeapInit+0xb4>)
 80108b6:	681a      	ldr	r2, [r3, #0]
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	4a0a      	ldr	r2, [pc, #40]	; (80108ec <prvHeapInit+0xb8>)
 80108c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	4a09      	ldr	r2, [pc, #36]	; (80108f0 <prvHeapInit+0xbc>)
 80108ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80108cc:	4b09      	ldr	r3, [pc, #36]	; (80108f4 <prvHeapInit+0xc0>)
 80108ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80108d2:	601a      	str	r2, [r3, #0]
}
 80108d4:	bf00      	nop
 80108d6:	3714      	adds	r7, #20
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr
 80108e0:	200012e4 	.word	0x200012e4
 80108e4:	20004ee4 	.word	0x20004ee4
 80108e8:	20004eec 	.word	0x20004eec
 80108ec:	20004ef4 	.word	0x20004ef4
 80108f0:	20004ef0 	.word	0x20004ef0
 80108f4:	20004f00 	.word	0x20004f00

080108f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010900:	4b28      	ldr	r3, [pc, #160]	; (80109a4 <prvInsertBlockIntoFreeList+0xac>)
 8010902:	60fb      	str	r3, [r7, #12]
 8010904:	e002      	b.n	801090c <prvInsertBlockIntoFreeList+0x14>
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	60fb      	str	r3, [r7, #12]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	687a      	ldr	r2, [r7, #4]
 8010912:	429a      	cmp	r2, r3
 8010914:	d8f7      	bhi.n	8010906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	685b      	ldr	r3, [r3, #4]
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	4413      	add	r3, r2
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	429a      	cmp	r2, r3
 8010926:	d108      	bne.n	801093a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	685a      	ldr	r2, [r3, #4]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	441a      	add	r2, r3
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	441a      	add	r2, r3
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	429a      	cmp	r2, r3
 801094c:	d118      	bne.n	8010980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	4b15      	ldr	r3, [pc, #84]	; (80109a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	429a      	cmp	r2, r3
 8010958:	d00d      	beq.n	8010976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	685a      	ldr	r2, [r3, #4]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	441a      	add	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	601a      	str	r2, [r3, #0]
 8010974:	e008      	b.n	8010988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010976:	4b0c      	ldr	r3, [pc, #48]	; (80109a8 <prvInsertBlockIntoFreeList+0xb0>)
 8010978:	681a      	ldr	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	e003      	b.n	8010988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	429a      	cmp	r2, r3
 801098e:	d002      	beq.n	8010996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010996:	bf00      	nop
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	20004ee4 	.word	0x20004ee4
 80109a8:	20004eec 	.word	0x20004eec

080109ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80109b0:	2200      	movs	r2, #0
 80109b2:	4912      	ldr	r1, [pc, #72]	; (80109fc <MX_USB_DEVICE_Init+0x50>)
 80109b4:	4812      	ldr	r0, [pc, #72]	; (8010a00 <MX_USB_DEVICE_Init+0x54>)
 80109b6:	f7fb f99d 	bl	800bcf4 <USBD_Init>
 80109ba:	4603      	mov	r3, r0
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d001      	beq.n	80109c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80109c0:	f7f0 f9d6 	bl	8000d70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80109c4:	490f      	ldr	r1, [pc, #60]	; (8010a04 <MX_USB_DEVICE_Init+0x58>)
 80109c6:	480e      	ldr	r0, [pc, #56]	; (8010a00 <MX_USB_DEVICE_Init+0x54>)
 80109c8:	f7fb f9c4 	bl	800bd54 <USBD_RegisterClass>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d001      	beq.n	80109d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80109d2:	f7f0 f9cd 	bl	8000d70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80109d6:	490c      	ldr	r1, [pc, #48]	; (8010a08 <MX_USB_DEVICE_Init+0x5c>)
 80109d8:	4809      	ldr	r0, [pc, #36]	; (8010a00 <MX_USB_DEVICE_Init+0x54>)
 80109da:	f7fb f8b5 	bl	800bb48 <USBD_CDC_RegisterInterface>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d001      	beq.n	80109e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80109e4:	f7f0 f9c4 	bl	8000d70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80109e8:	4805      	ldr	r0, [pc, #20]	; (8010a00 <MX_USB_DEVICE_Init+0x54>)
 80109ea:	f7fb f9e9 	bl	800bdc0 <USBD_Start>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d001      	beq.n	80109f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80109f4:	f7f0 f9bc 	bl	8000d70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80109f8:	bf00      	nop
 80109fa:	bd80      	pop	{r7, pc}
 80109fc:	200000c4 	.word	0x200000c4
 8010a00:	20004f04 	.word	0x20004f04
 8010a04:	2000002c 	.word	0x2000002c
 8010a08:	200000b0 	.word	0x200000b0

08010a0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010a10:	2200      	movs	r2, #0
 8010a12:	4905      	ldr	r1, [pc, #20]	; (8010a28 <CDC_Init_FS+0x1c>)
 8010a14:	4805      	ldr	r0, [pc, #20]	; (8010a2c <CDC_Init_FS+0x20>)
 8010a16:	f7fb f8b1 	bl	800bb7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010a1a:	4905      	ldr	r1, [pc, #20]	; (8010a30 <CDC_Init_FS+0x24>)
 8010a1c:	4803      	ldr	r0, [pc, #12]	; (8010a2c <CDC_Init_FS+0x20>)
 8010a1e:	f7fb f8cf 	bl	800bbc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010a22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	200059ec 	.word	0x200059ec
 8010a2c:	20004f04 	.word	0x20004f04
 8010a30:	200051ec 	.word	0x200051ec

08010a34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010a34:	b480      	push	{r7}
 8010a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010a38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a42:	4770      	bx	lr

08010a44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	6039      	str	r1, [r7, #0]
 8010a4e:	71fb      	strb	r3, [r7, #7]
 8010a50:	4613      	mov	r3, r2
 8010a52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010a54:	79fb      	ldrb	r3, [r7, #7]
 8010a56:	2b23      	cmp	r3, #35	; 0x23
 8010a58:	d84a      	bhi.n	8010af0 <CDC_Control_FS+0xac>
 8010a5a:	a201      	add	r2, pc, #4	; (adr r2, 8010a60 <CDC_Control_FS+0x1c>)
 8010a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a60:	08010af1 	.word	0x08010af1
 8010a64:	08010af1 	.word	0x08010af1
 8010a68:	08010af1 	.word	0x08010af1
 8010a6c:	08010af1 	.word	0x08010af1
 8010a70:	08010af1 	.word	0x08010af1
 8010a74:	08010af1 	.word	0x08010af1
 8010a78:	08010af1 	.word	0x08010af1
 8010a7c:	08010af1 	.word	0x08010af1
 8010a80:	08010af1 	.word	0x08010af1
 8010a84:	08010af1 	.word	0x08010af1
 8010a88:	08010af1 	.word	0x08010af1
 8010a8c:	08010af1 	.word	0x08010af1
 8010a90:	08010af1 	.word	0x08010af1
 8010a94:	08010af1 	.word	0x08010af1
 8010a98:	08010af1 	.word	0x08010af1
 8010a9c:	08010af1 	.word	0x08010af1
 8010aa0:	08010af1 	.word	0x08010af1
 8010aa4:	08010af1 	.word	0x08010af1
 8010aa8:	08010af1 	.word	0x08010af1
 8010aac:	08010af1 	.word	0x08010af1
 8010ab0:	08010af1 	.word	0x08010af1
 8010ab4:	08010af1 	.word	0x08010af1
 8010ab8:	08010af1 	.word	0x08010af1
 8010abc:	08010af1 	.word	0x08010af1
 8010ac0:	08010af1 	.word	0x08010af1
 8010ac4:	08010af1 	.word	0x08010af1
 8010ac8:	08010af1 	.word	0x08010af1
 8010acc:	08010af1 	.word	0x08010af1
 8010ad0:	08010af1 	.word	0x08010af1
 8010ad4:	08010af1 	.word	0x08010af1
 8010ad8:	08010af1 	.word	0x08010af1
 8010adc:	08010af1 	.word	0x08010af1
 8010ae0:	08010af1 	.word	0x08010af1
 8010ae4:	08010af1 	.word	0x08010af1
 8010ae8:	08010af1 	.word	0x08010af1
 8010aec:	08010af1 	.word	0x08010af1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010af0:	bf00      	nop
  }

  return (USBD_OK);
 8010af2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010b0a:	6879      	ldr	r1, [r7, #4]
 8010b0c:	481a      	ldr	r0, [pc, #104]	; (8010b78 <CDC_Receive_FS+0x78>)
 8010b0e:	f7fb f857 	bl	800bbc0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010b12:	4819      	ldr	r0, [pc, #100]	; (8010b78 <CDC_Receive_FS+0x78>)
 8010b14:	f7fb f8b8 	bl	800bc88 <USBD_CDC_ReceivePacket>

	if (Buf[0] == '\r') {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	2b0d      	cmp	r3, #13
 8010b1e:	d112      	bne.n	8010b46 <CDC_Receive_FS+0x46>
		memcpy(usb_rx_buffer.buffer, _buffer.buffer, sizeof(usb_rx_buffer.buffer));
 8010b20:	4a16      	ldr	r2, [pc, #88]	; (8010b7c <CDC_Receive_FS+0x7c>)
 8010b22:	4b17      	ldr	r3, [pc, #92]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b24:	cb03      	ldmia	r3!, {r0, r1}
 8010b26:	6010      	str	r0, [r2, #0]
 8010b28:	6051      	str	r1, [r2, #4]
 8010b2a:	4b15      	ldr	r3, [pc, #84]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	701a      	strb	r2, [r3, #0]
		memset(_buffer.buffer, 0, RECEIVED_USB);
		_buffer.pos = 0;
 8010b30:	4b13      	ldr	r3, [pc, #76]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b32:	2200      	movs	r2, #0
 8010b34:	811a      	strh	r2, [r3, #8]
		osEventFlagsSet(EventReceivedHandle, RECEIVED_USB);
 8010b36:	4b13      	ldr	r3, [pc, #76]	; (8010b84 <CDC_Receive_FS+0x84>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	2101      	movs	r1, #1
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f7fc fe8b 	bl	800d858 <osEventFlagsSet>
		return (USBD_OK);
 8010b42:	2300      	movs	r3, #0
 8010b44:	e014      	b.n	8010b70 <CDC_Receive_FS+0x70>
	}

	_buffer.buffer[_buffer.pos++] = Buf[0];
 8010b46:	4b0e      	ldr	r3, [pc, #56]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b48:	891b      	ldrh	r3, [r3, #8]
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	1c5a      	adds	r2, r3, #1
 8010b4e:	b291      	uxth	r1, r2
 8010b50:	4a0b      	ldr	r2, [pc, #44]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b52:	8111      	strh	r1, [r2, #8]
 8010b54:	461a      	mov	r2, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	7819      	ldrb	r1, [r3, #0]
 8010b5a:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b5c:	5499      	strb	r1, [r3, r2]
	if (_buffer.pos > USB_BUFFER_SIZE) {
 8010b5e:	4b08      	ldr	r3, [pc, #32]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b60:	891b      	ldrh	r3, [r3, #8]
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	2b08      	cmp	r3, #8
 8010b66:	d902      	bls.n	8010b6e <CDC_Receive_FS+0x6e>

		_buffer.pos = 0;
 8010b68:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <CDC_Receive_FS+0x80>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	811a      	strh	r2, [r3, #8]
	}

	return (USBD_OK);
 8010b6e:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	20004f04 	.word	0x20004f04
 8010b7c:	200001e8 	.word	0x200001e8
 8010b80:	200051e0 	.word	0x200051e0
 8010b84:	200001cc 	.word	0x200001cc

08010b88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010b88:	b580      	push	{r7, lr}
 8010b8a:	b084      	sub	sp, #16
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
 8010b90:	460b      	mov	r3, r1
 8010b92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010b94:	2300      	movs	r3, #0
 8010b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010b98:	4b0d      	ldr	r3, [pc, #52]	; (8010bd0 <CDC_Transmit_FS+0x48>)
 8010b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d001      	beq.n	8010bae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010baa:	2301      	movs	r3, #1
 8010bac:	e00b      	b.n	8010bc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010bae:	887b      	ldrh	r3, [r7, #2]
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	6879      	ldr	r1, [r7, #4]
 8010bb4:	4806      	ldr	r0, [pc, #24]	; (8010bd0 <CDC_Transmit_FS+0x48>)
 8010bb6:	f7fa ffe1 	bl	800bb7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010bba:	4805      	ldr	r0, [pc, #20]	; (8010bd0 <CDC_Transmit_FS+0x48>)
 8010bbc:	f7fb f81e 	bl	800bbfc <USBD_CDC_TransmitPacket>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	20004f04 	.word	0x20004f04

08010bd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b087      	sub	sp, #28
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	4613      	mov	r3, r2
 8010be0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010be2:	2300      	movs	r3, #0
 8010be4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	371c      	adds	r7, #28
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr
	...

08010bf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b083      	sub	sp, #12
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	4603      	mov	r3, r0
 8010c00:	6039      	str	r1, [r7, #0]
 8010c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	2212      	movs	r2, #18
 8010c08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010c0a:	4b03      	ldr	r3, [pc, #12]	; (8010c18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	370c      	adds	r7, #12
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr
 8010c18:	200000e4 	.word	0x200000e4

08010c1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b083      	sub	sp, #12
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	4603      	mov	r3, r0
 8010c24:	6039      	str	r1, [r7, #0]
 8010c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	2204      	movs	r2, #4
 8010c2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010c2e:	4b03      	ldr	r3, [pc, #12]	; (8010c3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	370c      	adds	r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr
 8010c3c:	20000104 	.word	0x20000104

08010c40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	4603      	mov	r3, r0
 8010c48:	6039      	str	r1, [r7, #0]
 8010c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c4c:	79fb      	ldrb	r3, [r7, #7]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d105      	bne.n	8010c5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c52:	683a      	ldr	r2, [r7, #0]
 8010c54:	4907      	ldr	r1, [pc, #28]	; (8010c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8010c56:	4808      	ldr	r0, [pc, #32]	; (8010c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8010c58:	f7fc fa88 	bl	800d16c <USBD_GetString>
 8010c5c:	e004      	b.n	8010c68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010c5e:	683a      	ldr	r2, [r7, #0]
 8010c60:	4904      	ldr	r1, [pc, #16]	; (8010c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8010c62:	4805      	ldr	r0, [pc, #20]	; (8010c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8010c64:	f7fc fa82 	bl	800d16c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c68:	4b02      	ldr	r3, [pc, #8]	; (8010c74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	200061ec 	.word	0x200061ec
 8010c78:	08012a60 	.word	0x08012a60

08010c7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	4603      	mov	r3, r0
 8010c84:	6039      	str	r1, [r7, #0]
 8010c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010c88:	683a      	ldr	r2, [r7, #0]
 8010c8a:	4904      	ldr	r1, [pc, #16]	; (8010c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010c8c:	4804      	ldr	r0, [pc, #16]	; (8010ca0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010c8e:	f7fc fa6d 	bl	800d16c <USBD_GetString>
  return USBD_StrDesc;
 8010c92:	4b02      	ldr	r3, [pc, #8]	; (8010c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	200061ec 	.word	0x200061ec
 8010ca0:	08012a78 	.word	0x08012a78

08010ca4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	4603      	mov	r3, r0
 8010cac:	6039      	str	r1, [r7, #0]
 8010cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	221a      	movs	r2, #26
 8010cb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010cb6:	f000 f855 	bl	8010d64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010cba:	4b02      	ldr	r3, [pc, #8]	; (8010cc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3708      	adds	r7, #8
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	20000108 	.word	0x20000108

08010cc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	6039      	str	r1, [r7, #0]
 8010cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010cd4:	79fb      	ldrb	r3, [r7, #7]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d105      	bne.n	8010ce6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010cda:	683a      	ldr	r2, [r7, #0]
 8010cdc:	4907      	ldr	r1, [pc, #28]	; (8010cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8010cde:	4808      	ldr	r0, [pc, #32]	; (8010d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ce0:	f7fc fa44 	bl	800d16c <USBD_GetString>
 8010ce4:	e004      	b.n	8010cf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ce6:	683a      	ldr	r2, [r7, #0]
 8010ce8:	4904      	ldr	r1, [pc, #16]	; (8010cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8010cea:	4805      	ldr	r0, [pc, #20]	; (8010d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010cec:	f7fc fa3e 	bl	800d16c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cf0:	4b02      	ldr	r3, [pc, #8]	; (8010cfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3708      	adds	r7, #8
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	200061ec 	.word	0x200061ec
 8010d00:	08012a8c 	.word	0x08012a8c

08010d04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	6039      	str	r1, [r7, #0]
 8010d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010d10:	79fb      	ldrb	r3, [r7, #7]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d105      	bne.n	8010d22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d16:	683a      	ldr	r2, [r7, #0]
 8010d18:	4907      	ldr	r1, [pc, #28]	; (8010d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d1a:	4808      	ldr	r0, [pc, #32]	; (8010d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d1c:	f7fc fa26 	bl	800d16c <USBD_GetString>
 8010d20:	e004      	b.n	8010d2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010d22:	683a      	ldr	r2, [r7, #0]
 8010d24:	4904      	ldr	r1, [pc, #16]	; (8010d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010d26:	4805      	ldr	r0, [pc, #20]	; (8010d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010d28:	f7fc fa20 	bl	800d16c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d2c:	4b02      	ldr	r3, [pc, #8]	; (8010d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	200061ec 	.word	0x200061ec
 8010d3c:	08012a98 	.word	0x08012a98

08010d40 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	4603      	mov	r3, r0
 8010d48:	6039      	str	r1, [r7, #0]
 8010d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	220c      	movs	r2, #12
 8010d50:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010d52:	4b03      	ldr	r3, [pc, #12]	; (8010d60 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	370c      	adds	r7, #12
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5e:	4770      	bx	lr
 8010d60:	200000f8 	.word	0x200000f8

08010d64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010d6a:	4b0f      	ldr	r3, [pc, #60]	; (8010da8 <Get_SerialNum+0x44>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010d70:	4b0e      	ldr	r3, [pc, #56]	; (8010dac <Get_SerialNum+0x48>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010d76:	4b0e      	ldr	r3, [pc, #56]	; (8010db0 <Get_SerialNum+0x4c>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4413      	add	r3, r2
 8010d82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d009      	beq.n	8010d9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010d8a:	2208      	movs	r2, #8
 8010d8c:	4909      	ldr	r1, [pc, #36]	; (8010db4 <Get_SerialNum+0x50>)
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f000 f814 	bl	8010dbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010d94:	2204      	movs	r2, #4
 8010d96:	4908      	ldr	r1, [pc, #32]	; (8010db8 <Get_SerialNum+0x54>)
 8010d98:	68b8      	ldr	r0, [r7, #8]
 8010d9a:	f000 f80f 	bl	8010dbc <IntToUnicode>
  }
}
 8010d9e:	bf00      	nop
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	1fff7a10 	.word	0x1fff7a10
 8010dac:	1fff7a14 	.word	0x1fff7a14
 8010db0:	1fff7a18 	.word	0x1fff7a18
 8010db4:	2000010a 	.word	0x2000010a
 8010db8:	2000011a 	.word	0x2000011a

08010dbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b087      	sub	sp, #28
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010dce:	2300      	movs	r3, #0
 8010dd0:	75fb      	strb	r3, [r7, #23]
 8010dd2:	e027      	b.n	8010e24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	0f1b      	lsrs	r3, r3, #28
 8010dd8:	2b09      	cmp	r3, #9
 8010dda:	d80b      	bhi.n	8010df4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	0f1b      	lsrs	r3, r3, #28
 8010de0:	b2da      	uxtb	r2, r3
 8010de2:	7dfb      	ldrb	r3, [r7, #23]
 8010de4:	005b      	lsls	r3, r3, #1
 8010de6:	4619      	mov	r1, r3
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	440b      	add	r3, r1
 8010dec:	3230      	adds	r2, #48	; 0x30
 8010dee:	b2d2      	uxtb	r2, r2
 8010df0:	701a      	strb	r2, [r3, #0]
 8010df2:	e00a      	b.n	8010e0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	0f1b      	lsrs	r3, r3, #28
 8010df8:	b2da      	uxtb	r2, r3
 8010dfa:	7dfb      	ldrb	r3, [r7, #23]
 8010dfc:	005b      	lsls	r3, r3, #1
 8010dfe:	4619      	mov	r1, r3
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	440b      	add	r3, r1
 8010e04:	3237      	adds	r2, #55	; 0x37
 8010e06:	b2d2      	uxtb	r2, r2
 8010e08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	011b      	lsls	r3, r3, #4
 8010e0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010e10:	7dfb      	ldrb	r3, [r7, #23]
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	3301      	adds	r3, #1
 8010e16:	68ba      	ldr	r2, [r7, #8]
 8010e18:	4413      	add	r3, r2
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010e1e:	7dfb      	ldrb	r3, [r7, #23]
 8010e20:	3301      	adds	r3, #1
 8010e22:	75fb      	strb	r3, [r7, #23]
 8010e24:	7dfa      	ldrb	r2, [r7, #23]
 8010e26:	79fb      	ldrb	r3, [r7, #7]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d3d3      	bcc.n	8010dd4 <IntToUnicode+0x18>
  }
}
 8010e2c:	bf00      	nop
 8010e2e:	bf00      	nop
 8010e30:	371c      	adds	r7, #28
 8010e32:	46bd      	mov	sp, r7
 8010e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e38:	4770      	bx	lr
	...

08010e3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b0a0      	sub	sp, #128	; 0x80
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e48:	2200      	movs	r2, #0
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	605a      	str	r2, [r3, #4]
 8010e4e:	609a      	str	r2, [r3, #8]
 8010e50:	60da      	str	r2, [r3, #12]
 8010e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010e54:	f107 0310 	add.w	r3, r7, #16
 8010e58:	225c      	movs	r2, #92	; 0x5c
 8010e5a:	2100      	movs	r1, #0
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f000 fc9b 	bl	8011798 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010e6a:	d149      	bne.n	8010f00 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8010e72:	2300      	movs	r3, #0
 8010e74:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e76:	f107 0310 	add.w	r3, r7, #16
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7f5 fb26 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d001      	beq.n	8010e8a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8010e86:	f7ef ff73 	bl	8000d70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	60fb      	str	r3, [r7, #12]
 8010e8e:	4b1e      	ldr	r3, [pc, #120]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e92:	4a1d      	ldr	r2, [pc, #116]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010e94:	f043 0301 	orr.w	r3, r3, #1
 8010e98:	6313      	str	r3, [r2, #48]	; 0x30
 8010e9a:	4b1b      	ldr	r3, [pc, #108]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e9e:	f003 0301 	and.w	r3, r3, #1
 8010ea2:	60fb      	str	r3, [r7, #12]
 8010ea4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010ea6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010eac:	2302      	movs	r3, #2
 8010eae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010eb4:	2303      	movs	r3, #3
 8010eb6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010eb8:	230a      	movs	r3, #10
 8010eba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ebc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	4812      	ldr	r0, [pc, #72]	; (8010f0c <HAL_PCD_MspInit+0xd0>)
 8010ec4:	f7f2 f8d8 	bl	8003078 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ec8:	4b0f      	ldr	r3, [pc, #60]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ecc:	4a0e      	ldr	r2, [pc, #56]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ed2:	6353      	str	r3, [r2, #52]	; 0x34
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	60bb      	str	r3, [r7, #8]
 8010ed8:	4b0b      	ldr	r3, [pc, #44]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010edc:	4a0a      	ldr	r2, [pc, #40]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8010ee4:	4b08      	ldr	r3, [pc, #32]	; (8010f08 <HAL_PCD_MspInit+0xcc>)
 8010ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010eec:	60bb      	str	r3, [r7, #8]
 8010eee:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	2105      	movs	r1, #5
 8010ef4:	2043      	movs	r0, #67	; 0x43
 8010ef6:	f7f2 f803 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8010efa:	2043      	movs	r0, #67	; 0x43
 8010efc:	f7f2 f81c 	bl	8002f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010f00:	bf00      	nop
 8010f02:	3780      	adds	r7, #128	; 0x80
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}
 8010f08:	40023800 	.word	0x40023800
 8010f0c:	40020000 	.word	0x40020000

08010f10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010f24:	4619      	mov	r1, r3
 8010f26:	4610      	mov	r0, r2
 8010f28:	f7fa ff97 	bl	800be5a <USBD_LL_SetupStage>
}
 8010f2c:	bf00      	nop
 8010f2e:	3708      	adds	r7, #8
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b082      	sub	sp, #8
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	460b      	mov	r3, r1
 8010f3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010f46:	78fa      	ldrb	r2, [r7, #3]
 8010f48:	6879      	ldr	r1, [r7, #4]
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	00db      	lsls	r3, r3, #3
 8010f4e:	4413      	add	r3, r2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	440b      	add	r3, r1
 8010f54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8010f58:	681a      	ldr	r2, [r3, #0]
 8010f5a:	78fb      	ldrb	r3, [r7, #3]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	f7fa ffd1 	bl	800bf04 <USBD_LL_DataOutStage>
}
 8010f62:	bf00      	nop
 8010f64:	3708      	adds	r7, #8
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}

08010f6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f6a:	b580      	push	{r7, lr}
 8010f6c:	b082      	sub	sp, #8
 8010f6e:	af00      	add	r7, sp, #0
 8010f70:	6078      	str	r0, [r7, #4]
 8010f72:	460b      	mov	r3, r1
 8010f74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010f7c:	78fa      	ldrb	r2, [r7, #3]
 8010f7e:	6879      	ldr	r1, [r7, #4]
 8010f80:	4613      	mov	r3, r2
 8010f82:	00db      	lsls	r3, r3, #3
 8010f84:	4413      	add	r3, r2
 8010f86:	009b      	lsls	r3, r3, #2
 8010f88:	440b      	add	r3, r1
 8010f8a:	334c      	adds	r3, #76	; 0x4c
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	78fb      	ldrb	r3, [r7, #3]
 8010f90:	4619      	mov	r1, r3
 8010f92:	f7fb f86a 	bl	800c06a <USBD_LL_DataInStage>
}
 8010f96:	bf00      	nop
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}

08010f9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f9e:	b580      	push	{r7, lr}
 8010fa0:	b082      	sub	sp, #8
 8010fa2:	af00      	add	r7, sp, #0
 8010fa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fb f99e 	bl	800c2ee <USBD_LL_SOF>
}
 8010fb2:	bf00      	nop
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fba:	b580      	push	{r7, lr}
 8010fbc:	b084      	sub	sp, #16
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d102      	bne.n	8010fd4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	73fb      	strb	r3, [r7, #15]
 8010fd2:	e008      	b.n	8010fe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	2b02      	cmp	r3, #2
 8010fda:	d102      	bne.n	8010fe2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010fdc:	2301      	movs	r3, #1
 8010fde:	73fb      	strb	r3, [r7, #15]
 8010fe0:	e001      	b.n	8010fe6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010fe2:	f7ef fec5 	bl	8000d70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010fec:	7bfa      	ldrb	r2, [r7, #15]
 8010fee:	4611      	mov	r1, r2
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7fb f93e 	bl	800c272 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fb f8e6 	bl	800c1ce <USBD_LL_Reset>
}
 8011002:	bf00      	nop
 8011004:	3710      	adds	r7, #16
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
	...

0801100c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801101a:	4618      	mov	r0, r3
 801101c:	f7fb f939 	bl	800c292 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	687a      	ldr	r2, [r7, #4]
 801102c:	6812      	ldr	r2, [r2, #0]
 801102e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011032:	f043 0301 	orr.w	r3, r3, #1
 8011036:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6a1b      	ldr	r3, [r3, #32]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d005      	beq.n	801104c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011040:	4b04      	ldr	r3, [pc, #16]	; (8011054 <HAL_PCD_SuspendCallback+0x48>)
 8011042:	691b      	ldr	r3, [r3, #16]
 8011044:	4a03      	ldr	r2, [pc, #12]	; (8011054 <HAL_PCD_SuspendCallback+0x48>)
 8011046:	f043 0306 	orr.w	r3, r3, #6
 801104a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801104c:	bf00      	nop
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	e000ed00 	.word	0xe000ed00

08011058 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011066:	4618      	mov	r0, r3
 8011068:	f7fb f929 	bl	800c2be <USBD_LL_Resume>
}
 801106c:	bf00      	nop
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	460b      	mov	r3, r1
 801107e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011086:	78fa      	ldrb	r2, [r7, #3]
 8011088:	4611      	mov	r1, r2
 801108a:	4618      	mov	r0, r3
 801108c:	f7fb f981 	bl	800c392 <USBD_LL_IsoOUTIncomplete>
}
 8011090:	bf00      	nop
 8011092:	3708      	adds	r7, #8
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	460b      	mov	r3, r1
 80110a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110aa:	78fa      	ldrb	r2, [r7, #3]
 80110ac:	4611      	mov	r1, r2
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7fb f93d 	bl	800c32e <USBD_LL_IsoINIncomplete>
}
 80110b4:	bf00      	nop
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fb f993 	bl	800c3f6 <USBD_LL_DevConnected>
}
 80110d0:	bf00      	nop
 80110d2:	3708      	adds	r7, #8
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7fb f990 	bl	800c40c <USBD_LL_DevDisconnected>
}
 80110ec:	bf00      	nop
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d13c      	bne.n	801117e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011104:	4a20      	ldr	r2, [pc, #128]	; (8011188 <USBD_LL_Init+0x94>)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4a1e      	ldr	r2, [pc, #120]	; (8011188 <USBD_LL_Init+0x94>)
 8011110:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011114:	4b1c      	ldr	r3, [pc, #112]	; (8011188 <USBD_LL_Init+0x94>)
 8011116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801111a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801111c:	4b1a      	ldr	r3, [pc, #104]	; (8011188 <USBD_LL_Init+0x94>)
 801111e:	2206      	movs	r2, #6
 8011120:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011122:	4b19      	ldr	r3, [pc, #100]	; (8011188 <USBD_LL_Init+0x94>)
 8011124:	2202      	movs	r2, #2
 8011126:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011128:	4b17      	ldr	r3, [pc, #92]	; (8011188 <USBD_LL_Init+0x94>)
 801112a:	2200      	movs	r2, #0
 801112c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801112e:	4b16      	ldr	r3, [pc, #88]	; (8011188 <USBD_LL_Init+0x94>)
 8011130:	2202      	movs	r2, #2
 8011132:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011134:	4b14      	ldr	r3, [pc, #80]	; (8011188 <USBD_LL_Init+0x94>)
 8011136:	2200      	movs	r2, #0
 8011138:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801113a:	4b13      	ldr	r3, [pc, #76]	; (8011188 <USBD_LL_Init+0x94>)
 801113c:	2200      	movs	r2, #0
 801113e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011140:	4b11      	ldr	r3, [pc, #68]	; (8011188 <USBD_LL_Init+0x94>)
 8011142:	2200      	movs	r2, #0
 8011144:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011146:	4b10      	ldr	r3, [pc, #64]	; (8011188 <USBD_LL_Init+0x94>)
 8011148:	2200      	movs	r2, #0
 801114a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801114c:	4b0e      	ldr	r3, [pc, #56]	; (8011188 <USBD_LL_Init+0x94>)
 801114e:	2200      	movs	r2, #0
 8011150:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011152:	480d      	ldr	r0, [pc, #52]	; (8011188 <USBD_LL_Init+0x94>)
 8011154:	f7f3 fda5 	bl	8004ca2 <HAL_PCD_Init>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d001      	beq.n	8011162 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801115e:	f7ef fe07 	bl	8000d70 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011162:	2180      	movs	r1, #128	; 0x80
 8011164:	4808      	ldr	r0, [pc, #32]	; (8011188 <USBD_LL_Init+0x94>)
 8011166:	f7f5 f830 	bl	80061ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801116a:	2240      	movs	r2, #64	; 0x40
 801116c:	2100      	movs	r1, #0
 801116e:	4806      	ldr	r0, [pc, #24]	; (8011188 <USBD_LL_Init+0x94>)
 8011170:	f7f4 ffe4 	bl	800613c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011174:	2280      	movs	r2, #128	; 0x80
 8011176:	2101      	movs	r1, #1
 8011178:	4803      	ldr	r0, [pc, #12]	; (8011188 <USBD_LL_Init+0x94>)
 801117a:	f7f4 ffdf 	bl	800613c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801117e:	2300      	movs	r3, #0
}
 8011180:	4618      	mov	r0, r3
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	200063ec 	.word	0x200063ec

0801118c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b084      	sub	sp, #16
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011194:	2300      	movs	r3, #0
 8011196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011198:	2300      	movs	r3, #0
 801119a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7f3 fea1 	bl	8004eea <HAL_PCD_Start>
 80111a8:	4603      	mov	r3, r0
 80111aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111ac:	7bfb      	ldrb	r3, [r7, #15]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f000 f990 	bl	80114d4 <USBD_Get_USB_Status>
 80111b4:	4603      	mov	r3, r0
 80111b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80111ba:	4618      	mov	r0, r3
 80111bc:	3710      	adds	r7, #16
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}

080111c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b084      	sub	sp, #16
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
 80111ca:	4608      	mov	r0, r1
 80111cc:	4611      	mov	r1, r2
 80111ce:	461a      	mov	r2, r3
 80111d0:	4603      	mov	r3, r0
 80111d2:	70fb      	strb	r3, [r7, #3]
 80111d4:	460b      	mov	r3, r1
 80111d6:	70bb      	strb	r3, [r7, #2]
 80111d8:	4613      	mov	r3, r2
 80111da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111dc:	2300      	movs	r3, #0
 80111de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111e0:	2300      	movs	r3, #0
 80111e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80111ea:	78bb      	ldrb	r3, [r7, #2]
 80111ec:	883a      	ldrh	r2, [r7, #0]
 80111ee:	78f9      	ldrb	r1, [r7, #3]
 80111f0:	f7f4 fb9f 	bl	8005932 <HAL_PCD_EP_Open>
 80111f4:	4603      	mov	r3, r0
 80111f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111f8:	7bfb      	ldrb	r3, [r7, #15]
 80111fa:	4618      	mov	r0, r3
 80111fc:	f000 f96a 	bl	80114d4 <USBD_Get_USB_Status>
 8011200:	4603      	mov	r3, r0
 8011202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011204:	7bbb      	ldrb	r3, [r7, #14]
}
 8011206:	4618      	mov	r0, r3
 8011208:	3710      	adds	r7, #16
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b084      	sub	sp, #16
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	460b      	mov	r3, r1
 8011218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801121a:	2300      	movs	r3, #0
 801121c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011228:	78fa      	ldrb	r2, [r7, #3]
 801122a:	4611      	mov	r1, r2
 801122c:	4618      	mov	r0, r3
 801122e:	f7f4 fbe8 	bl	8005a02 <HAL_PCD_EP_Close>
 8011232:	4603      	mov	r3, r0
 8011234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011236:	7bfb      	ldrb	r3, [r7, #15]
 8011238:	4618      	mov	r0, r3
 801123a:	f000 f94b 	bl	80114d4 <USBD_Get_USB_Status>
 801123e:	4603      	mov	r3, r0
 8011240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011242:	7bbb      	ldrb	r3, [r7, #14]
}
 8011244:	4618      	mov	r0, r3
 8011246:	3710      	adds	r7, #16
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	460b      	mov	r3, r1
 8011256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801125c:	2300      	movs	r3, #0
 801125e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011266:	78fa      	ldrb	r2, [r7, #3]
 8011268:	4611      	mov	r1, r2
 801126a:	4618      	mov	r0, r3
 801126c:	f7f4 fcc0 	bl	8005bf0 <HAL_PCD_EP_SetStall>
 8011270:	4603      	mov	r3, r0
 8011272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011274:	7bfb      	ldrb	r3, [r7, #15]
 8011276:	4618      	mov	r0, r3
 8011278:	f000 f92c 	bl	80114d4 <USBD_Get_USB_Status>
 801127c:	4603      	mov	r3, r0
 801127e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011280:	7bbb      	ldrb	r3, [r7, #14]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}

0801128a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801128a:	b580      	push	{r7, lr}
 801128c:	b084      	sub	sp, #16
 801128e:	af00      	add	r7, sp, #0
 8011290:	6078      	str	r0, [r7, #4]
 8011292:	460b      	mov	r3, r1
 8011294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011296:	2300      	movs	r3, #0
 8011298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801129a:	2300      	movs	r3, #0
 801129c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112a4:	78fa      	ldrb	r2, [r7, #3]
 80112a6:	4611      	mov	r1, r2
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7f4 fd05 	bl	8005cb8 <HAL_PCD_EP_ClrStall>
 80112ae:	4603      	mov	r3, r0
 80112b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112b2:	7bfb      	ldrb	r3, [r7, #15]
 80112b4:	4618      	mov	r0, r3
 80112b6:	f000 f90d 	bl	80114d4 <USBD_Get_USB_Status>
 80112ba:	4603      	mov	r3, r0
 80112bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112be:	7bbb      	ldrb	r3, [r7, #14]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b085      	sub	sp, #20
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	460b      	mov	r3, r1
 80112d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80112dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	da0b      	bge.n	80112fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80112e4:	78fb      	ldrb	r3, [r7, #3]
 80112e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80112ea:	68f9      	ldr	r1, [r7, #12]
 80112ec:	4613      	mov	r3, r2
 80112ee:	00db      	lsls	r3, r3, #3
 80112f0:	4413      	add	r3, r2
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	440b      	add	r3, r1
 80112f6:	333e      	adds	r3, #62	; 0x3e
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	e00b      	b.n	8011314 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80112fc:	78fb      	ldrb	r3, [r7, #3]
 80112fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011302:	68f9      	ldr	r1, [r7, #12]
 8011304:	4613      	mov	r3, r2
 8011306:	00db      	lsls	r3, r3, #3
 8011308:	4413      	add	r3, r2
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	440b      	add	r3, r1
 801130e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011312:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011314:	4618      	mov	r0, r3
 8011316:	3714      	adds	r7, #20
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr

08011320 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	460b      	mov	r3, r1
 801132a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801132c:	2300      	movs	r3, #0
 801132e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011330:	2300      	movs	r3, #0
 8011332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801133a:	78fa      	ldrb	r2, [r7, #3]
 801133c:	4611      	mov	r1, r2
 801133e:	4618      	mov	r0, r3
 8011340:	f7f4 fad2 	bl	80058e8 <HAL_PCD_SetAddress>
 8011344:	4603      	mov	r3, r0
 8011346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011348:	7bfb      	ldrb	r3, [r7, #15]
 801134a:	4618      	mov	r0, r3
 801134c:	f000 f8c2 	bl	80114d4 <USBD_Get_USB_Status>
 8011350:	4603      	mov	r3, r0
 8011352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011354:	7bbb      	ldrb	r3, [r7, #14]
}
 8011356:	4618      	mov	r0, r3
 8011358:	3710      	adds	r7, #16
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b086      	sub	sp, #24
 8011362:	af00      	add	r7, sp, #0
 8011364:	60f8      	str	r0, [r7, #12]
 8011366:	607a      	str	r2, [r7, #4]
 8011368:	603b      	str	r3, [r7, #0]
 801136a:	460b      	mov	r3, r1
 801136c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801136e:	2300      	movs	r3, #0
 8011370:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011372:	2300      	movs	r3, #0
 8011374:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801137c:	7af9      	ldrb	r1, [r7, #11]
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	f7f4 fbeb 	bl	8005b5c <HAL_PCD_EP_Transmit>
 8011386:	4603      	mov	r3, r0
 8011388:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801138a:	7dfb      	ldrb	r3, [r7, #23]
 801138c:	4618      	mov	r0, r3
 801138e:	f000 f8a1 	bl	80114d4 <USBD_Get_USB_Status>
 8011392:	4603      	mov	r3, r0
 8011394:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011396:	7dbb      	ldrb	r3, [r7, #22]
}
 8011398:	4618      	mov	r0, r3
 801139a:	3718      	adds	r7, #24
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	607a      	str	r2, [r7, #4]
 80113aa:	603b      	str	r3, [r7, #0]
 80113ac:	460b      	mov	r3, r1
 80113ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113b0:	2300      	movs	r3, #0
 80113b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113b4:	2300      	movs	r3, #0
 80113b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80113be:	7af9      	ldrb	r1, [r7, #11]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	f7f4 fb67 	bl	8005a96 <HAL_PCD_EP_Receive>
 80113c8:	4603      	mov	r3, r0
 80113ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113cc:	7dfb      	ldrb	r3, [r7, #23]
 80113ce:	4618      	mov	r0, r3
 80113d0:	f000 f880 	bl	80114d4 <USBD_Get_USB_Status>
 80113d4:	4603      	mov	r3, r0
 80113d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80113d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	3718      	adds	r7, #24
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}

080113e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113e2:	b580      	push	{r7, lr}
 80113e4:	b082      	sub	sp, #8
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
 80113ea:	460b      	mov	r3, r1
 80113ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113f4:	78fa      	ldrb	r2, [r7, #3]
 80113f6:	4611      	mov	r1, r2
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7f4 fb97 	bl	8005b2c <HAL_PCD_EP_GetRxCount>
 80113fe:	4603      	mov	r3, r0
}
 8011400:	4618      	mov	r0, r3
 8011402:	3708      	adds	r7, #8
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}

08011408 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	460b      	mov	r3, r1
 8011412:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011414:	78fb      	ldrb	r3, [r7, #3]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d002      	beq.n	8011420 <HAL_PCDEx_LPM_Callback+0x18>
 801141a:	2b01      	cmp	r3, #1
 801141c:	d01f      	beq.n	801145e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801141e:	e03b      	b.n	8011498 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6a1b      	ldr	r3, [r3, #32]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d007      	beq.n	8011438 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8011428:	f7f0 f89c 	bl	8001564 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801142c:	4b1c      	ldr	r3, [pc, #112]	; (80114a0 <HAL_PCDEx_LPM_Callback+0x98>)
 801142e:	691b      	ldr	r3, [r3, #16]
 8011430:	4a1b      	ldr	r2, [pc, #108]	; (80114a0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011432:	f023 0306 	bic.w	r3, r3, #6
 8011436:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	687a      	ldr	r2, [r7, #4]
 8011444:	6812      	ldr	r2, [r2, #0]
 8011446:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801144a:	f023 0301 	bic.w	r3, r3, #1
 801144e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011456:	4618      	mov	r0, r3
 8011458:	f7fa ff31 	bl	800c2be <USBD_LL_Resume>
    break;
 801145c:	e01c      	b.n	8011498 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	687a      	ldr	r2, [r7, #4]
 801146a:	6812      	ldr	r2, [r2, #0]
 801146c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011470:	f043 0301 	orr.w	r3, r3, #1
 8011474:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801147c:	4618      	mov	r0, r3
 801147e:	f7fa ff08 	bl	800c292 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6a1b      	ldr	r3, [r3, #32]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d005      	beq.n	8011496 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801148a:	4b05      	ldr	r3, [pc, #20]	; (80114a0 <HAL_PCDEx_LPM_Callback+0x98>)
 801148c:	691b      	ldr	r3, [r3, #16]
 801148e:	4a04      	ldr	r2, [pc, #16]	; (80114a0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011490:	f043 0306 	orr.w	r3, r3, #6
 8011494:	6113      	str	r3, [r2, #16]
    break;
 8011496:	bf00      	nop
}
 8011498:	bf00      	nop
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	e000ed00 	.word	0xe000ed00

080114a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80114ac:	4b03      	ldr	r3, [pc, #12]	; (80114bc <USBD_static_malloc+0x18>)
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	370c      	adds	r7, #12
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr
 80114ba:	bf00      	nop
 80114bc:	200068f8 	.word	0x200068f8

080114c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80114c0:	b480      	push	{r7}
 80114c2:	b083      	sub	sp, #12
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	6078      	str	r0, [r7, #4]

}
 80114c8:	bf00      	nop
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr

080114d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80114d4:	b480      	push	{r7}
 80114d6:	b085      	sub	sp, #20
 80114d8:	af00      	add	r7, sp, #0
 80114da:	4603      	mov	r3, r0
 80114dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114de:	2300      	movs	r3, #0
 80114e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80114e2:	79fb      	ldrb	r3, [r7, #7]
 80114e4:	2b03      	cmp	r3, #3
 80114e6:	d817      	bhi.n	8011518 <USBD_Get_USB_Status+0x44>
 80114e8:	a201      	add	r2, pc, #4	; (adr r2, 80114f0 <USBD_Get_USB_Status+0x1c>)
 80114ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ee:	bf00      	nop
 80114f0:	08011501 	.word	0x08011501
 80114f4:	08011507 	.word	0x08011507
 80114f8:	0801150d 	.word	0x0801150d
 80114fc:	08011513 	.word	0x08011513
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	73fb      	strb	r3, [r7, #15]
    break;
 8011504:	e00b      	b.n	801151e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011506:	2303      	movs	r3, #3
 8011508:	73fb      	strb	r3, [r7, #15]
    break;
 801150a:	e008      	b.n	801151e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801150c:	2301      	movs	r3, #1
 801150e:	73fb      	strb	r3, [r7, #15]
    break;
 8011510:	e005      	b.n	801151e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011512:	2303      	movs	r3, #3
 8011514:	73fb      	strb	r3, [r7, #15]
    break;
 8011516:	e002      	b.n	801151e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011518:	2303      	movs	r3, #3
 801151a:	73fb      	strb	r3, [r7, #15]
    break;
 801151c:	bf00      	nop
  }
  return usb_status;
 801151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011520:	4618      	mov	r0, r3
 8011522:	3714      	adds	r7, #20
 8011524:	46bd      	mov	sp, r7
 8011526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152a:	4770      	bx	lr

0801152c <__errno>:
 801152c:	4b01      	ldr	r3, [pc, #4]	; (8011534 <__errno+0x8>)
 801152e:	6818      	ldr	r0, [r3, #0]
 8011530:	4770      	bx	lr
 8011532:	bf00      	nop
 8011534:	20000124 	.word	0x20000124

08011538 <std>:
 8011538:	2300      	movs	r3, #0
 801153a:	b510      	push	{r4, lr}
 801153c:	4604      	mov	r4, r0
 801153e:	e9c0 3300 	strd	r3, r3, [r0]
 8011542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011546:	6083      	str	r3, [r0, #8]
 8011548:	8181      	strh	r1, [r0, #12]
 801154a:	6643      	str	r3, [r0, #100]	; 0x64
 801154c:	81c2      	strh	r2, [r0, #14]
 801154e:	6183      	str	r3, [r0, #24]
 8011550:	4619      	mov	r1, r3
 8011552:	2208      	movs	r2, #8
 8011554:	305c      	adds	r0, #92	; 0x5c
 8011556:	f000 f91f 	bl	8011798 <memset>
 801155a:	4b05      	ldr	r3, [pc, #20]	; (8011570 <std+0x38>)
 801155c:	6263      	str	r3, [r4, #36]	; 0x24
 801155e:	4b05      	ldr	r3, [pc, #20]	; (8011574 <std+0x3c>)
 8011560:	62a3      	str	r3, [r4, #40]	; 0x28
 8011562:	4b05      	ldr	r3, [pc, #20]	; (8011578 <std+0x40>)
 8011564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011566:	4b05      	ldr	r3, [pc, #20]	; (801157c <std+0x44>)
 8011568:	6224      	str	r4, [r4, #32]
 801156a:	6323      	str	r3, [r4, #48]	; 0x30
 801156c:	bd10      	pop	{r4, pc}
 801156e:	bf00      	nop
 8011570:	08011b79 	.word	0x08011b79
 8011574:	08011b9b 	.word	0x08011b9b
 8011578:	08011bd3 	.word	0x08011bd3
 801157c:	08011bf7 	.word	0x08011bf7

08011580 <_cleanup_r>:
 8011580:	4901      	ldr	r1, [pc, #4]	; (8011588 <_cleanup_r+0x8>)
 8011582:	f000 b8af 	b.w	80116e4 <_fwalk_reent>
 8011586:	bf00      	nop
 8011588:	08011f01 	.word	0x08011f01

0801158c <__sfmoreglue>:
 801158c:	b570      	push	{r4, r5, r6, lr}
 801158e:	2268      	movs	r2, #104	; 0x68
 8011590:	1e4d      	subs	r5, r1, #1
 8011592:	4355      	muls	r5, r2
 8011594:	460e      	mov	r6, r1
 8011596:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801159a:	f000 f971 	bl	8011880 <_malloc_r>
 801159e:	4604      	mov	r4, r0
 80115a0:	b140      	cbz	r0, 80115b4 <__sfmoreglue+0x28>
 80115a2:	2100      	movs	r1, #0
 80115a4:	e9c0 1600 	strd	r1, r6, [r0]
 80115a8:	300c      	adds	r0, #12
 80115aa:	60a0      	str	r0, [r4, #8]
 80115ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115b0:	f000 f8f2 	bl	8011798 <memset>
 80115b4:	4620      	mov	r0, r4
 80115b6:	bd70      	pop	{r4, r5, r6, pc}

080115b8 <__sfp_lock_acquire>:
 80115b8:	4801      	ldr	r0, [pc, #4]	; (80115c0 <__sfp_lock_acquire+0x8>)
 80115ba:	f7f1 b8e9 	b.w	8002790 <__retarget_lock_acquire_recursive>
 80115be:	bf00      	nop
 80115c0:	200004c0 	.word	0x200004c0

080115c4 <__sfp_lock_release>:
 80115c4:	4801      	ldr	r0, [pc, #4]	; (80115cc <__sfp_lock_release+0x8>)
 80115c6:	f7f1 b8f7 	b.w	80027b8 <__retarget_lock_release_recursive>
 80115ca:	bf00      	nop
 80115cc:	200004c0 	.word	0x200004c0

080115d0 <__sinit_lock_acquire>:
 80115d0:	4801      	ldr	r0, [pc, #4]	; (80115d8 <__sinit_lock_acquire+0x8>)
 80115d2:	f7f1 b8dd 	b.w	8002790 <__retarget_lock_acquire_recursive>
 80115d6:	bf00      	nop
 80115d8:	200004b4 	.word	0x200004b4

080115dc <__sinit_lock_release>:
 80115dc:	4801      	ldr	r0, [pc, #4]	; (80115e4 <__sinit_lock_release+0x8>)
 80115de:	f7f1 b8eb 	b.w	80027b8 <__retarget_lock_release_recursive>
 80115e2:	bf00      	nop
 80115e4:	200004b4 	.word	0x200004b4

080115e8 <__sinit>:
 80115e8:	b510      	push	{r4, lr}
 80115ea:	4604      	mov	r4, r0
 80115ec:	f7ff fff0 	bl	80115d0 <__sinit_lock_acquire>
 80115f0:	69a3      	ldr	r3, [r4, #24]
 80115f2:	b11b      	cbz	r3, 80115fc <__sinit+0x14>
 80115f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115f8:	f7ff bff0 	b.w	80115dc <__sinit_lock_release>
 80115fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011600:	6523      	str	r3, [r4, #80]	; 0x50
 8011602:	4b13      	ldr	r3, [pc, #76]	; (8011650 <__sinit+0x68>)
 8011604:	4a13      	ldr	r2, [pc, #76]	; (8011654 <__sinit+0x6c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	62a2      	str	r2, [r4, #40]	; 0x28
 801160a:	42a3      	cmp	r3, r4
 801160c:	bf04      	itt	eq
 801160e:	2301      	moveq	r3, #1
 8011610:	61a3      	streq	r3, [r4, #24]
 8011612:	4620      	mov	r0, r4
 8011614:	f000 f820 	bl	8011658 <__sfp>
 8011618:	6060      	str	r0, [r4, #4]
 801161a:	4620      	mov	r0, r4
 801161c:	f000 f81c 	bl	8011658 <__sfp>
 8011620:	60a0      	str	r0, [r4, #8]
 8011622:	4620      	mov	r0, r4
 8011624:	f000 f818 	bl	8011658 <__sfp>
 8011628:	2200      	movs	r2, #0
 801162a:	60e0      	str	r0, [r4, #12]
 801162c:	2104      	movs	r1, #4
 801162e:	6860      	ldr	r0, [r4, #4]
 8011630:	f7ff ff82 	bl	8011538 <std>
 8011634:	68a0      	ldr	r0, [r4, #8]
 8011636:	2201      	movs	r2, #1
 8011638:	2109      	movs	r1, #9
 801163a:	f7ff ff7d 	bl	8011538 <std>
 801163e:	68e0      	ldr	r0, [r4, #12]
 8011640:	2202      	movs	r2, #2
 8011642:	2112      	movs	r1, #18
 8011644:	f7ff ff78 	bl	8011538 <std>
 8011648:	2301      	movs	r3, #1
 801164a:	61a3      	str	r3, [r4, #24]
 801164c:	e7d2      	b.n	80115f4 <__sinit+0xc>
 801164e:	bf00      	nop
 8011650:	08012b88 	.word	0x08012b88
 8011654:	08011581 	.word	0x08011581

08011658 <__sfp>:
 8011658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165a:	4607      	mov	r7, r0
 801165c:	f7ff ffac 	bl	80115b8 <__sfp_lock_acquire>
 8011660:	4b1e      	ldr	r3, [pc, #120]	; (80116dc <__sfp+0x84>)
 8011662:	681e      	ldr	r6, [r3, #0]
 8011664:	69b3      	ldr	r3, [r6, #24]
 8011666:	b913      	cbnz	r3, 801166e <__sfp+0x16>
 8011668:	4630      	mov	r0, r6
 801166a:	f7ff ffbd 	bl	80115e8 <__sinit>
 801166e:	3648      	adds	r6, #72	; 0x48
 8011670:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011674:	3b01      	subs	r3, #1
 8011676:	d503      	bpl.n	8011680 <__sfp+0x28>
 8011678:	6833      	ldr	r3, [r6, #0]
 801167a:	b30b      	cbz	r3, 80116c0 <__sfp+0x68>
 801167c:	6836      	ldr	r6, [r6, #0]
 801167e:	e7f7      	b.n	8011670 <__sfp+0x18>
 8011680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011684:	b9d5      	cbnz	r5, 80116bc <__sfp+0x64>
 8011686:	4b16      	ldr	r3, [pc, #88]	; (80116e0 <__sfp+0x88>)
 8011688:	60e3      	str	r3, [r4, #12]
 801168a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801168e:	6665      	str	r5, [r4, #100]	; 0x64
 8011690:	f7f1 f858 	bl	8002744 <__retarget_lock_init_recursive>
 8011694:	f7ff ff96 	bl	80115c4 <__sfp_lock_release>
 8011698:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801169c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116a0:	6025      	str	r5, [r4, #0]
 80116a2:	61a5      	str	r5, [r4, #24]
 80116a4:	2208      	movs	r2, #8
 80116a6:	4629      	mov	r1, r5
 80116a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116ac:	f000 f874 	bl	8011798 <memset>
 80116b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116b8:	4620      	mov	r0, r4
 80116ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116bc:	3468      	adds	r4, #104	; 0x68
 80116be:	e7d9      	b.n	8011674 <__sfp+0x1c>
 80116c0:	2104      	movs	r1, #4
 80116c2:	4638      	mov	r0, r7
 80116c4:	f7ff ff62 	bl	801158c <__sfmoreglue>
 80116c8:	4604      	mov	r4, r0
 80116ca:	6030      	str	r0, [r6, #0]
 80116cc:	2800      	cmp	r0, #0
 80116ce:	d1d5      	bne.n	801167c <__sfp+0x24>
 80116d0:	f7ff ff78 	bl	80115c4 <__sfp_lock_release>
 80116d4:	230c      	movs	r3, #12
 80116d6:	603b      	str	r3, [r7, #0]
 80116d8:	e7ee      	b.n	80116b8 <__sfp+0x60>
 80116da:	bf00      	nop
 80116dc:	08012b88 	.word	0x08012b88
 80116e0:	ffff0001 	.word	0xffff0001

080116e4 <_fwalk_reent>:
 80116e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116e8:	4606      	mov	r6, r0
 80116ea:	4688      	mov	r8, r1
 80116ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80116f0:	2700      	movs	r7, #0
 80116f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80116f6:	f1b9 0901 	subs.w	r9, r9, #1
 80116fa:	d505      	bpl.n	8011708 <_fwalk_reent+0x24>
 80116fc:	6824      	ldr	r4, [r4, #0]
 80116fe:	2c00      	cmp	r4, #0
 8011700:	d1f7      	bne.n	80116f2 <_fwalk_reent+0xe>
 8011702:	4638      	mov	r0, r7
 8011704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011708:	89ab      	ldrh	r3, [r5, #12]
 801170a:	2b01      	cmp	r3, #1
 801170c:	d907      	bls.n	801171e <_fwalk_reent+0x3a>
 801170e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011712:	3301      	adds	r3, #1
 8011714:	d003      	beq.n	801171e <_fwalk_reent+0x3a>
 8011716:	4629      	mov	r1, r5
 8011718:	4630      	mov	r0, r6
 801171a:	47c0      	blx	r8
 801171c:	4307      	orrs	r7, r0
 801171e:	3568      	adds	r5, #104	; 0x68
 8011720:	e7e9      	b.n	80116f6 <_fwalk_reent+0x12>
	...

08011724 <__libc_init_array>:
 8011724:	b570      	push	{r4, r5, r6, lr}
 8011726:	4d0d      	ldr	r5, [pc, #52]	; (801175c <__libc_init_array+0x38>)
 8011728:	4c0d      	ldr	r4, [pc, #52]	; (8011760 <__libc_init_array+0x3c>)
 801172a:	1b64      	subs	r4, r4, r5
 801172c:	10a4      	asrs	r4, r4, #2
 801172e:	2600      	movs	r6, #0
 8011730:	42a6      	cmp	r6, r4
 8011732:	d109      	bne.n	8011748 <__libc_init_array+0x24>
 8011734:	4d0b      	ldr	r5, [pc, #44]	; (8011764 <__libc_init_array+0x40>)
 8011736:	4c0c      	ldr	r4, [pc, #48]	; (8011768 <__libc_init_array+0x44>)
 8011738:	f000 ffc4 	bl	80126c4 <_init>
 801173c:	1b64      	subs	r4, r4, r5
 801173e:	10a4      	asrs	r4, r4, #2
 8011740:	2600      	movs	r6, #0
 8011742:	42a6      	cmp	r6, r4
 8011744:	d105      	bne.n	8011752 <__libc_init_array+0x2e>
 8011746:	bd70      	pop	{r4, r5, r6, pc}
 8011748:	f855 3b04 	ldr.w	r3, [r5], #4
 801174c:	4798      	blx	r3
 801174e:	3601      	adds	r6, #1
 8011750:	e7ee      	b.n	8011730 <__libc_init_array+0xc>
 8011752:	f855 3b04 	ldr.w	r3, [r5], #4
 8011756:	4798      	blx	r3
 8011758:	3601      	adds	r6, #1
 801175a:	e7f2      	b.n	8011742 <__libc_init_array+0x1e>
 801175c:	08012bc8 	.word	0x08012bc8
 8011760:	08012bc8 	.word	0x08012bc8
 8011764:	08012bc8 	.word	0x08012bc8
 8011768:	08012bcc 	.word	0x08012bcc

0801176c <malloc>:
 801176c:	4b02      	ldr	r3, [pc, #8]	; (8011778 <malloc+0xc>)
 801176e:	4601      	mov	r1, r0
 8011770:	6818      	ldr	r0, [r3, #0]
 8011772:	f000 b885 	b.w	8011880 <_malloc_r>
 8011776:	bf00      	nop
 8011778:	20000124 	.word	0x20000124

0801177c <memcpy>:
 801177c:	440a      	add	r2, r1
 801177e:	4291      	cmp	r1, r2
 8011780:	f100 33ff 	add.w	r3, r0, #4294967295
 8011784:	d100      	bne.n	8011788 <memcpy+0xc>
 8011786:	4770      	bx	lr
 8011788:	b510      	push	{r4, lr}
 801178a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801178e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011792:	4291      	cmp	r1, r2
 8011794:	d1f9      	bne.n	801178a <memcpy+0xe>
 8011796:	bd10      	pop	{r4, pc}

08011798 <memset>:
 8011798:	4402      	add	r2, r0
 801179a:	4603      	mov	r3, r0
 801179c:	4293      	cmp	r3, r2
 801179e:	d100      	bne.n	80117a2 <memset+0xa>
 80117a0:	4770      	bx	lr
 80117a2:	f803 1b01 	strb.w	r1, [r3], #1
 80117a6:	e7f9      	b.n	801179c <memset+0x4>

080117a8 <_free_r>:
 80117a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80117aa:	2900      	cmp	r1, #0
 80117ac:	d044      	beq.n	8011838 <_free_r+0x90>
 80117ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80117b2:	9001      	str	r0, [sp, #4]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f1a1 0404 	sub.w	r4, r1, #4
 80117ba:	bfb8      	it	lt
 80117bc:	18e4      	addlt	r4, r4, r3
 80117be:	f000 fc53 	bl	8012068 <__malloc_lock>
 80117c2:	4a1e      	ldr	r2, [pc, #120]	; (801183c <_free_r+0x94>)
 80117c4:	9801      	ldr	r0, [sp, #4]
 80117c6:	6813      	ldr	r3, [r2, #0]
 80117c8:	b933      	cbnz	r3, 80117d8 <_free_r+0x30>
 80117ca:	6063      	str	r3, [r4, #4]
 80117cc:	6014      	str	r4, [r2, #0]
 80117ce:	b003      	add	sp, #12
 80117d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117d4:	f000 bc4e 	b.w	8012074 <__malloc_unlock>
 80117d8:	42a3      	cmp	r3, r4
 80117da:	d908      	bls.n	80117ee <_free_r+0x46>
 80117dc:	6825      	ldr	r5, [r4, #0]
 80117de:	1961      	adds	r1, r4, r5
 80117e0:	428b      	cmp	r3, r1
 80117e2:	bf01      	itttt	eq
 80117e4:	6819      	ldreq	r1, [r3, #0]
 80117e6:	685b      	ldreq	r3, [r3, #4]
 80117e8:	1949      	addeq	r1, r1, r5
 80117ea:	6021      	streq	r1, [r4, #0]
 80117ec:	e7ed      	b.n	80117ca <_free_r+0x22>
 80117ee:	461a      	mov	r2, r3
 80117f0:	685b      	ldr	r3, [r3, #4]
 80117f2:	b10b      	cbz	r3, 80117f8 <_free_r+0x50>
 80117f4:	42a3      	cmp	r3, r4
 80117f6:	d9fa      	bls.n	80117ee <_free_r+0x46>
 80117f8:	6811      	ldr	r1, [r2, #0]
 80117fa:	1855      	adds	r5, r2, r1
 80117fc:	42a5      	cmp	r5, r4
 80117fe:	d10b      	bne.n	8011818 <_free_r+0x70>
 8011800:	6824      	ldr	r4, [r4, #0]
 8011802:	4421      	add	r1, r4
 8011804:	1854      	adds	r4, r2, r1
 8011806:	42a3      	cmp	r3, r4
 8011808:	6011      	str	r1, [r2, #0]
 801180a:	d1e0      	bne.n	80117ce <_free_r+0x26>
 801180c:	681c      	ldr	r4, [r3, #0]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	6053      	str	r3, [r2, #4]
 8011812:	4421      	add	r1, r4
 8011814:	6011      	str	r1, [r2, #0]
 8011816:	e7da      	b.n	80117ce <_free_r+0x26>
 8011818:	d902      	bls.n	8011820 <_free_r+0x78>
 801181a:	230c      	movs	r3, #12
 801181c:	6003      	str	r3, [r0, #0]
 801181e:	e7d6      	b.n	80117ce <_free_r+0x26>
 8011820:	6825      	ldr	r5, [r4, #0]
 8011822:	1961      	adds	r1, r4, r5
 8011824:	428b      	cmp	r3, r1
 8011826:	bf04      	itt	eq
 8011828:	6819      	ldreq	r1, [r3, #0]
 801182a:	685b      	ldreq	r3, [r3, #4]
 801182c:	6063      	str	r3, [r4, #4]
 801182e:	bf04      	itt	eq
 8011830:	1949      	addeq	r1, r1, r5
 8011832:	6021      	streq	r1, [r4, #0]
 8011834:	6054      	str	r4, [r2, #4]
 8011836:	e7ca      	b.n	80117ce <_free_r+0x26>
 8011838:	b003      	add	sp, #12
 801183a:	bd30      	pop	{r4, r5, pc}
 801183c:	20006b18 	.word	0x20006b18

08011840 <sbrk_aligned>:
 8011840:	b570      	push	{r4, r5, r6, lr}
 8011842:	4e0e      	ldr	r6, [pc, #56]	; (801187c <sbrk_aligned+0x3c>)
 8011844:	460c      	mov	r4, r1
 8011846:	6831      	ldr	r1, [r6, #0]
 8011848:	4605      	mov	r5, r0
 801184a:	b911      	cbnz	r1, 8011852 <sbrk_aligned+0x12>
 801184c:	f000 f984 	bl	8011b58 <_sbrk_r>
 8011850:	6030      	str	r0, [r6, #0]
 8011852:	4621      	mov	r1, r4
 8011854:	4628      	mov	r0, r5
 8011856:	f000 f97f 	bl	8011b58 <_sbrk_r>
 801185a:	1c43      	adds	r3, r0, #1
 801185c:	d00a      	beq.n	8011874 <sbrk_aligned+0x34>
 801185e:	1cc4      	adds	r4, r0, #3
 8011860:	f024 0403 	bic.w	r4, r4, #3
 8011864:	42a0      	cmp	r0, r4
 8011866:	d007      	beq.n	8011878 <sbrk_aligned+0x38>
 8011868:	1a21      	subs	r1, r4, r0
 801186a:	4628      	mov	r0, r5
 801186c:	f000 f974 	bl	8011b58 <_sbrk_r>
 8011870:	3001      	adds	r0, #1
 8011872:	d101      	bne.n	8011878 <sbrk_aligned+0x38>
 8011874:	f04f 34ff 	mov.w	r4, #4294967295
 8011878:	4620      	mov	r0, r4
 801187a:	bd70      	pop	{r4, r5, r6, pc}
 801187c:	20006b1c 	.word	0x20006b1c

08011880 <_malloc_r>:
 8011880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011884:	1ccd      	adds	r5, r1, #3
 8011886:	f025 0503 	bic.w	r5, r5, #3
 801188a:	3508      	adds	r5, #8
 801188c:	2d0c      	cmp	r5, #12
 801188e:	bf38      	it	cc
 8011890:	250c      	movcc	r5, #12
 8011892:	2d00      	cmp	r5, #0
 8011894:	4607      	mov	r7, r0
 8011896:	db01      	blt.n	801189c <_malloc_r+0x1c>
 8011898:	42a9      	cmp	r1, r5
 801189a:	d905      	bls.n	80118a8 <_malloc_r+0x28>
 801189c:	230c      	movs	r3, #12
 801189e:	603b      	str	r3, [r7, #0]
 80118a0:	2600      	movs	r6, #0
 80118a2:	4630      	mov	r0, r6
 80118a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a8:	4e2e      	ldr	r6, [pc, #184]	; (8011964 <_malloc_r+0xe4>)
 80118aa:	f000 fbdd 	bl	8012068 <__malloc_lock>
 80118ae:	6833      	ldr	r3, [r6, #0]
 80118b0:	461c      	mov	r4, r3
 80118b2:	bb34      	cbnz	r4, 8011902 <_malloc_r+0x82>
 80118b4:	4629      	mov	r1, r5
 80118b6:	4638      	mov	r0, r7
 80118b8:	f7ff ffc2 	bl	8011840 <sbrk_aligned>
 80118bc:	1c43      	adds	r3, r0, #1
 80118be:	4604      	mov	r4, r0
 80118c0:	d14d      	bne.n	801195e <_malloc_r+0xde>
 80118c2:	6834      	ldr	r4, [r6, #0]
 80118c4:	4626      	mov	r6, r4
 80118c6:	2e00      	cmp	r6, #0
 80118c8:	d140      	bne.n	801194c <_malloc_r+0xcc>
 80118ca:	6823      	ldr	r3, [r4, #0]
 80118cc:	4631      	mov	r1, r6
 80118ce:	4638      	mov	r0, r7
 80118d0:	eb04 0803 	add.w	r8, r4, r3
 80118d4:	f000 f940 	bl	8011b58 <_sbrk_r>
 80118d8:	4580      	cmp	r8, r0
 80118da:	d13a      	bne.n	8011952 <_malloc_r+0xd2>
 80118dc:	6821      	ldr	r1, [r4, #0]
 80118de:	3503      	adds	r5, #3
 80118e0:	1a6d      	subs	r5, r5, r1
 80118e2:	f025 0503 	bic.w	r5, r5, #3
 80118e6:	3508      	adds	r5, #8
 80118e8:	2d0c      	cmp	r5, #12
 80118ea:	bf38      	it	cc
 80118ec:	250c      	movcc	r5, #12
 80118ee:	4629      	mov	r1, r5
 80118f0:	4638      	mov	r0, r7
 80118f2:	f7ff ffa5 	bl	8011840 <sbrk_aligned>
 80118f6:	3001      	adds	r0, #1
 80118f8:	d02b      	beq.n	8011952 <_malloc_r+0xd2>
 80118fa:	6823      	ldr	r3, [r4, #0]
 80118fc:	442b      	add	r3, r5
 80118fe:	6023      	str	r3, [r4, #0]
 8011900:	e00e      	b.n	8011920 <_malloc_r+0xa0>
 8011902:	6822      	ldr	r2, [r4, #0]
 8011904:	1b52      	subs	r2, r2, r5
 8011906:	d41e      	bmi.n	8011946 <_malloc_r+0xc6>
 8011908:	2a0b      	cmp	r2, #11
 801190a:	d916      	bls.n	801193a <_malloc_r+0xba>
 801190c:	1961      	adds	r1, r4, r5
 801190e:	42a3      	cmp	r3, r4
 8011910:	6025      	str	r5, [r4, #0]
 8011912:	bf18      	it	ne
 8011914:	6059      	strne	r1, [r3, #4]
 8011916:	6863      	ldr	r3, [r4, #4]
 8011918:	bf08      	it	eq
 801191a:	6031      	streq	r1, [r6, #0]
 801191c:	5162      	str	r2, [r4, r5]
 801191e:	604b      	str	r3, [r1, #4]
 8011920:	4638      	mov	r0, r7
 8011922:	f104 060b 	add.w	r6, r4, #11
 8011926:	f000 fba5 	bl	8012074 <__malloc_unlock>
 801192a:	f026 0607 	bic.w	r6, r6, #7
 801192e:	1d23      	adds	r3, r4, #4
 8011930:	1af2      	subs	r2, r6, r3
 8011932:	d0b6      	beq.n	80118a2 <_malloc_r+0x22>
 8011934:	1b9b      	subs	r3, r3, r6
 8011936:	50a3      	str	r3, [r4, r2]
 8011938:	e7b3      	b.n	80118a2 <_malloc_r+0x22>
 801193a:	6862      	ldr	r2, [r4, #4]
 801193c:	42a3      	cmp	r3, r4
 801193e:	bf0c      	ite	eq
 8011940:	6032      	streq	r2, [r6, #0]
 8011942:	605a      	strne	r2, [r3, #4]
 8011944:	e7ec      	b.n	8011920 <_malloc_r+0xa0>
 8011946:	4623      	mov	r3, r4
 8011948:	6864      	ldr	r4, [r4, #4]
 801194a:	e7b2      	b.n	80118b2 <_malloc_r+0x32>
 801194c:	4634      	mov	r4, r6
 801194e:	6876      	ldr	r6, [r6, #4]
 8011950:	e7b9      	b.n	80118c6 <_malloc_r+0x46>
 8011952:	230c      	movs	r3, #12
 8011954:	603b      	str	r3, [r7, #0]
 8011956:	4638      	mov	r0, r7
 8011958:	f000 fb8c 	bl	8012074 <__malloc_unlock>
 801195c:	e7a1      	b.n	80118a2 <_malloc_r+0x22>
 801195e:	6025      	str	r5, [r4, #0]
 8011960:	e7de      	b.n	8011920 <_malloc_r+0xa0>
 8011962:	bf00      	nop
 8011964:	20006b18 	.word	0x20006b18

08011968 <iprintf>:
 8011968:	b40f      	push	{r0, r1, r2, r3}
 801196a:	4b0a      	ldr	r3, [pc, #40]	; (8011994 <iprintf+0x2c>)
 801196c:	b513      	push	{r0, r1, r4, lr}
 801196e:	681c      	ldr	r4, [r3, #0]
 8011970:	b124      	cbz	r4, 801197c <iprintf+0x14>
 8011972:	69a3      	ldr	r3, [r4, #24]
 8011974:	b913      	cbnz	r3, 801197c <iprintf+0x14>
 8011976:	4620      	mov	r0, r4
 8011978:	f7ff fe36 	bl	80115e8 <__sinit>
 801197c:	ab05      	add	r3, sp, #20
 801197e:	9a04      	ldr	r2, [sp, #16]
 8011980:	68a1      	ldr	r1, [r4, #8]
 8011982:	9301      	str	r3, [sp, #4]
 8011984:	4620      	mov	r0, r4
 8011986:	f000 fba5 	bl	80120d4 <_vfiprintf_r>
 801198a:	b002      	add	sp, #8
 801198c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011990:	b004      	add	sp, #16
 8011992:	4770      	bx	lr
 8011994:	20000124 	.word	0x20000124

08011998 <_puts_r>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	460e      	mov	r6, r1
 801199c:	4605      	mov	r5, r0
 801199e:	b118      	cbz	r0, 80119a8 <_puts_r+0x10>
 80119a0:	6983      	ldr	r3, [r0, #24]
 80119a2:	b90b      	cbnz	r3, 80119a8 <_puts_r+0x10>
 80119a4:	f7ff fe20 	bl	80115e8 <__sinit>
 80119a8:	69ab      	ldr	r3, [r5, #24]
 80119aa:	68ac      	ldr	r4, [r5, #8]
 80119ac:	b913      	cbnz	r3, 80119b4 <_puts_r+0x1c>
 80119ae:	4628      	mov	r0, r5
 80119b0:	f7ff fe1a 	bl	80115e8 <__sinit>
 80119b4:	4b2c      	ldr	r3, [pc, #176]	; (8011a68 <_puts_r+0xd0>)
 80119b6:	429c      	cmp	r4, r3
 80119b8:	d120      	bne.n	80119fc <_puts_r+0x64>
 80119ba:	686c      	ldr	r4, [r5, #4]
 80119bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119be:	07db      	lsls	r3, r3, #31
 80119c0:	d405      	bmi.n	80119ce <_puts_r+0x36>
 80119c2:	89a3      	ldrh	r3, [r4, #12]
 80119c4:	0598      	lsls	r0, r3, #22
 80119c6:	d402      	bmi.n	80119ce <_puts_r+0x36>
 80119c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80119ca:	f7f0 fee1 	bl	8002790 <__retarget_lock_acquire_recursive>
 80119ce:	89a3      	ldrh	r3, [r4, #12]
 80119d0:	0719      	lsls	r1, r3, #28
 80119d2:	d51d      	bpl.n	8011a10 <_puts_r+0x78>
 80119d4:	6923      	ldr	r3, [r4, #16]
 80119d6:	b1db      	cbz	r3, 8011a10 <_puts_r+0x78>
 80119d8:	3e01      	subs	r6, #1
 80119da:	68a3      	ldr	r3, [r4, #8]
 80119dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119e0:	3b01      	subs	r3, #1
 80119e2:	60a3      	str	r3, [r4, #8]
 80119e4:	bb39      	cbnz	r1, 8011a36 <_puts_r+0x9e>
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	da38      	bge.n	8011a5c <_puts_r+0xc4>
 80119ea:	4622      	mov	r2, r4
 80119ec:	210a      	movs	r1, #10
 80119ee:	4628      	mov	r0, r5
 80119f0:	f000 f91e 	bl	8011c30 <__swbuf_r>
 80119f4:	3001      	adds	r0, #1
 80119f6:	d011      	beq.n	8011a1c <_puts_r+0x84>
 80119f8:	250a      	movs	r5, #10
 80119fa:	e011      	b.n	8011a20 <_puts_r+0x88>
 80119fc:	4b1b      	ldr	r3, [pc, #108]	; (8011a6c <_puts_r+0xd4>)
 80119fe:	429c      	cmp	r4, r3
 8011a00:	d101      	bne.n	8011a06 <_puts_r+0x6e>
 8011a02:	68ac      	ldr	r4, [r5, #8]
 8011a04:	e7da      	b.n	80119bc <_puts_r+0x24>
 8011a06:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <_puts_r+0xd8>)
 8011a08:	429c      	cmp	r4, r3
 8011a0a:	bf08      	it	eq
 8011a0c:	68ec      	ldreq	r4, [r5, #12]
 8011a0e:	e7d5      	b.n	80119bc <_puts_r+0x24>
 8011a10:	4621      	mov	r1, r4
 8011a12:	4628      	mov	r0, r5
 8011a14:	f000 f970 	bl	8011cf8 <__swsetup_r>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d0dd      	beq.n	80119d8 <_puts_r+0x40>
 8011a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8011a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a22:	07da      	lsls	r2, r3, #31
 8011a24:	d405      	bmi.n	8011a32 <_puts_r+0x9a>
 8011a26:	89a3      	ldrh	r3, [r4, #12]
 8011a28:	059b      	lsls	r3, r3, #22
 8011a2a:	d402      	bmi.n	8011a32 <_puts_r+0x9a>
 8011a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a2e:	f7f0 fec3 	bl	80027b8 <__retarget_lock_release_recursive>
 8011a32:	4628      	mov	r0, r5
 8011a34:	bd70      	pop	{r4, r5, r6, pc}
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	da04      	bge.n	8011a44 <_puts_r+0xac>
 8011a3a:	69a2      	ldr	r2, [r4, #24]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	dc06      	bgt.n	8011a4e <_puts_r+0xb6>
 8011a40:	290a      	cmp	r1, #10
 8011a42:	d004      	beq.n	8011a4e <_puts_r+0xb6>
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	1c5a      	adds	r2, r3, #1
 8011a48:	6022      	str	r2, [r4, #0]
 8011a4a:	7019      	strb	r1, [r3, #0]
 8011a4c:	e7c5      	b.n	80119da <_puts_r+0x42>
 8011a4e:	4622      	mov	r2, r4
 8011a50:	4628      	mov	r0, r5
 8011a52:	f000 f8ed 	bl	8011c30 <__swbuf_r>
 8011a56:	3001      	adds	r0, #1
 8011a58:	d1bf      	bne.n	80119da <_puts_r+0x42>
 8011a5a:	e7df      	b.n	8011a1c <_puts_r+0x84>
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	250a      	movs	r5, #10
 8011a60:	1c5a      	adds	r2, r3, #1
 8011a62:	6022      	str	r2, [r4, #0]
 8011a64:	701d      	strb	r5, [r3, #0]
 8011a66:	e7db      	b.n	8011a20 <_puts_r+0x88>
 8011a68:	08012b48 	.word	0x08012b48
 8011a6c:	08012b68 	.word	0x08012b68
 8011a70:	08012b28 	.word	0x08012b28

08011a74 <puts>:
 8011a74:	4b02      	ldr	r3, [pc, #8]	; (8011a80 <puts+0xc>)
 8011a76:	4601      	mov	r1, r0
 8011a78:	6818      	ldr	r0, [r3, #0]
 8011a7a:	f7ff bf8d 	b.w	8011998 <_puts_r>
 8011a7e:	bf00      	nop
 8011a80:	20000124 	.word	0x20000124

08011a84 <cleanup_glue>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	460c      	mov	r4, r1
 8011a88:	6809      	ldr	r1, [r1, #0]
 8011a8a:	4605      	mov	r5, r0
 8011a8c:	b109      	cbz	r1, 8011a92 <cleanup_glue+0xe>
 8011a8e:	f7ff fff9 	bl	8011a84 <cleanup_glue>
 8011a92:	4621      	mov	r1, r4
 8011a94:	4628      	mov	r0, r5
 8011a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a9a:	f7ff be85 	b.w	80117a8 <_free_r>
	...

08011aa0 <_reclaim_reent>:
 8011aa0:	4b2c      	ldr	r3, [pc, #176]	; (8011b54 <_reclaim_reent+0xb4>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4283      	cmp	r3, r0
 8011aa6:	b570      	push	{r4, r5, r6, lr}
 8011aa8:	4604      	mov	r4, r0
 8011aaa:	d051      	beq.n	8011b50 <_reclaim_reent+0xb0>
 8011aac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011aae:	b143      	cbz	r3, 8011ac2 <_reclaim_reent+0x22>
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d14a      	bne.n	8011b4c <_reclaim_reent+0xac>
 8011ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011ab8:	6819      	ldr	r1, [r3, #0]
 8011aba:	b111      	cbz	r1, 8011ac2 <_reclaim_reent+0x22>
 8011abc:	4620      	mov	r0, r4
 8011abe:	f7ff fe73 	bl	80117a8 <_free_r>
 8011ac2:	6961      	ldr	r1, [r4, #20]
 8011ac4:	b111      	cbz	r1, 8011acc <_reclaim_reent+0x2c>
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f7ff fe6e 	bl	80117a8 <_free_r>
 8011acc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011ace:	b111      	cbz	r1, 8011ad6 <_reclaim_reent+0x36>
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7ff fe69 	bl	80117a8 <_free_r>
 8011ad6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ad8:	b111      	cbz	r1, 8011ae0 <_reclaim_reent+0x40>
 8011ada:	4620      	mov	r0, r4
 8011adc:	f7ff fe64 	bl	80117a8 <_free_r>
 8011ae0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011ae2:	b111      	cbz	r1, 8011aea <_reclaim_reent+0x4a>
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f7ff fe5f 	bl	80117a8 <_free_r>
 8011aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011aec:	b111      	cbz	r1, 8011af4 <_reclaim_reent+0x54>
 8011aee:	4620      	mov	r0, r4
 8011af0:	f7ff fe5a 	bl	80117a8 <_free_r>
 8011af4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011af6:	b111      	cbz	r1, 8011afe <_reclaim_reent+0x5e>
 8011af8:	4620      	mov	r0, r4
 8011afa:	f7ff fe55 	bl	80117a8 <_free_r>
 8011afe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011b00:	b111      	cbz	r1, 8011b08 <_reclaim_reent+0x68>
 8011b02:	4620      	mov	r0, r4
 8011b04:	f7ff fe50 	bl	80117a8 <_free_r>
 8011b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b0a:	b111      	cbz	r1, 8011b12 <_reclaim_reent+0x72>
 8011b0c:	4620      	mov	r0, r4
 8011b0e:	f7ff fe4b 	bl	80117a8 <_free_r>
 8011b12:	69a3      	ldr	r3, [r4, #24]
 8011b14:	b1e3      	cbz	r3, 8011b50 <_reclaim_reent+0xb0>
 8011b16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011b18:	4620      	mov	r0, r4
 8011b1a:	4798      	blx	r3
 8011b1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011b1e:	b1b9      	cbz	r1, 8011b50 <_reclaim_reent+0xb0>
 8011b20:	4620      	mov	r0, r4
 8011b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b26:	f7ff bfad 	b.w	8011a84 <cleanup_glue>
 8011b2a:	5949      	ldr	r1, [r1, r5]
 8011b2c:	b941      	cbnz	r1, 8011b40 <_reclaim_reent+0xa0>
 8011b2e:	3504      	adds	r5, #4
 8011b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011b32:	2d80      	cmp	r5, #128	; 0x80
 8011b34:	68d9      	ldr	r1, [r3, #12]
 8011b36:	d1f8      	bne.n	8011b2a <_reclaim_reent+0x8a>
 8011b38:	4620      	mov	r0, r4
 8011b3a:	f7ff fe35 	bl	80117a8 <_free_r>
 8011b3e:	e7ba      	b.n	8011ab6 <_reclaim_reent+0x16>
 8011b40:	680e      	ldr	r6, [r1, #0]
 8011b42:	4620      	mov	r0, r4
 8011b44:	f7ff fe30 	bl	80117a8 <_free_r>
 8011b48:	4631      	mov	r1, r6
 8011b4a:	e7ef      	b.n	8011b2c <_reclaim_reent+0x8c>
 8011b4c:	2500      	movs	r5, #0
 8011b4e:	e7ef      	b.n	8011b30 <_reclaim_reent+0x90>
 8011b50:	bd70      	pop	{r4, r5, r6, pc}
 8011b52:	bf00      	nop
 8011b54:	20000124 	.word	0x20000124

08011b58 <_sbrk_r>:
 8011b58:	b538      	push	{r3, r4, r5, lr}
 8011b5a:	4d06      	ldr	r5, [pc, #24]	; (8011b74 <_sbrk_r+0x1c>)
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	4604      	mov	r4, r0
 8011b60:	4608      	mov	r0, r1
 8011b62:	602b      	str	r3, [r5, #0]
 8011b64:	f7ef fc54 	bl	8001410 <_sbrk>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	d102      	bne.n	8011b72 <_sbrk_r+0x1a>
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	b103      	cbz	r3, 8011b72 <_sbrk_r+0x1a>
 8011b70:	6023      	str	r3, [r4, #0]
 8011b72:	bd38      	pop	{r3, r4, r5, pc}
 8011b74:	20006b20 	.word	0x20006b20

08011b78 <__sread>:
 8011b78:	b510      	push	{r4, lr}
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b80:	f000 fd6c 	bl	801265c <_read_r>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	bfab      	itete	ge
 8011b88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011b8a:	89a3      	ldrhlt	r3, [r4, #12]
 8011b8c:	181b      	addge	r3, r3, r0
 8011b8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011b92:	bfac      	ite	ge
 8011b94:	6563      	strge	r3, [r4, #84]	; 0x54
 8011b96:	81a3      	strhlt	r3, [r4, #12]
 8011b98:	bd10      	pop	{r4, pc}

08011b9a <__swrite>:
 8011b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b9e:	461f      	mov	r7, r3
 8011ba0:	898b      	ldrh	r3, [r1, #12]
 8011ba2:	05db      	lsls	r3, r3, #23
 8011ba4:	4605      	mov	r5, r0
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	4616      	mov	r6, r2
 8011baa:	d505      	bpl.n	8011bb8 <__swrite+0x1e>
 8011bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb0:	2302      	movs	r3, #2
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	f000 f9e0 	bl	8011f78 <_lseek_r>
 8011bb8:	89a3      	ldrh	r3, [r4, #12]
 8011bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bc2:	81a3      	strh	r3, [r4, #12]
 8011bc4:	4632      	mov	r2, r6
 8011bc6:	463b      	mov	r3, r7
 8011bc8:	4628      	mov	r0, r5
 8011bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011bce:	f000 b881 	b.w	8011cd4 <_write_r>

08011bd2 <__sseek>:
 8011bd2:	b510      	push	{r4, lr}
 8011bd4:	460c      	mov	r4, r1
 8011bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bda:	f000 f9cd 	bl	8011f78 <_lseek_r>
 8011bde:	1c43      	adds	r3, r0, #1
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	bf15      	itete	ne
 8011be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011bee:	81a3      	strheq	r3, [r4, #12]
 8011bf0:	bf18      	it	ne
 8011bf2:	81a3      	strhne	r3, [r4, #12]
 8011bf4:	bd10      	pop	{r4, pc}

08011bf6 <__sclose>:
 8011bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bfa:	f000 b8eb 	b.w	8011dd4 <_close_r>
	...

08011c00 <viprintf>:
 8011c00:	b513      	push	{r0, r1, r4, lr}
 8011c02:	460b      	mov	r3, r1
 8011c04:	4909      	ldr	r1, [pc, #36]	; (8011c2c <viprintf+0x2c>)
 8011c06:	680c      	ldr	r4, [r1, #0]
 8011c08:	4602      	mov	r2, r0
 8011c0a:	b144      	cbz	r4, 8011c1e <viprintf+0x1e>
 8011c0c:	69a1      	ldr	r1, [r4, #24]
 8011c0e:	b931      	cbnz	r1, 8011c1e <viprintf+0x1e>
 8011c10:	e9cd 0300 	strd	r0, r3, [sp]
 8011c14:	4620      	mov	r0, r4
 8011c16:	f7ff fce7 	bl	80115e8 <__sinit>
 8011c1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c1e:	68a1      	ldr	r1, [r4, #8]
 8011c20:	4620      	mov	r0, r4
 8011c22:	b002      	add	sp, #8
 8011c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c28:	f000 ba54 	b.w	80120d4 <_vfiprintf_r>
 8011c2c:	20000124 	.word	0x20000124

08011c30 <__swbuf_r>:
 8011c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c32:	460e      	mov	r6, r1
 8011c34:	4614      	mov	r4, r2
 8011c36:	4605      	mov	r5, r0
 8011c38:	b118      	cbz	r0, 8011c42 <__swbuf_r+0x12>
 8011c3a:	6983      	ldr	r3, [r0, #24]
 8011c3c:	b90b      	cbnz	r3, 8011c42 <__swbuf_r+0x12>
 8011c3e:	f7ff fcd3 	bl	80115e8 <__sinit>
 8011c42:	4b21      	ldr	r3, [pc, #132]	; (8011cc8 <__swbuf_r+0x98>)
 8011c44:	429c      	cmp	r4, r3
 8011c46:	d12b      	bne.n	8011ca0 <__swbuf_r+0x70>
 8011c48:	686c      	ldr	r4, [r5, #4]
 8011c4a:	69a3      	ldr	r3, [r4, #24]
 8011c4c:	60a3      	str	r3, [r4, #8]
 8011c4e:	89a3      	ldrh	r3, [r4, #12]
 8011c50:	071a      	lsls	r2, r3, #28
 8011c52:	d52f      	bpl.n	8011cb4 <__swbuf_r+0x84>
 8011c54:	6923      	ldr	r3, [r4, #16]
 8011c56:	b36b      	cbz	r3, 8011cb4 <__swbuf_r+0x84>
 8011c58:	6923      	ldr	r3, [r4, #16]
 8011c5a:	6820      	ldr	r0, [r4, #0]
 8011c5c:	1ac0      	subs	r0, r0, r3
 8011c5e:	6963      	ldr	r3, [r4, #20]
 8011c60:	b2f6      	uxtb	r6, r6
 8011c62:	4283      	cmp	r3, r0
 8011c64:	4637      	mov	r7, r6
 8011c66:	dc04      	bgt.n	8011c72 <__swbuf_r+0x42>
 8011c68:	4621      	mov	r1, r4
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	f000 f948 	bl	8011f00 <_fflush_r>
 8011c70:	bb30      	cbnz	r0, 8011cc0 <__swbuf_r+0x90>
 8011c72:	68a3      	ldr	r3, [r4, #8]
 8011c74:	3b01      	subs	r3, #1
 8011c76:	60a3      	str	r3, [r4, #8]
 8011c78:	6823      	ldr	r3, [r4, #0]
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	6022      	str	r2, [r4, #0]
 8011c7e:	701e      	strb	r6, [r3, #0]
 8011c80:	6963      	ldr	r3, [r4, #20]
 8011c82:	3001      	adds	r0, #1
 8011c84:	4283      	cmp	r3, r0
 8011c86:	d004      	beq.n	8011c92 <__swbuf_r+0x62>
 8011c88:	89a3      	ldrh	r3, [r4, #12]
 8011c8a:	07db      	lsls	r3, r3, #31
 8011c8c:	d506      	bpl.n	8011c9c <__swbuf_r+0x6c>
 8011c8e:	2e0a      	cmp	r6, #10
 8011c90:	d104      	bne.n	8011c9c <__swbuf_r+0x6c>
 8011c92:	4621      	mov	r1, r4
 8011c94:	4628      	mov	r0, r5
 8011c96:	f000 f933 	bl	8011f00 <_fflush_r>
 8011c9a:	b988      	cbnz	r0, 8011cc0 <__swbuf_r+0x90>
 8011c9c:	4638      	mov	r0, r7
 8011c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ca0:	4b0a      	ldr	r3, [pc, #40]	; (8011ccc <__swbuf_r+0x9c>)
 8011ca2:	429c      	cmp	r4, r3
 8011ca4:	d101      	bne.n	8011caa <__swbuf_r+0x7a>
 8011ca6:	68ac      	ldr	r4, [r5, #8]
 8011ca8:	e7cf      	b.n	8011c4a <__swbuf_r+0x1a>
 8011caa:	4b09      	ldr	r3, [pc, #36]	; (8011cd0 <__swbuf_r+0xa0>)
 8011cac:	429c      	cmp	r4, r3
 8011cae:	bf08      	it	eq
 8011cb0:	68ec      	ldreq	r4, [r5, #12]
 8011cb2:	e7ca      	b.n	8011c4a <__swbuf_r+0x1a>
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f000 f81e 	bl	8011cf8 <__swsetup_r>
 8011cbc:	2800      	cmp	r0, #0
 8011cbe:	d0cb      	beq.n	8011c58 <__swbuf_r+0x28>
 8011cc0:	f04f 37ff 	mov.w	r7, #4294967295
 8011cc4:	e7ea      	b.n	8011c9c <__swbuf_r+0x6c>
 8011cc6:	bf00      	nop
 8011cc8:	08012b48 	.word	0x08012b48
 8011ccc:	08012b68 	.word	0x08012b68
 8011cd0:	08012b28 	.word	0x08012b28

08011cd4 <_write_r>:
 8011cd4:	b538      	push	{r3, r4, r5, lr}
 8011cd6:	4d07      	ldr	r5, [pc, #28]	; (8011cf4 <_write_r+0x20>)
 8011cd8:	4604      	mov	r4, r0
 8011cda:	4608      	mov	r0, r1
 8011cdc:	4611      	mov	r1, r2
 8011cde:	2200      	movs	r2, #0
 8011ce0:	602a      	str	r2, [r5, #0]
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	f7ee fe49 	bl	800097a <_write>
 8011ce8:	1c43      	adds	r3, r0, #1
 8011cea:	d102      	bne.n	8011cf2 <_write_r+0x1e>
 8011cec:	682b      	ldr	r3, [r5, #0]
 8011cee:	b103      	cbz	r3, 8011cf2 <_write_r+0x1e>
 8011cf0:	6023      	str	r3, [r4, #0]
 8011cf2:	bd38      	pop	{r3, r4, r5, pc}
 8011cf4:	20006b20 	.word	0x20006b20

08011cf8 <__swsetup_r>:
 8011cf8:	4b32      	ldr	r3, [pc, #200]	; (8011dc4 <__swsetup_r+0xcc>)
 8011cfa:	b570      	push	{r4, r5, r6, lr}
 8011cfc:	681d      	ldr	r5, [r3, #0]
 8011cfe:	4606      	mov	r6, r0
 8011d00:	460c      	mov	r4, r1
 8011d02:	b125      	cbz	r5, 8011d0e <__swsetup_r+0x16>
 8011d04:	69ab      	ldr	r3, [r5, #24]
 8011d06:	b913      	cbnz	r3, 8011d0e <__swsetup_r+0x16>
 8011d08:	4628      	mov	r0, r5
 8011d0a:	f7ff fc6d 	bl	80115e8 <__sinit>
 8011d0e:	4b2e      	ldr	r3, [pc, #184]	; (8011dc8 <__swsetup_r+0xd0>)
 8011d10:	429c      	cmp	r4, r3
 8011d12:	d10f      	bne.n	8011d34 <__swsetup_r+0x3c>
 8011d14:	686c      	ldr	r4, [r5, #4]
 8011d16:	89a3      	ldrh	r3, [r4, #12]
 8011d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d1c:	0719      	lsls	r1, r3, #28
 8011d1e:	d42c      	bmi.n	8011d7a <__swsetup_r+0x82>
 8011d20:	06dd      	lsls	r5, r3, #27
 8011d22:	d411      	bmi.n	8011d48 <__swsetup_r+0x50>
 8011d24:	2309      	movs	r3, #9
 8011d26:	6033      	str	r3, [r6, #0]
 8011d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011d2c:	81a3      	strh	r3, [r4, #12]
 8011d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d32:	e03e      	b.n	8011db2 <__swsetup_r+0xba>
 8011d34:	4b25      	ldr	r3, [pc, #148]	; (8011dcc <__swsetup_r+0xd4>)
 8011d36:	429c      	cmp	r4, r3
 8011d38:	d101      	bne.n	8011d3e <__swsetup_r+0x46>
 8011d3a:	68ac      	ldr	r4, [r5, #8]
 8011d3c:	e7eb      	b.n	8011d16 <__swsetup_r+0x1e>
 8011d3e:	4b24      	ldr	r3, [pc, #144]	; (8011dd0 <__swsetup_r+0xd8>)
 8011d40:	429c      	cmp	r4, r3
 8011d42:	bf08      	it	eq
 8011d44:	68ec      	ldreq	r4, [r5, #12]
 8011d46:	e7e6      	b.n	8011d16 <__swsetup_r+0x1e>
 8011d48:	0758      	lsls	r0, r3, #29
 8011d4a:	d512      	bpl.n	8011d72 <__swsetup_r+0x7a>
 8011d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d4e:	b141      	cbz	r1, 8011d62 <__swsetup_r+0x6a>
 8011d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d54:	4299      	cmp	r1, r3
 8011d56:	d002      	beq.n	8011d5e <__swsetup_r+0x66>
 8011d58:	4630      	mov	r0, r6
 8011d5a:	f7ff fd25 	bl	80117a8 <_free_r>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	6363      	str	r3, [r4, #52]	; 0x34
 8011d62:	89a3      	ldrh	r3, [r4, #12]
 8011d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d68:	81a3      	strh	r3, [r4, #12]
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	6063      	str	r3, [r4, #4]
 8011d6e:	6923      	ldr	r3, [r4, #16]
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	89a3      	ldrh	r3, [r4, #12]
 8011d74:	f043 0308 	orr.w	r3, r3, #8
 8011d78:	81a3      	strh	r3, [r4, #12]
 8011d7a:	6923      	ldr	r3, [r4, #16]
 8011d7c:	b94b      	cbnz	r3, 8011d92 <__swsetup_r+0x9a>
 8011d7e:	89a3      	ldrh	r3, [r4, #12]
 8011d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d88:	d003      	beq.n	8011d92 <__swsetup_r+0x9a>
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f000 f92b 	bl	8011fe8 <__smakebuf_r>
 8011d92:	89a0      	ldrh	r0, [r4, #12]
 8011d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d98:	f010 0301 	ands.w	r3, r0, #1
 8011d9c:	d00a      	beq.n	8011db4 <__swsetup_r+0xbc>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	60a3      	str	r3, [r4, #8]
 8011da2:	6963      	ldr	r3, [r4, #20]
 8011da4:	425b      	negs	r3, r3
 8011da6:	61a3      	str	r3, [r4, #24]
 8011da8:	6923      	ldr	r3, [r4, #16]
 8011daa:	b943      	cbnz	r3, 8011dbe <__swsetup_r+0xc6>
 8011dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011db0:	d1ba      	bne.n	8011d28 <__swsetup_r+0x30>
 8011db2:	bd70      	pop	{r4, r5, r6, pc}
 8011db4:	0781      	lsls	r1, r0, #30
 8011db6:	bf58      	it	pl
 8011db8:	6963      	ldrpl	r3, [r4, #20]
 8011dba:	60a3      	str	r3, [r4, #8]
 8011dbc:	e7f4      	b.n	8011da8 <__swsetup_r+0xb0>
 8011dbe:	2000      	movs	r0, #0
 8011dc0:	e7f7      	b.n	8011db2 <__swsetup_r+0xba>
 8011dc2:	bf00      	nop
 8011dc4:	20000124 	.word	0x20000124
 8011dc8:	08012b48 	.word	0x08012b48
 8011dcc:	08012b68 	.word	0x08012b68
 8011dd0:	08012b28 	.word	0x08012b28

08011dd4 <_close_r>:
 8011dd4:	b538      	push	{r3, r4, r5, lr}
 8011dd6:	4d06      	ldr	r5, [pc, #24]	; (8011df0 <_close_r+0x1c>)
 8011dd8:	2300      	movs	r3, #0
 8011dda:	4604      	mov	r4, r0
 8011ddc:	4608      	mov	r0, r1
 8011dde:	602b      	str	r3, [r5, #0]
 8011de0:	f7ef fae1 	bl	80013a6 <_close>
 8011de4:	1c43      	adds	r3, r0, #1
 8011de6:	d102      	bne.n	8011dee <_close_r+0x1a>
 8011de8:	682b      	ldr	r3, [r5, #0]
 8011dea:	b103      	cbz	r3, 8011dee <_close_r+0x1a>
 8011dec:	6023      	str	r3, [r4, #0]
 8011dee:	bd38      	pop	{r3, r4, r5, pc}
 8011df0:	20006b20 	.word	0x20006b20

08011df4 <__sflush_r>:
 8011df4:	898a      	ldrh	r2, [r1, #12]
 8011df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfa:	4605      	mov	r5, r0
 8011dfc:	0710      	lsls	r0, r2, #28
 8011dfe:	460c      	mov	r4, r1
 8011e00:	d458      	bmi.n	8011eb4 <__sflush_r+0xc0>
 8011e02:	684b      	ldr	r3, [r1, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	dc05      	bgt.n	8011e14 <__sflush_r+0x20>
 8011e08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	dc02      	bgt.n	8011e14 <__sflush_r+0x20>
 8011e0e:	2000      	movs	r0, #0
 8011e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e16:	2e00      	cmp	r6, #0
 8011e18:	d0f9      	beq.n	8011e0e <__sflush_r+0x1a>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e20:	682f      	ldr	r7, [r5, #0]
 8011e22:	602b      	str	r3, [r5, #0]
 8011e24:	d032      	beq.n	8011e8c <__sflush_r+0x98>
 8011e26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e28:	89a3      	ldrh	r3, [r4, #12]
 8011e2a:	075a      	lsls	r2, r3, #29
 8011e2c:	d505      	bpl.n	8011e3a <__sflush_r+0x46>
 8011e2e:	6863      	ldr	r3, [r4, #4]
 8011e30:	1ac0      	subs	r0, r0, r3
 8011e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e34:	b10b      	cbz	r3, 8011e3a <__sflush_r+0x46>
 8011e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e38:	1ac0      	subs	r0, r0, r3
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e40:	6a21      	ldr	r1, [r4, #32]
 8011e42:	4628      	mov	r0, r5
 8011e44:	47b0      	blx	r6
 8011e46:	1c43      	adds	r3, r0, #1
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	d106      	bne.n	8011e5a <__sflush_r+0x66>
 8011e4c:	6829      	ldr	r1, [r5, #0]
 8011e4e:	291d      	cmp	r1, #29
 8011e50:	d82c      	bhi.n	8011eac <__sflush_r+0xb8>
 8011e52:	4a2a      	ldr	r2, [pc, #168]	; (8011efc <__sflush_r+0x108>)
 8011e54:	40ca      	lsrs	r2, r1
 8011e56:	07d6      	lsls	r6, r2, #31
 8011e58:	d528      	bpl.n	8011eac <__sflush_r+0xb8>
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	6062      	str	r2, [r4, #4]
 8011e5e:	04d9      	lsls	r1, r3, #19
 8011e60:	6922      	ldr	r2, [r4, #16]
 8011e62:	6022      	str	r2, [r4, #0]
 8011e64:	d504      	bpl.n	8011e70 <__sflush_r+0x7c>
 8011e66:	1c42      	adds	r2, r0, #1
 8011e68:	d101      	bne.n	8011e6e <__sflush_r+0x7a>
 8011e6a:	682b      	ldr	r3, [r5, #0]
 8011e6c:	b903      	cbnz	r3, 8011e70 <__sflush_r+0x7c>
 8011e6e:	6560      	str	r0, [r4, #84]	; 0x54
 8011e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e72:	602f      	str	r7, [r5, #0]
 8011e74:	2900      	cmp	r1, #0
 8011e76:	d0ca      	beq.n	8011e0e <__sflush_r+0x1a>
 8011e78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e7c:	4299      	cmp	r1, r3
 8011e7e:	d002      	beq.n	8011e86 <__sflush_r+0x92>
 8011e80:	4628      	mov	r0, r5
 8011e82:	f7ff fc91 	bl	80117a8 <_free_r>
 8011e86:	2000      	movs	r0, #0
 8011e88:	6360      	str	r0, [r4, #52]	; 0x34
 8011e8a:	e7c1      	b.n	8011e10 <__sflush_r+0x1c>
 8011e8c:	6a21      	ldr	r1, [r4, #32]
 8011e8e:	2301      	movs	r3, #1
 8011e90:	4628      	mov	r0, r5
 8011e92:	47b0      	blx	r6
 8011e94:	1c41      	adds	r1, r0, #1
 8011e96:	d1c7      	bne.n	8011e28 <__sflush_r+0x34>
 8011e98:	682b      	ldr	r3, [r5, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d0c4      	beq.n	8011e28 <__sflush_r+0x34>
 8011e9e:	2b1d      	cmp	r3, #29
 8011ea0:	d001      	beq.n	8011ea6 <__sflush_r+0xb2>
 8011ea2:	2b16      	cmp	r3, #22
 8011ea4:	d101      	bne.n	8011eaa <__sflush_r+0xb6>
 8011ea6:	602f      	str	r7, [r5, #0]
 8011ea8:	e7b1      	b.n	8011e0e <__sflush_r+0x1a>
 8011eaa:	89a3      	ldrh	r3, [r4, #12]
 8011eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb0:	81a3      	strh	r3, [r4, #12]
 8011eb2:	e7ad      	b.n	8011e10 <__sflush_r+0x1c>
 8011eb4:	690f      	ldr	r7, [r1, #16]
 8011eb6:	2f00      	cmp	r7, #0
 8011eb8:	d0a9      	beq.n	8011e0e <__sflush_r+0x1a>
 8011eba:	0793      	lsls	r3, r2, #30
 8011ebc:	680e      	ldr	r6, [r1, #0]
 8011ebe:	bf08      	it	eq
 8011ec0:	694b      	ldreq	r3, [r1, #20]
 8011ec2:	600f      	str	r7, [r1, #0]
 8011ec4:	bf18      	it	ne
 8011ec6:	2300      	movne	r3, #0
 8011ec8:	eba6 0807 	sub.w	r8, r6, r7
 8011ecc:	608b      	str	r3, [r1, #8]
 8011ece:	f1b8 0f00 	cmp.w	r8, #0
 8011ed2:	dd9c      	ble.n	8011e0e <__sflush_r+0x1a>
 8011ed4:	6a21      	ldr	r1, [r4, #32]
 8011ed6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ed8:	4643      	mov	r3, r8
 8011eda:	463a      	mov	r2, r7
 8011edc:	4628      	mov	r0, r5
 8011ede:	47b0      	blx	r6
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	dc06      	bgt.n	8011ef2 <__sflush_r+0xfe>
 8011ee4:	89a3      	ldrh	r3, [r4, #12]
 8011ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eea:	81a3      	strh	r3, [r4, #12]
 8011eec:	f04f 30ff 	mov.w	r0, #4294967295
 8011ef0:	e78e      	b.n	8011e10 <__sflush_r+0x1c>
 8011ef2:	4407      	add	r7, r0
 8011ef4:	eba8 0800 	sub.w	r8, r8, r0
 8011ef8:	e7e9      	b.n	8011ece <__sflush_r+0xda>
 8011efa:	bf00      	nop
 8011efc:	20400001 	.word	0x20400001

08011f00 <_fflush_r>:
 8011f00:	b538      	push	{r3, r4, r5, lr}
 8011f02:	690b      	ldr	r3, [r1, #16]
 8011f04:	4605      	mov	r5, r0
 8011f06:	460c      	mov	r4, r1
 8011f08:	b913      	cbnz	r3, 8011f10 <_fflush_r+0x10>
 8011f0a:	2500      	movs	r5, #0
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	bd38      	pop	{r3, r4, r5, pc}
 8011f10:	b118      	cbz	r0, 8011f1a <_fflush_r+0x1a>
 8011f12:	6983      	ldr	r3, [r0, #24]
 8011f14:	b90b      	cbnz	r3, 8011f1a <_fflush_r+0x1a>
 8011f16:	f7ff fb67 	bl	80115e8 <__sinit>
 8011f1a:	4b14      	ldr	r3, [pc, #80]	; (8011f6c <_fflush_r+0x6c>)
 8011f1c:	429c      	cmp	r4, r3
 8011f1e:	d11b      	bne.n	8011f58 <_fflush_r+0x58>
 8011f20:	686c      	ldr	r4, [r5, #4]
 8011f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d0ef      	beq.n	8011f0a <_fflush_r+0xa>
 8011f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f2c:	07d0      	lsls	r0, r2, #31
 8011f2e:	d404      	bmi.n	8011f3a <_fflush_r+0x3a>
 8011f30:	0599      	lsls	r1, r3, #22
 8011f32:	d402      	bmi.n	8011f3a <_fflush_r+0x3a>
 8011f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f36:	f7f0 fc2b 	bl	8002790 <__retarget_lock_acquire_recursive>
 8011f3a:	4628      	mov	r0, r5
 8011f3c:	4621      	mov	r1, r4
 8011f3e:	f7ff ff59 	bl	8011df4 <__sflush_r>
 8011f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f44:	07da      	lsls	r2, r3, #31
 8011f46:	4605      	mov	r5, r0
 8011f48:	d4e0      	bmi.n	8011f0c <_fflush_r+0xc>
 8011f4a:	89a3      	ldrh	r3, [r4, #12]
 8011f4c:	059b      	lsls	r3, r3, #22
 8011f4e:	d4dd      	bmi.n	8011f0c <_fflush_r+0xc>
 8011f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f52:	f7f0 fc31 	bl	80027b8 <__retarget_lock_release_recursive>
 8011f56:	e7d9      	b.n	8011f0c <_fflush_r+0xc>
 8011f58:	4b05      	ldr	r3, [pc, #20]	; (8011f70 <_fflush_r+0x70>)
 8011f5a:	429c      	cmp	r4, r3
 8011f5c:	d101      	bne.n	8011f62 <_fflush_r+0x62>
 8011f5e:	68ac      	ldr	r4, [r5, #8]
 8011f60:	e7df      	b.n	8011f22 <_fflush_r+0x22>
 8011f62:	4b04      	ldr	r3, [pc, #16]	; (8011f74 <_fflush_r+0x74>)
 8011f64:	429c      	cmp	r4, r3
 8011f66:	bf08      	it	eq
 8011f68:	68ec      	ldreq	r4, [r5, #12]
 8011f6a:	e7da      	b.n	8011f22 <_fflush_r+0x22>
 8011f6c:	08012b48 	.word	0x08012b48
 8011f70:	08012b68 	.word	0x08012b68
 8011f74:	08012b28 	.word	0x08012b28

08011f78 <_lseek_r>:
 8011f78:	b538      	push	{r3, r4, r5, lr}
 8011f7a:	4d07      	ldr	r5, [pc, #28]	; (8011f98 <_lseek_r+0x20>)
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	4608      	mov	r0, r1
 8011f80:	4611      	mov	r1, r2
 8011f82:	2200      	movs	r2, #0
 8011f84:	602a      	str	r2, [r5, #0]
 8011f86:	461a      	mov	r2, r3
 8011f88:	f7ef fa34 	bl	80013f4 <_lseek>
 8011f8c:	1c43      	adds	r3, r0, #1
 8011f8e:	d102      	bne.n	8011f96 <_lseek_r+0x1e>
 8011f90:	682b      	ldr	r3, [r5, #0]
 8011f92:	b103      	cbz	r3, 8011f96 <_lseek_r+0x1e>
 8011f94:	6023      	str	r3, [r4, #0]
 8011f96:	bd38      	pop	{r3, r4, r5, pc}
 8011f98:	20006b20 	.word	0x20006b20

08011f9c <__swhatbuf_r>:
 8011f9c:	b570      	push	{r4, r5, r6, lr}
 8011f9e:	460e      	mov	r6, r1
 8011fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fa4:	2900      	cmp	r1, #0
 8011fa6:	b096      	sub	sp, #88	; 0x58
 8011fa8:	4614      	mov	r4, r2
 8011faa:	461d      	mov	r5, r3
 8011fac:	da08      	bge.n	8011fc0 <__swhatbuf_r+0x24>
 8011fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	602a      	str	r2, [r5, #0]
 8011fb6:	061a      	lsls	r2, r3, #24
 8011fb8:	d410      	bmi.n	8011fdc <__swhatbuf_r+0x40>
 8011fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fbe:	e00e      	b.n	8011fde <__swhatbuf_r+0x42>
 8011fc0:	466a      	mov	r2, sp
 8011fc2:	f000 fb5d 	bl	8012680 <_fstat_r>
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	dbf1      	blt.n	8011fae <__swhatbuf_r+0x12>
 8011fca:	9a01      	ldr	r2, [sp, #4]
 8011fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011fd4:	425a      	negs	r2, r3
 8011fd6:	415a      	adcs	r2, r3
 8011fd8:	602a      	str	r2, [r5, #0]
 8011fda:	e7ee      	b.n	8011fba <__swhatbuf_r+0x1e>
 8011fdc:	2340      	movs	r3, #64	; 0x40
 8011fde:	2000      	movs	r0, #0
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	b016      	add	sp, #88	; 0x58
 8011fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08011fe8 <__smakebuf_r>:
 8011fe8:	898b      	ldrh	r3, [r1, #12]
 8011fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011fec:	079d      	lsls	r5, r3, #30
 8011fee:	4606      	mov	r6, r0
 8011ff0:	460c      	mov	r4, r1
 8011ff2:	d507      	bpl.n	8012004 <__smakebuf_r+0x1c>
 8011ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ff8:	6023      	str	r3, [r4, #0]
 8011ffa:	6123      	str	r3, [r4, #16]
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	6163      	str	r3, [r4, #20]
 8012000:	b002      	add	sp, #8
 8012002:	bd70      	pop	{r4, r5, r6, pc}
 8012004:	ab01      	add	r3, sp, #4
 8012006:	466a      	mov	r2, sp
 8012008:	f7ff ffc8 	bl	8011f9c <__swhatbuf_r>
 801200c:	9900      	ldr	r1, [sp, #0]
 801200e:	4605      	mov	r5, r0
 8012010:	4630      	mov	r0, r6
 8012012:	f7ff fc35 	bl	8011880 <_malloc_r>
 8012016:	b948      	cbnz	r0, 801202c <__smakebuf_r+0x44>
 8012018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801201c:	059a      	lsls	r2, r3, #22
 801201e:	d4ef      	bmi.n	8012000 <__smakebuf_r+0x18>
 8012020:	f023 0303 	bic.w	r3, r3, #3
 8012024:	f043 0302 	orr.w	r3, r3, #2
 8012028:	81a3      	strh	r3, [r4, #12]
 801202a:	e7e3      	b.n	8011ff4 <__smakebuf_r+0xc>
 801202c:	4b0d      	ldr	r3, [pc, #52]	; (8012064 <__smakebuf_r+0x7c>)
 801202e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012030:	89a3      	ldrh	r3, [r4, #12]
 8012032:	6020      	str	r0, [r4, #0]
 8012034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012038:	81a3      	strh	r3, [r4, #12]
 801203a:	9b00      	ldr	r3, [sp, #0]
 801203c:	6163      	str	r3, [r4, #20]
 801203e:	9b01      	ldr	r3, [sp, #4]
 8012040:	6120      	str	r0, [r4, #16]
 8012042:	b15b      	cbz	r3, 801205c <__smakebuf_r+0x74>
 8012044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012048:	4630      	mov	r0, r6
 801204a:	f000 fb2b 	bl	80126a4 <_isatty_r>
 801204e:	b128      	cbz	r0, 801205c <__smakebuf_r+0x74>
 8012050:	89a3      	ldrh	r3, [r4, #12]
 8012052:	f023 0303 	bic.w	r3, r3, #3
 8012056:	f043 0301 	orr.w	r3, r3, #1
 801205a:	81a3      	strh	r3, [r4, #12]
 801205c:	89a0      	ldrh	r0, [r4, #12]
 801205e:	4305      	orrs	r5, r0
 8012060:	81a5      	strh	r5, [r4, #12]
 8012062:	e7cd      	b.n	8012000 <__smakebuf_r+0x18>
 8012064:	08011581 	.word	0x08011581

08012068 <__malloc_lock>:
 8012068:	4801      	ldr	r0, [pc, #4]	; (8012070 <__malloc_lock+0x8>)
 801206a:	f7f0 bb91 	b.w	8002790 <__retarget_lock_acquire_recursive>
 801206e:	bf00      	nop
 8012070:	200004cc 	.word	0x200004cc

08012074 <__malloc_unlock>:
 8012074:	4801      	ldr	r0, [pc, #4]	; (801207c <__malloc_unlock+0x8>)
 8012076:	f7f0 bb9f 	b.w	80027b8 <__retarget_lock_release_recursive>
 801207a:	bf00      	nop
 801207c:	200004cc 	.word	0x200004cc

08012080 <__sfputc_r>:
 8012080:	6893      	ldr	r3, [r2, #8]
 8012082:	3b01      	subs	r3, #1
 8012084:	2b00      	cmp	r3, #0
 8012086:	b410      	push	{r4}
 8012088:	6093      	str	r3, [r2, #8]
 801208a:	da08      	bge.n	801209e <__sfputc_r+0x1e>
 801208c:	6994      	ldr	r4, [r2, #24]
 801208e:	42a3      	cmp	r3, r4
 8012090:	db01      	blt.n	8012096 <__sfputc_r+0x16>
 8012092:	290a      	cmp	r1, #10
 8012094:	d103      	bne.n	801209e <__sfputc_r+0x1e>
 8012096:	f85d 4b04 	ldr.w	r4, [sp], #4
 801209a:	f7ff bdc9 	b.w	8011c30 <__swbuf_r>
 801209e:	6813      	ldr	r3, [r2, #0]
 80120a0:	1c58      	adds	r0, r3, #1
 80120a2:	6010      	str	r0, [r2, #0]
 80120a4:	7019      	strb	r1, [r3, #0]
 80120a6:	4608      	mov	r0, r1
 80120a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120ac:	4770      	bx	lr

080120ae <__sfputs_r>:
 80120ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120b0:	4606      	mov	r6, r0
 80120b2:	460f      	mov	r7, r1
 80120b4:	4614      	mov	r4, r2
 80120b6:	18d5      	adds	r5, r2, r3
 80120b8:	42ac      	cmp	r4, r5
 80120ba:	d101      	bne.n	80120c0 <__sfputs_r+0x12>
 80120bc:	2000      	movs	r0, #0
 80120be:	e007      	b.n	80120d0 <__sfputs_r+0x22>
 80120c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120c4:	463a      	mov	r2, r7
 80120c6:	4630      	mov	r0, r6
 80120c8:	f7ff ffda 	bl	8012080 <__sfputc_r>
 80120cc:	1c43      	adds	r3, r0, #1
 80120ce:	d1f3      	bne.n	80120b8 <__sfputs_r+0xa>
 80120d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120d4 <_vfiprintf_r>:
 80120d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d8:	460d      	mov	r5, r1
 80120da:	b09d      	sub	sp, #116	; 0x74
 80120dc:	4614      	mov	r4, r2
 80120de:	4698      	mov	r8, r3
 80120e0:	4606      	mov	r6, r0
 80120e2:	b118      	cbz	r0, 80120ec <_vfiprintf_r+0x18>
 80120e4:	6983      	ldr	r3, [r0, #24]
 80120e6:	b90b      	cbnz	r3, 80120ec <_vfiprintf_r+0x18>
 80120e8:	f7ff fa7e 	bl	80115e8 <__sinit>
 80120ec:	4b89      	ldr	r3, [pc, #548]	; (8012314 <_vfiprintf_r+0x240>)
 80120ee:	429d      	cmp	r5, r3
 80120f0:	d11b      	bne.n	801212a <_vfiprintf_r+0x56>
 80120f2:	6875      	ldr	r5, [r6, #4]
 80120f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120f6:	07d9      	lsls	r1, r3, #31
 80120f8:	d405      	bmi.n	8012106 <_vfiprintf_r+0x32>
 80120fa:	89ab      	ldrh	r3, [r5, #12]
 80120fc:	059a      	lsls	r2, r3, #22
 80120fe:	d402      	bmi.n	8012106 <_vfiprintf_r+0x32>
 8012100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012102:	f7f0 fb45 	bl	8002790 <__retarget_lock_acquire_recursive>
 8012106:	89ab      	ldrh	r3, [r5, #12]
 8012108:	071b      	lsls	r3, r3, #28
 801210a:	d501      	bpl.n	8012110 <_vfiprintf_r+0x3c>
 801210c:	692b      	ldr	r3, [r5, #16]
 801210e:	b9eb      	cbnz	r3, 801214c <_vfiprintf_r+0x78>
 8012110:	4629      	mov	r1, r5
 8012112:	4630      	mov	r0, r6
 8012114:	f7ff fdf0 	bl	8011cf8 <__swsetup_r>
 8012118:	b1c0      	cbz	r0, 801214c <_vfiprintf_r+0x78>
 801211a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801211c:	07dc      	lsls	r4, r3, #31
 801211e:	d50e      	bpl.n	801213e <_vfiprintf_r+0x6a>
 8012120:	f04f 30ff 	mov.w	r0, #4294967295
 8012124:	b01d      	add	sp, #116	; 0x74
 8012126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801212a:	4b7b      	ldr	r3, [pc, #492]	; (8012318 <_vfiprintf_r+0x244>)
 801212c:	429d      	cmp	r5, r3
 801212e:	d101      	bne.n	8012134 <_vfiprintf_r+0x60>
 8012130:	68b5      	ldr	r5, [r6, #8]
 8012132:	e7df      	b.n	80120f4 <_vfiprintf_r+0x20>
 8012134:	4b79      	ldr	r3, [pc, #484]	; (801231c <_vfiprintf_r+0x248>)
 8012136:	429d      	cmp	r5, r3
 8012138:	bf08      	it	eq
 801213a:	68f5      	ldreq	r5, [r6, #12]
 801213c:	e7da      	b.n	80120f4 <_vfiprintf_r+0x20>
 801213e:	89ab      	ldrh	r3, [r5, #12]
 8012140:	0598      	lsls	r0, r3, #22
 8012142:	d4ed      	bmi.n	8012120 <_vfiprintf_r+0x4c>
 8012144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012146:	f7f0 fb37 	bl	80027b8 <__retarget_lock_release_recursive>
 801214a:	e7e9      	b.n	8012120 <_vfiprintf_r+0x4c>
 801214c:	2300      	movs	r3, #0
 801214e:	9309      	str	r3, [sp, #36]	; 0x24
 8012150:	2320      	movs	r3, #32
 8012152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012156:	f8cd 800c 	str.w	r8, [sp, #12]
 801215a:	2330      	movs	r3, #48	; 0x30
 801215c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012320 <_vfiprintf_r+0x24c>
 8012160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012164:	f04f 0901 	mov.w	r9, #1
 8012168:	4623      	mov	r3, r4
 801216a:	469a      	mov	sl, r3
 801216c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012170:	b10a      	cbz	r2, 8012176 <_vfiprintf_r+0xa2>
 8012172:	2a25      	cmp	r2, #37	; 0x25
 8012174:	d1f9      	bne.n	801216a <_vfiprintf_r+0x96>
 8012176:	ebba 0b04 	subs.w	fp, sl, r4
 801217a:	d00b      	beq.n	8012194 <_vfiprintf_r+0xc0>
 801217c:	465b      	mov	r3, fp
 801217e:	4622      	mov	r2, r4
 8012180:	4629      	mov	r1, r5
 8012182:	4630      	mov	r0, r6
 8012184:	f7ff ff93 	bl	80120ae <__sfputs_r>
 8012188:	3001      	adds	r0, #1
 801218a:	f000 80aa 	beq.w	80122e2 <_vfiprintf_r+0x20e>
 801218e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012190:	445a      	add	r2, fp
 8012192:	9209      	str	r2, [sp, #36]	; 0x24
 8012194:	f89a 3000 	ldrb.w	r3, [sl]
 8012198:	2b00      	cmp	r3, #0
 801219a:	f000 80a2 	beq.w	80122e2 <_vfiprintf_r+0x20e>
 801219e:	2300      	movs	r3, #0
 80121a0:	f04f 32ff 	mov.w	r2, #4294967295
 80121a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121a8:	f10a 0a01 	add.w	sl, sl, #1
 80121ac:	9304      	str	r3, [sp, #16]
 80121ae:	9307      	str	r3, [sp, #28]
 80121b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121b4:	931a      	str	r3, [sp, #104]	; 0x68
 80121b6:	4654      	mov	r4, sl
 80121b8:	2205      	movs	r2, #5
 80121ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121be:	4858      	ldr	r0, [pc, #352]	; (8012320 <_vfiprintf_r+0x24c>)
 80121c0:	f7ee f826 	bl	8000210 <memchr>
 80121c4:	9a04      	ldr	r2, [sp, #16]
 80121c6:	b9d8      	cbnz	r0, 8012200 <_vfiprintf_r+0x12c>
 80121c8:	06d1      	lsls	r1, r2, #27
 80121ca:	bf44      	itt	mi
 80121cc:	2320      	movmi	r3, #32
 80121ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121d2:	0713      	lsls	r3, r2, #28
 80121d4:	bf44      	itt	mi
 80121d6:	232b      	movmi	r3, #43	; 0x2b
 80121d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121dc:	f89a 3000 	ldrb.w	r3, [sl]
 80121e0:	2b2a      	cmp	r3, #42	; 0x2a
 80121e2:	d015      	beq.n	8012210 <_vfiprintf_r+0x13c>
 80121e4:	9a07      	ldr	r2, [sp, #28]
 80121e6:	4654      	mov	r4, sl
 80121e8:	2000      	movs	r0, #0
 80121ea:	f04f 0c0a 	mov.w	ip, #10
 80121ee:	4621      	mov	r1, r4
 80121f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121f4:	3b30      	subs	r3, #48	; 0x30
 80121f6:	2b09      	cmp	r3, #9
 80121f8:	d94e      	bls.n	8012298 <_vfiprintf_r+0x1c4>
 80121fa:	b1b0      	cbz	r0, 801222a <_vfiprintf_r+0x156>
 80121fc:	9207      	str	r2, [sp, #28]
 80121fe:	e014      	b.n	801222a <_vfiprintf_r+0x156>
 8012200:	eba0 0308 	sub.w	r3, r0, r8
 8012204:	fa09 f303 	lsl.w	r3, r9, r3
 8012208:	4313      	orrs	r3, r2
 801220a:	9304      	str	r3, [sp, #16]
 801220c:	46a2      	mov	sl, r4
 801220e:	e7d2      	b.n	80121b6 <_vfiprintf_r+0xe2>
 8012210:	9b03      	ldr	r3, [sp, #12]
 8012212:	1d19      	adds	r1, r3, #4
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	9103      	str	r1, [sp, #12]
 8012218:	2b00      	cmp	r3, #0
 801221a:	bfbb      	ittet	lt
 801221c:	425b      	neglt	r3, r3
 801221e:	f042 0202 	orrlt.w	r2, r2, #2
 8012222:	9307      	strge	r3, [sp, #28]
 8012224:	9307      	strlt	r3, [sp, #28]
 8012226:	bfb8      	it	lt
 8012228:	9204      	strlt	r2, [sp, #16]
 801222a:	7823      	ldrb	r3, [r4, #0]
 801222c:	2b2e      	cmp	r3, #46	; 0x2e
 801222e:	d10c      	bne.n	801224a <_vfiprintf_r+0x176>
 8012230:	7863      	ldrb	r3, [r4, #1]
 8012232:	2b2a      	cmp	r3, #42	; 0x2a
 8012234:	d135      	bne.n	80122a2 <_vfiprintf_r+0x1ce>
 8012236:	9b03      	ldr	r3, [sp, #12]
 8012238:	1d1a      	adds	r2, r3, #4
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	9203      	str	r2, [sp, #12]
 801223e:	2b00      	cmp	r3, #0
 8012240:	bfb8      	it	lt
 8012242:	f04f 33ff 	movlt.w	r3, #4294967295
 8012246:	3402      	adds	r4, #2
 8012248:	9305      	str	r3, [sp, #20]
 801224a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012330 <_vfiprintf_r+0x25c>
 801224e:	7821      	ldrb	r1, [r4, #0]
 8012250:	2203      	movs	r2, #3
 8012252:	4650      	mov	r0, sl
 8012254:	f7ed ffdc 	bl	8000210 <memchr>
 8012258:	b140      	cbz	r0, 801226c <_vfiprintf_r+0x198>
 801225a:	2340      	movs	r3, #64	; 0x40
 801225c:	eba0 000a 	sub.w	r0, r0, sl
 8012260:	fa03 f000 	lsl.w	r0, r3, r0
 8012264:	9b04      	ldr	r3, [sp, #16]
 8012266:	4303      	orrs	r3, r0
 8012268:	3401      	adds	r4, #1
 801226a:	9304      	str	r3, [sp, #16]
 801226c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012270:	482c      	ldr	r0, [pc, #176]	; (8012324 <_vfiprintf_r+0x250>)
 8012272:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012276:	2206      	movs	r2, #6
 8012278:	f7ed ffca 	bl	8000210 <memchr>
 801227c:	2800      	cmp	r0, #0
 801227e:	d03f      	beq.n	8012300 <_vfiprintf_r+0x22c>
 8012280:	4b29      	ldr	r3, [pc, #164]	; (8012328 <_vfiprintf_r+0x254>)
 8012282:	bb1b      	cbnz	r3, 80122cc <_vfiprintf_r+0x1f8>
 8012284:	9b03      	ldr	r3, [sp, #12]
 8012286:	3307      	adds	r3, #7
 8012288:	f023 0307 	bic.w	r3, r3, #7
 801228c:	3308      	adds	r3, #8
 801228e:	9303      	str	r3, [sp, #12]
 8012290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012292:	443b      	add	r3, r7
 8012294:	9309      	str	r3, [sp, #36]	; 0x24
 8012296:	e767      	b.n	8012168 <_vfiprintf_r+0x94>
 8012298:	fb0c 3202 	mla	r2, ip, r2, r3
 801229c:	460c      	mov	r4, r1
 801229e:	2001      	movs	r0, #1
 80122a0:	e7a5      	b.n	80121ee <_vfiprintf_r+0x11a>
 80122a2:	2300      	movs	r3, #0
 80122a4:	3401      	adds	r4, #1
 80122a6:	9305      	str	r3, [sp, #20]
 80122a8:	4619      	mov	r1, r3
 80122aa:	f04f 0c0a 	mov.w	ip, #10
 80122ae:	4620      	mov	r0, r4
 80122b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122b4:	3a30      	subs	r2, #48	; 0x30
 80122b6:	2a09      	cmp	r2, #9
 80122b8:	d903      	bls.n	80122c2 <_vfiprintf_r+0x1ee>
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d0c5      	beq.n	801224a <_vfiprintf_r+0x176>
 80122be:	9105      	str	r1, [sp, #20]
 80122c0:	e7c3      	b.n	801224a <_vfiprintf_r+0x176>
 80122c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80122c6:	4604      	mov	r4, r0
 80122c8:	2301      	movs	r3, #1
 80122ca:	e7f0      	b.n	80122ae <_vfiprintf_r+0x1da>
 80122cc:	ab03      	add	r3, sp, #12
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	462a      	mov	r2, r5
 80122d2:	4b16      	ldr	r3, [pc, #88]	; (801232c <_vfiprintf_r+0x258>)
 80122d4:	a904      	add	r1, sp, #16
 80122d6:	4630      	mov	r0, r6
 80122d8:	f3af 8000 	nop.w
 80122dc:	4607      	mov	r7, r0
 80122de:	1c78      	adds	r0, r7, #1
 80122e0:	d1d6      	bne.n	8012290 <_vfiprintf_r+0x1bc>
 80122e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80122e4:	07d9      	lsls	r1, r3, #31
 80122e6:	d405      	bmi.n	80122f4 <_vfiprintf_r+0x220>
 80122e8:	89ab      	ldrh	r3, [r5, #12]
 80122ea:	059a      	lsls	r2, r3, #22
 80122ec:	d402      	bmi.n	80122f4 <_vfiprintf_r+0x220>
 80122ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80122f0:	f7f0 fa62 	bl	80027b8 <__retarget_lock_release_recursive>
 80122f4:	89ab      	ldrh	r3, [r5, #12]
 80122f6:	065b      	lsls	r3, r3, #25
 80122f8:	f53f af12 	bmi.w	8012120 <_vfiprintf_r+0x4c>
 80122fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80122fe:	e711      	b.n	8012124 <_vfiprintf_r+0x50>
 8012300:	ab03      	add	r3, sp, #12
 8012302:	9300      	str	r3, [sp, #0]
 8012304:	462a      	mov	r2, r5
 8012306:	4b09      	ldr	r3, [pc, #36]	; (801232c <_vfiprintf_r+0x258>)
 8012308:	a904      	add	r1, sp, #16
 801230a:	4630      	mov	r0, r6
 801230c:	f000 f880 	bl	8012410 <_printf_i>
 8012310:	e7e4      	b.n	80122dc <_vfiprintf_r+0x208>
 8012312:	bf00      	nop
 8012314:	08012b48 	.word	0x08012b48
 8012318:	08012b68 	.word	0x08012b68
 801231c:	08012b28 	.word	0x08012b28
 8012320:	08012b8c 	.word	0x08012b8c
 8012324:	08012b96 	.word	0x08012b96
 8012328:	00000000 	.word	0x00000000
 801232c:	080120af 	.word	0x080120af
 8012330:	08012b92 	.word	0x08012b92

08012334 <_printf_common>:
 8012334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012338:	4616      	mov	r6, r2
 801233a:	4699      	mov	r9, r3
 801233c:	688a      	ldr	r2, [r1, #8]
 801233e:	690b      	ldr	r3, [r1, #16]
 8012340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012344:	4293      	cmp	r3, r2
 8012346:	bfb8      	it	lt
 8012348:	4613      	movlt	r3, r2
 801234a:	6033      	str	r3, [r6, #0]
 801234c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012350:	4607      	mov	r7, r0
 8012352:	460c      	mov	r4, r1
 8012354:	b10a      	cbz	r2, 801235a <_printf_common+0x26>
 8012356:	3301      	adds	r3, #1
 8012358:	6033      	str	r3, [r6, #0]
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	0699      	lsls	r1, r3, #26
 801235e:	bf42      	ittt	mi
 8012360:	6833      	ldrmi	r3, [r6, #0]
 8012362:	3302      	addmi	r3, #2
 8012364:	6033      	strmi	r3, [r6, #0]
 8012366:	6825      	ldr	r5, [r4, #0]
 8012368:	f015 0506 	ands.w	r5, r5, #6
 801236c:	d106      	bne.n	801237c <_printf_common+0x48>
 801236e:	f104 0a19 	add.w	sl, r4, #25
 8012372:	68e3      	ldr	r3, [r4, #12]
 8012374:	6832      	ldr	r2, [r6, #0]
 8012376:	1a9b      	subs	r3, r3, r2
 8012378:	42ab      	cmp	r3, r5
 801237a:	dc26      	bgt.n	80123ca <_printf_common+0x96>
 801237c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012380:	1e13      	subs	r3, r2, #0
 8012382:	6822      	ldr	r2, [r4, #0]
 8012384:	bf18      	it	ne
 8012386:	2301      	movne	r3, #1
 8012388:	0692      	lsls	r2, r2, #26
 801238a:	d42b      	bmi.n	80123e4 <_printf_common+0xb0>
 801238c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012390:	4649      	mov	r1, r9
 8012392:	4638      	mov	r0, r7
 8012394:	47c0      	blx	r8
 8012396:	3001      	adds	r0, #1
 8012398:	d01e      	beq.n	80123d8 <_printf_common+0xa4>
 801239a:	6823      	ldr	r3, [r4, #0]
 801239c:	68e5      	ldr	r5, [r4, #12]
 801239e:	6832      	ldr	r2, [r6, #0]
 80123a0:	f003 0306 	and.w	r3, r3, #6
 80123a4:	2b04      	cmp	r3, #4
 80123a6:	bf08      	it	eq
 80123a8:	1aad      	subeq	r5, r5, r2
 80123aa:	68a3      	ldr	r3, [r4, #8]
 80123ac:	6922      	ldr	r2, [r4, #16]
 80123ae:	bf0c      	ite	eq
 80123b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123b4:	2500      	movne	r5, #0
 80123b6:	4293      	cmp	r3, r2
 80123b8:	bfc4      	itt	gt
 80123ba:	1a9b      	subgt	r3, r3, r2
 80123bc:	18ed      	addgt	r5, r5, r3
 80123be:	2600      	movs	r6, #0
 80123c0:	341a      	adds	r4, #26
 80123c2:	42b5      	cmp	r5, r6
 80123c4:	d11a      	bne.n	80123fc <_printf_common+0xc8>
 80123c6:	2000      	movs	r0, #0
 80123c8:	e008      	b.n	80123dc <_printf_common+0xa8>
 80123ca:	2301      	movs	r3, #1
 80123cc:	4652      	mov	r2, sl
 80123ce:	4649      	mov	r1, r9
 80123d0:	4638      	mov	r0, r7
 80123d2:	47c0      	blx	r8
 80123d4:	3001      	adds	r0, #1
 80123d6:	d103      	bne.n	80123e0 <_printf_common+0xac>
 80123d8:	f04f 30ff 	mov.w	r0, #4294967295
 80123dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e0:	3501      	adds	r5, #1
 80123e2:	e7c6      	b.n	8012372 <_printf_common+0x3e>
 80123e4:	18e1      	adds	r1, r4, r3
 80123e6:	1c5a      	adds	r2, r3, #1
 80123e8:	2030      	movs	r0, #48	; 0x30
 80123ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80123ee:	4422      	add	r2, r4
 80123f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80123f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80123f8:	3302      	adds	r3, #2
 80123fa:	e7c7      	b.n	801238c <_printf_common+0x58>
 80123fc:	2301      	movs	r3, #1
 80123fe:	4622      	mov	r2, r4
 8012400:	4649      	mov	r1, r9
 8012402:	4638      	mov	r0, r7
 8012404:	47c0      	blx	r8
 8012406:	3001      	adds	r0, #1
 8012408:	d0e6      	beq.n	80123d8 <_printf_common+0xa4>
 801240a:	3601      	adds	r6, #1
 801240c:	e7d9      	b.n	80123c2 <_printf_common+0x8e>
	...

08012410 <_printf_i>:
 8012410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012414:	7e0f      	ldrb	r7, [r1, #24]
 8012416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012418:	2f78      	cmp	r7, #120	; 0x78
 801241a:	4691      	mov	r9, r2
 801241c:	4680      	mov	r8, r0
 801241e:	460c      	mov	r4, r1
 8012420:	469a      	mov	sl, r3
 8012422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012426:	d807      	bhi.n	8012438 <_printf_i+0x28>
 8012428:	2f62      	cmp	r7, #98	; 0x62
 801242a:	d80a      	bhi.n	8012442 <_printf_i+0x32>
 801242c:	2f00      	cmp	r7, #0
 801242e:	f000 80d8 	beq.w	80125e2 <_printf_i+0x1d2>
 8012432:	2f58      	cmp	r7, #88	; 0x58
 8012434:	f000 80a3 	beq.w	801257e <_printf_i+0x16e>
 8012438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801243c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012440:	e03a      	b.n	80124b8 <_printf_i+0xa8>
 8012442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012446:	2b15      	cmp	r3, #21
 8012448:	d8f6      	bhi.n	8012438 <_printf_i+0x28>
 801244a:	a101      	add	r1, pc, #4	; (adr r1, 8012450 <_printf_i+0x40>)
 801244c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012450:	080124a9 	.word	0x080124a9
 8012454:	080124bd 	.word	0x080124bd
 8012458:	08012439 	.word	0x08012439
 801245c:	08012439 	.word	0x08012439
 8012460:	08012439 	.word	0x08012439
 8012464:	08012439 	.word	0x08012439
 8012468:	080124bd 	.word	0x080124bd
 801246c:	08012439 	.word	0x08012439
 8012470:	08012439 	.word	0x08012439
 8012474:	08012439 	.word	0x08012439
 8012478:	08012439 	.word	0x08012439
 801247c:	080125c9 	.word	0x080125c9
 8012480:	080124ed 	.word	0x080124ed
 8012484:	080125ab 	.word	0x080125ab
 8012488:	08012439 	.word	0x08012439
 801248c:	08012439 	.word	0x08012439
 8012490:	080125eb 	.word	0x080125eb
 8012494:	08012439 	.word	0x08012439
 8012498:	080124ed 	.word	0x080124ed
 801249c:	08012439 	.word	0x08012439
 80124a0:	08012439 	.word	0x08012439
 80124a4:	080125b3 	.word	0x080125b3
 80124a8:	682b      	ldr	r3, [r5, #0]
 80124aa:	1d1a      	adds	r2, r3, #4
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	602a      	str	r2, [r5, #0]
 80124b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124b8:	2301      	movs	r3, #1
 80124ba:	e0a3      	b.n	8012604 <_printf_i+0x1f4>
 80124bc:	6820      	ldr	r0, [r4, #0]
 80124be:	6829      	ldr	r1, [r5, #0]
 80124c0:	0606      	lsls	r6, r0, #24
 80124c2:	f101 0304 	add.w	r3, r1, #4
 80124c6:	d50a      	bpl.n	80124de <_printf_i+0xce>
 80124c8:	680e      	ldr	r6, [r1, #0]
 80124ca:	602b      	str	r3, [r5, #0]
 80124cc:	2e00      	cmp	r6, #0
 80124ce:	da03      	bge.n	80124d8 <_printf_i+0xc8>
 80124d0:	232d      	movs	r3, #45	; 0x2d
 80124d2:	4276      	negs	r6, r6
 80124d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124d8:	485e      	ldr	r0, [pc, #376]	; (8012654 <_printf_i+0x244>)
 80124da:	230a      	movs	r3, #10
 80124dc:	e019      	b.n	8012512 <_printf_i+0x102>
 80124de:	680e      	ldr	r6, [r1, #0]
 80124e0:	602b      	str	r3, [r5, #0]
 80124e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80124e6:	bf18      	it	ne
 80124e8:	b236      	sxthne	r6, r6
 80124ea:	e7ef      	b.n	80124cc <_printf_i+0xbc>
 80124ec:	682b      	ldr	r3, [r5, #0]
 80124ee:	6820      	ldr	r0, [r4, #0]
 80124f0:	1d19      	adds	r1, r3, #4
 80124f2:	6029      	str	r1, [r5, #0]
 80124f4:	0601      	lsls	r1, r0, #24
 80124f6:	d501      	bpl.n	80124fc <_printf_i+0xec>
 80124f8:	681e      	ldr	r6, [r3, #0]
 80124fa:	e002      	b.n	8012502 <_printf_i+0xf2>
 80124fc:	0646      	lsls	r6, r0, #25
 80124fe:	d5fb      	bpl.n	80124f8 <_printf_i+0xe8>
 8012500:	881e      	ldrh	r6, [r3, #0]
 8012502:	4854      	ldr	r0, [pc, #336]	; (8012654 <_printf_i+0x244>)
 8012504:	2f6f      	cmp	r7, #111	; 0x6f
 8012506:	bf0c      	ite	eq
 8012508:	2308      	moveq	r3, #8
 801250a:	230a      	movne	r3, #10
 801250c:	2100      	movs	r1, #0
 801250e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012512:	6865      	ldr	r5, [r4, #4]
 8012514:	60a5      	str	r5, [r4, #8]
 8012516:	2d00      	cmp	r5, #0
 8012518:	bfa2      	ittt	ge
 801251a:	6821      	ldrge	r1, [r4, #0]
 801251c:	f021 0104 	bicge.w	r1, r1, #4
 8012520:	6021      	strge	r1, [r4, #0]
 8012522:	b90e      	cbnz	r6, 8012528 <_printf_i+0x118>
 8012524:	2d00      	cmp	r5, #0
 8012526:	d04d      	beq.n	80125c4 <_printf_i+0x1b4>
 8012528:	4615      	mov	r5, r2
 801252a:	fbb6 f1f3 	udiv	r1, r6, r3
 801252e:	fb03 6711 	mls	r7, r3, r1, r6
 8012532:	5dc7      	ldrb	r7, [r0, r7]
 8012534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012538:	4637      	mov	r7, r6
 801253a:	42bb      	cmp	r3, r7
 801253c:	460e      	mov	r6, r1
 801253e:	d9f4      	bls.n	801252a <_printf_i+0x11a>
 8012540:	2b08      	cmp	r3, #8
 8012542:	d10b      	bne.n	801255c <_printf_i+0x14c>
 8012544:	6823      	ldr	r3, [r4, #0]
 8012546:	07de      	lsls	r6, r3, #31
 8012548:	d508      	bpl.n	801255c <_printf_i+0x14c>
 801254a:	6923      	ldr	r3, [r4, #16]
 801254c:	6861      	ldr	r1, [r4, #4]
 801254e:	4299      	cmp	r1, r3
 8012550:	bfde      	ittt	le
 8012552:	2330      	movle	r3, #48	; 0x30
 8012554:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012558:	f105 35ff 	addle.w	r5, r5, #4294967295
 801255c:	1b52      	subs	r2, r2, r5
 801255e:	6122      	str	r2, [r4, #16]
 8012560:	f8cd a000 	str.w	sl, [sp]
 8012564:	464b      	mov	r3, r9
 8012566:	aa03      	add	r2, sp, #12
 8012568:	4621      	mov	r1, r4
 801256a:	4640      	mov	r0, r8
 801256c:	f7ff fee2 	bl	8012334 <_printf_common>
 8012570:	3001      	adds	r0, #1
 8012572:	d14c      	bne.n	801260e <_printf_i+0x1fe>
 8012574:	f04f 30ff 	mov.w	r0, #4294967295
 8012578:	b004      	add	sp, #16
 801257a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801257e:	4835      	ldr	r0, [pc, #212]	; (8012654 <_printf_i+0x244>)
 8012580:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012584:	6829      	ldr	r1, [r5, #0]
 8012586:	6823      	ldr	r3, [r4, #0]
 8012588:	f851 6b04 	ldr.w	r6, [r1], #4
 801258c:	6029      	str	r1, [r5, #0]
 801258e:	061d      	lsls	r5, r3, #24
 8012590:	d514      	bpl.n	80125bc <_printf_i+0x1ac>
 8012592:	07df      	lsls	r7, r3, #31
 8012594:	bf44      	itt	mi
 8012596:	f043 0320 	orrmi.w	r3, r3, #32
 801259a:	6023      	strmi	r3, [r4, #0]
 801259c:	b91e      	cbnz	r6, 80125a6 <_printf_i+0x196>
 801259e:	6823      	ldr	r3, [r4, #0]
 80125a0:	f023 0320 	bic.w	r3, r3, #32
 80125a4:	6023      	str	r3, [r4, #0]
 80125a6:	2310      	movs	r3, #16
 80125a8:	e7b0      	b.n	801250c <_printf_i+0xfc>
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	f043 0320 	orr.w	r3, r3, #32
 80125b0:	6023      	str	r3, [r4, #0]
 80125b2:	2378      	movs	r3, #120	; 0x78
 80125b4:	4828      	ldr	r0, [pc, #160]	; (8012658 <_printf_i+0x248>)
 80125b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80125ba:	e7e3      	b.n	8012584 <_printf_i+0x174>
 80125bc:	0659      	lsls	r1, r3, #25
 80125be:	bf48      	it	mi
 80125c0:	b2b6      	uxthmi	r6, r6
 80125c2:	e7e6      	b.n	8012592 <_printf_i+0x182>
 80125c4:	4615      	mov	r5, r2
 80125c6:	e7bb      	b.n	8012540 <_printf_i+0x130>
 80125c8:	682b      	ldr	r3, [r5, #0]
 80125ca:	6826      	ldr	r6, [r4, #0]
 80125cc:	6961      	ldr	r1, [r4, #20]
 80125ce:	1d18      	adds	r0, r3, #4
 80125d0:	6028      	str	r0, [r5, #0]
 80125d2:	0635      	lsls	r5, r6, #24
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	d501      	bpl.n	80125dc <_printf_i+0x1cc>
 80125d8:	6019      	str	r1, [r3, #0]
 80125da:	e002      	b.n	80125e2 <_printf_i+0x1d2>
 80125dc:	0670      	lsls	r0, r6, #25
 80125de:	d5fb      	bpl.n	80125d8 <_printf_i+0x1c8>
 80125e0:	8019      	strh	r1, [r3, #0]
 80125e2:	2300      	movs	r3, #0
 80125e4:	6123      	str	r3, [r4, #16]
 80125e6:	4615      	mov	r5, r2
 80125e8:	e7ba      	b.n	8012560 <_printf_i+0x150>
 80125ea:	682b      	ldr	r3, [r5, #0]
 80125ec:	1d1a      	adds	r2, r3, #4
 80125ee:	602a      	str	r2, [r5, #0]
 80125f0:	681d      	ldr	r5, [r3, #0]
 80125f2:	6862      	ldr	r2, [r4, #4]
 80125f4:	2100      	movs	r1, #0
 80125f6:	4628      	mov	r0, r5
 80125f8:	f7ed fe0a 	bl	8000210 <memchr>
 80125fc:	b108      	cbz	r0, 8012602 <_printf_i+0x1f2>
 80125fe:	1b40      	subs	r0, r0, r5
 8012600:	6060      	str	r0, [r4, #4]
 8012602:	6863      	ldr	r3, [r4, #4]
 8012604:	6123      	str	r3, [r4, #16]
 8012606:	2300      	movs	r3, #0
 8012608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801260c:	e7a8      	b.n	8012560 <_printf_i+0x150>
 801260e:	6923      	ldr	r3, [r4, #16]
 8012610:	462a      	mov	r2, r5
 8012612:	4649      	mov	r1, r9
 8012614:	4640      	mov	r0, r8
 8012616:	47d0      	blx	sl
 8012618:	3001      	adds	r0, #1
 801261a:	d0ab      	beq.n	8012574 <_printf_i+0x164>
 801261c:	6823      	ldr	r3, [r4, #0]
 801261e:	079b      	lsls	r3, r3, #30
 8012620:	d413      	bmi.n	801264a <_printf_i+0x23a>
 8012622:	68e0      	ldr	r0, [r4, #12]
 8012624:	9b03      	ldr	r3, [sp, #12]
 8012626:	4298      	cmp	r0, r3
 8012628:	bfb8      	it	lt
 801262a:	4618      	movlt	r0, r3
 801262c:	e7a4      	b.n	8012578 <_printf_i+0x168>
 801262e:	2301      	movs	r3, #1
 8012630:	4632      	mov	r2, r6
 8012632:	4649      	mov	r1, r9
 8012634:	4640      	mov	r0, r8
 8012636:	47d0      	blx	sl
 8012638:	3001      	adds	r0, #1
 801263a:	d09b      	beq.n	8012574 <_printf_i+0x164>
 801263c:	3501      	adds	r5, #1
 801263e:	68e3      	ldr	r3, [r4, #12]
 8012640:	9903      	ldr	r1, [sp, #12]
 8012642:	1a5b      	subs	r3, r3, r1
 8012644:	42ab      	cmp	r3, r5
 8012646:	dcf2      	bgt.n	801262e <_printf_i+0x21e>
 8012648:	e7eb      	b.n	8012622 <_printf_i+0x212>
 801264a:	2500      	movs	r5, #0
 801264c:	f104 0619 	add.w	r6, r4, #25
 8012650:	e7f5      	b.n	801263e <_printf_i+0x22e>
 8012652:	bf00      	nop
 8012654:	08012b9d 	.word	0x08012b9d
 8012658:	08012bae 	.word	0x08012bae

0801265c <_read_r>:
 801265c:	b538      	push	{r3, r4, r5, lr}
 801265e:	4d07      	ldr	r5, [pc, #28]	; (801267c <_read_r+0x20>)
 8012660:	4604      	mov	r4, r0
 8012662:	4608      	mov	r0, r1
 8012664:	4611      	mov	r1, r2
 8012666:	2200      	movs	r2, #0
 8012668:	602a      	str	r2, [r5, #0]
 801266a:	461a      	mov	r2, r3
 801266c:	f7ee fe7e 	bl	800136c <_read>
 8012670:	1c43      	adds	r3, r0, #1
 8012672:	d102      	bne.n	801267a <_read_r+0x1e>
 8012674:	682b      	ldr	r3, [r5, #0]
 8012676:	b103      	cbz	r3, 801267a <_read_r+0x1e>
 8012678:	6023      	str	r3, [r4, #0]
 801267a:	bd38      	pop	{r3, r4, r5, pc}
 801267c:	20006b20 	.word	0x20006b20

08012680 <_fstat_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	4d07      	ldr	r5, [pc, #28]	; (80126a0 <_fstat_r+0x20>)
 8012684:	2300      	movs	r3, #0
 8012686:	4604      	mov	r4, r0
 8012688:	4608      	mov	r0, r1
 801268a:	4611      	mov	r1, r2
 801268c:	602b      	str	r3, [r5, #0]
 801268e:	f7ee fe96 	bl	80013be <_fstat>
 8012692:	1c43      	adds	r3, r0, #1
 8012694:	d102      	bne.n	801269c <_fstat_r+0x1c>
 8012696:	682b      	ldr	r3, [r5, #0]
 8012698:	b103      	cbz	r3, 801269c <_fstat_r+0x1c>
 801269a:	6023      	str	r3, [r4, #0]
 801269c:	bd38      	pop	{r3, r4, r5, pc}
 801269e:	bf00      	nop
 80126a0:	20006b20 	.word	0x20006b20

080126a4 <_isatty_r>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	4d06      	ldr	r5, [pc, #24]	; (80126c0 <_isatty_r+0x1c>)
 80126a8:	2300      	movs	r3, #0
 80126aa:	4604      	mov	r4, r0
 80126ac:	4608      	mov	r0, r1
 80126ae:	602b      	str	r3, [r5, #0]
 80126b0:	f7ee fe95 	bl	80013de <_isatty>
 80126b4:	1c43      	adds	r3, r0, #1
 80126b6:	d102      	bne.n	80126be <_isatty_r+0x1a>
 80126b8:	682b      	ldr	r3, [r5, #0]
 80126ba:	b103      	cbz	r3, 80126be <_isatty_r+0x1a>
 80126bc:	6023      	str	r3, [r4, #0]
 80126be:	bd38      	pop	{r3, r4, r5, pc}
 80126c0:	20006b20 	.word	0x20006b20

080126c4 <_init>:
 80126c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126c6:	bf00      	nop
 80126c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ca:	bc08      	pop	{r3}
 80126cc:	469e      	mov	lr, r3
 80126ce:	4770      	bx	lr

080126d0 <_fini>:
 80126d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d2:	bf00      	nop
 80126d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126d6:	bc08      	pop	{r3}
 80126d8:	469e      	mov	lr, r3
 80126da:	4770      	bx	lr
